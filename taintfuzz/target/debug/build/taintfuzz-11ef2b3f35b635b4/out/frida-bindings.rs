/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const FRIDA_SERVER_GUID_HOST_SESSION_SERVICE: &[u8; 33] = b"6769746875622e636f6d2f6672696461\0";
pub const FRIDA_OBJECT_PATH_HOST_SESSION: &[u8; 22] = b"/re/frida/HostSession\0";
pub const FRIDA_OBJECT_PATH_AGENT_SESSION_PROVIDER: &[u8; 31] = b"/re/frida/AgentSessionProvider\0";
pub const FRIDA_OBJECT_PATH_AGENT_SESSION: &[u8; 23] = b"/re/frida/AgentSession\0";
pub const FRIDA_OBJECT_PATH_AGENT_CONTROLLER: &[u8; 26] = b"/re/frida/AgentController\0";
pub const FRIDA_OBJECT_PATH_AGENT_MESSAGE_SINK: &[u8; 27] = b"/re/frida/AgentMessageSink\0";
pub const FRIDA_OBJECT_PATH_GADGET_SESSION: &[u8; 24] = b"/re/frida/GadgetSession\0";
pub const FRIDA_OBJECT_PATH_CHANNEL: &[u8; 18] = b"/re/frida/Channel\0";
pub const FRIDA_OBJECT_PATH_SERVICE: &[u8; 18] = b"/re/frida/Service\0";
pub const FRIDA_OBJECT_PATH_TRANSPORT_BROKER: &[u8; 26] = b"/re/frida/TransportBroker\0";
pub const FRIDA_OBJECT_PATH_PORTAL_SESSION: &[u8; 24] = b"/re/frida/PortalSession\0";
pub const FRIDA_OBJECT_PATH_BUS_SESSION: &[u8; 21] = b"/re/frida/BusSession\0";
pub const FRIDA_OBJECT_PATH_AUTHENTICATION_SERVICE: &[u8; 32] =
    b"/re/frida/AuthenticationService\0";
pub const GUM_NATIVE_ABI_IS_WINDOWS: u32 = 0;
pub const GUM_NATIVE_ABI_IS_UNIX: u32 = 1;
pub const GUM_MAX_PATH: u32 = 260;
pub const GUM_MAX_TYPE_NAME: u32 = 16;
pub const GUM_MAX_SYMBOL_NAME: u32 = 2048;
pub const GUM_MAX_THREADS: u32 = 768;
pub const GUM_MAX_CALL_DEPTH: u32 = 32;
pub const GUM_MAX_BACKTRACE_DEPTH: u32 = 16;
pub const GUM_MAX_WORST_CASE_INFO_SIZE: u32 = 128;
pub const GUM_MAX_LISTENERS_PER_FUNCTION: u32 = 2;
pub const GUM_MAX_LISTENER_DATA: u32 = 1024;
pub const GUM_MAX_THREAD_RANGES: u32 = 2;
pub const GUM_RED_ZONE_SIZE: u32 = 128;
pub const GUM_INT2_MASK: u32 = 3;
pub const GUM_INT3_MASK: u32 = 7;
pub const GUM_INT4_MASK: u32 = 15;
pub const GUM_INT5_MASK: u32 = 31;
pub const GUM_INT6_MASK: u32 = 63;
pub const GUM_INT8_MASK: u32 = 255;
pub const GUM_INT10_MASK: u32 = 1023;
pub const GUM_INT11_MASK: u32 = 2047;
pub const GUM_INT12_MASK: u32 = 4095;
pub const GUM_INT14_MASK: u32 = 16383;
pub const GUM_INT16_MASK: u32 = 65535;
pub const GUM_INT18_MASK: u32 = 262143;
pub const GUM_INT19_MASK: u32 = 524287;
pub const GUM_INT24_MASK: u32 = 16777215;
pub const GUM_INT26_MASK: u32 = 67108863;
pub const GUM_INT28_MASK: u32 = 268435455;
pub const GUM_INT32_MASK: u32 = 4294967295;
pub const GUM_API_SIZE_NONE: i32 = -1;
pub const GUM_DARWIN_PORT_NULL: u32 = 0;
pub const GUM_DARWIN_EXPORT_KIND_MASK: u32 = 3;
pub const GUM_ELF_SECTION_MASK_OS: u32 = 267386880;
pub const GUM_ELF_SECTION_MASK_PROCESSOR: u32 = 4026531840;
pub const GUM_ARM_B_MAX_DISTANCE: u32 = 33554428;
pub const GUM_THUMB_B_MAX_DISTANCE: u32 = 16777214;
pub const GUM_ARM64_ADRP_MAX_DISTANCE: u32 = 4294963200;
pub const GUM_ARM64_B_MAX_DISTANCE: u32 = 134217724;
pub const GUM_MIPS_J_MAX_DISTANCE: u32 = 268435456;
pub const FRIDA_OBJECT_PATH_HELPER: &[u8; 17] = b"/re/frida/Helper\0";
pub const FRIDA_GDB_CLIENT_NOTIFICATION_TYPE_EXIT_STATUS: u8 = 87u8;
pub const FRIDA_GDB_CLIENT_NOTIFICATION_TYPE_EXIT_SIGNAL: u8 = 88u8;
pub const FRIDA_GDB_CLIENT_NOTIFICATION_TYPE_STOP: u8 = 83u8;
pub const FRIDA_GDB_CLIENT_NOTIFICATION_TYPE_STOP_WITH_PROPERTIES: u8 = 84u8;
pub const FRIDA_GDB_CLIENT_NOTIFICATION_TYPE_OUTPUT: u8 = 79u8;
pub const FRIDA_FRUITY_PAIRING_BROWSER_SERVICE_NAME: &[u8; 26] = b"_remotepairing._tcp.local\0";
pub const FRIDA_FRUITY_PAIRING_SERVICE_DNS_SD_NAME: &[u8; 26] = b"_remotepairing._tcp.local\0";
pub const FRIDA_FRUITY_RESOLVED_SERVICE_NAME: &[u8; 25] = b"org.freedesktop.resolve1\0";
pub const FRIDA_FRUITY_RESOLVED_SERVICE_PATH: &[u8; 26] = b"/org/freedesktop/resolve1\0";
pub type gint8 = ::std::os::raw::c_schar;
pub type guint8 = ::std::os::raw::c_uchar;
pub type gint16 = ::std::os::raw::c_short;
pub type guint16 = ::std::os::raw::c_ushort;
pub type gint32 = ::std::os::raw::c_int;
pub type guint32 = ::std::os::raw::c_uint;
pub type gint64 = ::std::os::raw::c_long;
pub type guint64 = ::std::os::raw::c_ulong;
pub type gssize = ::std::os::raw::c_long;
pub type gsize = ::std::os::raw::c_ulong;
pub type gchar = ::std::os::raw::c_char;
pub type glong = ::std::os::raw::c_long;
pub type gint = ::std::os::raw::c_int;
pub type gboolean = gint;
pub type gulong = ::std::os::raw::c_ulong;
pub type guint = ::std::os::raw::c_uint;
pub type gfloat = f32;
pub type gdouble = f64;
pub type gpointer = *mut ::std::os::raw::c_void;
pub type gconstpointer = *const ::std::os::raw::c_void;
pub type GEqualFunc =
    ::std::option::Option<unsafe extern "C" fn(a: gconstpointer, b: gconstpointer) -> gboolean>;
pub type GDestroyNotify = ::std::option::Option<unsafe extern "C" fn(data: gpointer)>;
pub type GFunc = ::std::option::Option<unsafe extern "C" fn(data: gpointer, user_data: gpointer)>;
pub type GHashFunc = ::std::option::Option<unsafe extern "C" fn(key: gconstpointer) -> guint>;
pub type GHFunc = ::std::option::Option<
    unsafe extern "C" fn(key: gpointer, value: gpointer, user_data: gpointer),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBytes {
    _unused: [u8; 0],
}
pub type GBytes = _GBytes;
pub type GArray = _GArray;
pub type GByteArray = _GByteArray;
pub type GPtrArray = _GPtrArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GArray {
    pub data: *mut gchar,
    pub len: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GArray"][::std::mem::size_of::<_GArray>() - 16usize];
    ["Alignment of _GArray"][::std::mem::align_of::<_GArray>() - 8usize];
    ["Offset of field: _GArray::data"][::std::mem::offset_of!(_GArray, data) - 0usize];
    ["Offset of field: _GArray::len"][::std::mem::offset_of!(_GArray, len) - 8usize];
};
impl Default for _GArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GByteArray {
    pub data: *mut guint8,
    pub len: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GByteArray"][::std::mem::size_of::<_GByteArray>() - 16usize];
    ["Alignment of _GByteArray"][::std::mem::align_of::<_GByteArray>() - 8usize];
    ["Offset of field: _GByteArray::data"][::std::mem::offset_of!(_GByteArray, data) - 0usize];
    ["Offset of field: _GByteArray::len"][::std::mem::offset_of!(_GByteArray, len) - 8usize];
};
impl Default for _GByteArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPtrArray {
    pub pdata: *mut gpointer,
    pub len: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GPtrArray"][::std::mem::size_of::<_GPtrArray>() - 16usize];
    ["Alignment of _GPtrArray"][::std::mem::align_of::<_GPtrArray>() - 8usize];
    ["Offset of field: _GPtrArray::pdata"][::std::mem::offset_of!(_GPtrArray, pdata) - 0usize];
    ["Offset of field: _GPtrArray::len"][::std::mem::offset_of!(_GPtrArray, len) - 8usize];
};
impl Default for _GPtrArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type va_list = __builtin_va_list;
pub type GQuark = guint32;
#[doc = " GError:\n @domain: error domain, e.g. %G_FILE_ERROR\n @code: error code, e.g. %G_FILE_ERROR_NOENT\n @message: human-readable informative error message\n\n The `GError` structure contains information about\n an error that has occurred."]
pub type GError = _GError;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GError {
    pub domain: GQuark,
    pub code: gint,
    pub message: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GError"][::std::mem::size_of::<_GError>() - 16usize];
    ["Alignment of _GError"][::std::mem::align_of::<_GError>() - 8usize];
    ["Offset of field: _GError::domain"][::std::mem::offset_of!(_GError, domain) - 0usize];
    ["Offset of field: _GError::code"][::std::mem::offset_of!(_GError, code) - 4usize];
    ["Offset of field: _GError::message"][::std::mem::offset_of!(_GError, message) - 8usize];
};
impl Default for _GError {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDateTime {
    _unused: [u8; 0],
}
#[doc = " GDateTime:\n\n An opaque structure that represents a date and time, including a time zone.\n\n Since: 2.26"]
pub type GDateTime = _GDateTime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GData {
    _unused: [u8; 0],
}
pub type GData = _GData;
pub type GList = _GList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GList {
    pub data: gpointer,
    pub next: *mut GList,
    pub prev: *mut GList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GList"][::std::mem::size_of::<_GList>() - 24usize];
    ["Alignment of _GList"][::std::mem::align_of::<_GList>() - 8usize];
    ["Offset of field: _GList::data"][::std::mem::offset_of!(_GList, data) - 0usize];
    ["Offset of field: _GList::next"][::std::mem::offset_of!(_GList, next) - 8usize];
    ["Offset of field: _GList::prev"][::std::mem::offset_of!(_GList, prev) - 16usize];
};
impl Default for _GList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHashTable {
    _unused: [u8; 0],
}
pub type GHashTable = _GHashTable;
pub type GHRFunc = ::std::option::Option<
    unsafe extern "C" fn(key: gpointer, value: gpointer, user_data: gpointer) -> gboolean,
>;
pub type GSList = _GSList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSList {
    pub data: gpointer,
    pub next: *mut GSList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSList"][::std::mem::size_of::<_GSList>() - 16usize];
    ["Alignment of _GSList"][::std::mem::align_of::<_GSList>() - 8usize];
    ["Offset of field: _GSList::data"][::std::mem::offset_of!(_GSList, data) - 0usize];
    ["Offset of field: _GSList::next"][::std::mem::offset_of!(_GSList, next) - 8usize];
};
impl Default for _GSList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GIOCondition_G_IO_IN: GIOCondition = 1;
pub const GIOCondition_G_IO_OUT: GIOCondition = 4;
pub const GIOCondition_G_IO_PRI: GIOCondition = 2;
pub const GIOCondition_G_IO_ERR: GIOCondition = 8;
pub const GIOCondition_G_IO_HUP: GIOCondition = 16;
pub const GIOCondition_G_IO_NVAL: GIOCondition = 32;
pub type GIOCondition = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMainContext {
    _unused: [u8; 0],
}
#[doc = " GMainContext:\n\n The `GMainContext` struct is an opaque data\n type representing a set of sources to be handled in a main loop."]
pub type GMainContext = _GMainContext;
#[doc = " GSource:\n\n The `GSource` struct is an opaque data type\n representing an event source."]
pub type GSource = _GSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSourcePrivate {
    _unused: [u8; 0],
}
pub type GSourcePrivate = _GSourcePrivate;
#[doc = " GSourceCallbackFuncs:\n @ref: Called when a reference is added to the callback object\n @unref: Called when a reference to the callback object is dropped\n @get: Called to extract the callback function and data from the\n     callback object.\n\n The `GSourceCallbackFuncs` struct contains\n functions for managing callback objects."]
pub type GSourceCallbackFuncs = _GSourceCallbackFuncs;
#[doc = " GSourceFuncs:\n @prepare: Called before all the file descriptors are polled. If the\n     source can determine that it is ready here (without waiting for the\n     results of the poll() call) it should return %TRUE. It can also return\n     a @timeout_ value which should be the maximum timeout (in milliseconds)\n     which should be passed to the poll() call. The actual timeout used will\n     be -1 if all sources returned -1, or it will be the minimum of all\n     the @timeout_ values returned which were >= 0.  Since 2.36 this may\n     be %NULL, in which case the effect is as if the function always returns\n     %FALSE with a timeout of -1.  If @prepare returns a\n     timeout and the source also has a ready time set, then the\n     lower of the two will be used.\n @check: Called after all the file descriptors are polled. The source\n     should return %TRUE if it is ready to be dispatched. Note that some\n     time may have passed since the previous prepare function was called,\n     so the source should be checked again here.  Since 2.36 this may\n     be %NULL, in which case the effect is as if the function always returns\n     %FALSE.\n @dispatch: Called to dispatch the event source, after it has returned\n     %TRUE in either its @prepare or its @check function, or if a ready time\n     has been reached. The @dispatch function receives a callback function and\n     user data. The callback function may be %NULL if the source was never\n     connected to a callback using g_source_set_callback(). The @dispatch\n     function should call the callback function with @user_data and whatever\n     additional parameters are needed for this type of event source. The\n     return value of the @dispatch function should be %G_SOURCE_REMOVE if the\n     source should be removed or %G_SOURCE_CONTINUE to keep it.\n @finalize: Called when the source is finalized. At this point, the source\n     will have been destroyed, had its callback cleared, and have been removed\n     from its #GMainContext, but it will still have its final reference count,\n     so methods can be called on it from within this function.\n\n The `GSourceFuncs` struct contains a table of\n functions used to handle event sources in a generic manner.\n\n For idle sources, the prepare and check functions always return %TRUE\n to indicate that the source is always ready to be processed. The prepare\n function also returns a timeout value of 0 to ensure that the poll() call\n doesn't block (since that would be time wasted which could have been spent\n running the idle function).\n\n For timeout sources, the prepare and check functions both return %TRUE\n if the timeout interval has expired. The prepare function also returns\n a timeout value to ensure that the poll() call doesn't block too long\n and miss the next timeout.\n\n For file descriptor sources, the prepare function typically returns %FALSE,\n since it must wait until poll() has been called before it knows whether\n any events need to be processed. It sets the returned timeout to -1 to\n indicate that it doesn't mind how long the poll() call blocks. In the\n check function, it tests the results of the poll() call to see if the\n required condition has been met, and returns %TRUE if so."]
pub type GSourceFuncs = _GSourceFuncs;
#[doc = " GSourceFunc:\n @user_data: data passed to the function, set when the source was\n     created with one of the above functions\n\n Specifies the type of function passed to g_timeout_add(),\n g_timeout_add_full(), g_idle_add(), and g_idle_add_full().\n\n When calling g_source_set_callback(), you may need to cast a function of a\n different type to this type. Use G_SOURCE_FUNC() to avoid warnings about\n incompatible function types.\n\n Returns: %FALSE if the source should be removed. %G_SOURCE_CONTINUE and\n %G_SOURCE_REMOVE are more memorable names for the return value."]
pub type GSourceFunc = ::std::option::Option<unsafe extern "C" fn(user_data: gpointer) -> gboolean>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSource {
    pub callback_data: gpointer,
    pub callback_funcs: *mut GSourceCallbackFuncs,
    pub source_funcs: *const GSourceFuncs,
    pub ref_count: guint,
    pub context: *mut GMainContext,
    pub priority: gint,
    pub flags: guint,
    pub source_id: guint,
    pub poll_fds: *mut GSList,
    pub prev: *mut GSource,
    pub next: *mut GSource,
    pub name: *mut ::std::os::raw::c_char,
    pub priv_: *mut GSourcePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSource"][::std::mem::size_of::<_GSource>() - 96usize];
    ["Alignment of _GSource"][::std::mem::align_of::<_GSource>() - 8usize];
    ["Offset of field: _GSource::callback_data"]
        [::std::mem::offset_of!(_GSource, callback_data) - 0usize];
    ["Offset of field: _GSource::callback_funcs"]
        [::std::mem::offset_of!(_GSource, callback_funcs) - 8usize];
    ["Offset of field: _GSource::source_funcs"]
        [::std::mem::offset_of!(_GSource, source_funcs) - 16usize];
    ["Offset of field: _GSource::ref_count"][::std::mem::offset_of!(_GSource, ref_count) - 24usize];
    ["Offset of field: _GSource::context"][::std::mem::offset_of!(_GSource, context) - 32usize];
    ["Offset of field: _GSource::priority"][::std::mem::offset_of!(_GSource, priority) - 40usize];
    ["Offset of field: _GSource::flags"][::std::mem::offset_of!(_GSource, flags) - 44usize];
    ["Offset of field: _GSource::source_id"][::std::mem::offset_of!(_GSource, source_id) - 48usize];
    ["Offset of field: _GSource::poll_fds"][::std::mem::offset_of!(_GSource, poll_fds) - 56usize];
    ["Offset of field: _GSource::prev"][::std::mem::offset_of!(_GSource, prev) - 64usize];
    ["Offset of field: _GSource::next"][::std::mem::offset_of!(_GSource, next) - 72usize];
    ["Offset of field: _GSource::name"][::std::mem::offset_of!(_GSource, name) - 80usize];
    ["Offset of field: _GSource::priv_"][::std::mem::offset_of!(_GSource, priv_) - 88usize];
};
impl Default for _GSource {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GSourceCallbackFuncs {
    pub ref_: ::std::option::Option<unsafe extern "C" fn(cb_data: gpointer)>,
    pub unref: ::std::option::Option<unsafe extern "C" fn(cb_data: gpointer)>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            cb_data: gpointer,
            source: *mut GSource,
            func: *mut GSourceFunc,
            data: *mut gpointer,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSourceCallbackFuncs"][::std::mem::size_of::<_GSourceCallbackFuncs>() - 24usize];
    ["Alignment of _GSourceCallbackFuncs"]
        [::std::mem::align_of::<_GSourceCallbackFuncs>() - 8usize];
    ["Offset of field: _GSourceCallbackFuncs::ref_"]
        [::std::mem::offset_of!(_GSourceCallbackFuncs, ref_) - 0usize];
    ["Offset of field: _GSourceCallbackFuncs::unref"]
        [::std::mem::offset_of!(_GSourceCallbackFuncs, unref) - 8usize];
    ["Offset of field: _GSourceCallbackFuncs::get"]
        [::std::mem::offset_of!(_GSourceCallbackFuncs, get) - 16usize];
};
#[doc = " GSourceDummyMarshal:\n\n This is just a placeholder for #GClosureMarshal,\n which cannot be used here for dependency reasons."]
pub type GSourceDummyMarshal = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GSourceFuncs {
    pub prepare: ::std::option::Option<
        unsafe extern "C" fn(source: *mut GSource, timeout_: *mut gint) -> gboolean,
    >,
    pub check: ::std::option::Option<unsafe extern "C" fn(source: *mut GSource) -> gboolean>,
    pub dispatch: ::std::option::Option<
        unsafe extern "C" fn(
            source: *mut GSource,
            callback: GSourceFunc,
            user_data: gpointer,
        ) -> gboolean,
    >,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(source: *mut GSource)>,
    pub closure_callback: GSourceFunc,
    pub closure_marshal: GSourceDummyMarshal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSourceFuncs"][::std::mem::size_of::<_GSourceFuncs>() - 48usize];
    ["Alignment of _GSourceFuncs"][::std::mem::align_of::<_GSourceFuncs>() - 8usize];
    ["Offset of field: _GSourceFuncs::prepare"]
        [::std::mem::offset_of!(_GSourceFuncs, prepare) - 0usize];
    ["Offset of field: _GSourceFuncs::check"]
        [::std::mem::offset_of!(_GSourceFuncs, check) - 8usize];
    ["Offset of field: _GSourceFuncs::dispatch"]
        [::std::mem::offset_of!(_GSourceFuncs, dispatch) - 16usize];
    ["Offset of field: _GSourceFuncs::finalize"]
        [::std::mem::offset_of!(_GSourceFuncs, finalize) - 24usize];
    ["Offset of field: _GSourceFuncs::closure_callback"]
        [::std::mem::offset_of!(_GSourceFuncs, closure_callback) - 32usize];
    ["Offset of field: _GSourceFuncs::closure_marshal"]
        [::std::mem::offset_of!(_GSourceFuncs, closure_marshal) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariant {
    _unused: [u8; 0],
}
pub type GVariant = _GVariant;
#[doc = " GQueue:\n @head: a pointer to the first element of the queue\n @tail: a pointer to the last element of the queue\n @length: the number of elements in the queue\n\n Contains the public fields of a\n [Queue][glib-Double-ended-Queues]."]
pub type GQueue = _GQueue;
#[doc = " GQueue:\n @head: a pointer to the first element of the queue\n @tail: a pointer to the last element of the queue\n @length: the number of elements in the queue\n\n Contains the public fields of a\n [Queue][glib-Double-ended-Queues]."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GQueue {
    pub head: *mut GList,
    pub tail: *mut GList,
    pub length: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GQueue"][::std::mem::size_of::<_GQueue>() - 24usize];
    ["Alignment of _GQueue"][::std::mem::align_of::<_GQueue>() - 8usize];
    ["Offset of field: _GQueue::head"][::std::mem::offset_of!(_GQueue, head) - 0usize];
    ["Offset of field: _GQueue::tail"][::std::mem::offset_of!(_GQueue, tail) - 8usize];
    ["Offset of field: _GQueue::length"][::std::mem::offset_of!(_GQueue, length) - 16usize];
};
impl Default for _GQueue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub type GType = gsize;
#[doc = " GValue:\n\n An opaque structure used to hold different types of values.\n\n The data within the structure has protected scope: it is accessible only\n to functions within a #GTypeValueTable structure, or implementations of\n the g_value_*() API. That is, code portions which implement new fundamental\n types.\n\n #GValue users cannot make any assumptions about how data is stored\n within the 2 element @data union, and the @g_type member should\n only be accessed through the G_VALUE_TYPE() macro."]
pub type GValue = _GValue;
#[doc = " GTypeClass:\n\n An opaque structure used as the base of all classes."]
pub type GTypeClass = _GTypeClass;
#[doc = " GTypeInterface:\n\n An opaque structure used as the base of all interface types."]
pub type GTypeInterface = _GTypeInterface;
#[doc = " GTypeInstance:\n\n An opaque structure used as the base of all type instances."]
pub type GTypeInstance = _GTypeInstance;
#[doc = " GTypeClass:\n\n An opaque structure used as the base of all classes."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GTypeClass {
    pub g_type: GType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTypeClass"][::std::mem::size_of::<_GTypeClass>() - 8usize];
    ["Alignment of _GTypeClass"][::std::mem::align_of::<_GTypeClass>() - 8usize];
    ["Offset of field: _GTypeClass::g_type"][::std::mem::offset_of!(_GTypeClass, g_type) - 0usize];
};
#[doc = " GTypeInstance:\n\n An opaque structure used as the base of all type instances."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeInstance {
    pub g_class: *mut GTypeClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTypeInstance"][::std::mem::size_of::<_GTypeInstance>() - 8usize];
    ["Alignment of _GTypeInstance"][::std::mem::align_of::<_GTypeInstance>() - 8usize];
    ["Offset of field: _GTypeInstance::g_class"]
        [::std::mem::offset_of!(_GTypeInstance, g_class) - 0usize];
};
impl Default for _GTypeInstance {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GTypeInterface:\n\n An opaque structure used as the base of all interface types."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GTypeInterface {
    pub g_type: GType,
    pub g_instance_type: GType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTypeInterface"][::std::mem::size_of::<_GTypeInterface>() - 16usize];
    ["Alignment of _GTypeInterface"][::std::mem::align_of::<_GTypeInterface>() - 8usize];
    ["Offset of field: _GTypeInterface::g_type"]
        [::std::mem::offset_of!(_GTypeInterface, g_type) - 0usize];
    ["Offset of field: _GTypeInterface::g_instance_type"]
        [::std::mem::offset_of!(_GTypeInterface, g_instance_type) - 8usize];
};
#[doc = " GValue:\n\n An opaque structure used to hold different types of values.\n\n The data within the structure has protected scope: it is accessible only\n to functions within a #GTypeValueTable structure, or implementations of\n the g_value_*() API. That is, code portions which implement new fundamental\n types.\n\n #GValue users cannot make any assumptions about how data is stored\n within the 2 element @data union, and the @g_type member should\n only be accessed through the G_VALUE_TYPE() macro."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GValue {
    pub g_type: GType,
    pub data: [_GValue__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GValue__bindgen_ty_1 {
    pub v_int: gint,
    pub v_uint: guint,
    pub v_long: glong,
    pub v_ulong: gulong,
    pub v_int64: gint64,
    pub v_uint64: guint64,
    pub v_float: gfloat,
    pub v_double: gdouble,
    pub v_pointer: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GValue__bindgen_ty_1"][::std::mem::size_of::<_GValue__bindgen_ty_1>() - 8usize];
    ["Alignment of _GValue__bindgen_ty_1"]
        [::std::mem::align_of::<_GValue__bindgen_ty_1>() - 8usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_int"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_int) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_uint"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_uint) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_long"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_long) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_ulong"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_ulong) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_int64"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_int64) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_uint64"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_uint64) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_float"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_float) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_double"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_double) - 0usize];
    ["Offset of field: _GValue__bindgen_ty_1::v_pointer"]
        [::std::mem::offset_of!(_GValue__bindgen_ty_1, v_pointer) - 0usize];
};
impl Default for _GValue__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GValue"][::std::mem::size_of::<_GValue>() - 24usize];
    ["Alignment of _GValue"][::std::mem::align_of::<_GValue>() - 8usize];
    ["Offset of field: _GValue::g_type"][::std::mem::offset_of!(_GValue, g_type) - 0usize];
    ["Offset of field: _GValue::data"][::std::mem::offset_of!(_GValue, data) - 8usize];
};
impl Default for _GValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GParamFlags_G_PARAM_READABLE: GParamFlags = 1;
pub const GParamFlags_G_PARAM_WRITABLE: GParamFlags = 2;
pub const GParamFlags_G_PARAM_READWRITE: GParamFlags = 3;
pub const GParamFlags_G_PARAM_CONSTRUCT: GParamFlags = 4;
pub const GParamFlags_G_PARAM_CONSTRUCT_ONLY: GParamFlags = 8;
pub const GParamFlags_G_PARAM_LAX_VALIDATION: GParamFlags = 16;
pub const GParamFlags_G_PARAM_STATIC_NAME: GParamFlags = 32;
pub const GParamFlags_G_PARAM_PRIVATE: GParamFlags = 32;
pub const GParamFlags_G_PARAM_STATIC_NICK: GParamFlags = 64;
pub const GParamFlags_G_PARAM_STATIC_BLURB: GParamFlags = 128;
pub const GParamFlags_G_PARAM_EXPLICIT_NOTIFY: GParamFlags = 1073741824;
pub const GParamFlags_G_PARAM_DEPRECATED: GParamFlags = -2147483648;
#[doc = " GParamFlags:\n @G_PARAM_READABLE: the parameter is readable\n @G_PARAM_WRITABLE: the parameter is writable\n @G_PARAM_READWRITE: alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE\n @G_PARAM_CONSTRUCT: the parameter will be set upon object construction\n @G_PARAM_CONSTRUCT_ONLY: the parameter can only be set upon object construction\n @G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())\n  strict validation is not required\n @G_PARAM_STATIC_NAME: the string used as name when constructing the\n  parameter is guaranteed to remain valid and\n  unmodified for the lifetime of the parameter.\n  Since 2.8\n @G_PARAM_STATIC_NICK: the string used as nick when constructing the\n  parameter is guaranteed to remain valid and\n  unmmodified for the lifetime of the parameter.\n  Since 2.8\n @G_PARAM_STATIC_BLURB: the string used as blurb when constructing the\n  parameter is guaranteed to remain valid and\n  unmodified for the lifetime of the parameter.\n  Since 2.8\n @G_PARAM_EXPLICIT_NOTIFY: calls to g_object_set_property() for this\n   property will not automatically result in a \"notify\" signal being\n   emitted: the implementation must call g_object_notify() themselves\n   in case the property actually changes.  Since: 2.42.\n @G_PARAM_PRIVATE: internal\n @G_PARAM_DEPRECATED: the parameter is deprecated and will be removed\n  in a future version. A warning will be generated if it is used\n  while running with G_ENABLE_DIAGNOSTIC=1.\n  Since 2.26\n\n Through the #GParamFlags flag values, certain aspects of parameters\n can be configured.\n\n See also: %G_PARAM_STATIC_STRINGS"]
pub type GParamFlags = ::std::os::raw::c_int;
#[doc = " GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param)\n @g_type_instance: private #GTypeInstance portion\n @name: name of this parameter: always an interned string\n @flags: #GParamFlags flags for this parameter\n @value_type: the #GValue type for this parameter\n @owner_type: #GType type that uses (introduces) this parameter\n\n All other fields of the GParamSpec struct are private and\n should not be used directly."]
pub type GParamSpec = _GParamSpec;
#[doc = " GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param)\n @g_type_instance: private #GTypeInstance portion\n @name: name of this parameter: always an interned string\n @flags: #GParamFlags flags for this parameter\n @value_type: the #GValue type for this parameter\n @owner_type: #GType type that uses (introduces) this parameter\n\n All other fields of the GParamSpec struct are private and\n should not be used directly."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpec {
    pub g_type_instance: GTypeInstance,
    pub name: *const gchar,
    pub flags: GParamFlags,
    pub value_type: GType,
    pub owner_type: GType,
    pub _nick: *mut gchar,
    pub _blurb: *mut gchar,
    pub qdata: *mut GData,
    pub ref_count: guint,
    pub param_id: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GParamSpec"][::std::mem::size_of::<_GParamSpec>() - 72usize];
    ["Alignment of _GParamSpec"][::std::mem::align_of::<_GParamSpec>() - 8usize];
    ["Offset of field: _GParamSpec::g_type_instance"]
        [::std::mem::offset_of!(_GParamSpec, g_type_instance) - 0usize];
    ["Offset of field: _GParamSpec::name"][::std::mem::offset_of!(_GParamSpec, name) - 8usize];
    ["Offset of field: _GParamSpec::flags"][::std::mem::offset_of!(_GParamSpec, flags) - 16usize];
    ["Offset of field: _GParamSpec::value_type"]
        [::std::mem::offset_of!(_GParamSpec, value_type) - 24usize];
    ["Offset of field: _GParamSpec::owner_type"]
        [::std::mem::offset_of!(_GParamSpec, owner_type) - 32usize];
    ["Offset of field: _GParamSpec::_nick"][::std::mem::offset_of!(_GParamSpec, _nick) - 40usize];
    ["Offset of field: _GParamSpec::_blurb"][::std::mem::offset_of!(_GParamSpec, _blurb) - 48usize];
    ["Offset of field: _GParamSpec::qdata"][::std::mem::offset_of!(_GParamSpec, qdata) - 56usize];
    ["Offset of field: _GParamSpec::ref_count"]
        [::std::mem::offset_of!(_GParamSpec, ref_count) - 64usize];
    ["Offset of field: _GParamSpec::param_id"]
        [::std::mem::offset_of!(_GParamSpec, param_id) - 68usize];
};
impl Default for _GParamSpec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GBoxedCopyFunc:\n @boxed: (not nullable): The boxed structure to be copied.\n\n This function is provided by the user and should produce a copy\n of the passed in boxed structure.\n\n Returns: (not nullable): The newly created copy of the boxed structure."]
pub type GBoxedCopyFunc = ::std::option::Option<unsafe extern "C" fn(boxed: gpointer) -> gpointer>;
#[doc = " GObject:\n\n The base object type.\n\n All the fields in the `GObject` structure are private to the implementation\n and should never be accessed directly.\n\n Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the\n alignment of the largest basic GLib type (typically this is #guint64 or\n #gdouble). If you need larger alignment for an element in a #GObject, you\n should allocate it on the heap (aligned), or arrange for your #GObject to be\n appropriately padded. This guarantee applies to the #GObject (or derived)\n struct, the #GObjectClass (or derived) struct, and any private data allocated\n by G_ADD_PRIVATE()."]
pub type GObject = _GObject;
#[doc = " GObjectClass:\n @g_type_class: the parent class\n @constructor: the @constructor function is called by g_object_new () to\n  complete the object initialization after all the construction properties are\n  set. The first thing a @constructor implementation must do is chain up to the\n  @constructor of the parent class. Overriding @constructor should be rarely\n  needed, e.g. to handle construct properties, or to implement singletons.\n @set_property: the generic setter for all properties of this type. Should be\n  overridden for every type with properties. If implementations of\n  @set_property don't emit property change notification explicitly, this will\n  be done implicitly by the type system. However, if the notify signal is\n  emitted explicitly, the type system will not emit it a second time.\n @get_property: the generic getter for all properties of this type. Should be\n  overridden for every type with properties.\n @dispose: the @dispose function is supposed to drop all references to other\n  objects, but keep the instance otherwise intact, so that client method\n  invocations still work. It may be run multiple times (due to reference\n  loops). Before returning, @dispose should chain up to the @dispose method\n  of the parent class.\n @finalize: instance finalization function, should finish the finalization of\n  the instance begun in @dispose and chain up to the @finalize method of the\n  parent class.\n @dispatch_properties_changed: emits property change notification for a bunch\n  of properties. Overriding @dispatch_properties_changed should be rarely\n  needed.\n @notify: the class closure for the notify signal\n @constructed: the @constructed function is called by g_object_new() as the\n  final step of the object creation process.  At the point of the call, all\n  construction properties have been set on the object.  The purpose of this\n  call is to allow for object initialisation steps that can only be performed\n  after construction properties have been set.  @constructed implementors\n  should chain up to the @constructed call of their parent class to allow it\n  to complete its initialisation.\n\n The class structure for the GObject type.\n\n |[<!-- language=\"C\" -->\n // Example of implementing a singleton using a constructor.\n static MySingleton *the_singleton = NULL;\n\n static GObject*\n my_singleton_constructor (GType                  type,\n                           guint                  n_construct_params,\n                           GObjectConstructParam *construct_params)\n {\n   GObject *object;\n\n   if (!the_singleton)\n     {\n       object = G_OBJECT_CLASS (parent_class)->constructor (type,\n                                                            n_construct_params,\n                                                            construct_params);\n       the_singleton = MY_SINGLETON (object);\n     }\n   else\n     object = g_object_ref (G_OBJECT (the_singleton));\n\n   return object;\n }\n ]|"]
pub type GObjectClass = _GObjectClass;
#[doc = " GObjectConstructParam:\n @pspec: the #GParamSpec of the construct parameter\n @value: the value to set the parameter to\n\n The GObjectConstructParam struct is an auxiliary structure used to hand\n #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass."]
pub type GObjectConstructParam = _GObjectConstructParam;
#[doc = " GObject:\n\n The base object type.\n\n All the fields in the `GObject` structure are private to the implementation\n and should never be accessed directly.\n\n Since GLib 2.72, all #GObjects are guaranteed to be aligned to at least the\n alignment of the largest basic GLib type (typically this is #guint64 or\n #gdouble). If you need larger alignment for an element in a #GObject, you\n should allocate it on the heap (aligned), or arrange for your #GObject to be\n appropriately padded. This guarantee applies to the #GObject (or derived)\n struct, the #GObjectClass (or derived) struct, and any private data allocated\n by G_ADD_PRIVATE()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObject {
    pub g_type_instance: GTypeInstance,
    pub ref_count: guint,
    pub qdata: *mut GData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GObject"][::std::mem::size_of::<_GObject>() - 24usize];
    ["Alignment of _GObject"][::std::mem::align_of::<_GObject>() - 8usize];
    ["Offset of field: _GObject::g_type_instance"]
        [::std::mem::offset_of!(_GObject, g_type_instance) - 0usize];
    ["Offset of field: _GObject::ref_count"][::std::mem::offset_of!(_GObject, ref_count) - 8usize];
    ["Offset of field: _GObject::qdata"][::std::mem::offset_of!(_GObject, qdata) - 16usize];
};
impl Default for _GObject {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GObjectClass:\n @g_type_class: the parent class\n @constructor: the @constructor function is called by g_object_new () to\n  complete the object initialization after all the construction properties are\n  set. The first thing a @constructor implementation must do is chain up to the\n  @constructor of the parent class. Overriding @constructor should be rarely\n  needed, e.g. to handle construct properties, or to implement singletons.\n @set_property: the generic setter for all properties of this type. Should be\n  overridden for every type with properties. If implementations of\n  @set_property don't emit property change notification explicitly, this will\n  be done implicitly by the type system. However, if the notify signal is\n  emitted explicitly, the type system will not emit it a second time.\n @get_property: the generic getter for all properties of this type. Should be\n  overridden for every type with properties.\n @dispose: the @dispose function is supposed to drop all references to other\n  objects, but keep the instance otherwise intact, so that client method\n  invocations still work. It may be run multiple times (due to reference\n  loops). Before returning, @dispose should chain up to the @dispose method\n  of the parent class.\n @finalize: instance finalization function, should finish the finalization of\n  the instance begun in @dispose and chain up to the @finalize method of the\n  parent class.\n @dispatch_properties_changed: emits property change notification for a bunch\n  of properties. Overriding @dispatch_properties_changed should be rarely\n  needed.\n @notify: the class closure for the notify signal\n @constructed: the @constructed function is called by g_object_new() as the\n  final step of the object creation process.  At the point of the call, all\n  construction properties have been set on the object.  The purpose of this\n  call is to allow for object initialisation steps that can only be performed\n  after construction properties have been set.  @constructed implementors\n  should chain up to the @constructed call of their parent class to allow it\n  to complete its initialisation.\n\n The class structure for the GObject type.\n\n |[<!-- language=\"C\" -->\n // Example of implementing a singleton using a constructor.\n static MySingleton *the_singleton = NULL;\n\n static GObject*\n my_singleton_constructor (GType                  type,\n                           guint                  n_construct_params,\n                           GObjectConstructParam *construct_params)\n {\n   GObject *object;\n\n   if (!the_singleton)\n     {\n       object = G_OBJECT_CLASS (parent_class)->constructor (type,\n                                                            n_construct_params,\n                                                            construct_params);\n       the_singleton = MY_SINGLETON (object);\n     }\n   else\n     object = g_object_ref (G_OBJECT (the_singleton));\n\n   return object;\n }\n ]|"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObjectClass {
    pub g_type_class: GTypeClass,
    pub construct_properties: *mut GSList,
    pub constructor: ::std::option::Option<
        unsafe extern "C" fn(
            type_: GType,
            n_construct_properties: guint,
            construct_properties: *mut GObjectConstructParam,
        ) -> *mut GObject,
    >,
    pub set_property: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut GObject,
            property_id: guint,
            value: *const GValue,
            pspec: *mut GParamSpec,
        ),
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut GObject,
            property_id: guint,
            value: *mut GValue,
            pspec: *mut GParamSpec,
        ),
    >,
    pub dispose: ::std::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub dispatch_properties_changed: ::std::option::Option<
        unsafe extern "C" fn(object: *mut GObject, n_pspecs: guint, pspecs: *mut *mut GParamSpec),
    >,
    pub notify:
        ::std::option::Option<unsafe extern "C" fn(object: *mut GObject, pspec: *mut GParamSpec)>,
    pub constructed: ::std::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub flags: gsize,
    pub n_construct_properties: gsize,
    pub pspecs: gpointer,
    pub n_pspecs: gsize,
    pub pdummy: [gpointer; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GObjectClass"][::std::mem::size_of::<_GObjectClass>() - 136usize];
    ["Alignment of _GObjectClass"][::std::mem::align_of::<_GObjectClass>() - 8usize];
    ["Offset of field: _GObjectClass::g_type_class"]
        [::std::mem::offset_of!(_GObjectClass, g_type_class) - 0usize];
    ["Offset of field: _GObjectClass::construct_properties"]
        [::std::mem::offset_of!(_GObjectClass, construct_properties) - 8usize];
    ["Offset of field: _GObjectClass::constructor"]
        [::std::mem::offset_of!(_GObjectClass, constructor) - 16usize];
    ["Offset of field: _GObjectClass::set_property"]
        [::std::mem::offset_of!(_GObjectClass, set_property) - 24usize];
    ["Offset of field: _GObjectClass::get_property"]
        [::std::mem::offset_of!(_GObjectClass, get_property) - 32usize];
    ["Offset of field: _GObjectClass::dispose"]
        [::std::mem::offset_of!(_GObjectClass, dispose) - 40usize];
    ["Offset of field: _GObjectClass::finalize"]
        [::std::mem::offset_of!(_GObjectClass, finalize) - 48usize];
    ["Offset of field: _GObjectClass::dispatch_properties_changed"]
        [::std::mem::offset_of!(_GObjectClass, dispatch_properties_changed) - 56usize];
    ["Offset of field: _GObjectClass::notify"]
        [::std::mem::offset_of!(_GObjectClass, notify) - 64usize];
    ["Offset of field: _GObjectClass::constructed"]
        [::std::mem::offset_of!(_GObjectClass, constructed) - 72usize];
    ["Offset of field: _GObjectClass::flags"]
        [::std::mem::offset_of!(_GObjectClass, flags) - 80usize];
    ["Offset of field: _GObjectClass::n_construct_properties"]
        [::std::mem::offset_of!(_GObjectClass, n_construct_properties) - 88usize];
    ["Offset of field: _GObjectClass::pspecs"]
        [::std::mem::offset_of!(_GObjectClass, pspecs) - 96usize];
    ["Offset of field: _GObjectClass::n_pspecs"]
        [::std::mem::offset_of!(_GObjectClass, n_pspecs) - 104usize];
    ["Offset of field: _GObjectClass::pdummy"]
        [::std::mem::offset_of!(_GObjectClass, pdummy) - 112usize];
};
impl Default for _GObjectClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GObjectConstructParam:\n @pspec: the #GParamSpec of the construct parameter\n @value: the value to set the parameter to\n\n The GObjectConstructParam struct is an auxiliary structure used to hand\n #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObjectConstructParam {
    pub pspec: *mut GParamSpec,
    pub value: *mut GValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GObjectConstructParam"][::std::mem::size_of::<_GObjectConstructParam>() - 16usize];
    ["Alignment of _GObjectConstructParam"]
        [::std::mem::align_of::<_GObjectConstructParam>() - 8usize];
    ["Offset of field: _GObjectConstructParam::pspec"]
        [::std::mem::offset_of!(_GObjectConstructParam, pspec) - 0usize];
    ["Offset of field: _GObjectConstructParam::value"]
        [::std::mem::offset_of!(_GObjectConstructParam, value) - 8usize];
};
impl Default for _GObjectConstructParam {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncResult {
    _unused: [u8; 0],
}
pub type GAsyncResult = _GAsyncResult;
pub type GCancellable = _GCancellable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDatagramBased {
    _unused: [u8; 0],
}
pub type GDatagramBased = _GDatagramBased;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFile {
    _unused: [u8; 0],
}
#[doc = " GFile:\n\n A handle to an object implementing the #GFileIface interface.\n Generally stores a location within the file system. Handles do not\n necessarily represent files or directories that currently exist."]
pub type GFile = _GFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileDescriptorBased {
    _unused: [u8; 0],
}
pub type GFileDescriptorBased = _GFileDescriptorBased;
pub type GInetAddress = _GInetAddress;
pub type GInetSocketAddress = _GInetSocketAddress;
pub type GInputStream = _GInputStream;
pub type GOutputStream = _GOutputStream;
#[doc = " GIOStream:\n\n Base class for read-write streams."]
pub type GIOStream = _GIOStream;
#[doc = " GSocket:\n\n A lowlevel network socket object.\n\n Since: 2.22"]
pub type GSocket = _GSocket;
#[doc = " GSocketControlMessage:\n\n Base class for socket-type specific control messages that can be sent and\n received over #GSocket."]
pub type GSocketControlMessage = _GSocketControlMessage;
#[doc = " GSocketConnection:\n\n A socket connection GIOStream object for connection-oriented sockets.\n\n Since: 2.22"]
pub type GSocketConnection = _GSocketConnection;
pub type GSocketAddress = _GSocketAddress;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectable {
    _unused: [u8; 0],
}
pub type GSocketConnectable = _GSocketConnectable;
pub type GTlsCertificate = _GTlsCertificate;
#[doc = " GAsyncReadyCallback:\n @source_object: (nullable): the object the asynchronous operation was started with.\n @res: a #GAsyncResult.\n @user_data: user data passed to the callback.\n\n Type definition for a function that will be called back when an asynchronous\n operation within GIO has been completed. #GAsyncReadyCallback\n callbacks from #GTask are guaranteed to be invoked in a later\n iteration of the\n [thread-default main context][g-main-context-push-thread-default]\n where the #GTask was created. All other users of\n #GAsyncReadyCallback must likewise call it asynchronously in a\n later iteration of the main context.\n\n The asynchronous operation is guaranteed to have held a reference to\n @source_object from the time when the `*_async()` function was called, until\n after this callback returns."]
pub type GAsyncReadyCallback = ::std::option::Option<
    unsafe extern "C" fn(source_object: *mut GObject, res: *mut GAsyncResult, user_data: gpointer),
>;
#[doc = " GInputVector:\n @buffer: Pointer to a buffer where data will be written.\n @size: the available size in @buffer.\n\n Structure used for scatter/gather data input.\n You generally pass in an array of #GInputVectors\n and the operation will store the read data starting in the\n first buffer, switching to the next as needed.\n\n Since: 2.22"]
pub type GInputVector = _GInputVector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputVector {
    pub buffer: gpointer,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GInputVector"][::std::mem::size_of::<_GInputVector>() - 16usize];
    ["Alignment of _GInputVector"][::std::mem::align_of::<_GInputVector>() - 8usize];
    ["Offset of field: _GInputVector::buffer"]
        [::std::mem::offset_of!(_GInputVector, buffer) - 0usize];
    ["Offset of field: _GInputVector::size"][::std::mem::offset_of!(_GInputVector, size) - 8usize];
};
impl Default for _GInputVector {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GInputMessage:\n @address: (optional) (out) (transfer full): return location\n   for a #GSocketAddress, or %NULL\n @vectors: (array length=num_vectors) (out): pointer to an\n   array of input vectors\n @num_vectors: the number of input vectors pointed to by @vectors\n @bytes_received: (out): will be set to the number of bytes that have been\n   received\n @flags: (out): collection of #GSocketMsgFlags for the received message,\n   outputted by the call\n @control_messages: (array length=num_control_messages) (optional)\n   (out) (transfer full): return location for a\n   caller-allocated array of #GSocketControlMessages, or %NULL\n @num_control_messages: (out) (optional): return location for the number of\n   elements in @control_messages\n\n Structure used for scatter/gather data input when receiving multiple\n messages or packets in one go. You generally pass in an array of empty\n #GInputVectors and the operation will use all the buffers as if they\n were one buffer, and will set @bytes_received to the total number of bytes\n received across all #GInputVectors.\n\n This structure closely mirrors `struct mmsghdr` and `struct msghdr` from\n the POSIX sockets API (see `man 2 recvmmsg`).\n\n If @address is non-%NULL then it is set to the source address the message\n was received from, and the caller must free it afterwards.\n\n If @control_messages is non-%NULL then it is set to an array of control\n messages received with the message (if any), and the caller must free it\n afterwards. @num_control_messages is set to the number of elements in\n this array, which may be zero.\n\n Flags relevant to this message will be returned in @flags. For example,\n `MSG_EOR` or `MSG_TRUNC`.\n\n Since: 2.48"]
pub type GInputMessage = _GInputMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputMessage {
    pub address: *mut *mut GSocketAddress,
    pub vectors: *mut GInputVector,
    pub num_vectors: guint,
    pub bytes_received: gsize,
    pub flags: gint,
    pub control_messages: *mut *mut *mut GSocketControlMessage,
    pub num_control_messages: *mut guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GInputMessage"][::std::mem::size_of::<_GInputMessage>() - 56usize];
    ["Alignment of _GInputMessage"][::std::mem::align_of::<_GInputMessage>() - 8usize];
    ["Offset of field: _GInputMessage::address"]
        [::std::mem::offset_of!(_GInputMessage, address) - 0usize];
    ["Offset of field: _GInputMessage::vectors"]
        [::std::mem::offset_of!(_GInputMessage, vectors) - 8usize];
    ["Offset of field: _GInputMessage::num_vectors"]
        [::std::mem::offset_of!(_GInputMessage, num_vectors) - 16usize];
    ["Offset of field: _GInputMessage::bytes_received"]
        [::std::mem::offset_of!(_GInputMessage, bytes_received) - 24usize];
    ["Offset of field: _GInputMessage::flags"]
        [::std::mem::offset_of!(_GInputMessage, flags) - 32usize];
    ["Offset of field: _GInputMessage::control_messages"]
        [::std::mem::offset_of!(_GInputMessage, control_messages) - 40usize];
    ["Offset of field: _GInputMessage::num_control_messages"]
        [::std::mem::offset_of!(_GInputMessage, num_control_messages) - 48usize];
};
impl Default for _GInputMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GOutputVector:\n @buffer: Pointer to a buffer of data to read.\n @size: the size of @buffer.\n\n Structure used for scatter/gather data output.\n You generally pass in an array of #GOutputVectors\n and the operation will use all the buffers as if they were\n one buffer.\n\n Since: 2.22"]
pub type GOutputVector = _GOutputVector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputVector {
    pub buffer: gconstpointer,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GOutputVector"][::std::mem::size_of::<_GOutputVector>() - 16usize];
    ["Alignment of _GOutputVector"][::std::mem::align_of::<_GOutputVector>() - 8usize];
    ["Offset of field: _GOutputVector::buffer"]
        [::std::mem::offset_of!(_GOutputVector, buffer) - 0usize];
    ["Offset of field: _GOutputVector::size"]
        [::std::mem::offset_of!(_GOutputVector, size) - 8usize];
};
impl Default for _GOutputVector {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " GOutputMessage:\n @address: (nullable): a #GSocketAddress, or %NULL\n @vectors: pointer to an array of output vectors\n @num_vectors: the number of output vectors pointed to by @vectors.\n @bytes_sent: initialize to 0. Will be set to the number of bytes\n     that have been sent\n @control_messages: (array length=num_control_messages) (nullable): a pointer\n   to an array of #GSocketControlMessages, or %NULL.\n @num_control_messages: number of elements in @control_messages.\n\n Structure used for scatter/gather data output when sending multiple\n messages or packets in one go. You generally pass in an array of\n #GOutputVectors and the operation will use all the buffers as if they\n were one buffer.\n\n If @address is %NULL then the message is sent to the default receiver\n (as previously set by g_socket_connect()).\n\n Since: 2.44"]
pub type GOutputMessage = _GOutputMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputMessage {
    pub address: *mut GSocketAddress,
    pub vectors: *mut GOutputVector,
    pub num_vectors: guint,
    pub bytes_sent: guint,
    pub control_messages: *mut *mut GSocketControlMessage,
    pub num_control_messages: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GOutputMessage"][::std::mem::size_of::<_GOutputMessage>() - 40usize];
    ["Alignment of _GOutputMessage"][::std::mem::align_of::<_GOutputMessage>() - 8usize];
    ["Offset of field: _GOutputMessage::address"]
        [::std::mem::offset_of!(_GOutputMessage, address) - 0usize];
    ["Offset of field: _GOutputMessage::vectors"]
        [::std::mem::offset_of!(_GOutputMessage, vectors) - 8usize];
    ["Offset of field: _GOutputMessage::num_vectors"]
        [::std::mem::offset_of!(_GOutputMessage, num_vectors) - 16usize];
    ["Offset of field: _GOutputMessage::bytes_sent"]
        [::std::mem::offset_of!(_GOutputMessage, bytes_sent) - 20usize];
    ["Offset of field: _GOutputMessage::control_messages"]
        [::std::mem::offset_of!(_GOutputMessage, control_messages) - 24usize];
    ["Offset of field: _GOutputMessage::num_control_messages"]
        [::std::mem::offset_of!(_GOutputMessage, num_control_messages) - 32usize];
};
impl Default for _GOutputMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusConnection {
    _unused: [u8; 0],
}
pub type GDBusConnection = _GDBusConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GInputStreamPrivate = _GInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputStream {
    pub parent_instance: GObject,
    pub priv_: *mut GInputStreamPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GInputStream"][::std::mem::size_of::<_GInputStream>() - 32usize];
    ["Alignment of _GInputStream"][::std::mem::align_of::<_GInputStream>() - 8usize];
    ["Offset of field: _GInputStream::parent_instance"]
        [::std::mem::offset_of!(_GInputStream, parent_instance) - 0usize];
    ["Offset of field: _GInputStream::priv_"]
        [::std::mem::offset_of!(_GInputStream, priv_) - 24usize];
};
impl Default for _GInputStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GOutputStreamPrivate = _GOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputStream {
    pub parent_instance: GObject,
    pub priv_: *mut GOutputStreamPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GOutputStream"][::std::mem::size_of::<_GOutputStream>() - 32usize];
    ["Alignment of _GOutputStream"][::std::mem::align_of::<_GOutputStream>() - 8usize];
    ["Offset of field: _GOutputStream::parent_instance"]
        [::std::mem::offset_of!(_GOutputStream, parent_instance) - 0usize];
    ["Offset of field: _GOutputStream::priv_"]
        [::std::mem::offset_of!(_GOutputStream, priv_) - 24usize];
};
impl Default for _GOutputStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCancellablePrivate {
    _unused: [u8; 0],
}
pub type GCancellablePrivate = _GCancellablePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCancellable {
    pub parent_instance: GObject,
    pub priv_: *mut GCancellablePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GCancellable"][::std::mem::size_of::<_GCancellable>() - 32usize];
    ["Alignment of _GCancellable"][::std::mem::align_of::<_GCancellable>() - 8usize];
    ["Offset of field: _GCancellable::parent_instance"]
        [::std::mem::offset_of!(_GCancellable, parent_instance) - 0usize];
    ["Offset of field: _GCancellable::priv_"]
        [::std::mem::offset_of!(_GCancellable, priv_) - 24usize];
};
impl Default for _GCancellable {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStreamPrivate {
    _unused: [u8; 0],
}
pub type GIOStreamPrivate = _GIOStreamPrivate;
pub type GIOStreamClass = _GIOStreamClass;
#[doc = " GIOStream:\n\n Base class for read-write streams."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStream {
    pub parent_instance: GObject,
    pub priv_: *mut GIOStreamPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GIOStream"][::std::mem::size_of::<_GIOStream>() - 32usize];
    ["Alignment of _GIOStream"][::std::mem::align_of::<_GIOStream>() - 8usize];
    ["Offset of field: _GIOStream::parent_instance"]
        [::std::mem::offset_of!(_GIOStream, parent_instance) - 0usize];
    ["Offset of field: _GIOStream::priv_"][::std::mem::offset_of!(_GIOStream, priv_) - 24usize];
};
impl Default for _GIOStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStreamClass {
    pub parent_class: GObjectClass,
    pub get_input_stream:
        ::std::option::Option<unsafe extern "C" fn(stream: *mut GIOStream) -> *mut GInputStream>,
    pub get_output_stream:
        ::std::option::Option<unsafe extern "C" fn(stream: *mut GIOStream) -> *mut GOutputStream>,
    pub close_fn: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub close_async: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            io_priority: ::std::os::raw::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved8: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved9: ::std::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved10: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GIOStreamClass"][::std::mem::size_of::<_GIOStreamClass>() - 256usize];
    ["Alignment of _GIOStreamClass"][::std::mem::align_of::<_GIOStreamClass>() - 8usize];
    ["Offset of field: _GIOStreamClass::parent_class"]
        [::std::mem::offset_of!(_GIOStreamClass, parent_class) - 0usize];
    ["Offset of field: _GIOStreamClass::get_input_stream"]
        [::std::mem::offset_of!(_GIOStreamClass, get_input_stream) - 136usize];
    ["Offset of field: _GIOStreamClass::get_output_stream"]
        [::std::mem::offset_of!(_GIOStreamClass, get_output_stream) - 144usize];
    ["Offset of field: _GIOStreamClass::close_fn"]
        [::std::mem::offset_of!(_GIOStreamClass, close_fn) - 152usize];
    ["Offset of field: _GIOStreamClass::close_async"]
        [::std::mem::offset_of!(_GIOStreamClass, close_async) - 160usize];
    ["Offset of field: _GIOStreamClass::close_finish"]
        [::std::mem::offset_of!(_GIOStreamClass, close_finish) - 168usize];
    ["Offset of field: _GIOStreamClass::_g_reserved1"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved1) - 176usize];
    ["Offset of field: _GIOStreamClass::_g_reserved2"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved2) - 184usize];
    ["Offset of field: _GIOStreamClass::_g_reserved3"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved3) - 192usize];
    ["Offset of field: _GIOStreamClass::_g_reserved4"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved4) - 200usize];
    ["Offset of field: _GIOStreamClass::_g_reserved5"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved5) - 208usize];
    ["Offset of field: _GIOStreamClass::_g_reserved6"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved6) - 216usize];
    ["Offset of field: _GIOStreamClass::_g_reserved7"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved7) - 224usize];
    ["Offset of field: _GIOStreamClass::_g_reserved8"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved8) - 232usize];
    ["Offset of field: _GIOStreamClass::_g_reserved9"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved9) - 240usize];
    ["Offset of field: _GIOStreamClass::_g_reserved10"]
        [::std::mem::offset_of!(_GIOStreamClass, _g_reserved10) - 248usize];
};
impl Default for _GIOStreamClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressPrivate {
    _unused: [u8; 0],
}
pub type GInetAddressPrivate = _GInetAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddress {
    pub parent_instance: GObject,
    pub priv_: *mut GInetAddressPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GInetAddress"][::std::mem::size_of::<_GInetAddress>() - 32usize];
    ["Alignment of _GInetAddress"][::std::mem::align_of::<_GInetAddress>() - 8usize];
    ["Offset of field: _GInetAddress::parent_instance"]
        [::std::mem::offset_of!(_GInetAddress, parent_instance) - 0usize];
    ["Offset of field: _GInetAddress::priv_"]
        [::std::mem::offset_of!(_GInetAddress, priv_) - 24usize];
};
impl Default for _GInetAddress {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketAddress {
    pub parent_instance: GObject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSocketAddress"][::std::mem::size_of::<_GSocketAddress>() - 24usize];
    ["Alignment of _GSocketAddress"][::std::mem::align_of::<_GSocketAddress>() - 8usize];
    ["Offset of field: _GSocketAddress::parent_instance"]
        [::std::mem::offset_of!(_GSocketAddress, parent_instance) - 0usize];
};
impl Default for _GSocketAddress {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetSocketAddressPrivate {
    _unused: [u8; 0],
}
pub type GInetSocketAddressPrivate = _GInetSocketAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetSocketAddress {
    pub parent_instance: GSocketAddress,
    pub priv_: *mut GInetSocketAddressPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GInetSocketAddress"][::std::mem::size_of::<_GInetSocketAddress>() - 32usize];
    ["Alignment of _GInetSocketAddress"][::std::mem::align_of::<_GInetSocketAddress>() - 8usize];
    ["Offset of field: _GInetSocketAddress::parent_instance"]
        [::std::mem::offset_of!(_GInetSocketAddress, parent_instance) - 0usize];
    ["Offset of field: _GInetSocketAddress::priv_"]
        [::std::mem::offset_of!(_GInetSocketAddress, priv_) - 24usize];
};
impl Default for _GInetSocketAddress {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketPrivate {
    _unused: [u8; 0],
}
pub type GSocketPrivate = _GSocketPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocket {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSocket"][::std::mem::size_of::<_GSocket>() - 32usize];
    ["Alignment of _GSocket"][::std::mem::align_of::<_GSocket>() - 8usize];
    ["Offset of field: _GSocket::parent_instance"]
        [::std::mem::offset_of!(_GSocket, parent_instance) - 0usize];
    ["Offset of field: _GSocket::priv_"][::std::mem::offset_of!(_GSocket, priv_) - 24usize];
};
impl Default for _GSocket {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectionPrivate {
    _unused: [u8; 0],
}
pub type GSocketConnectionPrivate = _GSocketConnectionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnection {
    pub parent_instance: GIOStream,
    pub priv_: *mut GSocketConnectionPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSocketConnection"][::std::mem::size_of::<_GSocketConnection>() - 40usize];
    ["Alignment of _GSocketConnection"][::std::mem::align_of::<_GSocketConnection>() - 8usize];
    ["Offset of field: _GSocketConnection::parent_instance"]
        [::std::mem::offset_of!(_GSocketConnection, parent_instance) - 0usize];
    ["Offset of field: _GSocketConnection::priv_"]
        [::std::mem::offset_of!(_GSocketConnection, priv_) - 32usize];
};
impl Default for _GSocketConnection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketControlMessagePrivate {
    _unused: [u8; 0],
}
pub type GSocketControlMessagePrivate = _GSocketControlMessagePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketControlMessage {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketControlMessagePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GSocketControlMessage"][::std::mem::size_of::<_GSocketControlMessage>() - 32usize];
    ["Alignment of _GSocketControlMessage"]
        [::std::mem::align_of::<_GSocketControlMessage>() - 8usize];
    ["Offset of field: _GSocketControlMessage::parent_instance"]
        [::std::mem::offset_of!(_GSocketControlMessage, parent_instance) - 0usize];
    ["Offset of field: _GSocketControlMessage::priv_"]
        [::std::mem::offset_of!(_GSocketControlMessage, priv_) - 24usize];
};
impl Default for _GSocketControlMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsCertificatePrivate {
    _unused: [u8; 0],
}
pub type GTlsCertificatePrivate = _GTlsCertificatePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsCertificate {
    pub parent_instance: GObject,
    pub priv_: *mut GTlsCertificatePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GTlsCertificate"][::std::mem::size_of::<_GTlsCertificate>() - 32usize];
    ["Alignment of _GTlsCertificate"][::std::mem::align_of::<_GTlsCertificate>() - 8usize];
    ["Offset of field: _GTlsCertificate::parent_instance"]
        [::std::mem::offset_of!(_GTlsCertificate, parent_instance) - 0usize];
    ["Offset of field: _GTlsCertificate::priv_"]
        [::std::mem::offset_of!(_GTlsCertificate, priv_) - 24usize];
};
impl Default for _GTlsCertificate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonNode {
    _unused: [u8; 0],
}
pub type JsonNode = _JsonNode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonArray {
    _unused: [u8; 0],
}
pub type JsonArray = _JsonArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NiceAgent {
    _unused: [u8; 0],
}
#[doc = " NiceAgent:\n\n The #NiceAgent is the main GObject of the libnice library and represents\n the ICE agent."]
pub type NiceAgent = _NiceAgent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
impl Default for iovec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSession {
    _unused: [u8; 0],
}
pub type FridaHostSession = _FridaHostSession;
pub type FridaHostSessionIface = _FridaHostSessionIface;
pub type FridaHostApplicationInfo = _FridaHostApplicationInfo;
pub type FridaHostProcessInfo = _FridaHostProcessInfo;
pub type FridaHostSpawnInfo = _FridaHostSpawnInfo;
pub type FridaHostChildInfo = _FridaHostChildInfo;
pub const FridaChildOrigin_FRIDA_CHILD_ORIGIN_FORK: FridaChildOrigin = 0;
pub const FridaChildOrigin_FRIDA_CHILD_ORIGIN_EXEC: FridaChildOrigin = 1;
pub const FridaChildOrigin_FRIDA_CHILD_ORIGIN_SPAWN: FridaChildOrigin = 2;
pub type FridaChildOrigin = ::std::os::raw::c_uint;
pub type FridaHostSpawnOptions = _FridaHostSpawnOptions;
pub const FridaStdio_FRIDA_STDIO_INHERIT: FridaStdio = 0;
pub const FridaStdio_FRIDA_STDIO_PIPE: FridaStdio = 1;
pub type FridaStdio = ::std::os::raw::c_uint;
pub type FridaAgentSessionId = _FridaAgentSessionId;
pub type FridaInjectorPayloadId = _FridaInjectorPayloadId;
pub type FridaChannelId = _FridaChannelId;
pub type FridaServiceSessionId = _FridaServiceSessionId;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentSessionProvider {
    _unused: [u8; 0],
}
pub type FridaAgentSessionProvider = _FridaAgentSessionProvider;
pub type FridaAgentSessionProviderIface = _FridaAgentSessionProviderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentSession {
    _unused: [u8; 0],
}
pub type FridaAgentSession = _FridaAgentSession;
pub type FridaAgentSessionIface = _FridaAgentSessionIface;
pub type FridaAgentScriptId = _FridaAgentScriptId;
pub type FridaAgentMessage = _FridaAgentMessage;
pub const FridaAgentMessageKind_FRIDA_AGENT_MESSAGE_KIND_SCRIPT: FridaAgentMessageKind = 1;
pub const FridaAgentMessageKind_FRIDA_AGENT_MESSAGE_KIND_DEBUGGER: FridaAgentMessageKind = 2;
pub type FridaAgentMessageKind = ::std::os::raw::c_uint;
pub type FridaPortalMembershipId = _FridaPortalMembershipId;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentController {
    _unused: [u8; 0],
}
pub type FridaAgentController = _FridaAgentController;
pub type FridaAgentControllerIface = _FridaAgentControllerIface;
pub type FridaHostChildId = _FridaHostChildId;
pub const FridaSpawnStartState_FRIDA_SPAWN_START_STATE_RUNNING: FridaSpawnStartState = 0;
pub const FridaSpawnStartState_FRIDA_SPAWN_START_STATE_SUSPENDED: FridaSpawnStartState = 1;
pub type FridaSpawnStartState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentMessageSink {
    _unused: [u8; 0],
}
pub type FridaAgentMessageSink = _FridaAgentMessageSink;
pub type FridaAgentMessageSinkIface = _FridaAgentMessageSinkIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentMessageTransmitter {
    _unused: [u8; 0],
}
pub type FridaAgentMessageTransmitter = _FridaAgentMessageTransmitter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentMessageTransmitterClass {
    _unused: [u8; 0],
}
pub type FridaAgentMessageTransmitterClass = _FridaAgentMessageTransmitterClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGadgetSession {
    _unused: [u8; 0],
}
pub type FridaGadgetSession = _FridaGadgetSession;
pub type FridaGadgetSessionIface = _FridaGadgetSessionIface;
pub const FridaGadgetBreakpointAction_FRIDA_GADGET_BREAKPOINT_ACTION_INVOKE_RETURN:
    FridaGadgetBreakpointAction = 0;
pub const FridaGadgetBreakpointAction_FRIDA_GADGET_BREAKPOINT_ACTION_RESUME:
    FridaGadgetBreakpointAction = 1;
pub const FridaGadgetBreakpointAction_FRIDA_GADGET_BREAKPOINT_ACTION_DETACH:
    FridaGadgetBreakpointAction = 2;
pub const FridaGadgetBreakpointAction_FRIDA_GADGET_BREAKPOINT_ACTION_PAGE_PLAN:
    FridaGadgetBreakpointAction = 3;
pub type FridaGadgetBreakpointAction = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannel {
    _unused: [u8; 0],
}
pub type FridaChannel = _FridaChannel;
pub type FridaChannelIface = _FridaChannelIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaServiceSession {
    _unused: [u8; 0],
}
pub type FridaServiceSession = _FridaServiceSession;
pub type FridaServiceSessionIface = _FridaServiceSessionIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTransportBroker {
    _unused: [u8; 0],
}
pub type FridaTransportBroker = _FridaTransportBroker;
pub type FridaTransportBrokerIface = _FridaTransportBrokerIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalSession {
    _unused: [u8; 0],
}
pub type FridaPortalSession = _FridaPortalSession;
pub type FridaPortalSessionIface = _FridaPortalSessionIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBusSession {
    _unused: [u8; 0],
}
pub type FridaBusSession = _FridaBusSession;
pub type FridaBusSessionIface = _FridaBusSessionIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAuthenticationService {
    _unused: [u8; 0],
}
pub type FridaAuthenticationService = _FridaAuthenticationService;
pub type FridaAuthenticationServiceIface = _FridaAuthenticationServiceIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaStaticAuthenticationService {
    _unused: [u8; 0],
}
pub type FridaStaticAuthenticationService = _FridaStaticAuthenticationService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaStaticAuthenticationServiceClass {
    _unused: [u8; 0],
}
pub type FridaStaticAuthenticationServiceClass = _FridaStaticAuthenticationServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaNullAuthenticationService {
    _unused: [u8; 0],
}
pub type FridaNullAuthenticationService = _FridaNullAuthenticationService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaNullAuthenticationServiceClass {
    _unused: [u8; 0],
}
pub type FridaNullAuthenticationServiceClass = _FridaNullAuthenticationServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedHostSession {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedHostSession = _FridaUnauthorizedHostSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedHostSessionClass {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedHostSessionClass = _FridaUnauthorizedHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedPortalSession {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedPortalSession = _FridaUnauthorizedPortalSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedPortalSessionClass {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedPortalSessionClass = _FridaUnauthorizedPortalSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedBusSession {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedBusSession = _FridaUnauthorizedBusSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaUnauthorizedBusSessionClass {
    _unused: [u8; 0],
}
pub type FridaUnauthorizedBusSessionClass = _FridaUnauthorizedBusSessionClass;
pub const FridaRealm_FRIDA_REALM_NATIVE: FridaRealm = 0;
pub const FridaRealm_FRIDA_REALM_EMULATED: FridaRealm = 1;
pub type FridaRealm = ::std::os::raw::c_uint;
pub const FridaUnloadPolicy_FRIDA_UNLOAD_POLICY_IMMEDIATE: FridaUnloadPolicy = 0;
pub const FridaUnloadPolicy_FRIDA_UNLOAD_POLICY_RESIDENT: FridaUnloadPolicy = 1;
pub const FridaUnloadPolicy_FRIDA_UNLOAD_POLICY_DEFERRED: FridaUnloadPolicy = 2;
pub type FridaUnloadPolicy = ::std::os::raw::c_uint;
pub type FridaMappedLibraryBlob = _FridaMappedLibraryBlob;
pub type FridaLinuxInjectorState = _FridaLinuxInjectorState;
pub type FridaPosixInjectorState = _FridaPosixInjectorState;
pub const FridaSessionDetachReason_FRIDA_SESSION_DETACH_REASON_APPLICATION_REQUESTED:
    FridaSessionDetachReason = 1;
pub const FridaSessionDetachReason_FRIDA_SESSION_DETACH_REASON_PROCESS_REPLACED:
    FridaSessionDetachReason = 2;
pub const FridaSessionDetachReason_FRIDA_SESSION_DETACH_REASON_PROCESS_TERMINATED:
    FridaSessionDetachReason = 3;
pub const FridaSessionDetachReason_FRIDA_SESSION_DETACH_REASON_CONNECTION_TERMINATED:
    FridaSessionDetachReason = 4;
pub const FridaSessionDetachReason_FRIDA_SESSION_DETACH_REASON_DEVICE_LOST:
    FridaSessionDetachReason = 5;
pub type FridaSessionDetachReason = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFrontmostQueryOptions {
    _unused: [u8; 0],
}
pub type FridaFrontmostQueryOptions = _FridaFrontmostQueryOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFrontmostQueryOptionsClass {
    _unused: [u8; 0],
}
pub type FridaFrontmostQueryOptionsClass = _FridaFrontmostQueryOptionsClass;
pub const FridaScope_FRIDA_SCOPE_MINIMAL: FridaScope = 0;
pub const FridaScope_FRIDA_SCOPE_METADATA: FridaScope = 1;
pub const FridaScope_FRIDA_SCOPE_FULL: FridaScope = 2;
pub type FridaScope = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationQueryOptions {
    _unused: [u8; 0],
}
pub type FridaApplicationQueryOptions = _FridaApplicationQueryOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationQueryOptionsClass {
    _unused: [u8; 0],
}
pub type FridaApplicationQueryOptionsClass = _FridaApplicationQueryOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessQueryOptions {
    _unused: [u8; 0],
}
pub type FridaProcessQueryOptions = _FridaProcessQueryOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessQueryOptionsClass {
    _unused: [u8; 0],
}
pub type FridaProcessQueryOptionsClass = _FridaProcessQueryOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSessionOptions {
    _unused: [u8; 0],
}
pub type FridaSessionOptions = _FridaSessionOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSessionOptionsClass {
    _unused: [u8; 0],
}
pub type FridaSessionOptionsClass = _FridaSessionOptionsClass;
pub type FridaCrashInfo = _FridaCrashInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaScriptOptions {
    _unused: [u8; 0],
}
pub type FridaScriptOptions = _FridaScriptOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaScriptOptionsClass {
    _unused: [u8; 0],
}
pub type FridaScriptOptionsClass = _FridaScriptOptionsClass;
pub const FridaSnapshotTransport_FRIDA_SNAPSHOT_TRANSPORT_INLINE: FridaSnapshotTransport = 0;
pub const FridaSnapshotTransport_FRIDA_SNAPSHOT_TRANSPORT_SHARED_MEMORY: FridaSnapshotTransport = 1;
pub type FridaSnapshotTransport = ::std::os::raw::c_uint;
pub const FridaScriptRuntime_FRIDA_SCRIPT_RUNTIME_DEFAULT: FridaScriptRuntime = 0;
pub const FridaScriptRuntime_FRIDA_SCRIPT_RUNTIME_QJS: FridaScriptRuntime = 1;
pub const FridaScriptRuntime_FRIDA_SCRIPT_RUNTIME_V8: FridaScriptRuntime = 2;
pub type FridaScriptRuntime = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSnapshotOptions {
    _unused: [u8; 0],
}
pub type FridaSnapshotOptions = _FridaSnapshotOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSnapshotOptionsClass {
    _unused: [u8; 0],
}
pub type FridaSnapshotOptionsClass = _FridaSnapshotOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalOptions {
    _unused: [u8; 0],
}
pub type FridaPortalOptions = _FridaPortalOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalOptionsClass {
    _unused: [u8; 0],
}
pub type FridaPortalOptionsClass = _FridaPortalOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerOptions {
    _unused: [u8; 0],
}
pub type FridaPeerOptions = _FridaPeerOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerOptionsClass {
    _unused: [u8; 0],
}
pub type FridaPeerOptionsClass = _FridaPeerOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRelay {
    _unused: [u8; 0],
}
pub type FridaRelay = _FridaRelay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRelayClass {
    _unused: [u8; 0],
}
pub type FridaRelayClass = _FridaRelayClass;
pub const FridaRelayKind_FRIDA_RELAY_KIND_TURN_UDP: FridaRelayKind = 0;
pub const FridaRelayKind_FRIDA_RELAY_KIND_TURN_TCP: FridaRelayKind = 1;
pub const FridaRelayKind_FRIDA_RELAY_KIND_TURN_TLS: FridaRelayKind = 2;
pub type FridaRelayKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelRegistry {
    _unused: [u8; 0],
}
pub type FridaChannelRegistry = _FridaChannelRegistry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelRegistryClass {
    _unused: [u8; 0],
}
pub type FridaChannelRegistryClass = _FridaChannelRegistryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelEndpoint {
    _unused: [u8; 0],
}
pub type FridaChannelEndpoint = _FridaChannelEndpoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelEndpointClass {
    _unused: [u8; 0],
}
pub type FridaChannelEndpointClass = _FridaChannelEndpointClass;
pub type FridaVirtualStream = _FridaVirtualStream;
pub type FridaVirtualStreamClass = _FridaVirtualStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelStream {
    _unused: [u8; 0],
}
pub type FridaChannelStream = _FridaChannelStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelStreamClass {
    _unused: [u8; 0],
}
pub type FridaChannelStreamClass = _FridaChannelStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaServiceSessionRegistry {
    _unused: [u8; 0],
}
pub type FridaServiceSessionRegistry = _FridaServiceSessionRegistry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaServiceSessionRegistryClass {
    _unused: [u8; 0],
}
pub type FridaServiceSessionRegistryClass = _FridaServiceSessionRegistryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualStreamPrivate {
    _unused: [u8; 0],
}
pub type FridaVirtualStreamPrivate = _FridaVirtualStreamPrivate;
pub const FridaVirtualStreamState_FRIDA_VIRTUAL_STREAM_STATE_CREATED: FridaVirtualStreamState = 0;
pub const FridaVirtualStreamState_FRIDA_VIRTUAL_STREAM_STATE_OPENING: FridaVirtualStreamState = 1;
pub const FridaVirtualStreamState_FRIDA_VIRTUAL_STREAM_STATE_OPEN: FridaVirtualStreamState = 2;
pub const FridaVirtualStreamState_FRIDA_VIRTUAL_STREAM_STATE_CLOSED: FridaVirtualStreamState = 3;
pub type FridaVirtualStreamState = ::std::os::raw::c_uint;
pub type FridaVirtualStreamWorkFunc =
    ::std::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualInputStream {
    _unused: [u8; 0],
}
pub type FridaVirtualInputStream = _FridaVirtualInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualInputStreamClass {
    _unused: [u8; 0],
}
pub type FridaVirtualInputStreamClass = _FridaVirtualInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualOutputStream {
    _unused: [u8; 0],
}
pub type FridaVirtualOutputStream = _FridaVirtualOutputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualOutputStreamClass {
    _unused: [u8; 0],
}
pub type FridaVirtualOutputStreamClass = _FridaVirtualOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRpcClient {
    _unused: [u8; 0],
}
pub type FridaRpcClient = _FridaRpcClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRpcClientClass {
    _unused: [u8; 0],
}
pub type FridaRpcClientClass = _FridaRpcClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRpcPeer {
    _unused: [u8; 0],
}
pub type FridaRpcPeer = _FridaRpcPeer;
pub type FridaRpcPeerIface = _FridaRpcPeerIface;
pub type FridaPeerSessionDescription = _FridaPeerSessionDescription;
pub type FridaPeerSessionDescriptionClass = _FridaPeerSessionDescriptionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerSessionDescriptionPrivate {
    _unused: [u8; 0],
}
pub type FridaPeerSessionDescriptionPrivate = _FridaPeerSessionDescriptionPrivate;
pub const FridaPeerSetup_FRIDA_PEER_SETUP_ACTIVE: FridaPeerSetup = 0;
pub const FridaPeerSetup_FRIDA_PEER_SETUP_PASSIVE: FridaPeerSetup = 1;
pub const FridaPeerSetup_FRIDA_PEER_SETUP_ACTPASS: FridaPeerSetup = 2;
pub const FridaPeerSetup_FRIDA_PEER_SETUP_HOLDCONN: FridaPeerSetup = 3;
pub type FridaPeerSetup = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerSocket {
    _unused: [u8; 0],
}
pub type FridaPeerSocket = _FridaPeerSocket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerSocketClass {
    _unused: [u8; 0],
}
pub type FridaPeerSocketClass = _FridaPeerSocketClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSctpConnection {
    _unused: [u8; 0],
}
pub type FridaSctpConnection = _FridaSctpConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSctpConnectionClass {
    _unused: [u8; 0],
}
pub type FridaSctpConnectionClass = _FridaSctpConnectionClass;
pub const FridaSctpShutdownType_FRIDA_SCTP_SHUTDOWN_TYPE_READ: FridaSctpShutdownType = 1;
pub const FridaSctpShutdownType_FRIDA_SCTP_SHUTDOWN_TYPE_WRITE: FridaSctpShutdownType = 2;
pub const FridaSctpShutdownType_FRIDA_SCTP_SHUTDOWN_TYPE_READ_WRITE: FridaSctpShutdownType = 3;
pub type FridaSctpShutdownType = ::std::os::raw::c_uint;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_NONE: FridaPayloadProtocolId = 0;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_DCEP: FridaPayloadProtocolId = 50;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_STRING: FridaPayloadProtocolId =
    51;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_BINARY_PARTIAL:
    FridaPayloadProtocolId = 52;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_BINARY: FridaPayloadProtocolId =
    53;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_STRING_PARTIAL:
    FridaPayloadProtocolId = 54;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_STRING_EMPTY:
    FridaPayloadProtocolId = 55;
pub const FridaPayloadProtocolId_FRIDA_PAYLOAD_PROTOCOL_ID_WEBRTC_BINARY_EMPTY:
    FridaPayloadProtocolId = 56;
pub type FridaPayloadProtocolId = ::std::os::raw::c_uint;
pub const FridaSctpMessageFlags_FRIDA_SCTP_MESSAGE_FLAGS_END_OF_RECORD: FridaSctpMessageFlags = 1;
pub const FridaSctpMessageFlags_FRIDA_SCTP_MESSAGE_FLAGS_NOTIFICATION: FridaSctpMessageFlags = 2;
pub type FridaSctpMessageFlags = ::std::os::raw::c_uint;
pub const FridaDcepMessageType_FRIDA_DCEP_MESSAGE_TYPE_DATA_CHANNEL_OPEN: FridaDcepMessageType = 3;
pub const FridaDcepMessageType_FRIDA_DCEP_MESSAGE_TYPE_DATA_CHANNEL_ACK: FridaDcepMessageType = 2;
pub type FridaDcepMessageType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDummyInputStream {
    _unused: [u8; 0],
}
pub type FridaDummyInputStream = _FridaDummyInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDummyInputStreamClass {
    _unused: [u8; 0],
}
pub type FridaDummyInputStreamClass = _FridaDummyInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPromise {
    _unused: [u8; 0],
}
pub type FridaPromise = _FridaPromise;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPromiseClass {
    _unused: [u8; 0],
}
pub type FridaPromiseClass = _FridaPromiseClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFuture {
    _unused: [u8; 0],
}
pub type FridaFuture = _FridaFuture;
pub type FridaFutureIface = _FridaFutureIface;
pub type FridaFutureCompletionHandler =
    ::std::option::Option<unsafe extern "C" fn(future: *mut FridaFuture, user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaEndpointParameters {
    _unused: [u8; 0],
}
pub type FridaEndpointParameters = _FridaEndpointParameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaEndpointParametersClass {
    _unused: [u8; 0],
}
pub type FridaEndpointParametersClass = _FridaEndpointParametersClass;
pub const FridaWebServiceTransport_FRIDA_WEB_SERVICE_TRANSPORT_PLAIN: FridaWebServiceTransport = 0;
pub const FridaWebServiceTransport_FRIDA_WEB_SERVICE_TRANSPORT_TLS: FridaWebServiceTransport = 1;
pub type FridaWebServiceTransport = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWebService {
    _unused: [u8; 0],
}
pub type FridaWebService = _FridaWebService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWebServiceClass {
    _unused: [u8; 0],
}
pub type FridaWebServiceClass = _FridaWebServiceClass;
pub const FridaWebServiceFlavor_FRIDA_WEB_SERVICE_FLAVOR_CONTROL: FridaWebServiceFlavor = 0;
pub const FridaWebServiceFlavor_FRIDA_WEB_SERVICE_FLAVOR_CLUSTER: FridaWebServiceFlavor = 1;
pub type FridaWebServiceFlavor = ::std::os::raw::c_uint;
pub const FridaPortConflictBehavior_FRIDA_PORT_CONFLICT_BEHAVIOR_FAIL: FridaPortConflictBehavior =
    0;
pub const FridaPortConflictBehavior_FRIDA_PORT_CONFLICT_BEHAVIOR_PICK_NEXT:
    FridaPortConflictBehavior = 1;
pub type FridaPortConflictBehavior = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDynamicInterfaceObserver {
    _unused: [u8; 0],
}
pub type FridaDynamicInterfaceObserver = _FridaDynamicInterfaceObserver;
pub type FridaDynamicInterfaceObserverIface = _FridaDynamicInterfaceObserverIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDynamicInterface {
    _unused: [u8; 0],
}
pub type FridaDynamicInterface = _FridaDynamicInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDynamicInterfaceClass {
    _unused: [u8; 0],
}
pub type FridaDynamicInterfaceClass = _FridaDynamicInterfaceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWebConnection {
    _unused: [u8; 0],
}
pub type FridaWebConnection = _FridaWebConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWebConnectionClass {
    _unused: [u8; 0],
}
pub type FridaWebConnectionClass = _FridaWebConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBufferBuilder {
    _unused: [u8; 0],
}
pub type FridaBufferBuilder = _FridaBufferBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBufferBuilderClass {
    _unused: [u8; 0],
}
pub type FridaBufferBuilderClass = _FridaBufferBuilderClass;
pub const FridaStringTerminator_FRIDA_STRING_TERMINATOR_NONE: FridaStringTerminator = 0;
pub const FridaStringTerminator_FRIDA_STRING_TERMINATOR_NUL: FridaStringTerminator = 1;
pub type FridaStringTerminator = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBuffer {
    _unused: [u8; 0],
}
pub type FridaBuffer = _FridaBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBufferClass {
    _unused: [u8; 0],
}
pub type FridaBufferClass = _FridaBufferClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBufferReader {
    _unused: [u8; 0],
}
pub type FridaBufferReader = _FridaBufferReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBufferReaderClass {
    _unused: [u8; 0],
}
pub type FridaBufferReaderClass = _FridaBufferReaderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaObjectBuilder {
    _unused: [u8; 0],
}
pub type FridaObjectBuilder = _FridaObjectBuilder;
pub type FridaObjectBuilderIface = _FridaObjectBuilderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaObjectReader {
    _unused: [u8; 0],
}
pub type FridaObjectReader = _FridaObjectReader;
pub type FridaObjectReaderIface = _FridaObjectReaderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVariantReader {
    _unused: [u8; 0],
}
pub type FridaVariantReader = _FridaVariantReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVariantReaderClass {
    _unused: [u8; 0],
}
pub type FridaVariantReaderClass = _FridaVariantReaderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJsonObjectBuilder {
    _unused: [u8; 0],
}
pub type FridaJsonObjectBuilder = _FridaJsonObjectBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJsonObjectBuilderClass {
    _unused: [u8; 0],
}
pub type FridaJsonObjectBuilderClass = _FridaJsonObjectBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJsonObjectReader {
    _unused: [u8; 0],
}
pub type FridaJsonObjectReader = _FridaJsonObjectReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJsonObjectReaderClass {
    _unused: [u8; 0],
}
pub type FridaJsonObjectReaderClass = _FridaJsonObjectReaderClass;
pub type FridaFileDescriptor = _FridaFileDescriptor;
pub type FridaFileDescriptorClass = _FridaFileDescriptorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFileDescriptorPrivate {
    _unused: [u8; 0],
}
pub type FridaFileDescriptorPrivate = _FridaFileDescriptorPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPidFileDescriptor {
    _unused: [u8; 0],
}
pub type FridaPidFileDescriptor = _FridaPidFileDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPidFileDescriptorClass {
    _unused: [u8; 0],
}
pub type FridaPidFileDescriptorClass = _FridaPidFileDescriptorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostApplicationInfo {
    pub identifier: *mut gchar,
    pub name: *mut gchar,
    pub pid: guint,
    pub parameters: *mut GHashTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostApplicationInfo"]
        [::std::mem::size_of::<_FridaHostApplicationInfo>() - 32usize];
    ["Alignment of _FridaHostApplicationInfo"]
        [::std::mem::align_of::<_FridaHostApplicationInfo>() - 8usize];
    ["Offset of field: _FridaHostApplicationInfo::identifier"]
        [::std::mem::offset_of!(_FridaHostApplicationInfo, identifier) - 0usize];
    ["Offset of field: _FridaHostApplicationInfo::name"]
        [::std::mem::offset_of!(_FridaHostApplicationInfo, name) - 8usize];
    ["Offset of field: _FridaHostApplicationInfo::pid"]
        [::std::mem::offset_of!(_FridaHostApplicationInfo, pid) - 16usize];
    ["Offset of field: _FridaHostApplicationInfo::parameters"]
        [::std::mem::offset_of!(_FridaHostApplicationInfo, parameters) - 24usize];
};
impl Default for _FridaHostApplicationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostProcessInfo {
    pub pid: guint,
    pub name: *mut gchar,
    pub parameters: *mut GHashTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostProcessInfo"][::std::mem::size_of::<_FridaHostProcessInfo>() - 24usize];
    ["Alignment of _FridaHostProcessInfo"]
        [::std::mem::align_of::<_FridaHostProcessInfo>() - 8usize];
    ["Offset of field: _FridaHostProcessInfo::pid"]
        [::std::mem::offset_of!(_FridaHostProcessInfo, pid) - 0usize];
    ["Offset of field: _FridaHostProcessInfo::name"]
        [::std::mem::offset_of!(_FridaHostProcessInfo, name) - 8usize];
    ["Offset of field: _FridaHostProcessInfo::parameters"]
        [::std::mem::offset_of!(_FridaHostProcessInfo, parameters) - 16usize];
};
impl Default for _FridaHostProcessInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSpawnInfo {
    pub pid: guint,
    pub identifier: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostSpawnInfo"][::std::mem::size_of::<_FridaHostSpawnInfo>() - 16usize];
    ["Alignment of _FridaHostSpawnInfo"][::std::mem::align_of::<_FridaHostSpawnInfo>() - 8usize];
    ["Offset of field: _FridaHostSpawnInfo::pid"]
        [::std::mem::offset_of!(_FridaHostSpawnInfo, pid) - 0usize];
    ["Offset of field: _FridaHostSpawnInfo::identifier"]
        [::std::mem::offset_of!(_FridaHostSpawnInfo, identifier) - 8usize];
};
impl Default for _FridaHostSpawnInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostChildInfo {
    pub pid: guint,
    pub parent_pid: guint,
    pub origin: FridaChildOrigin,
    pub identifier: *mut gchar,
    pub path: *mut gchar,
    pub has_argv: gboolean,
    pub argv: *mut *mut gchar,
    pub argv_length1: gint,
    pub has_envp: gboolean,
    pub envp: *mut *mut gchar,
    pub envp_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostChildInfo"][::std::mem::size_of::<_FridaHostChildInfo>() - 72usize];
    ["Alignment of _FridaHostChildInfo"][::std::mem::align_of::<_FridaHostChildInfo>() - 8usize];
    ["Offset of field: _FridaHostChildInfo::pid"]
        [::std::mem::offset_of!(_FridaHostChildInfo, pid) - 0usize];
    ["Offset of field: _FridaHostChildInfo::parent_pid"]
        [::std::mem::offset_of!(_FridaHostChildInfo, parent_pid) - 4usize];
    ["Offset of field: _FridaHostChildInfo::origin"]
        [::std::mem::offset_of!(_FridaHostChildInfo, origin) - 8usize];
    ["Offset of field: _FridaHostChildInfo::identifier"]
        [::std::mem::offset_of!(_FridaHostChildInfo, identifier) - 16usize];
    ["Offset of field: _FridaHostChildInfo::path"]
        [::std::mem::offset_of!(_FridaHostChildInfo, path) - 24usize];
    ["Offset of field: _FridaHostChildInfo::has_argv"]
        [::std::mem::offset_of!(_FridaHostChildInfo, has_argv) - 32usize];
    ["Offset of field: _FridaHostChildInfo::argv"]
        [::std::mem::offset_of!(_FridaHostChildInfo, argv) - 40usize];
    ["Offset of field: _FridaHostChildInfo::argv_length1"]
        [::std::mem::offset_of!(_FridaHostChildInfo, argv_length1) - 48usize];
    ["Offset of field: _FridaHostChildInfo::has_envp"]
        [::std::mem::offset_of!(_FridaHostChildInfo, has_envp) - 52usize];
    ["Offset of field: _FridaHostChildInfo::envp"]
        [::std::mem::offset_of!(_FridaHostChildInfo, envp) - 56usize];
    ["Offset of field: _FridaHostChildInfo::envp_length1"]
        [::std::mem::offset_of!(_FridaHostChildInfo, envp_length1) - 64usize];
};
impl Default for _FridaHostChildInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSpawnOptions {
    pub has_argv: gboolean,
    pub argv: *mut *mut gchar,
    pub argv_length1: gint,
    pub has_envp: gboolean,
    pub envp: *mut *mut gchar,
    pub envp_length1: gint,
    pub has_env: gboolean,
    pub env: *mut *mut gchar,
    pub env_length1: gint,
    pub cwd: *mut gchar,
    pub stdio: FridaStdio,
    pub aux: *mut GHashTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostSpawnOptions"][::std::mem::size_of::<_FridaHostSpawnOptions>() - 80usize];
    ["Alignment of _FridaHostSpawnOptions"]
        [::std::mem::align_of::<_FridaHostSpawnOptions>() - 8usize];
    ["Offset of field: _FridaHostSpawnOptions::has_argv"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, has_argv) - 0usize];
    ["Offset of field: _FridaHostSpawnOptions::argv"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, argv) - 8usize];
    ["Offset of field: _FridaHostSpawnOptions::argv_length1"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, argv_length1) - 16usize];
    ["Offset of field: _FridaHostSpawnOptions::has_envp"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, has_envp) - 20usize];
    ["Offset of field: _FridaHostSpawnOptions::envp"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, envp) - 24usize];
    ["Offset of field: _FridaHostSpawnOptions::envp_length1"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, envp_length1) - 32usize];
    ["Offset of field: _FridaHostSpawnOptions::has_env"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, has_env) - 36usize];
    ["Offset of field: _FridaHostSpawnOptions::env"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, env) - 40usize];
    ["Offset of field: _FridaHostSpawnOptions::env_length1"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, env_length1) - 48usize];
    ["Offset of field: _FridaHostSpawnOptions::cwd"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, cwd) - 56usize];
    ["Offset of field: _FridaHostSpawnOptions::stdio"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, stdio) - 64usize];
    ["Offset of field: _FridaHostSpawnOptions::aux"]
        [::std::mem::offset_of!(_FridaHostSpawnOptions, aux) - 72usize];
};
impl Default for _FridaHostSpawnOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentSessionId {
    pub handle: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentSessionId"][::std::mem::size_of::<_FridaAgentSessionId>() - 8usize];
    ["Alignment of _FridaAgentSessionId"][::std::mem::align_of::<_FridaAgentSessionId>() - 8usize];
    ["Offset of field: _FridaAgentSessionId::handle"]
        [::std::mem::offset_of!(_FridaAgentSessionId, handle) - 0usize];
};
impl Default for _FridaAgentSessionId {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaInjectorPayloadId {
    pub handle: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaInjectorPayloadId"][::std::mem::size_of::<_FridaInjectorPayloadId>() - 4usize];
    ["Alignment of _FridaInjectorPayloadId"]
        [::std::mem::align_of::<_FridaInjectorPayloadId>() - 4usize];
    ["Offset of field: _FridaInjectorPayloadId::handle"]
        [::std::mem::offset_of!(_FridaInjectorPayloadId, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChannelId {
    pub handle: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaChannelId"][::std::mem::size_of::<_FridaChannelId>() - 8usize];
    ["Alignment of _FridaChannelId"][::std::mem::align_of::<_FridaChannelId>() - 8usize];
    ["Offset of field: _FridaChannelId::handle"]
        [::std::mem::offset_of!(_FridaChannelId, handle) - 0usize];
};
impl Default for _FridaChannelId {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaServiceSessionId {
    pub handle: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaServiceSessionId"][::std::mem::size_of::<_FridaServiceSessionId>() - 8usize];
    ["Alignment of _FridaServiceSessionId"]
        [::std::mem::align_of::<_FridaServiceSessionId>() - 8usize];
    ["Offset of field: _FridaServiceSessionId::handle"]
        [::std::mem::offset_of!(_FridaServiceSessionId, handle) - 0usize];
};
impl Default for _FridaServiceSessionId {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHostSessionIface {
    pub parent_iface: GTypeInterface,
    pub ping: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            interval_seconds: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub ping_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub query_system_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub query_system_parameters_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GHashTable,
    >,
    pub get_frontmost_application: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub get_frontmost_application_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaHostApplicationInfo,
            error: *mut *mut GError,
        ),
    >,
    pub enumerate_applications: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_applications_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostApplicationInfo,
    >,
    pub enumerate_processes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_processes_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostProcessInfo,
    >,
    pub enable_spawn_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_spawn_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub disable_spawn_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub disable_spawn_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub enumerate_pending_spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_pending_spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostSpawnInfo,
    >,
    pub enumerate_pending_children: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_pending_children_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostChildInfo,
    >,
    pub spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            program: *const gchar,
            options: *mut FridaHostSpawnOptions,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub input: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub input_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub kill_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub attach_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaAgentSessionId,
            error: *mut *mut GError,
        ),
    >,
    pub reattach: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            id: *mut FridaAgentSessionId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub reattach_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub inject_library_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            path: *const gchar,
            entrypoint: *const gchar,
            data: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_file_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaInjectorPayloadId,
            error: *mut *mut GError,
        ),
    >,
    pub inject_library_blob: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            pid: guint,
            blob: *mut guint8,
            blob_length1: gint,
            entrypoint: *const gchar,
            data: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_blob_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaInjectorPayloadId,
            error: *mut *mut GError,
        ),
    >,
    pub open_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            address: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_channel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaChannelId,
            error: *mut *mut GError,
        ),
    >,
    pub open_service: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            address: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_service_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaServiceSessionId,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostSessionIface"][::std::mem::size_of::<_FridaHostSessionIface>() - 320usize];
    ["Alignment of _FridaHostSessionIface"]
        [::std::mem::align_of::<_FridaHostSessionIface>() - 8usize];
    ["Offset of field: _FridaHostSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaHostSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaHostSessionIface::ping"]
        [::std::mem::offset_of!(_FridaHostSessionIface, ping) - 16usize];
    ["Offset of field: _FridaHostSessionIface::ping_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, ping_finish) - 24usize];
    ["Offset of field: _FridaHostSessionIface::query_system_parameters"]
        [::std::mem::offset_of!(_FridaHostSessionIface, query_system_parameters) - 32usize];
    ["Offset of field: _FridaHostSessionIface::query_system_parameters_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, query_system_parameters_finish) - 40usize];
    ["Offset of field: _FridaHostSessionIface::get_frontmost_application"]
        [::std::mem::offset_of!(_FridaHostSessionIface, get_frontmost_application) - 48usize];
    ["Offset of field: _FridaHostSessionIface::get_frontmost_application_finish"][::std::mem::offset_of!(
        _FridaHostSessionIface,
        get_frontmost_application_finish
    ) - 56usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_applications"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_applications) - 64usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_applications_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_applications_finish) - 72usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_processes"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_processes) - 80usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_processes_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_processes_finish) - 88usize];
    ["Offset of field: _FridaHostSessionIface::enable_spawn_gating"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enable_spawn_gating) - 96usize];
    ["Offset of field: _FridaHostSessionIface::enable_spawn_gating_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enable_spawn_gating_finish) - 104usize];
    ["Offset of field: _FridaHostSessionIface::disable_spawn_gating"]
        [::std::mem::offset_of!(_FridaHostSessionIface, disable_spawn_gating) - 112usize];
    ["Offset of field: _FridaHostSessionIface::disable_spawn_gating_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, disable_spawn_gating_finish) - 120usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_pending_spawn"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_pending_spawn) - 128usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_pending_spawn_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_pending_spawn_finish) - 136usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_pending_children"]
        [::std::mem::offset_of!(_FridaHostSessionIface, enumerate_pending_children) - 144usize];
    ["Offset of field: _FridaHostSessionIface::enumerate_pending_children_finish"][::std::mem::offset_of!(
        _FridaHostSessionIface,
        enumerate_pending_children_finish
    ) - 152usize];
    ["Offset of field: _FridaHostSessionIface::spawn"]
        [::std::mem::offset_of!(_FridaHostSessionIface, spawn) - 160usize];
    ["Offset of field: _FridaHostSessionIface::spawn_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, spawn_finish) - 168usize];
    ["Offset of field: _FridaHostSessionIface::input"]
        [::std::mem::offset_of!(_FridaHostSessionIface, input) - 176usize];
    ["Offset of field: _FridaHostSessionIface::input_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, input_finish) - 184usize];
    ["Offset of field: _FridaHostSessionIface::resume"]
        [::std::mem::offset_of!(_FridaHostSessionIface, resume) - 192usize];
    ["Offset of field: _FridaHostSessionIface::resume_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, resume_finish) - 200usize];
    ["Offset of field: _FridaHostSessionIface::kill"]
        [::std::mem::offset_of!(_FridaHostSessionIface, kill) - 208usize];
    ["Offset of field: _FridaHostSessionIface::kill_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, kill_finish) - 216usize];
    ["Offset of field: _FridaHostSessionIface::attach"]
        [::std::mem::offset_of!(_FridaHostSessionIface, attach) - 224usize];
    ["Offset of field: _FridaHostSessionIface::attach_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, attach_finish) - 232usize];
    ["Offset of field: _FridaHostSessionIface::reattach"]
        [::std::mem::offset_of!(_FridaHostSessionIface, reattach) - 240usize];
    ["Offset of field: _FridaHostSessionIface::reattach_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, reattach_finish) - 248usize];
    ["Offset of field: _FridaHostSessionIface::inject_library_file"]
        [::std::mem::offset_of!(_FridaHostSessionIface, inject_library_file) - 256usize];
    ["Offset of field: _FridaHostSessionIface::inject_library_file_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, inject_library_file_finish) - 264usize];
    ["Offset of field: _FridaHostSessionIface::inject_library_blob"]
        [::std::mem::offset_of!(_FridaHostSessionIface, inject_library_blob) - 272usize];
    ["Offset of field: _FridaHostSessionIface::inject_library_blob_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, inject_library_blob_finish) - 280usize];
    ["Offset of field: _FridaHostSessionIface::open_channel"]
        [::std::mem::offset_of!(_FridaHostSessionIface, open_channel) - 288usize];
    ["Offset of field: _FridaHostSessionIface::open_channel_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, open_channel_finish) - 296usize];
    ["Offset of field: _FridaHostSessionIface::open_service"]
        [::std::mem::offset_of!(_FridaHostSessionIface, open_service) - 304usize];
    ["Offset of field: _FridaHostSessionIface::open_service_finish"]
        [::std::mem::offset_of!(_FridaHostSessionIface, open_service_finish) - 312usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAgentSessionProviderIface {
    pub parent_iface: GTypeInterface,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            id: *mut FridaAgentSessionId,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub migrate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            id: *mut FridaAgentSessionId,
            to_socket: *mut GSocket,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub migrate_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub unload: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub unload_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentSessionProviderIface"]
        [::std::mem::size_of::<_FridaAgentSessionProviderIface>() - 64usize];
    ["Alignment of _FridaAgentSessionProviderIface"]
        [::std::mem::align_of::<_FridaAgentSessionProviderIface>() - 8usize];
    ["Offset of field: _FridaAgentSessionProviderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaAgentSessionProviderIface::open"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, open) - 16usize];
    ["Offset of field: _FridaAgentSessionProviderIface::open_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, open_finish) - 24usize];
    ["Offset of field: _FridaAgentSessionProviderIface::migrate"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, migrate) - 32usize];
    ["Offset of field: _FridaAgentSessionProviderIface::migrate_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, migrate_finish) - 40usize];
    ["Offset of field: _FridaAgentSessionProviderIface::unload"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, unload) - 48usize];
    ["Offset of field: _FridaAgentSessionProviderIface::unload_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionProviderIface, unload_finish) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAgentScriptId {
    pub handle: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentScriptId"][::std::mem::size_of::<_FridaAgentScriptId>() - 4usize];
    ["Alignment of _FridaAgentScriptId"][::std::mem::align_of::<_FridaAgentScriptId>() - 4usize];
    ["Offset of field: _FridaAgentScriptId::handle"]
        [::std::mem::offset_of!(_FridaAgentScriptId, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentMessage {
    pub kind: FridaAgentMessageKind,
    pub script_id: FridaAgentScriptId,
    pub text: *mut gchar,
    pub has_data: gboolean,
    pub data: *mut guint8,
    pub data_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentMessage"][::std::mem::size_of::<_FridaAgentMessage>() - 40usize];
    ["Alignment of _FridaAgentMessage"][::std::mem::align_of::<_FridaAgentMessage>() - 8usize];
    ["Offset of field: _FridaAgentMessage::kind"]
        [::std::mem::offset_of!(_FridaAgentMessage, kind) - 0usize];
    ["Offset of field: _FridaAgentMessage::script_id"]
        [::std::mem::offset_of!(_FridaAgentMessage, script_id) - 4usize];
    ["Offset of field: _FridaAgentMessage::text"]
        [::std::mem::offset_of!(_FridaAgentMessage, text) - 8usize];
    ["Offset of field: _FridaAgentMessage::has_data"]
        [::std::mem::offset_of!(_FridaAgentMessage, has_data) - 16usize];
    ["Offset of field: _FridaAgentMessage::data"]
        [::std::mem::offset_of!(_FridaAgentMessage, data) - 24usize];
    ["Offset of field: _FridaAgentMessage::data_length1"]
        [::std::mem::offset_of!(_FridaAgentMessage, data_length1) - 32usize];
};
impl Default for _FridaAgentMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaPortalMembershipId {
    pub handle: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPortalMembershipId"]
        [::std::mem::size_of::<_FridaPortalMembershipId>() - 4usize];
    ["Alignment of _FridaPortalMembershipId"]
        [::std::mem::align_of::<_FridaPortalMembershipId>() - 4usize];
    ["Offset of field: _FridaPortalMembershipId::handle"]
        [::std::mem::offset_of!(_FridaPortalMembershipId, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAgentSessionIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub interrupt: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub interrupt_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            rx_batch_id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            tx_batch_id: *mut guint,
            error: *mut *mut GError,
        ),
    >,
    pub enable_child_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_child_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub disable_child_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub disable_child_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub create_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            source: *const gchar,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub create_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaAgentScriptId,
            error: *mut *mut GError,
        ),
    >,
    pub create_script_from_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            bytes: *mut guint8,
            bytes_length1: gint,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub create_script_from_bytes_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaAgentScriptId,
            error: *mut *mut GError,
        ),
    >,
    pub compile_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            source: *const gchar,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub compile_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut guint8,
    >,
    pub snapshot_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            embed_script: *const gchar,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub snapshot_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut guint8,
    >,
    pub destroy_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            script_id: *mut FridaAgentScriptId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub destroy_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub load_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            script_id: *mut FridaAgentScriptId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub load_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub eternalize_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            script_id: *mut FridaAgentScriptId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub eternalize_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub enable_debugger: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            script_id: *mut FridaAgentScriptId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_debugger_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub disable_debugger: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            script_id: *mut FridaAgentScriptId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub disable_debugger_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub post_messages: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            messages: *mut FridaAgentMessage,
            messages_length1: gint,
            batch_id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub post_messages_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub join_portal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            address: *const gchar,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub join_portal_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaPortalMembershipId,
            error: *mut *mut GError,
        ),
    >,
    pub leave_portal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            membership_id: *mut FridaPortalMembershipId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub leave_portal_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub offer_peer_connection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            offer_sdp: *const gchar,
            peer_options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub offer_peer_connection_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            answer_sdp: *mut *mut gchar,
            error: *mut *mut GError,
        ),
    >,
    pub add_candidates: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            candidate_sdps: *mut *mut gchar,
            candidate_sdps_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub add_candidates_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub notify_candidate_gathering_done: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub notify_candidate_gathering_done_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub begin_migration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub begin_migration_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub commit_migration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub commit_migration_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentSessionIface"]
        [::std::mem::size_of::<_FridaAgentSessionIface>() - 368usize];
    ["Alignment of _FridaAgentSessionIface"]
        [::std::mem::align_of::<_FridaAgentSessionIface>() - 8usize];
    ["Offset of field: _FridaAgentSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaAgentSessionIface::close"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, close) - 16usize];
    ["Offset of field: _FridaAgentSessionIface::close_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, close_finish) - 24usize];
    ["Offset of field: _FridaAgentSessionIface::interrupt"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, interrupt) - 32usize];
    ["Offset of field: _FridaAgentSessionIface::interrupt_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, interrupt_finish) - 40usize];
    ["Offset of field: _FridaAgentSessionIface::resume"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, resume) - 48usize];
    ["Offset of field: _FridaAgentSessionIface::resume_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, resume_finish) - 56usize];
    ["Offset of field: _FridaAgentSessionIface::enable_child_gating"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, enable_child_gating) - 64usize];
    ["Offset of field: _FridaAgentSessionIface::enable_child_gating_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, enable_child_gating_finish) - 72usize];
    ["Offset of field: _FridaAgentSessionIface::disable_child_gating"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, disable_child_gating) - 80usize];
    ["Offset of field: _FridaAgentSessionIface::disable_child_gating_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, disable_child_gating_finish) - 88usize];
    ["Offset of field: _FridaAgentSessionIface::create_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, create_script) - 96usize];
    ["Offset of field: _FridaAgentSessionIface::create_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, create_script_finish) - 104usize];
    ["Offset of field: _FridaAgentSessionIface::create_script_from_bytes"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, create_script_from_bytes) - 112usize];
    ["Offset of field: _FridaAgentSessionIface::create_script_from_bytes_finish"][::std::mem::offset_of!(
        _FridaAgentSessionIface,
        create_script_from_bytes_finish
    ) - 120usize];
    ["Offset of field: _FridaAgentSessionIface::compile_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, compile_script) - 128usize];
    ["Offset of field: _FridaAgentSessionIface::compile_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, compile_script_finish) - 136usize];
    ["Offset of field: _FridaAgentSessionIface::snapshot_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, snapshot_script) - 144usize];
    ["Offset of field: _FridaAgentSessionIface::snapshot_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, snapshot_script_finish) - 152usize];
    ["Offset of field: _FridaAgentSessionIface::destroy_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, destroy_script) - 160usize];
    ["Offset of field: _FridaAgentSessionIface::destroy_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, destroy_script_finish) - 168usize];
    ["Offset of field: _FridaAgentSessionIface::load_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, load_script) - 176usize];
    ["Offset of field: _FridaAgentSessionIface::load_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, load_script_finish) - 184usize];
    ["Offset of field: _FridaAgentSessionIface::eternalize_script"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, eternalize_script) - 192usize];
    ["Offset of field: _FridaAgentSessionIface::eternalize_script_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, eternalize_script_finish) - 200usize];
    ["Offset of field: _FridaAgentSessionIface::enable_debugger"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, enable_debugger) - 208usize];
    ["Offset of field: _FridaAgentSessionIface::enable_debugger_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, enable_debugger_finish) - 216usize];
    ["Offset of field: _FridaAgentSessionIface::disable_debugger"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, disable_debugger) - 224usize];
    ["Offset of field: _FridaAgentSessionIface::disable_debugger_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, disable_debugger_finish) - 232usize];
    ["Offset of field: _FridaAgentSessionIface::post_messages"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, post_messages) - 240usize];
    ["Offset of field: _FridaAgentSessionIface::post_messages_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, post_messages_finish) - 248usize];
    ["Offset of field: _FridaAgentSessionIface::join_portal"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, join_portal) - 256usize];
    ["Offset of field: _FridaAgentSessionIface::join_portal_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, join_portal_finish) - 264usize];
    ["Offset of field: _FridaAgentSessionIface::leave_portal"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, leave_portal) - 272usize];
    ["Offset of field: _FridaAgentSessionIface::leave_portal_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, leave_portal_finish) - 280usize];
    ["Offset of field: _FridaAgentSessionIface::offer_peer_connection"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, offer_peer_connection) - 288usize];
    ["Offset of field: _FridaAgentSessionIface::offer_peer_connection_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, offer_peer_connection_finish) - 296usize];
    ["Offset of field: _FridaAgentSessionIface::add_candidates"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, add_candidates) - 304usize];
    ["Offset of field: _FridaAgentSessionIface::add_candidates_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, add_candidates_finish) - 312usize];
    ["Offset of field: _FridaAgentSessionIface::notify_candidate_gathering_done"][::std::mem::offset_of!(
        _FridaAgentSessionIface,
        notify_candidate_gathering_done
    ) - 320usize];
    ["Offset of field: _FridaAgentSessionIface::notify_candidate_gathering_done_finish"][::std::mem::offset_of!(
        _FridaAgentSessionIface,
        notify_candidate_gathering_done_finish
    )
        - 328usize];
    ["Offset of field: _FridaAgentSessionIface::begin_migration"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, begin_migration) - 336usize];
    ["Offset of field: _FridaAgentSessionIface::begin_migration_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, begin_migration_finish) - 344usize];
    ["Offset of field: _FridaAgentSessionIface::commit_migration"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, commit_migration) - 352usize];
    ["Offset of field: _FridaAgentSessionIface::commit_migration_finish"]
        [::std::mem::offset_of!(_FridaAgentSessionIface, commit_migration_finish) - 360usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHostChildId {
    pub handle: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostChildId"][::std::mem::size_of::<_FridaHostChildId>() - 4usize];
    ["Alignment of _FridaHostChildId"][::std::mem::align_of::<_FridaHostChildId>() - 4usize];
    ["Offset of field: _FridaHostChildId::handle"]
        [::std::mem::offset_of!(_FridaHostChildId, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAgentControllerIface {
    pub parent_iface: GTypeInterface,
    pub prepare_to_fork: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            parent_pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_to_fork_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            parent_injectee_id: *mut guint,
            child_injectee_id: *mut guint,
            child_socket: *mut *mut GSocket,
            result: *mut FridaHostChildId,
            error: *mut *mut GError,
        ),
    >,
    pub prepare_to_specialize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            pid: guint,
            identifier: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_to_specialize_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            specialized_injectee_id: *mut guint,
            specialized_pipe_address: *mut *mut gchar,
            result: *mut FridaHostChildId,
            error: *mut *mut GError,
        ),
    >,
    pub recreate_agent_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            pid: guint,
            injectee_id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub recreate_agent_thread_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub wait_for_permission_to_resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            id: *mut FridaHostChildId,
            info: *mut FridaHostChildInfo,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub wait_for_permission_to_resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub prepare_to_exec: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            info: *mut FridaHostChildInfo,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_to_exec_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel_exec: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub cancel_exec_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub acknowledge_spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            info: *mut FridaHostChildInfo,
            start_state: FridaSpawnStartState,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub acknowledge_spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentController,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentControllerIface"]
        [::std::mem::size_of::<_FridaAgentControllerIface>() - 128usize];
    ["Alignment of _FridaAgentControllerIface"]
        [::std::mem::align_of::<_FridaAgentControllerIface>() - 8usize];
    ["Offset of field: _FridaAgentControllerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_fork"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, prepare_to_fork) - 16usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_fork_finish"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, prepare_to_fork_finish) - 24usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_specialize"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, prepare_to_specialize) - 32usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_specialize_finish"][::std::mem::offset_of!(
        _FridaAgentControllerIface,
        prepare_to_specialize_finish
    ) - 40usize];
    ["Offset of field: _FridaAgentControllerIface::recreate_agent_thread"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, recreate_agent_thread) - 48usize];
    ["Offset of field: _FridaAgentControllerIface::recreate_agent_thread_finish"][::std::mem::offset_of!(
        _FridaAgentControllerIface,
        recreate_agent_thread_finish
    ) - 56usize];
    ["Offset of field: _FridaAgentControllerIface::wait_for_permission_to_resume"][::std::mem::offset_of!(
        _FridaAgentControllerIface,
        wait_for_permission_to_resume
    ) - 64usize];
    ["Offset of field: _FridaAgentControllerIface::wait_for_permission_to_resume_finish"][::std::mem::offset_of!(
        _FridaAgentControllerIface,
        wait_for_permission_to_resume_finish
    )
        - 72usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_exec"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, prepare_to_exec) - 80usize];
    ["Offset of field: _FridaAgentControllerIface::prepare_to_exec_finish"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, prepare_to_exec_finish) - 88usize];
    ["Offset of field: _FridaAgentControllerIface::cancel_exec"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, cancel_exec) - 96usize];
    ["Offset of field: _FridaAgentControllerIface::cancel_exec_finish"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, cancel_exec_finish) - 104usize];
    ["Offset of field: _FridaAgentControllerIface::acknowledge_spawn"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, acknowledge_spawn) - 112usize];
    ["Offset of field: _FridaAgentControllerIface::acknowledge_spawn_finish"]
        [::std::mem::offset_of!(_FridaAgentControllerIface, acknowledge_spawn_finish) - 120usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAgentMessageSinkIface {
    pub parent_iface: GTypeInterface,
    pub post_messages: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentMessageSink,
            messages: *mut FridaAgentMessage,
            messages_length1: gint,
            batch_id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub post_messages_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAgentMessageSink,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAgentMessageSinkIface"]
        [::std::mem::size_of::<_FridaAgentMessageSinkIface>() - 32usize];
    ["Alignment of _FridaAgentMessageSinkIface"]
        [::std::mem::align_of::<_FridaAgentMessageSinkIface>() - 8usize];
    ["Offset of field: _FridaAgentMessageSinkIface::parent_iface"]
        [::std::mem::offset_of!(_FridaAgentMessageSinkIface, parent_iface) - 0usize];
    ["Offset of field: _FridaAgentMessageSinkIface::post_messages"]
        [::std::mem::offset_of!(_FridaAgentMessageSinkIface, post_messages) - 16usize];
    ["Offset of field: _FridaAgentMessageSinkIface::post_messages_finish"]
        [::std::mem::offset_of!(_FridaAgentMessageSinkIface, post_messages_finish) - 24usize];
};
pub const FridaError_FRIDA_ERROR_SERVER_NOT_RUNNING: FridaError = 0;
pub const FridaError_FRIDA_ERROR_EXECUTABLE_NOT_FOUND: FridaError = 1;
pub const FridaError_FRIDA_ERROR_EXECUTABLE_NOT_SUPPORTED: FridaError = 2;
pub const FridaError_FRIDA_ERROR_PROCESS_NOT_FOUND: FridaError = 3;
pub const FridaError_FRIDA_ERROR_PROCESS_NOT_RESPONDING: FridaError = 4;
pub const FridaError_FRIDA_ERROR_INVALID_ARGUMENT: FridaError = 5;
pub const FridaError_FRIDA_ERROR_INVALID_OPERATION: FridaError = 6;
pub const FridaError_FRIDA_ERROR_PERMISSION_DENIED: FridaError = 7;
pub const FridaError_FRIDA_ERROR_ADDRESS_IN_USE: FridaError = 8;
pub const FridaError_FRIDA_ERROR_TIMED_OUT: FridaError = 9;
pub const FridaError_FRIDA_ERROR_NOT_SUPPORTED: FridaError = 10;
pub const FridaError_FRIDA_ERROR_PROTOCOL: FridaError = 11;
pub const FridaError_FRIDA_ERROR_TRANSPORT: FridaError = 12;
pub type FridaError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaGadgetSessionIface {
    pub parent_iface: GTypeInterface,
    pub break_and_resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGadgetSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub break_and_resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGadgetSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub break_and_detach: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGadgetSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub break_and_detach_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGadgetSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGadgetSessionIface"]
        [::std::mem::size_of::<_FridaGadgetSessionIface>() - 48usize];
    ["Alignment of _FridaGadgetSessionIface"]
        [::std::mem::align_of::<_FridaGadgetSessionIface>() - 8usize];
    ["Offset of field: _FridaGadgetSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaGadgetSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaGadgetSessionIface::break_and_resume"]
        [::std::mem::offset_of!(_FridaGadgetSessionIface, break_and_resume) - 16usize];
    ["Offset of field: _FridaGadgetSessionIface::break_and_resume_finish"]
        [::std::mem::offset_of!(_FridaGadgetSessionIface, break_and_resume_finish) - 24usize];
    ["Offset of field: _FridaGadgetSessionIface::break_and_detach"]
        [::std::mem::offset_of!(_FridaGadgetSessionIface, break_and_detach) - 32usize];
    ["Offset of field: _FridaGadgetSessionIface::break_and_detach_finish"]
        [::std::mem::offset_of!(_FridaGadgetSessionIface, break_and_detach_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaChannelIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaChannel,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaChannel,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub input: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaChannel,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub input_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaChannel,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaChannelIface"][::std::mem::size_of::<_FridaChannelIface>() - 48usize];
    ["Alignment of _FridaChannelIface"][::std::mem::align_of::<_FridaChannelIface>() - 8usize];
    ["Offset of field: _FridaChannelIface::parent_iface"]
        [::std::mem::offset_of!(_FridaChannelIface, parent_iface) - 0usize];
    ["Offset of field: _FridaChannelIface::close"]
        [::std::mem::offset_of!(_FridaChannelIface, close) - 16usize];
    ["Offset of field: _FridaChannelIface::close_finish"]
        [::std::mem::offset_of!(_FridaChannelIface, close_finish) - 24usize];
    ["Offset of field: _FridaChannelIface::input"]
        [::std::mem::offset_of!(_FridaChannelIface, input) - 32usize];
    ["Offset of field: _FridaChannelIface::input_finish"]
        [::std::mem::offset_of!(_FridaChannelIface, input_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaServiceSessionIface {
    pub parent_iface: GTypeInterface,
    pub activate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub activate_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub cancel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            parameters: *mut GVariant,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub request_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaServiceSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GVariant,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaServiceSessionIface"]
        [::std::mem::size_of::<_FridaServiceSessionIface>() - 64usize];
    ["Alignment of _FridaServiceSessionIface"]
        [::std::mem::align_of::<_FridaServiceSessionIface>() - 8usize];
    ["Offset of field: _FridaServiceSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaServiceSessionIface::activate"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, activate) - 16usize];
    ["Offset of field: _FridaServiceSessionIface::activate_finish"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, activate_finish) - 24usize];
    ["Offset of field: _FridaServiceSessionIface::cancel"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, cancel) - 32usize];
    ["Offset of field: _FridaServiceSessionIface::cancel_finish"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, cancel_finish) - 40usize];
    ["Offset of field: _FridaServiceSessionIface::request"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, request) - 48usize];
    ["Offset of field: _FridaServiceSessionIface::request_finish"]
        [::std::mem::offset_of!(_FridaServiceSessionIface, request_finish) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaTransportBrokerIface {
    pub parent_iface: GTypeInterface,
    pub open_tcp_transport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaTransportBroker,
            id: *mut FridaAgentSessionId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_tcp_transport_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaTransportBroker,
            _res_: *mut GAsyncResult,
            port: *mut guint16,
            token: *mut *mut gchar,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaTransportBrokerIface"]
        [::std::mem::size_of::<_FridaTransportBrokerIface>() - 32usize];
    ["Alignment of _FridaTransportBrokerIface"]
        [::std::mem::align_of::<_FridaTransportBrokerIface>() - 8usize];
    ["Offset of field: _FridaTransportBrokerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaTransportBrokerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaTransportBrokerIface::open_tcp_transport"]
        [::std::mem::offset_of!(_FridaTransportBrokerIface, open_tcp_transport) - 16usize];
    ["Offset of field: _FridaTransportBrokerIface::open_tcp_transport_finish"]
        [::std::mem::offset_of!(_FridaTransportBrokerIface, open_tcp_transport_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaPortalSessionIface {
    pub parent_iface: GTypeInterface,
    pub join: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaPortalSession,
            app: *mut FridaHostApplicationInfo,
            current_state: FridaSpawnStartState,
            interrupted_sessions: *mut FridaAgentSessionId,
            interrupted_sessions_length1: gint,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub join_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaPortalSession,
            _res_: *mut GAsyncResult,
            next_state: *mut FridaSpawnStartState,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPortalSessionIface"]
        [::std::mem::size_of::<_FridaPortalSessionIface>() - 32usize];
    ["Alignment of _FridaPortalSessionIface"]
        [::std::mem::align_of::<_FridaPortalSessionIface>() - 8usize];
    ["Offset of field: _FridaPortalSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaPortalSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaPortalSessionIface::join"]
        [::std::mem::offset_of!(_FridaPortalSessionIface, join) - 16usize];
    ["Offset of field: _FridaPortalSessionIface::join_finish"]
        [::std::mem::offset_of!(_FridaPortalSessionIface, join_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBusSessionIface {
    pub parent_iface: GTypeInterface,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBusSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub attach_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBusSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub post: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBusSession,
            json: *const gchar,
            has_data: gboolean,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub post_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBusSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBusSessionIface"][::std::mem::size_of::<_FridaBusSessionIface>() - 48usize];
    ["Alignment of _FridaBusSessionIface"]
        [::std::mem::align_of::<_FridaBusSessionIface>() - 8usize];
    ["Offset of field: _FridaBusSessionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBusSessionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBusSessionIface::attach"]
        [::std::mem::offset_of!(_FridaBusSessionIface, attach) - 16usize];
    ["Offset of field: _FridaBusSessionIface::attach_finish"]
        [::std::mem::offset_of!(_FridaBusSessionIface, attach_finish) - 24usize];
    ["Offset of field: _FridaBusSessionIface::post"]
        [::std::mem::offset_of!(_FridaBusSessionIface, post) - 32usize];
    ["Offset of field: _FridaBusSessionIface::post_finish"]
        [::std::mem::offset_of!(_FridaBusSessionIface, post_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaAuthenticationServiceIface {
    pub parent_iface: GTypeInterface,
    pub authenticate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAuthenticationService,
            token: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub authenticate_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaAuthenticationService,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaAuthenticationServiceIface"]
        [::std::mem::size_of::<_FridaAuthenticationServiceIface>() - 32usize];
    ["Alignment of _FridaAuthenticationServiceIface"]
        [::std::mem::align_of::<_FridaAuthenticationServiceIface>() - 8usize];
    ["Offset of field: _FridaAuthenticationServiceIface::parent_iface"]
        [::std::mem::offset_of!(_FridaAuthenticationServiceIface, parent_iface) - 0usize];
    ["Offset of field: _FridaAuthenticationServiceIface::authenticate"]
        [::std::mem::offset_of!(_FridaAuthenticationServiceIface, authenticate) - 16usize];
    ["Offset of field: _FridaAuthenticationServiceIface::authenticate_finish"]
        [::std::mem::offset_of!(_FridaAuthenticationServiceIface, authenticate_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaMappedLibraryBlob {
    pub address: guint64,
    pub size: guint,
    pub allocated_size: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaMappedLibraryBlob"][::std::mem::size_of::<_FridaMappedLibraryBlob>() - 16usize];
    ["Alignment of _FridaMappedLibraryBlob"]
        [::std::mem::align_of::<_FridaMappedLibraryBlob>() - 8usize];
    ["Offset of field: _FridaMappedLibraryBlob::address"]
        [::std::mem::offset_of!(_FridaMappedLibraryBlob, address) - 0usize];
    ["Offset of field: _FridaMappedLibraryBlob::size"]
        [::std::mem::offset_of!(_FridaMappedLibraryBlob, size) - 8usize];
    ["Offset of field: _FridaMappedLibraryBlob::allocated_size"]
        [::std::mem::offset_of!(_FridaMappedLibraryBlob, allocated_size) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaLinuxInjectorState {
    pub frida_ctrlfd: gint,
    pub agent_ctrlfd: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLinuxInjectorState"]
        [::std::mem::size_of::<_FridaLinuxInjectorState>() - 8usize];
    ["Alignment of _FridaLinuxInjectorState"]
        [::std::mem::align_of::<_FridaLinuxInjectorState>() - 4usize];
    ["Offset of field: _FridaLinuxInjectorState::frida_ctrlfd"]
        [::std::mem::offset_of!(_FridaLinuxInjectorState, frida_ctrlfd) - 0usize];
    ["Offset of field: _FridaLinuxInjectorState::agent_ctrlfd"]
        [::std::mem::offset_of!(_FridaLinuxInjectorState, agent_ctrlfd) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaPosixInjectorState {
    pub fifo_fd: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPosixInjectorState"]
        [::std::mem::size_of::<_FridaPosixInjectorState>() - 4usize];
    ["Alignment of _FridaPosixInjectorState"]
        [::std::mem::align_of::<_FridaPosixInjectorState>() - 4usize];
    ["Offset of field: _FridaPosixInjectorState::fifo_fd"]
        [::std::mem::offset_of!(_FridaPosixInjectorState, fifo_fd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCrashInfo {
    pub pid: guint,
    pub process_name: *mut gchar,
    pub summary: *mut gchar,
    pub report: *mut gchar,
    pub parameters: *mut GHashTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaCrashInfo"][::std::mem::size_of::<_FridaCrashInfo>() - 40usize];
    ["Alignment of _FridaCrashInfo"][::std::mem::align_of::<_FridaCrashInfo>() - 8usize];
    ["Offset of field: _FridaCrashInfo::pid"]
        [::std::mem::offset_of!(_FridaCrashInfo, pid) - 0usize];
    ["Offset of field: _FridaCrashInfo::process_name"]
        [::std::mem::offset_of!(_FridaCrashInfo, process_name) - 8usize];
    ["Offset of field: _FridaCrashInfo::summary"]
        [::std::mem::offset_of!(_FridaCrashInfo, summary) - 16usize];
    ["Offset of field: _FridaCrashInfo::report"]
        [::std::mem::offset_of!(_FridaCrashInfo, report) - 24usize];
    ["Offset of field: _FridaCrashInfo::parameters"]
        [::std::mem::offset_of!(_FridaCrashInfo, parameters) - 32usize];
};
impl Default for _FridaCrashInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualStream {
    pub parent_instance: GIOStream,
    pub priv_: *mut FridaVirtualStreamPrivate,
    pub state: FridaVirtualStreamState,
    pub io_cancellable: *mut GCancellable,
    pub main_context: *mut GMainContext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaVirtualStream"][::std::mem::size_of::<_FridaVirtualStream>() - 64usize];
    ["Alignment of _FridaVirtualStream"][::std::mem::align_of::<_FridaVirtualStream>() - 8usize];
    ["Offset of field: _FridaVirtualStream::parent_instance"]
        [::std::mem::offset_of!(_FridaVirtualStream, parent_instance) - 0usize];
    ["Offset of field: _FridaVirtualStream::priv_"]
        [::std::mem::offset_of!(_FridaVirtualStream, priv_) - 32usize];
    ["Offset of field: _FridaVirtualStream::state"]
        [::std::mem::offset_of!(_FridaVirtualStream, state) - 40usize];
    ["Offset of field: _FridaVirtualStream::io_cancellable"]
        [::std::mem::offset_of!(_FridaVirtualStream, io_cancellable) - 48usize];
    ["Offset of field: _FridaVirtualStream::main_context"]
        [::std::mem::offset_of!(_FridaVirtualStream, main_context) - 56usize];
};
impl Default for _FridaVirtualStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaVirtualStreamClass {
    pub parent_class: GIOStreamClass,
    pub query_initial_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaVirtualStream) -> FridaVirtualStreamState,
    >,
    pub query_events:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaVirtualStream) -> GIOCondition>,
    pub handle_close: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaVirtualStream)>,
    pub shutdown_read: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaVirtualStream, error: *mut *mut GError),
    >,
    pub shutdown_write: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaVirtualStream, error: *mut *mut GError),
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaVirtualStream,
            buffer: *mut guint8,
            buffer_length1: gint,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaVirtualStream,
            buffer: *mut guint8,
            buffer_length1: gint,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub update_pending_io:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaVirtualStream)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaVirtualStreamClass"]
        [::std::mem::size_of::<_FridaVirtualStreamClass>() - 320usize];
    ["Alignment of _FridaVirtualStreamClass"]
        [::std::mem::align_of::<_FridaVirtualStreamClass>() - 8usize];
    ["Offset of field: _FridaVirtualStreamClass::parent_class"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, parent_class) - 0usize];
    ["Offset of field: _FridaVirtualStreamClass::query_initial_state"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, query_initial_state) - 256usize];
    ["Offset of field: _FridaVirtualStreamClass::query_events"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, query_events) - 264usize];
    ["Offset of field: _FridaVirtualStreamClass::handle_close"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, handle_close) - 272usize];
    ["Offset of field: _FridaVirtualStreamClass::shutdown_read"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, shutdown_read) - 280usize];
    ["Offset of field: _FridaVirtualStreamClass::shutdown_write"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, shutdown_write) - 288usize];
    ["Offset of field: _FridaVirtualStreamClass::read"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, read) - 296usize];
    ["Offset of field: _FridaVirtualStreamClass::write"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, write) - 304usize];
    ["Offset of field: _FridaVirtualStreamClass::update_pending_io"]
        [::std::mem::offset_of!(_FridaVirtualStreamClass, update_pending_io) - 312usize];
};
impl Default for _FridaVirtualStreamClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaRpcPeerIface {
    pub parent_iface: GTypeInterface,
    pub post_rpc_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaRpcPeer,
            json: *const gchar,
            data: *mut GBytes,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub post_rpc_message_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaRpcPeer,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaRpcPeerIface"][::std::mem::size_of::<_FridaRpcPeerIface>() - 32usize];
    ["Alignment of _FridaRpcPeerIface"][::std::mem::align_of::<_FridaRpcPeerIface>() - 8usize];
    ["Offset of field: _FridaRpcPeerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaRpcPeerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaRpcPeerIface::post_rpc_message"]
        [::std::mem::offset_of!(_FridaRpcPeerIface, post_rpc_message) - 16usize];
    ["Offset of field: _FridaRpcPeerIface::post_rpc_message_finish"]
        [::std::mem::offset_of!(_FridaRpcPeerIface, post_rpc_message_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPeerSessionDescription {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaPeerSessionDescriptionPrivate,
    pub session_id: guint64,
    pub ice_ufrag: *mut gchar,
    pub ice_pwd: *mut gchar,
    pub ice_trickle: gboolean,
    pub fingerprint: *mut gchar,
    pub setup: FridaPeerSetup,
    pub sctp_port: guint16,
    pub max_message_size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPeerSessionDescription"]
        [::std::mem::size_of::<_FridaPeerSessionDescription>() - 80usize];
    ["Alignment of _FridaPeerSessionDescription"]
        [::std::mem::align_of::<_FridaPeerSessionDescription>() - 8usize];
    ["Offset of field: _FridaPeerSessionDescription::parent_instance"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, parent_instance) - 0usize];
    ["Offset of field: _FridaPeerSessionDescription::ref_count"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, ref_count) - 8usize];
    ["Offset of field: _FridaPeerSessionDescription::priv_"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, priv_) - 16usize];
    ["Offset of field: _FridaPeerSessionDescription::session_id"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, session_id) - 24usize];
    ["Offset of field: _FridaPeerSessionDescription::ice_ufrag"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, ice_ufrag) - 32usize];
    ["Offset of field: _FridaPeerSessionDescription::ice_pwd"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, ice_pwd) - 40usize];
    ["Offset of field: _FridaPeerSessionDescription::ice_trickle"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, ice_trickle) - 48usize];
    ["Offset of field: _FridaPeerSessionDescription::fingerprint"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, fingerprint) - 56usize];
    ["Offset of field: _FridaPeerSessionDescription::setup"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, setup) - 64usize];
    ["Offset of field: _FridaPeerSessionDescription::sctp_port"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, sctp_port) - 68usize];
    ["Offset of field: _FridaPeerSessionDescription::max_message_size"]
        [::std::mem::offset_of!(_FridaPeerSessionDescription, max_message_size) - 72usize];
};
impl Default for _FridaPeerSessionDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaPeerSessionDescriptionClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaPeerSessionDescription)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPeerSessionDescriptionClass"]
        [::std::mem::size_of::<_FridaPeerSessionDescriptionClass>() - 16usize];
    ["Alignment of _FridaPeerSessionDescriptionClass"]
        [::std::mem::align_of::<_FridaPeerSessionDescriptionClass>() - 8usize];
    ["Offset of field: _FridaPeerSessionDescriptionClass::parent_class"]
        [::std::mem::offset_of!(_FridaPeerSessionDescriptionClass, parent_class) - 0usize];
    ["Offset of field: _FridaPeerSessionDescriptionClass::finalize"]
        [::std::mem::offset_of!(_FridaPeerSessionDescriptionClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFutureIface {
    pub parent_iface: GTypeInterface,
    pub wait_async: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFuture,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub wait_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFuture,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gpointer,
    >,
    pub then: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFuture,
            handler: FridaFutureCompletionHandler,
            handler_target: gpointer,
            handler_target_destroy_notify: GDestroyNotify,
        ),
    >,
    pub get_result: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFuture, error: *mut *mut GError) -> gpointer,
    >,
    pub get_ready: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFuture) -> gboolean>,
    pub get_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFuture) -> gconstpointer>,
    pub get_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFuture) -> *mut GError>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFutureIface"][::std::mem::size_of::<_FridaFutureIface>() - 72usize];
    ["Alignment of _FridaFutureIface"][::std::mem::align_of::<_FridaFutureIface>() - 8usize];
    ["Offset of field: _FridaFutureIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFutureIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFutureIface::wait_async"]
        [::std::mem::offset_of!(_FridaFutureIface, wait_async) - 16usize];
    ["Offset of field: _FridaFutureIface::wait_finish"]
        [::std::mem::offset_of!(_FridaFutureIface, wait_finish) - 24usize];
    ["Offset of field: _FridaFutureIface::then"]
        [::std::mem::offset_of!(_FridaFutureIface, then) - 32usize];
    ["Offset of field: _FridaFutureIface::get_result"]
        [::std::mem::offset_of!(_FridaFutureIface, get_result) - 40usize];
    ["Offset of field: _FridaFutureIface::get_ready"]
        [::std::mem::offset_of!(_FridaFutureIface, get_ready) - 48usize];
    ["Offset of field: _FridaFutureIface::get_value"]
        [::std::mem::offset_of!(_FridaFutureIface, get_value) - 56usize];
    ["Offset of field: _FridaFutureIface::get_error"]
        [::std::mem::offset_of!(_FridaFutureIface, get_error) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaDynamicInterfaceObserverIface {
    pub parent_iface: GTypeInterface,
    pub start:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaDynamicInterfaceObserver)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaDynamicInterfaceObserverIface"]
        [::std::mem::size_of::<_FridaDynamicInterfaceObserverIface>() - 24usize];
    ["Alignment of _FridaDynamicInterfaceObserverIface"]
        [::std::mem::align_of::<_FridaDynamicInterfaceObserverIface>() - 8usize];
    ["Offset of field: _FridaDynamicInterfaceObserverIface::parent_iface"]
        [::std::mem::offset_of!(_FridaDynamicInterfaceObserverIface, parent_iface) - 0usize];
    ["Offset of field: _FridaDynamicInterfaceObserverIface::start"]
        [::std::mem::offset_of!(_FridaDynamicInterfaceObserverIface, start) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaObjectBuilderIface {
    pub parent_iface: GTypeInterface,
    pub begin_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut FridaObjectBuilder,
    >,
    pub set_member_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            name: *const gchar,
        ) -> *mut FridaObjectBuilder,
    >,
    pub end_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut FridaObjectBuilder,
    >,
    pub begin_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut FridaObjectBuilder,
    >,
    pub end_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut FridaObjectBuilder,
    >,
    pub add_null_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut FridaObjectBuilder,
    >,
    pub add_bool_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: gboolean,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_int64_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: gint64,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_uint64_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: guint64,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_data_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: *mut GBytes,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_string_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: *const gchar,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_uuid_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: *mut guint8,
            val_length1: gint,
        ) -> *mut FridaObjectBuilder,
    >,
    pub add_raw_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectBuilder,
            val: *mut GBytes,
        ) -> *mut FridaObjectBuilder,
    >,
    pub build:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaObjectBuilder) -> *mut GBytes>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaObjectBuilderIface"]
        [::std::mem::size_of::<_FridaObjectBuilderIface>() - 128usize];
    ["Alignment of _FridaObjectBuilderIface"]
        [::std::mem::align_of::<_FridaObjectBuilderIface>() - 8usize];
    ["Offset of field: _FridaObjectBuilderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaObjectBuilderIface::begin_dictionary"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, begin_dictionary) - 16usize];
    ["Offset of field: _FridaObjectBuilderIface::set_member_name"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, set_member_name) - 24usize];
    ["Offset of field: _FridaObjectBuilderIface::end_dictionary"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, end_dictionary) - 32usize];
    ["Offset of field: _FridaObjectBuilderIface::begin_array"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, begin_array) - 40usize];
    ["Offset of field: _FridaObjectBuilderIface::end_array"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, end_array) - 48usize];
    ["Offset of field: _FridaObjectBuilderIface::add_null_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_null_value) - 56usize];
    ["Offset of field: _FridaObjectBuilderIface::add_bool_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_bool_value) - 64usize];
    ["Offset of field: _FridaObjectBuilderIface::add_int64_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_int64_value) - 72usize];
    ["Offset of field: _FridaObjectBuilderIface::add_uint64_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_uint64_value) - 80usize];
    ["Offset of field: _FridaObjectBuilderIface::add_data_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_data_value) - 88usize];
    ["Offset of field: _FridaObjectBuilderIface::add_string_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_string_value) - 96usize];
    ["Offset of field: _FridaObjectBuilderIface::add_uuid_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_uuid_value) - 104usize];
    ["Offset of field: _FridaObjectBuilderIface::add_raw_value"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, add_raw_value) - 112usize];
    ["Offset of field: _FridaObjectBuilderIface::build"]
        [::std::mem::offset_of!(_FridaObjectBuilderIface, build) - 120usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaObjectReaderIface {
    pub parent_iface: GTypeInterface,
    pub has_member: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            name: *const gchar,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub read_member: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            name: *const gchar,
            error: *mut *mut GError,
        ) -> *mut FridaObjectReader,
    >,
    pub end_member: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader) -> *mut FridaObjectReader,
    >,
    pub count_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> guint,
    >,
    pub read_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            index: guint,
            error: *mut *mut GError,
        ) -> *mut FridaObjectReader,
    >,
    pub end_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            error: *mut *mut GError,
        ) -> *mut FridaObjectReader,
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> gboolean,
    >,
    pub get_uint8_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> guint8,
    >,
    pub get_uint16_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> guint16,
    >,
    pub get_int64_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> gint64,
    >,
    pub get_uint64_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> guint64,
    >,
    pub get_data_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaObjectReader, error: *mut *mut GError) -> *mut GBytes,
    >,
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            error: *mut *mut GError,
        ) -> *const gchar,
    >,
    pub get_uuid_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaObjectReader,
            error: *mut *mut GError,
        ) -> *const gchar,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaObjectReaderIface"]
        [::std::mem::size_of::<_FridaObjectReaderIface>() - 128usize];
    ["Alignment of _FridaObjectReaderIface"]
        [::std::mem::align_of::<_FridaObjectReaderIface>() - 8usize];
    ["Offset of field: _FridaObjectReaderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaObjectReaderIface::has_member"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, has_member) - 16usize];
    ["Offset of field: _FridaObjectReaderIface::read_member"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, read_member) - 24usize];
    ["Offset of field: _FridaObjectReaderIface::end_member"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, end_member) - 32usize];
    ["Offset of field: _FridaObjectReaderIface::count_elements"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, count_elements) - 40usize];
    ["Offset of field: _FridaObjectReaderIface::read_element"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, read_element) - 48usize];
    ["Offset of field: _FridaObjectReaderIface::end_element"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, end_element) - 56usize];
    ["Offset of field: _FridaObjectReaderIface::get_bool_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_bool_value) - 64usize];
    ["Offset of field: _FridaObjectReaderIface::get_uint8_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_uint8_value) - 72usize];
    ["Offset of field: _FridaObjectReaderIface::get_uint16_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_uint16_value) - 80usize];
    ["Offset of field: _FridaObjectReaderIface::get_int64_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_int64_value) - 88usize];
    ["Offset of field: _FridaObjectReaderIface::get_uint64_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_uint64_value) - 96usize];
    ["Offset of field: _FridaObjectReaderIface::get_data_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_data_value) - 104usize];
    ["Offset of field: _FridaObjectReaderIface::get_string_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_string_value) - 112usize];
    ["Offset of field: _FridaObjectReaderIface::get_uuid_value"]
        [::std::mem::offset_of!(_FridaObjectReaderIface, get_uuid_value) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFileDescriptor {
    pub parent_instance: GObject,
    pub priv_: *mut FridaFileDescriptorPrivate,
    pub handle: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFileDescriptor"][::std::mem::size_of::<_FridaFileDescriptor>() - 40usize];
    ["Alignment of _FridaFileDescriptor"][::std::mem::align_of::<_FridaFileDescriptor>() - 8usize];
    ["Offset of field: _FridaFileDescriptor::parent_instance"]
        [::std::mem::offset_of!(_FridaFileDescriptor, parent_instance) - 0usize];
    ["Offset of field: _FridaFileDescriptor::priv_"]
        [::std::mem::offset_of!(_FridaFileDescriptor, priv_) - 24usize];
    ["Offset of field: _FridaFileDescriptor::handle"]
        [::std::mem::offset_of!(_FridaFileDescriptor, handle) - 32usize];
};
impl Default for _FridaFileDescriptor {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFileDescriptorClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFileDescriptorClass"]
        [::std::mem::size_of::<_FridaFileDescriptorClass>() - 136usize];
    ["Alignment of _FridaFileDescriptorClass"]
        [::std::mem::align_of::<_FridaFileDescriptorClass>() - 8usize];
    ["Offset of field: _FridaFileDescriptorClass::parent_class"]
        [::std::mem::offset_of!(_FridaFileDescriptorClass, parent_class) - 0usize];
};
impl Default for _FridaFileDescriptorClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn frida_host_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_host_application_info_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_application_info_dup(
        self_: *const FridaHostApplicationInfo,
    ) -> *mut FridaHostApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_host_application_info_free(self_: *mut FridaHostApplicationInfo);
}
unsafe extern "C" {
    pub fn frida_host_application_info_copy(
        self_: *const FridaHostApplicationInfo,
        dest: *mut FridaHostApplicationInfo,
    );
}
unsafe extern "C" {
    pub fn frida_host_application_info_destroy(self_: *mut FridaHostApplicationInfo);
}
unsafe extern "C" {
    pub fn frida_host_process_info_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_process_info_dup(
        self_: *const FridaHostProcessInfo,
    ) -> *mut FridaHostProcessInfo;
}
unsafe extern "C" {
    pub fn frida_host_process_info_free(self_: *mut FridaHostProcessInfo);
}
unsafe extern "C" {
    pub fn frida_host_process_info_copy(
        self_: *const FridaHostProcessInfo,
        dest: *mut FridaHostProcessInfo,
    );
}
unsafe extern "C" {
    pub fn frida_host_process_info_destroy(self_: *mut FridaHostProcessInfo);
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_dup(self_: *const FridaHostSpawnInfo) -> *mut FridaHostSpawnInfo;
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_free(self_: *mut FridaHostSpawnInfo);
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_copy(
        self_: *const FridaHostSpawnInfo,
        dest: *mut FridaHostSpawnInfo,
    );
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_destroy(self_: *mut FridaHostSpawnInfo);
}
unsafe extern "C" {
    pub fn frida_host_child_info_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_child_origin_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_child_info_dup(self_: *const FridaHostChildInfo) -> *mut FridaHostChildInfo;
}
unsafe extern "C" {
    pub fn frida_host_child_info_free(self_: *mut FridaHostChildInfo);
}
unsafe extern "C" {
    pub fn frida_host_child_info_copy(
        self_: *const FridaHostChildInfo,
        dest: *mut FridaHostChildInfo,
    );
}
unsafe extern "C" {
    pub fn frida_host_child_info_destroy(self_: *mut FridaHostChildInfo);
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_stdio_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_dup(
        self_: *const FridaHostSpawnOptions,
    ) -> *mut FridaHostSpawnOptions;
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_free(self_: *mut FridaHostSpawnOptions);
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_copy(
        self_: *const FridaHostSpawnOptions,
        dest: *mut FridaHostSpawnOptions,
    );
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_destroy(self_: *mut FridaHostSpawnOptions);
}
unsafe extern "C" {
    pub fn frida_agent_session_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_session_id_dup(
        self_: *const FridaAgentSessionId,
    ) -> *mut FridaAgentSessionId;
}
unsafe extern "C" {
    pub fn frida_agent_session_id_free(self_: *mut FridaAgentSessionId);
}
unsafe extern "C" {
    pub fn frida_agent_session_id_copy(
        self_: *const FridaAgentSessionId,
        dest: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_id_destroy(self_: *mut FridaAgentSessionId);
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_dup(
        self_: *const FridaInjectorPayloadId,
    ) -> *mut FridaInjectorPayloadId;
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_free(self_: *mut FridaInjectorPayloadId);
}
unsafe extern "C" {
    pub fn frida_channel_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_channel_id_dup(self_: *const FridaChannelId) -> *mut FridaChannelId;
}
unsafe extern "C" {
    pub fn frida_channel_id_free(self_: *mut FridaChannelId);
}
unsafe extern "C" {
    pub fn frida_channel_id_copy(self_: *const FridaChannelId, dest: *mut FridaChannelId);
}
unsafe extern "C" {
    pub fn frida_channel_id_destroy(self_: *mut FridaChannelId);
}
unsafe extern "C" {
    pub fn frida_service_session_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_service_session_id_dup(
        self_: *const FridaServiceSessionId,
    ) -> *mut FridaServiceSessionId;
}
unsafe extern "C" {
    pub fn frida_service_session_id_free(self_: *mut FridaServiceSessionId);
}
unsafe extern "C" {
    pub fn frida_service_session_id_copy(
        self_: *const FridaServiceSessionId,
        dest: *mut FridaServiceSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_id_destroy(self_: *mut FridaServiceSessionId);
}
unsafe extern "C" {
    pub fn frida_host_session_get_type() -> GType;
}
pub type FridaHostSession_autoptr = *mut FridaHostSession;
pub type FridaHostSession_listautoptr = *mut GList;
pub type FridaHostSession_slistautoptr = *mut GSList;
pub type FridaHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_session_ping(
        self_: *mut FridaHostSession,
        interval_seconds: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_ping_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_query_system_parameters(
        self_: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_query_system_parameters_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_host_session_get_frontmost_application(
        self_: *mut FridaHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_get_frontmost_application_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaHostApplicationInfo,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_applications(
        self_: *mut FridaHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_applications_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_processes(
        self_: *mut FridaHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_processes_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostProcessInfo;
}
unsafe extern "C" {
    pub fn frida_host_session_enable_spawn_gating(
        self_: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enable_spawn_gating_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_disable_spawn_gating(
        self_: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_disable_spawn_gating_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_pending_spawn(
        self_: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_pending_spawn_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostSpawnInfo;
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_pending_children(
        self_: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_enumerate_pending_children_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostChildInfo;
}
unsafe extern "C" {
    pub fn frida_host_session_spawn(
        self_: *mut FridaHostSession,
        program: *const gchar,
        options: *mut FridaHostSpawnOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_spawn_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_host_session_input(
        self_: *mut FridaHostSession,
        pid: guint,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_input_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_resume(
        self_: *mut FridaHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_resume_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_kill(
        self_: *mut FridaHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_kill_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_attach(
        self_: *mut FridaHostSession,
        pid: guint,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_attach_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaAgentSessionId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_reattach(
        self_: *mut FridaHostSession,
        id: *mut FridaAgentSessionId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_reattach_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_inject_library_file(
        self_: *mut FridaHostSession,
        pid: guint,
        path: *const gchar,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_inject_library_file_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaInjectorPayloadId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_inject_library_blob(
        self_: *mut FridaHostSession,
        pid: guint,
        blob: *mut guint8,
        blob_length1: gint,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_inject_library_blob_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaInjectorPayloadId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_open_channel(
        self_: *mut FridaHostSession,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_open_channel_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaChannelId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_open_service(
        self_: *mut FridaHostSession,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_open_service_finish(
        self_: *mut FridaHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaServiceSessionId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_get_type() -> GType;
}
pub type FridaAgentSessionProvider_autoptr = *mut FridaAgentSessionProvider;
pub type FridaAgentSessionProvider_listautoptr = *mut GList;
pub type FridaAgentSessionProvider_slistautoptr = *mut GSList;
pub type FridaAgentSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_session_provider_open(
        self_: *mut FridaAgentSessionProvider,
        id: *mut FridaAgentSessionId,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_open_finish(
        self_: *mut FridaAgentSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_migrate(
        self_: *mut FridaAgentSessionProvider,
        id: *mut FridaAgentSessionId,
        to_socket: *mut GSocket,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_migrate_finish(
        self_: *mut FridaAgentSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_unload(
        self_: *mut FridaAgentSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_provider_unload_finish(
        self_: *mut FridaAgentSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_script_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_script_id_dup(self_: *const FridaAgentScriptId) -> *mut FridaAgentScriptId;
}
unsafe extern "C" {
    pub fn frida_agent_script_id_free(self_: *mut FridaAgentScriptId);
}
unsafe extern "C" {
    pub fn frida_agent_message_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_message_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_message_dup(self_: *const FridaAgentMessage) -> *mut FridaAgentMessage;
}
unsafe extern "C" {
    pub fn frida_agent_message_free(self_: *mut FridaAgentMessage);
}
unsafe extern "C" {
    pub fn frida_agent_message_copy(self_: *const FridaAgentMessage, dest: *mut FridaAgentMessage);
}
unsafe extern "C" {
    pub fn frida_agent_message_destroy(self_: *mut FridaAgentMessage);
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_dup(
        self_: *const FridaPortalMembershipId,
    ) -> *mut FridaPortalMembershipId;
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_free(self_: *mut FridaPortalMembershipId);
}
unsafe extern "C" {
    pub fn frida_agent_session_get_type() -> GType;
}
pub type FridaAgentSession_autoptr = *mut FridaAgentSession;
pub type FridaAgentSession_listautoptr = *mut GList;
pub type FridaAgentSession_slistautoptr = *mut GSList;
pub type FridaAgentSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_session_close(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_close_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_interrupt(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_interrupt_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_resume(
        self_: *mut FridaAgentSession,
        rx_batch_id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_resume_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        tx_batch_id: *mut guint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_enable_child_gating(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_enable_child_gating_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_disable_child_gating(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_disable_child_gating_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_create_script(
        self_: *mut FridaAgentSession,
        source: *const gchar,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_create_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaAgentScriptId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_create_script_from_bytes(
        self_: *mut FridaAgentSession,
        bytes: *mut guint8,
        bytes_length1: gint,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_create_script_from_bytes_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaAgentScriptId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_compile_script(
        self_: *mut FridaAgentSession,
        source: *const gchar,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_compile_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn frida_agent_session_snapshot_script(
        self_: *mut FridaAgentSession,
        embed_script: *const gchar,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_snapshot_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn frida_agent_session_destroy_script(
        self_: *mut FridaAgentSession,
        script_id: *mut FridaAgentScriptId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_destroy_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_load_script(
        self_: *mut FridaAgentSession,
        script_id: *mut FridaAgentScriptId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_load_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_eternalize_script(
        self_: *mut FridaAgentSession,
        script_id: *mut FridaAgentScriptId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_eternalize_script_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_enable_debugger(
        self_: *mut FridaAgentSession,
        script_id: *mut FridaAgentScriptId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_enable_debugger_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_disable_debugger(
        self_: *mut FridaAgentSession,
        script_id: *mut FridaAgentScriptId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_disable_debugger_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_post_messages(
        self_: *mut FridaAgentSession,
        messages: *mut FridaAgentMessage,
        messages_length1: gint,
        batch_id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_post_messages_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_join_portal(
        self_: *mut FridaAgentSession,
        address: *const gchar,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_join_portal_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaPortalMembershipId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_leave_portal(
        self_: *mut FridaAgentSession,
        membership_id: *mut FridaPortalMembershipId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_leave_portal_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_offer_peer_connection(
        self_: *mut FridaAgentSession,
        offer_sdp: *const gchar,
        peer_options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_offer_peer_connection_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        answer_sdp: *mut *mut gchar,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_add_candidates(
        self_: *mut FridaAgentSession,
        candidate_sdps: *mut *mut gchar,
        candidate_sdps_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_add_candidates_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_notify_candidate_gathering_done(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_notify_candidate_gathering_done_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_begin_migration(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_begin_migration_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_commit_migration(
        self_: *mut FridaAgentSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_session_commit_migration_finish(
        self_: *mut FridaAgentSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_controller_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_host_child_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_child_id_dup(self_: *const FridaHostChildId) -> *mut FridaHostChildId;
}
unsafe extern "C" {
    pub fn frida_host_child_id_free(self_: *mut FridaHostChildId);
}
unsafe extern "C" {
    pub fn frida_spawn_start_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_controller_get_type() -> GType;
}
pub type FridaAgentController_autoptr = *mut FridaAgentController;
pub type FridaAgentController_listautoptr = *mut GList;
pub type FridaAgentController_slistautoptr = *mut GSList;
pub type FridaAgentController_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_fork(
        self_: *mut FridaAgentController,
        parent_pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_fork_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        parent_injectee_id: *mut guint,
        child_injectee_id: *mut guint,
        child_socket: *mut *mut GSocket,
        result: *mut FridaHostChildId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_specialize(
        self_: *mut FridaAgentController,
        pid: guint,
        identifier: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_specialize_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        specialized_injectee_id: *mut guint,
        specialized_pipe_address: *mut *mut gchar,
        result: *mut FridaHostChildId,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_recreate_agent_thread(
        self_: *mut FridaAgentController,
        pid: guint,
        injectee_id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_recreate_agent_thread_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_wait_for_permission_to_resume(
        self_: *mut FridaAgentController,
        id: *mut FridaHostChildId,
        info: *mut FridaHostChildInfo,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_wait_for_permission_to_resume_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_exec(
        self_: *mut FridaAgentController,
        info: *mut FridaHostChildInfo,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_prepare_to_exec_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_cancel_exec(
        self_: *mut FridaAgentController,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_cancel_exec_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_acknowledge_spawn(
        self_: *mut FridaAgentController,
        info: *mut FridaHostChildInfo,
        start_state: FridaSpawnStartState,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_controller_acknowledge_spawn_finish(
        self_: *mut FridaAgentController,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_sink_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_message_sink_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_message_sink_get_type() -> GType;
}
pub type FridaAgentMessageSink_autoptr = *mut FridaAgentMessageSink;
pub type FridaAgentMessageSink_listautoptr = *mut GList;
pub type FridaAgentMessageSink_slistautoptr = *mut GSList;
pub type FridaAgentMessageSink_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_message_sink_post_messages(
        self_: *mut FridaAgentMessageSink,
        messages: *mut FridaAgentMessage,
        messages_length1: gint,
        batch_id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_sink_post_messages_finish(
        self_: *mut FridaAgentMessageSink,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_init(
        self_: *mut FridaAgentMessage,
        kind: FridaAgentMessageKind,
        script_id: *mut FridaAgentScriptId,
        text: *const gchar,
        has_data: gboolean,
        data: *mut guint8,
        data_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_type() -> GType;
}
pub type FridaAgentMessageTransmitter_autoptr = *mut FridaAgentMessageTransmitter;
pub type FridaAgentMessageTransmitter_listautoptr = *mut GList;
pub type FridaAgentMessageTransmitter_slistautoptr = *mut GSList;
pub type FridaAgentMessageTransmitter_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_new(
        agent_session: *mut FridaAgentSession,
        persist_timeout: guint,
        frida_context: *mut GMainContext,
        dbus_context: *mut GMainContext,
    ) -> *mut FridaAgentMessageTransmitter;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_construct(
        object_type: GType,
        agent_session: *mut FridaAgentSession,
        persist_timeout: guint,
        frida_context: *mut GMainContext,
        dbus_context: *mut GMainContext,
    ) -> *mut FridaAgentMessageTransmitter;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_close(
        self_: *mut FridaAgentMessageTransmitter,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_close_finish(
        self_: *mut FridaAgentMessageTransmitter,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn frida_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_check_okay_to_receive(
        self_: *mut FridaAgentMessageTransmitter,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_interrupt(
        self_: *mut FridaAgentMessageTransmitter,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_resume(
        self_: *mut FridaAgentMessageTransmitter,
        rx_batch_id: guint,
        tx_batch_id: *mut guint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_notify_rx_batch_id(
        self_: *mut FridaAgentMessageTransmitter,
        batch_id: guint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_offer_peer_connection(
        self_: *mut FridaAgentMessageTransmitter,
        offer_sdp: *const gchar,
        peer_options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_offer_peer_connection_finish(
        self_: *mut FridaAgentMessageTransmitter,
        _res_: *mut GAsyncResult,
        answer_sdp: *mut *mut gchar,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_add_candidates(
        self_: *mut FridaAgentMessageTransmitter,
        candidate_sdps: *mut *mut gchar,
        candidate_sdps_length1: gint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_notify_candidate_gathering_done(
        self_: *mut FridaAgentMessageTransmitter,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_begin_migration(
        self_: *mut FridaAgentMessageTransmitter,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_commit_migration(
        self_: *mut FridaAgentMessageTransmitter,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_post_message_from_script(
        self_: *mut FridaAgentMessageTransmitter,
        script_id: *mut FridaAgentScriptId,
        json: *const gchar,
        data: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_post_message_from_debugger(
        self_: *mut FridaAgentMessageTransmitter,
        script_id: *mut FridaAgentScriptId,
        message: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_schedule_on_frida_thread(
        self_: *mut FridaAgentMessageTransmitter,
        function: GSourceFunc,
        function_target: gpointer,
        function_target_destroy_notify: GDestroyNotify,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_schedule_on_dbus_thread(
        self_: *mut FridaAgentMessageTransmitter,
        function: GSourceFunc,
        function_target: gpointer,
        function_target_destroy_notify: GDestroyNotify,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_agent_session(
        self_: *mut FridaAgentMessageTransmitter,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_persist_timeout(
        self_: *mut FridaAgentMessageTransmitter,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_message_sink(
        self_: *mut FridaAgentMessageTransmitter,
    ) -> *mut FridaAgentMessageSink;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_set_message_sink(
        self_: *mut FridaAgentMessageTransmitter,
        value: *mut FridaAgentMessageSink,
    );
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_frida_context(
        self_: *mut FridaAgentMessageTransmitter,
    ) -> *mut GMainContext;
}
unsafe extern "C" {
    pub fn frida_agent_message_transmitter_get_dbus_context(
        self_: *mut FridaAgentMessageTransmitter,
    ) -> *mut GMainContext;
}
unsafe extern "C" {
    pub fn frida_gadget_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gadget_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_gadget_session_get_type() -> GType;
}
pub type FridaGadgetSession_autoptr = *mut FridaGadgetSession;
pub type FridaGadgetSession_listautoptr = *mut GList;
pub type FridaGadgetSession_slistautoptr = *mut GSList;
pub type FridaGadgetSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gadget_session_break_and_resume(
        self_: *mut FridaGadgetSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gadget_session_break_and_resume_finish(
        self_: *mut FridaGadgetSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gadget_session_break_and_detach(
        self_: *mut FridaGadgetSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gadget_session_break_and_detach_finish(
        self_: *mut FridaGadgetSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gadget_breakpoint_action_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_channel_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_channel_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_channel_get_type() -> GType;
}
pub type FridaChannel_autoptr = *mut FridaChannel;
pub type FridaChannel_listautoptr = *mut GList;
pub type FridaChannel_slistautoptr = *mut GSList;
pub type FridaChannel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_channel_close(
        self_: *mut FridaChannel,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_channel_close_finish(
        self_: *mut FridaChannel,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_channel_input(
        self_: *mut FridaChannel,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_channel_input_finish(
        self_: *mut FridaChannel,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_service_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_service_session_get_type() -> GType;
}
pub type FridaServiceSession_autoptr = *mut FridaServiceSession;
pub type FridaServiceSession_listautoptr = *mut GList;
pub type FridaServiceSession_slistautoptr = *mut GSList;
pub type FridaServiceSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_service_session_activate(
        self_: *mut FridaServiceSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_activate_finish(
        self_: *mut FridaServiceSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_cancel(
        self_: *mut FridaServiceSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_cancel_finish(
        self_: *mut FridaServiceSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_request(
        self_: *mut FridaServiceSession,
        parameters: *mut GVariant,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_request_finish(
        self_: *mut FridaServiceSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_transport_broker_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_transport_broker_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_transport_broker_get_type() -> GType;
}
pub type FridaTransportBroker_autoptr = *mut FridaTransportBroker;
pub type FridaTransportBroker_listautoptr = *mut GList;
pub type FridaTransportBroker_slistautoptr = *mut GSList;
pub type FridaTransportBroker_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_transport_broker_open_tcp_transport(
        self_: *mut FridaTransportBroker,
        id: *mut FridaAgentSessionId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_transport_broker_open_tcp_transport_finish(
        self_: *mut FridaTransportBroker,
        _res_: *mut GAsyncResult,
        port: *mut guint16,
        token: *mut *mut gchar,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_portal_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_portal_session_get_type() -> GType;
}
pub type FridaPortalSession_autoptr = *mut FridaPortalSession;
pub type FridaPortalSession_listautoptr = *mut GList;
pub type FridaPortalSession_slistautoptr = *mut GSList;
pub type FridaPortalSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_portal_session_join(
        self_: *mut FridaPortalSession,
        app: *mut FridaHostApplicationInfo,
        current_state: FridaSpawnStartState,
        interrupted_sessions: *mut FridaAgentSessionId,
        interrupted_sessions_length1: gint,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_portal_session_join_finish(
        self_: *mut FridaPortalSession,
        _res_: *mut GAsyncResult,
        next_state: *mut FridaSpawnStartState,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_bus_session_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_bus_session_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_bus_session_get_type() -> GType;
}
pub type FridaBusSession_autoptr = *mut FridaBusSession;
pub type FridaBusSession_listautoptr = *mut GList;
pub type FridaBusSession_slistautoptr = *mut GSList;
pub type FridaBusSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_bus_session_attach(
        self_: *mut FridaBusSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_bus_session_attach_finish(
        self_: *mut FridaBusSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_bus_session_post(
        self_: *mut FridaBusSession,
        json: *const gchar,
        has_data: gboolean,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_bus_session_post_finish(
        self_: *mut FridaBusSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_authentication_service_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_authentication_service_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_authentication_service_get_type() -> GType;
}
pub type FridaAuthenticationService_autoptr = *mut FridaAuthenticationService;
pub type FridaAuthenticationService_listautoptr = *mut GList;
pub type FridaAuthenticationService_slistautoptr = *mut GSList;
pub type FridaAuthenticationService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_authentication_service_authenticate(
        self_: *mut FridaAuthenticationService,
        token: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_authentication_service_authenticate_finish(
        self_: *mut FridaAuthenticationService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_static_authentication_service_get_type() -> GType;
}
pub type FridaStaticAuthenticationService_autoptr = *mut FridaStaticAuthenticationService;
pub type FridaStaticAuthenticationService_listautoptr = *mut GList;
pub type FridaStaticAuthenticationService_slistautoptr = *mut GSList;
pub type FridaStaticAuthenticationService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_static_authentication_service_new(
        token: *const gchar,
    ) -> *mut FridaStaticAuthenticationService;
}
unsafe extern "C" {
    pub fn frida_static_authentication_service_construct(
        object_type: GType,
        token: *const gchar,
    ) -> *mut FridaStaticAuthenticationService;
}
unsafe extern "C" {
    pub fn frida_static_authentication_service_get_token_hash(
        self_: *mut FridaStaticAuthenticationService,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_null_authentication_service_get_type() -> GType;
}
pub type FridaNullAuthenticationService_autoptr = *mut FridaNullAuthenticationService;
pub type FridaNullAuthenticationService_listautoptr = *mut GList;
pub type FridaNullAuthenticationService_slistautoptr = *mut GSList;
pub type FridaNullAuthenticationService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_null_authentication_service_new() -> *mut FridaNullAuthenticationService;
}
unsafe extern "C" {
    pub fn frida_null_authentication_service_construct(
        object_type: GType,
    ) -> *mut FridaNullAuthenticationService;
}
unsafe extern "C" {
    pub fn frida_unauthorized_host_session_get_type() -> GType;
}
pub type FridaUnauthorizedHostSession_autoptr = *mut FridaUnauthorizedHostSession;
pub type FridaUnauthorizedHostSession_listautoptr = *mut GList;
pub type FridaUnauthorizedHostSession_slistautoptr = *mut GSList;
pub type FridaUnauthorizedHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_unauthorized_host_session_new() -> *mut FridaUnauthorizedHostSession;
}
unsafe extern "C" {
    pub fn frida_unauthorized_host_session_construct(
        object_type: GType,
    ) -> *mut FridaUnauthorizedHostSession;
}
unsafe extern "C" {
    pub fn frida_unauthorized_portal_session_get_type() -> GType;
}
pub type FridaUnauthorizedPortalSession_autoptr = *mut FridaUnauthorizedPortalSession;
pub type FridaUnauthorizedPortalSession_listautoptr = *mut GList;
pub type FridaUnauthorizedPortalSession_slistautoptr = *mut GSList;
pub type FridaUnauthorizedPortalSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_unauthorized_portal_session_new() -> *mut FridaUnauthorizedPortalSession;
}
unsafe extern "C" {
    pub fn frida_unauthorized_portal_session_construct(
        object_type: GType,
    ) -> *mut FridaUnauthorizedPortalSession;
}
unsafe extern "C" {
    pub fn frida_unauthorized_bus_session_get_type() -> GType;
}
pub type FridaUnauthorizedBusSession_autoptr = *mut FridaUnauthorizedBusSession;
pub type FridaUnauthorizedBusSession_listautoptr = *mut GList;
pub type FridaUnauthorizedBusSession_slistautoptr = *mut GSList;
pub type FridaUnauthorizedBusSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_unauthorized_bus_session_new() -> *mut FridaUnauthorizedBusSession;
}
unsafe extern "C" {
    pub fn frida_unauthorized_bus_session_construct(
        object_type: GType,
    ) -> *mut FridaUnauthorizedBusSession;
}
unsafe extern "C" {
    pub fn frida_realm_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_realm_from_nick(nick: *const gchar, error: *mut *mut GError) -> FridaRealm;
}
unsafe extern "C" {
    pub fn frida_realm_to_nick(self_: FridaRealm) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_spawn_start_state_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaSpawnStartState;
}
unsafe extern "C" {
    pub fn frida_spawn_start_state_to_nick(self_: FridaSpawnStartState) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_unload_policy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_unload_policy_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaUnloadPolicy;
}
unsafe extern "C" {
    pub fn frida_unload_policy_to_nick(self_: FridaUnloadPolicy) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_init(self_: *mut FridaInjectorPayloadId, handle: guint);
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_hash(id: *mut FridaInjectorPayloadId) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_payload_id_equal(
        a: *mut FridaInjectorPayloadId,
        b: *mut FridaInjectorPayloadId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_mapped_library_blob_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_mapped_library_blob_dup(
        self_: *const FridaMappedLibraryBlob,
    ) -> *mut FridaMappedLibraryBlob;
}
unsafe extern "C" {
    pub fn frida_mapped_library_blob_free(self_: *mut FridaMappedLibraryBlob);
}
unsafe extern "C" {
    pub fn frida_mapped_library_blob_init(
        self_: *mut FridaMappedLibraryBlob,
        address: guint64,
        size: guint,
        allocated_size: guint,
    );
}
unsafe extern "C" {
    pub fn frida_linux_injector_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_linux_injector_state_dup(
        self_: *const FridaLinuxInjectorState,
    ) -> *mut FridaLinuxInjectorState;
}
unsafe extern "C" {
    pub fn frida_linux_injector_state_free(self_: *mut FridaLinuxInjectorState);
}
unsafe extern "C" {
    pub fn frida_posix_injector_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_posix_injector_state_dup(
        self_: *const FridaPosixInjectorState,
    ) -> *mut FridaPosixInjectorState;
}
unsafe extern "C" {
    pub fn frida_posix_injector_state_free(self_: *mut FridaPosixInjectorState);
}
unsafe extern "C" {
    pub fn frida_session_detach_reason_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_session_detach_reason_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaSessionDetachReason;
}
unsafe extern "C" {
    pub fn frida_session_detach_reason_to_nick(self_: FridaSessionDetachReason) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_throw_api_error(e: *mut GError, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_throw_dbus_error(e: *mut GError, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_host_application_info_init(
        self_: *mut FridaHostApplicationInfo,
        identifier: *const gchar,
        name: *const gchar,
        pid: guint,
        parameters: *mut GHashTable,
    );
}
unsafe extern "C" {
    pub fn frida_host_application_info_init_empty(self_: *mut FridaHostApplicationInfo);
}
unsafe extern "C" {
    pub fn frida_host_process_info_init(
        self_: *mut FridaHostProcessInfo,
        pid: guint,
        name: *const gchar,
        parameters: *mut GHashTable,
    );
}
unsafe extern "C" {
    pub fn frida_frontmost_query_options_get_type() -> GType;
}
pub type FridaFrontmostQueryOptions_autoptr = *mut FridaFrontmostQueryOptions;
pub type FridaFrontmostQueryOptions_listautoptr = *mut GList;
pub type FridaFrontmostQueryOptions_slistautoptr = *mut GSList;
pub type FridaFrontmostQueryOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_frontmost_query_options_new() -> *mut FridaFrontmostQueryOptions;
}
unsafe extern "C" {
    pub fn frida_frontmost_query_options_construct(
        object_type: GType,
    ) -> *mut FridaFrontmostQueryOptions;
}
unsafe extern "C" {
    pub fn frida_scope_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_frontmost_query_options_get_scope(
        self_: *mut FridaFrontmostQueryOptions,
    ) -> FridaScope;
}
unsafe extern "C" {
    pub fn frida_frontmost_query_options_set_scope(
        self_: *mut FridaFrontmostQueryOptions,
        value: FridaScope,
    );
}
unsafe extern "C" {
    pub fn frida_application_query_options_get_type() -> GType;
}
pub type FridaApplicationQueryOptions_autoptr = *mut FridaApplicationQueryOptions;
pub type FridaApplicationQueryOptions_listautoptr = *mut GList;
pub type FridaApplicationQueryOptions_slistautoptr = *mut GSList;
pub type FridaApplicationQueryOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_application_query_options_select_identifier(
        self_: *mut FridaApplicationQueryOptions,
        identifier: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_application_query_options_has_selected_identifiers(
        self_: *mut FridaApplicationQueryOptions,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_application_query_options_enumerate_selected_identifiers(
        self_: *mut FridaApplicationQueryOptions,
        func: GFunc,
        func_target: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_application_query_options_new() -> *mut FridaApplicationQueryOptions;
}
unsafe extern "C" {
    pub fn frida_application_query_options_construct(
        object_type: GType,
    ) -> *mut FridaApplicationQueryOptions;
}
unsafe extern "C" {
    pub fn frida_application_query_options_get_scope(
        self_: *mut FridaApplicationQueryOptions,
    ) -> FridaScope;
}
unsafe extern "C" {
    pub fn frida_application_query_options_set_scope(
        self_: *mut FridaApplicationQueryOptions,
        value: FridaScope,
    );
}
unsafe extern "C" {
    pub fn frida_process_query_options_get_type() -> GType;
}
pub type FridaProcessQueryOptions_autoptr = *mut FridaProcessQueryOptions;
pub type FridaProcessQueryOptions_listautoptr = *mut GList;
pub type FridaProcessQueryOptions_slistautoptr = *mut GSList;
pub type FridaProcessQueryOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_process_query_options_select_pid(self_: *mut FridaProcessQueryOptions, pid: guint);
}
unsafe extern "C" {
    pub fn frida_process_query_options_has_selected_pids(
        self_: *mut FridaProcessQueryOptions,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_process_query_options_enumerate_selected_pids(
        self_: *mut FridaProcessQueryOptions,
        func: GFunc,
        func_target: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_process_query_options_new() -> *mut FridaProcessQueryOptions;
}
unsafe extern "C" {
    pub fn frida_process_query_options_construct(
        object_type: GType,
    ) -> *mut FridaProcessQueryOptions;
}
unsafe extern "C" {
    pub fn frida_process_query_options_get_scope(
        self_: *mut FridaProcessQueryOptions,
    ) -> FridaScope;
}
unsafe extern "C" {
    pub fn frida_process_query_options_set_scope(
        self_: *mut FridaProcessQueryOptions,
        value: FridaScope,
    );
}
unsafe extern "C" {
    pub fn frida_scope_from_nick(nick: *const gchar, error: *mut *mut GError) -> FridaScope;
}
unsafe extern "C" {
    pub fn frida_scope_to_nick(self_: FridaScope) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_init(self_: *mut FridaHostSpawnOptions);
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_compute_argv(
        self_: *mut FridaHostSpawnOptions,
        path: *const gchar,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_host_spawn_options_compute_envp(
        self_: *mut FridaHostSpawnOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_session_options_get_type() -> GType;
}
pub type FridaSessionOptions_autoptr = *mut FridaSessionOptions;
pub type FridaSessionOptions_listautoptr = *mut GList;
pub type FridaSessionOptions_slistautoptr = *mut GSList;
pub type FridaSessionOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_session_options_new() -> *mut FridaSessionOptions;
}
unsafe extern "C" {
    pub fn frida_session_options_construct(object_type: GType) -> *mut FridaSessionOptions;
}
unsafe extern "C" {
    pub fn frida_session_options_get_realm(self_: *mut FridaSessionOptions) -> FridaRealm;
}
unsafe extern "C" {
    pub fn frida_session_options_set_realm(self_: *mut FridaSessionOptions, value: FridaRealm);
}
unsafe extern "C" {
    pub fn frida_session_options_get_persist_timeout(self_: *mut FridaSessionOptions) -> guint;
}
unsafe extern "C" {
    pub fn frida_session_options_set_persist_timeout(self_: *mut FridaSessionOptions, value: guint);
}
unsafe extern "C" {
    pub fn frida_session_options_get_emulated_agent_path(
        self_: *mut FridaSessionOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_session_options_set_emulated_agent_path(
        self_: *mut FridaSessionOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_stdio_from_nick(nick: *const gchar, error: *mut *mut GError) -> FridaStdio;
}
unsafe extern "C" {
    pub fn frida_stdio_to_nick(self_: FridaStdio) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_host_spawn_info_init(
        self_: *mut FridaHostSpawnInfo,
        pid: guint,
        identifier: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_host_child_id_init(self_: *mut FridaHostChildId, handle: guint);
}
unsafe extern "C" {
    pub fn frida_host_child_id_hash(id: *mut FridaHostChildId) -> guint;
}
unsafe extern "C" {
    pub fn frida_host_child_id_equal(
        a: *mut FridaHostChildId,
        b: *mut FridaHostChildId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_host_child_info_init(
        self_: *mut FridaHostChildInfo,
        pid: guint,
        parent_pid: guint,
        origin: FridaChildOrigin,
    );
}
unsafe extern "C" {
    pub fn frida_child_origin_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaChildOrigin;
}
unsafe extern "C" {
    pub fn frida_child_origin_to_nick(self_: FridaChildOrigin) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_crash_info_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_crash_info_dup(self_: *const FridaCrashInfo) -> *mut FridaCrashInfo;
}
unsafe extern "C" {
    pub fn frida_crash_info_free(self_: *mut FridaCrashInfo);
}
unsafe extern "C" {
    pub fn frida_crash_info_copy(self_: *const FridaCrashInfo, dest: *mut FridaCrashInfo);
}
unsafe extern "C" {
    pub fn frida_crash_info_destroy(self_: *mut FridaCrashInfo);
}
unsafe extern "C" {
    pub fn frida_crash_info_init(
        self_: *mut FridaCrashInfo,
        pid: guint,
        process_name: *const gchar,
        summary: *const gchar,
        report: *const gchar,
        parameters: *mut GHashTable,
    );
}
unsafe extern "C" {
    pub fn frida_crash_info_init_empty(self_: *mut FridaCrashInfo);
}
unsafe extern "C" {
    pub fn frida_agent_session_id_init(self_: *mut FridaAgentSessionId, handle: *const gchar);
}
unsafe extern "C" {
    pub fn frida_agent_session_id_init_generate(self_: *mut FridaAgentSessionId);
}
unsafe extern "C" {
    pub fn frida_agent_session_id_hash(id: *mut FridaAgentSessionId) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_session_id_equal(
        a: *mut FridaAgentSessionId,
        b: *mut FridaAgentSessionId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_channel_id_init(self_: *mut FridaChannelId, handle: *const gchar);
}
unsafe extern "C" {
    pub fn frida_channel_id_init_generate(self_: *mut FridaChannelId);
}
unsafe extern "C" {
    pub fn frida_channel_id_hash(id: *mut FridaChannelId) -> guint;
}
unsafe extern "C" {
    pub fn frida_channel_id_equal(a: *mut FridaChannelId, b: *mut FridaChannelId) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_service_session_id_init(self_: *mut FridaServiceSessionId, handle: *const gchar);
}
unsafe extern "C" {
    pub fn frida_service_session_id_init_generate(self_: *mut FridaServiceSessionId);
}
unsafe extern "C" {
    pub fn frida_service_session_id_hash(id: *mut FridaServiceSessionId) -> guint;
}
unsafe extern "C" {
    pub fn frida_service_session_id_equal(
        a: *mut FridaServiceSessionId,
        b: *mut FridaServiceSessionId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_agent_script_id_init(self_: *mut FridaAgentScriptId, handle: guint);
}
unsafe extern "C" {
    pub fn frida_agent_script_id_hash(id: *mut FridaAgentScriptId) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_script_id_equal(
        a: *mut FridaAgentScriptId,
        b: *mut FridaAgentScriptId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_script_options_get_type() -> GType;
}
pub type FridaScriptOptions_autoptr = *mut FridaScriptOptions;
pub type FridaScriptOptions_listautoptr = *mut GList;
pub type FridaScriptOptions_slistautoptr = *mut GSList;
pub type FridaScriptOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_script_options_new() -> *mut FridaScriptOptions;
}
unsafe extern "C" {
    pub fn frida_script_options_construct(object_type: GType) -> *mut FridaScriptOptions;
}
unsafe extern "C" {
    pub fn frida_script_options_get_name(self_: *mut FridaScriptOptions) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_script_options_set_name(self_: *mut FridaScriptOptions, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_script_options_get_snapshot(self_: *mut FridaScriptOptions) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_script_options_set_snapshot(self_: *mut FridaScriptOptions, value: *mut GBytes);
}
unsafe extern "C" {
    pub fn frida_snapshot_transport_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_script_options_get_snapshot_transport(
        self_: *mut FridaScriptOptions,
    ) -> FridaSnapshotTransport;
}
unsafe extern "C" {
    pub fn frida_script_options_set_snapshot_transport(
        self_: *mut FridaScriptOptions,
        value: FridaSnapshotTransport,
    );
}
unsafe extern "C" {
    pub fn frida_script_runtime_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_script_options_get_runtime(self_: *mut FridaScriptOptions) -> FridaScriptRuntime;
}
unsafe extern "C" {
    pub fn frida_script_options_set_runtime(
        self_: *mut FridaScriptOptions,
        value: FridaScriptRuntime,
    );
}
unsafe extern "C" {
    pub fn frida_snapshot_options_get_type() -> GType;
}
pub type FridaSnapshotOptions_autoptr = *mut FridaSnapshotOptions;
pub type FridaSnapshotOptions_listautoptr = *mut GList;
pub type FridaSnapshotOptions_slistautoptr = *mut GSList;
pub type FridaSnapshotOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_snapshot_options_new() -> *mut FridaSnapshotOptions;
}
unsafe extern "C" {
    pub fn frida_snapshot_options_construct(object_type: GType) -> *mut FridaSnapshotOptions;
}
unsafe extern "C" {
    pub fn frida_snapshot_options_get_warmup_script(
        self_: *mut FridaSnapshotOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_snapshot_options_set_warmup_script(
        self_: *mut FridaSnapshotOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_snapshot_options_get_runtime(
        self_: *mut FridaSnapshotOptions,
    ) -> FridaScriptRuntime;
}
unsafe extern "C" {
    pub fn frida_snapshot_options_set_runtime(
        self_: *mut FridaSnapshotOptions,
        value: FridaScriptRuntime,
    );
}
unsafe extern "C" {
    pub fn frida_script_runtime_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaScriptRuntime;
}
unsafe extern "C" {
    pub fn frida_script_runtime_to_nick(self_: FridaScriptRuntime) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_init(self_: *mut FridaPortalMembershipId, handle: guint);
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_hash(id: *mut FridaPortalMembershipId) -> guint;
}
unsafe extern "C" {
    pub fn frida_portal_membership_id_equal(
        a: *mut FridaPortalMembershipId,
        b: *mut FridaPortalMembershipId,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_portal_options_get_type() -> GType;
}
pub type FridaPortalOptions_autoptr = *mut FridaPortalOptions;
pub type FridaPortalOptions_listautoptr = *mut GList;
pub type FridaPortalOptions_slistautoptr = *mut GSList;
pub type FridaPortalOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_portal_options_new() -> *mut FridaPortalOptions;
}
unsafe extern "C" {
    pub fn frida_portal_options_construct(object_type: GType) -> *mut FridaPortalOptions;
}
unsafe extern "C" {
    pub fn frida_portal_options_get_certificate(
        self_: *mut FridaPortalOptions,
    ) -> *mut GTlsCertificate;
}
unsafe extern "C" {
    pub fn frida_portal_options_set_certificate(
        self_: *mut FridaPortalOptions,
        value: *mut GTlsCertificate,
    );
}
unsafe extern "C" {
    pub fn frida_portal_options_get_token(self_: *mut FridaPortalOptions) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_portal_options_set_token(self_: *mut FridaPortalOptions, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_portal_options_get_acl(
        self_: *mut FridaPortalOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_portal_options_set_acl(
        self_: *mut FridaPortalOptions,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_peer_options_get_type() -> GType;
}
pub type FridaPeerOptions_autoptr = *mut FridaPeerOptions;
pub type FridaPeerOptions_listautoptr = *mut GList;
pub type FridaPeerOptions_slistautoptr = *mut GSList;
pub type FridaPeerOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_peer_options_clear_relays(self_: *mut FridaPeerOptions);
}
unsafe extern "C" {
    pub fn frida_relay_get_type() -> GType;
}
pub type FridaRelay_autoptr = *mut FridaRelay;
pub type FridaRelay_listautoptr = *mut GList;
pub type FridaRelay_slistautoptr = *mut GSList;
pub type FridaRelay_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_peer_options_add_relay(self_: *mut FridaPeerOptions, relay: *mut FridaRelay);
}
unsafe extern "C" {
    pub fn frida_peer_options_enumerate_relays(
        self_: *mut FridaPeerOptions,
        func: GFunc,
        func_target: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_peer_options_new() -> *mut FridaPeerOptions;
}
unsafe extern "C" {
    pub fn frida_peer_options_construct(object_type: GType) -> *mut FridaPeerOptions;
}
unsafe extern "C" {
    pub fn frida_peer_options_get_stun_server(self_: *mut FridaPeerOptions) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_peer_options_set_stun_server(self_: *mut FridaPeerOptions, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_relay_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_relay_new(
        address: *const gchar,
        username: *const gchar,
        password: *const gchar,
        kind: FridaRelayKind,
    ) -> *mut FridaRelay;
}
unsafe extern "C" {
    pub fn frida_relay_construct(
        object_type: GType,
        address: *const gchar,
        username: *const gchar,
        password: *const gchar,
        kind: FridaRelayKind,
    ) -> *mut FridaRelay;
}
unsafe extern "C" {
    pub fn frida_relay_get_address(self_: *mut FridaRelay) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_relay_get_username(self_: *mut FridaRelay) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_relay_get_password(self_: *mut FridaRelay) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_relay_get_kind(self_: *mut FridaRelay) -> FridaRelayKind;
}
unsafe extern "C" {
    pub fn frida_make_parameters_dict() -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_compute_system_parameters() -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_object_path_for_agent_session(id: *mut FridaAgentSessionId) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_object_path_for_agent_message_sink(id: *mut FridaAgentSessionId) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_object_path_for_channel(id: *mut FridaChannelId) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_object_path_for_service_session(id: *mut FridaServiceSessionId) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_marshal_enum_from_nick(
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_marshal_enum_to_nick(
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
        val: gint,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_numeric_int64_hash(val: *mut gint64) -> guint;
}
unsafe extern "C" {
    pub fn frida_numeric_int64_equal(val_a: *mut gint64, val_b: *mut gint64) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_numeric_uint64_hash(val: *mut guint64) -> guint;
}
unsafe extern "C" {
    pub fn frida_numeric_uint64_equal(val_a: *mut guint64, val_b: *mut guint64) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_channel_registry_get_type() -> GType;
}
pub type FridaChannelRegistry_autoptr = *mut FridaChannelRegistry;
pub type FridaChannelRegistry_listautoptr = *mut GList;
pub type FridaChannelRegistry_slistautoptr = *mut GSList;
pub type FridaChannelRegistry_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_channel_registry_clear(self_: *mut FridaChannelRegistry);
}
unsafe extern "C" {
    pub fn frida_channel_registry_register(
        self_: *mut FridaChannelRegistry,
        id: *mut FridaChannelId,
        stream: *mut GIOStream,
    );
}
unsafe extern "C" {
    pub fn frida_channel_registry_link(
        self_: *mut FridaChannelRegistry,
        id: *mut FridaChannelId,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_channel_registry_unlink(self_: *mut FridaChannelRegistry, id: *mut FridaChannelId);
}
unsafe extern "C" {
    pub fn frida_channel_registry_new() -> *mut FridaChannelRegistry;
}
unsafe extern "C" {
    pub fn frida_channel_registry_construct(object_type: GType) -> *mut FridaChannelRegistry;
}
unsafe extern "C" {
    pub fn frida_channel_endpoint_get_type() -> GType;
}
pub type FridaChannelEndpoint_autoptr = *mut FridaChannelEndpoint;
pub type FridaChannelEndpoint_listautoptr = *mut GList;
pub type FridaChannelEndpoint_slistautoptr = *mut GSList;
pub type FridaChannelEndpoint_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_channel_endpoint_new(stream: *mut GIOStream) -> *mut FridaChannelEndpoint;
}
unsafe extern "C" {
    pub fn frida_channel_endpoint_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaChannelEndpoint;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_get_type() -> GType;
}
pub type FridaVirtualStream_autoptr = *mut FridaVirtualStream;
pub type FridaVirtualStream_listautoptr = *mut GList;
pub type FridaVirtualStream_slistautoptr = *mut GSList;
pub type FridaVirtualStream_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_channel_stream_get_type() -> GType;
}
pub type FridaChannelStream_autoptr = *mut FridaChannelStream;
pub type FridaChannelStream_listautoptr = *mut GList;
pub type FridaChannelStream_slistautoptr = *mut GSList;
pub type FridaChannelStream_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_channel_stream_new(channel: *mut FridaChannel) -> *mut FridaChannelStream;
}
unsafe extern "C" {
    pub fn frida_channel_stream_construct(
        object_type: GType,
        channel: *mut FridaChannel,
    ) -> *mut FridaChannelStream;
}
unsafe extern "C" {
    pub fn frida_channel_stream_abandon(self_: *mut FridaChannelStream);
}
unsafe extern "C" {
    pub fn frida_channel_stream_get_channel(self_: *mut FridaChannelStream) -> *mut FridaChannel;
}
unsafe extern "C" {
    pub fn frida_service_session_registry_get_type() -> GType;
}
pub type FridaServiceSessionRegistry_autoptr = *mut FridaServiceSessionRegistry;
pub type FridaServiceSessionRegistry_listautoptr = *mut GList;
pub type FridaServiceSessionRegistry_slistautoptr = *mut GSList;
pub type FridaServiceSessionRegistry_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_service_session_registry_clear(self_: *mut FridaServiceSessionRegistry);
}
unsafe extern "C" {
    pub fn frida_service_session_registry_register(
        self_: *mut FridaServiceSessionRegistry,
        id: *mut FridaServiceSessionId,
        session: *mut FridaServiceSession,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_registry_link(
        self_: *mut FridaServiceSessionRegistry,
        id: *mut FridaServiceSessionId,
        error: *mut *mut GError,
    ) -> *mut FridaServiceSession;
}
unsafe extern "C" {
    pub fn frida_service_session_registry_unlink(
        self_: *mut FridaServiceSessionRegistry,
        id: *mut FridaServiceSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_service_session_registry_new() -> *mut FridaServiceSessionRegistry;
}
unsafe extern "C" {
    pub fn frida_service_session_registry_construct(
        object_type: GType,
    ) -> *mut FridaServiceSessionRegistry;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_query_initial_state(
        self_: *mut FridaVirtualStream,
    ) -> FridaVirtualStreamState;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_query_events(self_: *mut FridaVirtualStream) -> GIOCondition;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_handle_close(self_: *mut FridaVirtualStream);
}
unsafe extern "C" {
    pub fn frida_virtual_stream_shutdown_read(
        self_: *mut FridaVirtualStream,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_virtual_stream_shutdown_write(
        self_: *mut FridaVirtualStream,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_virtual_stream_read(
        self_: *mut FridaVirtualStream,
        buffer: *mut guint8,
        buffer_length1: gint,
        error: *mut *mut GError,
    ) -> gssize;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_write(
        self_: *mut FridaVirtualStream,
        buffer: *mut guint8,
        buffer_length1: gint,
        error: *mut *mut GError,
    ) -> gssize;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_with_state_lock(
        self_: *mut FridaVirtualStream,
        func: FridaVirtualStreamWorkFunc,
        func_target: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_virtual_stream_register_source(
        self_: *mut FridaVirtualStream,
        source: *mut GSource,
        condition: GIOCondition,
    );
}
unsafe extern "C" {
    pub fn frida_virtual_stream_unregister_source(
        self_: *mut FridaVirtualStream,
        source: *mut GSource,
    );
}
unsafe extern "C" {
    pub fn frida_virtual_stream_update_pending_io(self_: *mut FridaVirtualStream);
}
unsafe extern "C" {
    pub fn frida_virtual_stream_construct(object_type: GType) -> *mut FridaVirtualStream;
}
unsafe extern "C" {
    pub fn frida_virtual_stream_get_pending_io(self_: *mut FridaVirtualStream) -> GIOCondition;
}
unsafe extern "C" {
    pub fn frida_virtual_input_stream_get_type() -> GType;
}
pub type FridaVirtualInputStream_autoptr = *mut FridaVirtualInputStream;
pub type FridaVirtualInputStream_listautoptr = *mut GList;
pub type FridaVirtualInputStream_slistautoptr = *mut GSList;
pub type FridaVirtualInputStream_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_virtual_output_stream_get_type() -> GType;
}
pub type FridaVirtualOutputStream_autoptr = *mut FridaVirtualOutputStream;
pub type FridaVirtualOutputStream_listautoptr = *mut GList;
pub type FridaVirtualOutputStream_slistautoptr = *mut GSList;
pub type FridaVirtualOutputStream_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_rpc_client_get_type() -> GType;
}
pub type FridaRpcClient_autoptr = *mut FridaRpcClient;
pub type FridaRpcClient_listautoptr = *mut GList;
pub type FridaRpcClient_slistautoptr = *mut GSList;
pub type FridaRpcClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_rpc_peer_get_type() -> GType;
}
pub type FridaRpcPeer_autoptr = *mut FridaRpcPeer;
pub type FridaRpcPeer_listautoptr = *mut GList;
pub type FridaRpcPeer_slistautoptr = *mut GSList;
pub type FridaRpcPeer_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_rpc_client_new(peer: *mut FridaRpcPeer) -> *mut FridaRpcClient;
}
unsafe extern "C" {
    pub fn frida_rpc_client_construct(
        object_type: GType,
        peer: *mut FridaRpcPeer,
    ) -> *mut FridaRpcClient;
}
unsafe extern "C" {
    pub fn frida_rpc_client_call(
        self_: *mut FridaRpcClient,
        method: *const gchar,
        args: *mut *mut JsonNode,
        args_length1: gint,
        data: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_rpc_client_call_finish(
        self_: *mut FridaRpcClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut JsonNode;
}
unsafe extern "C" {
    pub fn frida_rpc_client_try_handle_message(
        self_: *mut FridaRpcClient,
        json: *const gchar,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_rpc_client_get_peer(self_: *mut FridaRpcClient) -> *mut FridaRpcPeer;
}
unsafe extern "C" {
    pub fn frida_rpc_peer_post_rpc_message(
        self_: *mut FridaRpcPeer,
        json: *const gchar,
        data: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_rpc_peer_post_rpc_message_finish(
        self_: *mut FridaRpcPeer,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_peer_connection_configure_agent(
        agent: *mut NiceAgent,
        stream_id: guint,
        component_id: guint,
        options: *mut FridaPeerOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_peer_connection_configure_agent_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_peer_connection_compute_certificate_fingerprint(
        cert_der: *mut guint8,
        cert_der_length1: gint,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_peer_session_description(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_peer_session_description(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_peer_session_description(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_peer_session_description(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_get_type() -> GType;
}
pub type FridaPeerSessionDescription_autoptr = *mut FridaPeerSessionDescription;
pub type FridaPeerSessionDescription_listautoptr = *mut GList;
pub type FridaPeerSessionDescription_slistautoptr = *mut GSList;
pub type FridaPeerSessionDescription_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_peer_setup_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_parse(
        sdp: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaPeerSessionDescription;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_to_sdp(
        self_: *mut FridaPeerSessionDescription,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_new() -> *mut FridaPeerSessionDescription;
}
unsafe extern "C" {
    pub fn frida_peer_session_description_construct(
        object_type: GType,
    ) -> *mut FridaPeerSessionDescription;
}
unsafe extern "C" {
    pub fn frida_peer_session_id_generate() -> guint64;
}
unsafe extern "C" {
    pub fn frida_peer_setup_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaPeerSetup;
}
unsafe extern "C" {
    pub fn frida_peer_setup_to_nick(self_: FridaPeerSetup) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_type() -> GType;
}
pub type FridaPeerSocket_autoptr = *mut FridaPeerSocket;
pub type FridaPeerSocket_listautoptr = *mut GList;
pub type FridaPeerSocket_slistautoptr = *mut GSList;
pub type FridaPeerSocket_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_peer_socket_new(
        agent: *mut NiceAgent,
        stream_id: guint,
        component_id: guint,
    ) -> *mut FridaPeerSocket;
}
unsafe extern "C" {
    pub fn frida_peer_socket_construct(
        object_type: GType,
        agent: *mut NiceAgent,
        stream_id: guint,
        component_id: guint,
    ) -> *mut FridaPeerSocket;
}
unsafe extern "C" {
    pub fn frida_peer_socket_datagram_receive_messages(
        self_: *mut FridaPeerSocket,
        messages: *mut GInputMessage,
        messages_length1: guint,
        flags: gint,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
unsafe extern "C" {
    pub fn frida_peer_socket_datagram_send_messages(
        self_: *mut FridaPeerSocket,
        messages: *mut GOutputMessage,
        messages_length1: guint,
        flags: gint,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
unsafe extern "C" {
    pub fn frida_peer_socket_datagram_create_source(
        self_: *mut FridaPeerSocket,
        condition: GIOCondition,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
unsafe extern "C" {
    pub fn frida_peer_socket_datagram_condition_check(
        self_: *mut FridaPeerSocket,
        condition: GIOCondition,
    ) -> GIOCondition;
}
unsafe extern "C" {
    pub fn frida_peer_socket_datagram_condition_wait(
        self_: *mut FridaPeerSocket,
        condition: GIOCondition,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_peer_socket_register_source(
        self_: *mut FridaPeerSocket,
        source: *mut GSource,
        condition: GIOCondition,
    );
}
unsafe extern "C" {
    pub fn frida_peer_socket_unregister_source(self_: *mut FridaPeerSocket, source: *mut GSource);
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_agent(self_: *mut FridaPeerSocket) -> *mut NiceAgent;
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_stream_id(self_: *mut FridaPeerSocket) -> guint;
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_component_id(self_: *mut FridaPeerSocket) -> guint;
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_main_context(self_: *mut FridaPeerSocket) -> *mut GMainContext;
}
unsafe extern "C" {
    pub fn frida_peer_socket_get_pending_io(self_: *mut FridaPeerSocket) -> GIOCondition;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_get_type() -> GType;
}
pub type FridaSctpConnection_autoptr = *mut FridaSctpConnection;
pub type FridaSctpConnection_listautoptr = *mut GList;
pub type FridaSctpConnection_slistautoptr = *mut GSList;
pub type FridaSctpConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_sctp_connection_new(
        transport_socket: *mut GDatagramBased,
        setup: FridaPeerSetup,
        port: guint16,
        max_message_size: gsize,
    ) -> *mut FridaSctpConnection;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_construct(
        object_type: GType,
        transport_socket: *mut GDatagramBased,
        setup: FridaPeerSetup,
        port: guint16,
        max_message_size: gsize,
    ) -> *mut FridaSctpConnection;
}
unsafe extern "C" {
    pub fn frida_sctp_shutdown_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_payload_protocol_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_sctp_message_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_get_transport_socket(
        self_: *mut FridaSctpConnection,
    ) -> *mut GDatagramBased;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_get_setup(self_: *mut FridaSctpConnection) -> FridaPeerSetup;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_get_port(self_: *mut FridaSctpConnection) -> guint16;
}
unsafe extern "C" {
    pub fn frida_sctp_connection_get_max_message_size(self_: *mut FridaSctpConnection) -> gsize;
}
unsafe extern "C" {
    pub fn frida_dcep_message_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_generate_certificate(_callback_: GAsyncReadyCallback, _user_data_: gpointer);
}
unsafe extern "C" {
    pub fn frida_generate_certificate_finish(
        _res_: *mut GAsyncResult,
        cert_der: *mut *mut guint8,
        cert_der_length1: *mut gint,
        cert_pem: *mut *mut gchar,
        key_pem: *mut *mut gchar,
    );
}
unsafe extern "C" {
    pub fn frida_get_dbus_context(_callback_: GAsyncReadyCallback, _user_data_: gpointer);
}
unsafe extern "C" {
    pub fn frida_get_dbus_context_finish(_res_: *mut GAsyncResult) -> *mut GMainContext;
}
unsafe extern "C" {
    pub fn frida_invalidate_dbus_context();
}
unsafe extern "C" {
    pub fn frida_dummy_input_stream_get_type() -> GType;
}
pub type FridaDummyInputStream_autoptr = *mut FridaDummyInputStream;
pub type FridaDummyInputStream_listautoptr = *mut GList;
pub type FridaDummyInputStream_slistautoptr = *mut GSList;
pub type FridaDummyInputStream_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_promise_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_promise_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_promise(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_promise(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_promise(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_promise(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_promise_get_type() -> GType;
}
pub type FridaPromise_autoptr = *mut FridaPromise;
pub type FridaPromise_listautoptr = *mut GList;
pub type FridaPromise_slistautoptr = *mut GSList;
pub type FridaPromise_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_promise_new(
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
    ) -> *mut FridaPromise;
}
unsafe extern "C" {
    pub fn frida_promise_construct(
        object_type: GType,
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
    ) -> *mut FridaPromise;
}
unsafe extern "C" {
    pub fn frida_promise_resolve(self_: *mut FridaPromise, _result_: gconstpointer);
}
unsafe extern "C" {
    pub fn frida_promise_reject(self_: *mut FridaPromise, _error_: *mut GError);
}
unsafe extern "C" {
    pub fn frida_future_get_type() -> GType;
}
pub type FridaFuture_autoptr = *mut FridaFuture;
pub type FridaFuture_listautoptr = *mut GList;
pub type FridaFuture_slistautoptr = *mut GSList;
pub type FridaFuture_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_promise_get_future(self_: *mut FridaPromise) -> *mut FridaFuture;
}
unsafe extern "C" {
    pub fn frida_future_wait_async(
        self_: *mut FridaFuture,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_future_wait_finish(
        self_: *mut FridaFuture,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_future_then(
        self_: *mut FridaFuture,
        handler: FridaFutureCompletionHandler,
        handler_target: gpointer,
        handler_target_destroy_notify: GDestroyNotify,
    );
}
unsafe extern "C" {
    pub fn frida_future_get_result(self_: *mut FridaFuture, error: *mut *mut GError) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_future_get_ready(self_: *mut FridaFuture) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_future_get_value(self_: *mut FridaFuture) -> gconstpointer;
}
unsafe extern "C" {
    pub fn frida_future_get_error(self_: *mut FridaFuture) -> *mut GError;
}
unsafe extern "C" {
    pub fn frida_fs_mkdirp(
        dir: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fs_rmtree(
        dir: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fs_rmtree_async(
        dir: *mut GFile,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fs_rmtree_finish(_res_: *mut GAsyncResult, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_fs_read_all_text(
        f: *mut GFile,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fs_read_all_text_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fs_write_all_text(
        f: *mut GFile,
        t: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fs_write_all_text_finish(_res_: *mut GAsyncResult, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_fs_read_all_bytes(
        f: *mut GFile,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fs_read_all_bytes_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fs_write_all_bytes(
        f: *mut GFile,
        b: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fs_write_all_bytes_finish(_res_: *mut GAsyncResult, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_parse_control_address(
        address: *const gchar,
        port: guint16,
        error: *mut *mut GError,
    ) -> *mut GSocketConnectable;
}
unsafe extern "C" {
    pub fn frida_parse_cluster_address(
        address: *const gchar,
        port: guint16,
        error: *mut *mut GError,
    ) -> *mut GSocketConnectable;
}
unsafe extern "C" {
    pub fn frida_parse_socket_address(
        address: *const gchar,
        port: guint16,
        default_address: *const gchar,
        default_port: guint16,
        error: *mut *mut GError,
    ) -> *mut GSocketConnectable;
}
unsafe extern "C" {
    pub fn frida_unix_socket_tune_buffer_sizes(fd: gint);
}
unsafe extern "C" {
    pub fn frida_tcp_enable_nodelay(socket: *mut GSocket);
}
unsafe extern "C" {
    pub fn frida_udp_recv(
        data: *mut guint8,
        data_length1: gint,
        source: *mut GDatagramBased,
        cancellable: *mut GCancellable,
        remote_address: *mut *mut GInetSocketAddress,
        error: *mut *mut GError,
    ) -> gsize;
}
unsafe extern "C" {
    pub fn frida_udp_send(
        data: *mut guint8,
        data_length1: gint,
        sink: *mut GDatagramBased,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_udp_send_to(
        data: *mut guint8,
        data_length1: gint,
        dest_addr: *mut GInetSocketAddress,
        sink: *mut GDatagramBased,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_type() -> GType;
}
pub type FridaEndpointParameters_autoptr = *mut FridaEndpointParameters;
pub type FridaEndpointParameters_listautoptr = *mut GList;
pub type FridaEndpointParameters_slistautoptr = *mut GSList;
pub type FridaEndpointParameters_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_endpoint_parameters_new(
        address: *const gchar,
        port: guint16,
        certificate: *mut GTlsCertificate,
        origin: *const gchar,
        auth_service: *mut FridaAuthenticationService,
        asset_root: *mut GFile,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_construct(
        object_type: GType,
        address: *const gchar,
        port: guint16,
        certificate: *mut GTlsCertificate,
        origin: *const gchar,
        auth_service: *mut FridaAuthenticationService,
        asset_root: *mut GFile,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_address(
        self_: *mut FridaEndpointParameters,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_port(self_: *mut FridaEndpointParameters) -> guint16;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_certificate(
        self_: *mut FridaEndpointParameters,
    ) -> *mut GTlsCertificate;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_origin(
        self_: *mut FridaEndpointParameters,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_auth_service(
        self_: *mut FridaEndpointParameters,
    ) -> *mut FridaAuthenticationService;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_get_asset_root(
        self_: *mut FridaEndpointParameters,
    ) -> *mut GFile;
}
unsafe extern "C" {
    pub fn frida_endpoint_parameters_set_asset_root(
        self_: *mut FridaEndpointParameters,
        value: *mut GFile,
    );
}
unsafe extern "C" {
    pub fn frida_web_service_transport_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_negotiate_connection(
        stream: *mut GIOStream,
        transport: FridaWebServiceTransport,
        host: *const gchar,
        origin: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_negotiate_connection_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_web_service_get_type() -> GType;
}
pub type FridaWebService_autoptr = *mut FridaWebService;
pub type FridaWebService_listautoptr = *mut GList;
pub type FridaWebService_slistautoptr = *mut GSList;
pub type FridaWebService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_web_service_flavor_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_port_conflict_behavior_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_observer_get_type() -> GType;
}
pub type FridaDynamicInterfaceObserver_autoptr = *mut FridaDynamicInterfaceObserver;
pub type FridaDynamicInterfaceObserver_listautoptr = *mut GList;
pub type FridaDynamicInterfaceObserver_slistautoptr = *mut GSList;
pub type FridaDynamicInterfaceObserver_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_web_service_new(
        endpoint_params: *mut FridaEndpointParameters,
        flavor: FridaWebServiceFlavor,
        on_port_conflict: FridaPortConflictBehavior,
        dynif_observer: *mut FridaDynamicInterfaceObserver,
    ) -> *mut FridaWebService;
}
unsafe extern "C" {
    pub fn frida_web_service_construct(
        object_type: GType,
        endpoint_params: *mut FridaEndpointParameters,
        flavor: FridaWebServiceFlavor,
        on_port_conflict: FridaPortConflictBehavior,
        dynif_observer: *mut FridaDynamicInterfaceObserver,
    ) -> *mut FridaWebService;
}
unsafe extern "C" {
    pub fn frida_web_service_start(
        self_: *mut FridaWebService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_web_service_start_finish(
        self_: *mut FridaWebService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_web_service_stop(self_: *mut FridaWebService);
}
unsafe extern "C" {
    pub fn frida_web_service_get_endpoint_params(
        self_: *mut FridaWebService,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_web_service_get_flavor(self_: *mut FridaWebService) -> FridaWebServiceFlavor;
}
unsafe extern "C" {
    pub fn frida_web_service_get_on_port_conflict(
        self_: *mut FridaWebService,
    ) -> FridaPortConflictBehavior;
}
unsafe extern "C" {
    pub fn frida_web_service_get_dynamic_interface_observer(
        self_: *mut FridaWebService,
    ) -> *mut FridaDynamicInterfaceObserver;
}
unsafe extern "C" {
    pub fn frida_web_service_get_listen_address(self_: *mut FridaWebService)
    -> *mut GSocketAddress;
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_observer_start(self_: *mut FridaDynamicInterfaceObserver);
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_get_type() -> GType;
}
pub type FridaDynamicInterface_autoptr = *mut FridaDynamicInterface;
pub type FridaDynamicInterface_listautoptr = *mut GList;
pub type FridaDynamicInterface_slistautoptr = *mut GSList;
pub type FridaDynamicInterface_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_dynamic_interface_new(
        name: *const gchar,
        ip: *mut GInetAddress,
    ) -> *mut FridaDynamicInterface;
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_construct(
        object_type: GType,
        name: *const gchar,
        ip: *mut GInetAddress,
    ) -> *mut FridaDynamicInterface;
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_get_name(self_: *mut FridaDynamicInterface) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_dynamic_interface_get_ip(self_: *mut FridaDynamicInterface) -> *mut GInetAddress;
}
unsafe extern "C" {
    pub fn frida_web_connection_get_type() -> GType;
}
pub type FridaWebConnection_autoptr = *mut FridaWebConnection;
pub type FridaWebConnection_listautoptr = *mut GList;
pub type FridaWebConnection_slistautoptr = *mut GSList;
pub type FridaWebConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_buffer_builder_get_type() -> GType;
}
pub type FridaBufferBuilder_autoptr = *mut FridaBufferBuilder;
pub type FridaBufferBuilder_listautoptr = *mut GList;
pub type FridaBufferBuilder_slistautoptr = *mut GSList;
pub type FridaBufferBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_buffer_builder_new(
        byte_order: ::std::os::raw::c_int,
        pointer_size: guint,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_construct(
        object_type: GType,
        byte_order: ::std::os::raw::c_int,
        pointer_size: guint,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_seek(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_skip(
        self_: *mut FridaBufferBuilder,
        n: gsize,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_align(
        self_: *mut FridaBufferBuilder,
        n: gsize,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_pointer(
        self_: *mut FridaBufferBuilder,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_pointer_to_label(
        self_: *mut FridaBufferBuilder,
        name: *const gchar,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_pointer_to_label_if(
        self_: *mut FridaBufferBuilder,
        present: gboolean,
        name: *const gchar,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_label(
        self_: *mut FridaBufferBuilder,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_size(
        self_: *mut FridaBufferBuilder,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_int8(
        self_: *mut FridaBufferBuilder,
        val: gint8,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_uint8(
        self_: *mut FridaBufferBuilder,
        val: guint8,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_int16(
        self_: *mut FridaBufferBuilder,
        val: gint16,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_uint16(
        self_: *mut FridaBufferBuilder,
        val: guint16,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_int32(
        self_: *mut FridaBufferBuilder,
        val: gint32,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_uint32(
        self_: *mut FridaBufferBuilder,
        val: guint32,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_int64(
        self_: *mut FridaBufferBuilder,
        val: gint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_uint64(
        self_: *mut FridaBufferBuilder,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_float(
        self_: *mut FridaBufferBuilder,
        val: gfloat,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_double(
        self_: *mut FridaBufferBuilder,
        val: gdouble,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_string_terminator_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_string(
        self_: *mut FridaBufferBuilder,
        val: *const gchar,
        terminator: FridaStringTerminator,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_bytes(
        self_: *mut FridaBufferBuilder,
        bytes: *mut GBytes,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_append_data(
        self_: *mut FridaBufferBuilder,
        data: *mut guint8,
        data_length1: gint,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_pointer(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_size(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_int8(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gint8,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_uint8(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint8,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_int16(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gint16,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_uint16(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint16,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_int32(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gint32,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_uint32(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint32,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_int64(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_uint64(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: guint64,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_float(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gfloat,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_double(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: gdouble,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_string(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        val: *const gchar,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_bytes(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        bytes: *mut GBytes,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_write_data(
        self_: *mut FridaBufferBuilder,
        offset: gsize,
        data: *mut guint8,
        data_length1: gint,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_try_build(
        self_: *mut FridaBufferBuilder,
        base_address: guint64,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_build(
        self_: *mut FridaBufferBuilder,
        base_address: guint64,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_address_of(
        self_: *mut FridaBufferBuilder,
        label: *const gchar,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_get_byte_order(
        self_: *mut FridaBufferBuilder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_get_pointer_size(self_: *mut FridaBufferBuilder) -> guint;
}
unsafe extern "C" {
    pub fn frida_buffer_builder_get_offset(self_: *mut FridaBufferBuilder) -> gsize;
}
unsafe extern "C" {
    pub fn frida_buffer_get_type() -> GType;
}
pub type FridaBuffer_autoptr = *mut FridaBuffer;
pub type FridaBuffer_listautoptr = *mut GList;
pub type FridaBuffer_slistautoptr = *mut GSList;
pub type FridaBuffer_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_buffer_new(
        bytes: *mut GBytes,
        byte_order: ::std::os::raw::c_int,
        pointer_size: guint,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_construct(
        object_type: GType,
        bytes: *mut GBytes,
        byte_order: ::std::os::raw::c_int,
        pointer_size: guint,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_pointer(self_: *mut FridaBuffer, offset: gsize) -> guint64;
}
unsafe extern "C" {
    pub fn frida_buffer_write_pointer(self_: *mut FridaBuffer, offset: gsize, val: guint64);
}
unsafe extern "C" {
    pub fn frida_buffer_read_int8(self_: *mut FridaBuffer, offset: gsize) -> gint8;
}
unsafe extern "C" {
    pub fn frida_buffer_write_int8(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: gint8,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_uint8(self_: *mut FridaBuffer, offset: gsize) -> guint8;
}
unsafe extern "C" {
    pub fn frida_buffer_write_uint8(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: guint8,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_int16(self_: *mut FridaBuffer, offset: gsize) -> gint16;
}
unsafe extern "C" {
    pub fn frida_buffer_write_int16(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: gint16,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_uint16(self_: *mut FridaBuffer, offset: gsize) -> guint16;
}
unsafe extern "C" {
    pub fn frida_buffer_write_uint16(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: guint16,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_int32(self_: *mut FridaBuffer, offset: gsize) -> gint32;
}
unsafe extern "C" {
    pub fn frida_buffer_write_int32(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: gint32,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_uint32(self_: *mut FridaBuffer, offset: gsize) -> guint32;
}
unsafe extern "C" {
    pub fn frida_buffer_write_uint32(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: guint32,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_int64(self_: *mut FridaBuffer, offset: gsize) -> gint64;
}
unsafe extern "C" {
    pub fn frida_buffer_write_int64(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: gint64,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_uint64(self_: *mut FridaBuffer, offset: gsize) -> guint64;
}
unsafe extern "C" {
    pub fn frida_buffer_write_uint64(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: guint64,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_float(self_: *mut FridaBuffer, offset: gsize) -> gfloat;
}
unsafe extern "C" {
    pub fn frida_buffer_read_double(self_: *mut FridaBuffer, offset: gsize) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_buffer_read_string(
        self_: *mut FridaBuffer,
        offset: gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_buffer_read_fixed_string(
        self_: *mut FridaBuffer,
        offset: gsize,
        size: gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_buffer_write_string(
        self_: *mut FridaBuffer,
        offset: gsize,
        val: *const gchar,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_read_bytes(
        self_: *mut FridaBuffer,
        offset: gsize,
        size: gsize,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_buffer_write_bytes(
        self_: *mut FridaBuffer,
        offset: gsize,
        bytes: *mut GBytes,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_buffer_get_bytes(self_: *mut FridaBuffer) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_buffer_get_byte_order(self_: *mut FridaBuffer) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_buffer_get_pointer_size(self_: *mut FridaBuffer) -> guint;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_buffer_reader(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_buffer_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_buffer_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_buffer_reader(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_get_type() -> GType;
}
pub type FridaBufferReader_autoptr = *mut FridaBufferReader;
pub type FridaBufferReader_listautoptr = *mut GList;
pub type FridaBufferReader_slistautoptr = *mut GSList;
pub type FridaBufferReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_buffer_reader_new(buf: *mut FridaBuffer) -> *mut FridaBufferReader;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_construct(
        object_type: GType,
        buf: *mut FridaBuffer,
    ) -> *mut FridaBufferReader;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_pointer(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_int8(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gint8;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_uint8(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> guint8;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_int16(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gint16;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_uint16(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_int32(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gint32;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_uint32(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> guint32;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_int64(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gint64;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_uint64(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_float(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gfloat;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_double(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_string(
        self_: *mut FridaBufferReader,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_fixed_string(
        self_: *mut FridaBufferReader,
        size: gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_read_bytes(
        self_: *mut FridaBufferReader,
        size: gsize,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_skip(
        self_: *mut FridaBufferReader,
        n: gsize,
        error: *mut *mut GError,
    ) -> *mut FridaBufferReader;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_get_offset(self_: *mut FridaBufferReader) -> gsize;
}
unsafe extern "C" {
    pub fn frida_buffer_reader_get_available(self_: *mut FridaBufferReader) -> gsize;
}
unsafe extern "C" {
    pub fn frida_make_bytes_with_owner(
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
        data: *mut ::std::os::raw::c_void,
        size: gsize,
        owner: gpointer,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_object_builder_get_type() -> GType;
}
pub type FridaObjectBuilder_autoptr = *mut FridaObjectBuilder;
pub type FridaObjectBuilder_listautoptr = *mut GList;
pub type FridaObjectBuilder_slistautoptr = *mut GSList;
pub type FridaObjectBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_object_builder_begin_dictionary(
        self_: *mut FridaObjectBuilder,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_set_member_name(
        self_: *mut FridaObjectBuilder,
        name: *const gchar,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_end_dictionary(
        self_: *mut FridaObjectBuilder,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_begin_array(
        self_: *mut FridaObjectBuilder,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_end_array(
        self_: *mut FridaObjectBuilder,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_null_value(
        self_: *mut FridaObjectBuilder,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_bool_value(
        self_: *mut FridaObjectBuilder,
        val: gboolean,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_int64_value(
        self_: *mut FridaObjectBuilder,
        val: gint64,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_uint64_value(
        self_: *mut FridaObjectBuilder,
        val: guint64,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_data_value(
        self_: *mut FridaObjectBuilder,
        val: *mut GBytes,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_string_value(
        self_: *mut FridaObjectBuilder,
        val: *const gchar,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_uuid_value(
        self_: *mut FridaObjectBuilder,
        val: *mut guint8,
        val_length1: gint,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_add_raw_value(
        self_: *mut FridaObjectBuilder,
        val: *mut GBytes,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_object_builder_build(self_: *mut FridaObjectBuilder) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_type() -> GType;
}
pub type FridaObjectReader_autoptr = *mut FridaObjectReader;
pub type FridaObjectReader_listautoptr = *mut GList;
pub type FridaObjectReader_slistautoptr = *mut GSList;
pub type FridaObjectReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_object_reader_has_member(
        self_: *mut FridaObjectReader,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_object_reader_read_member(
        self_: *mut FridaObjectReader,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaObjectReader;
}
unsafe extern "C" {
    pub fn frida_object_reader_end_member(self_: *mut FridaObjectReader) -> *mut FridaObjectReader;
}
unsafe extern "C" {
    pub fn frida_object_reader_count_elements(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_object_reader_read_element(
        self_: *mut FridaObjectReader,
        index: guint,
        error: *mut *mut GError,
    ) -> *mut FridaObjectReader;
}
unsafe extern "C" {
    pub fn frida_object_reader_end_element(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> *mut FridaObjectReader;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_bool_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_uint8_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> guint8;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_uint16_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_int64_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> gint64;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_uint64_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_data_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_string_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_object_reader_get_uuid_value(
        self_: *mut FridaObjectReader,
        error: *mut *mut GError,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_variant_reader_get_type() -> GType;
}
pub type FridaVariantReader_autoptr = *mut FridaVariantReader;
pub type FridaVariantReader_listautoptr = *mut GList;
pub type FridaVariantReader_slistautoptr = *mut GSList;
pub type FridaVariantReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_variant_reader_new(v: *mut GVariant) -> *mut FridaVariantReader;
}
unsafe extern "C" {
    pub fn frida_variant_reader_construct(
        object_type: GType,
        v: *mut GVariant,
    ) -> *mut FridaVariantReader;
}
unsafe extern "C" {
    pub fn frida_variant_reader_get_root_object(self_: *mut FridaVariantReader) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_variant_reader_get_current_object(self_: *mut FridaVariantReader)
    -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_json_object_builder_get_type() -> GType;
}
pub type FridaJsonObjectBuilder_autoptr = *mut FridaJsonObjectBuilder;
pub type FridaJsonObjectBuilder_listautoptr = *mut GList;
pub type FridaJsonObjectBuilder_slistautoptr = *mut GSList;
pub type FridaJsonObjectBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_json_object_builder_new() -> *mut FridaJsonObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_json_object_builder_construct(object_type: GType) -> *mut FridaJsonObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_json_object_reader_get_type() -> GType;
}
pub type FridaJsonObjectReader_autoptr = *mut FridaJsonObjectReader;
pub type FridaJsonObjectReader_listautoptr = *mut GList;
pub type FridaJsonObjectReader_slistautoptr = *mut GSList;
pub type FridaJsonObjectReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_json_object_reader_new(
        json: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaJsonObjectReader;
}
unsafe extern "C" {
    pub fn frida_json_object_reader_construct(
        object_type: GType,
        json: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaJsonObjectReader;
}
unsafe extern "C" {
    pub fn frida_check_kernel_version(major: guint, minor: guint) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_file_descriptor_get_type() -> GType;
}
pub type FridaFileDescriptor_autoptr = *mut FridaFileDescriptor;
pub type FridaFileDescriptor_listautoptr = *mut GList;
pub type FridaFileDescriptor_slistautoptr = *mut GSList;
pub type FridaFileDescriptor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_file_descriptor_new(handle: gint) -> *mut FridaFileDescriptor;
}
unsafe extern "C" {
    pub fn frida_file_descriptor_construct(
        object_type: GType,
        handle: gint,
    ) -> *mut FridaFileDescriptor;
}
unsafe extern "C" {
    pub fn frida_file_descriptor_steal(self_: *mut FridaFileDescriptor) -> gint;
}
unsafe extern "C" {
    pub fn frida_pid_file_descriptor_get_type() -> GType;
}
pub type FridaPidFileDescriptor_autoptr = *mut FridaPidFileDescriptor;
pub type FridaPidFileDescriptor_listautoptr = *mut GList;
pub type FridaPidFileDescriptor_slistautoptr = *mut GSList;
pub type FridaPidFileDescriptor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_pid_file_descriptor_is_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn frida_pid_file_descriptor_getfd_is_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn frida_pid_file_descriptor_from_pid(
        pid: guint,
        error: *mut *mut GError,
    ) -> *mut FridaPidFileDescriptor;
}
unsafe extern "C" {
    pub fn frida_pid_file_descriptor_getfd(
        self_: *mut FridaPidFileDescriptor,
        targetfd: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFileDescriptor;
}
unsafe extern "C" {
    pub fn frida_memory_file_descriptor_is_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn frida_memory_file_descriptor_from_bytes(
        name: *const gchar,
        bytes: *mut GBytes,
    ) -> *mut FridaFileDescriptor;
}
pub type GeeForallFunc =
    ::std::option::Option<unsafe extern "C" fn(g: gpointer, user_data: gpointer) -> gboolean>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeIterable {
    _unused: [u8; 0],
}
pub type GeeIterable = _GeeIterable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeCollection {
    _unused: [u8; 0],
}
pub type GeeCollection = _GeeCollection;
pub type GeeAbstractCollection = _GeeAbstractCollection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractCollectionPrivate {
    _unused: [u8; 0],
}
pub type GeeAbstractCollectionPrivate = _GeeAbstractCollectionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeList {
    _unused: [u8; 0],
}
pub type GeeList = _GeeList;
pub type GeeAbstractList = _GeeAbstractList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractListPrivate {
    _unused: [u8; 0],
}
pub type GeeAbstractListPrivate = _GeeAbstractListPrivate;
pub type GeeAbstractBidirList = _GeeAbstractBidirList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractBidirListPrivate {
    _unused: [u8; 0],
}
pub type GeeAbstractBidirListPrivate = _GeeAbstractBidirListPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeSet {
    _unused: [u8; 0],
}
pub type GeeSet = _GeeSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeMap {
    _unused: [u8; 0],
}
pub type GeeMap = _GeeMap;
pub type GeeAbstractMap = _GeeAbstractMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractMapPrivate {
    _unused: [u8; 0],
}
pub type GeeAbstractMapPrivate = _GeeAbstractMapPrivate;
pub type GeeArrayList = _GeeArrayList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeArrayListPrivate {
    _unused: [u8; 0],
}
pub type GeeArrayListPrivate = _GeeArrayListPrivate;
pub type GeeHashMap = _GeeHashMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeHashMapPrivate {
    _unused: [u8; 0],
}
pub type GeeHashMapPrivate = _GeeHashMapPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractCollection {
    pub parent_instance: GObject,
    pub priv_: *mut GeeAbstractCollectionPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeAbstractCollection"][::std::mem::size_of::<_GeeAbstractCollection>() - 32usize];
    ["Alignment of _GeeAbstractCollection"]
        [::std::mem::align_of::<_GeeAbstractCollection>() - 8usize];
    ["Offset of field: _GeeAbstractCollection::parent_instance"]
        [::std::mem::offset_of!(_GeeAbstractCollection, parent_instance) - 0usize];
    ["Offset of field: _GeeAbstractCollection::priv_"]
        [::std::mem::offset_of!(_GeeAbstractCollection, priv_) - 24usize];
};
impl Default for _GeeAbstractCollection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractList {
    pub parent_instance: GeeAbstractCollection,
    pub priv_: *mut GeeAbstractListPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeAbstractList"][::std::mem::size_of::<_GeeAbstractList>() - 40usize];
    ["Alignment of _GeeAbstractList"][::std::mem::align_of::<_GeeAbstractList>() - 8usize];
    ["Offset of field: _GeeAbstractList::parent_instance"]
        [::std::mem::offset_of!(_GeeAbstractList, parent_instance) - 0usize];
    ["Offset of field: _GeeAbstractList::priv_"]
        [::std::mem::offset_of!(_GeeAbstractList, priv_) - 32usize];
};
impl Default for _GeeAbstractList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractBidirList {
    pub parent_instance: GeeAbstractList,
    pub priv_: *mut GeeAbstractBidirListPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeAbstractBidirList"][::std::mem::size_of::<_GeeAbstractBidirList>() - 48usize];
    ["Alignment of _GeeAbstractBidirList"]
        [::std::mem::align_of::<_GeeAbstractBidirList>() - 8usize];
    ["Offset of field: _GeeAbstractBidirList::parent_instance"]
        [::std::mem::offset_of!(_GeeAbstractBidirList, parent_instance) - 0usize];
    ["Offset of field: _GeeAbstractBidirList::priv_"]
        [::std::mem::offset_of!(_GeeAbstractBidirList, priv_) - 40usize];
};
impl Default for _GeeAbstractBidirList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeAbstractMap {
    pub parent_instance: GObject,
    pub priv_: *mut GeeAbstractMapPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeAbstractMap"][::std::mem::size_of::<_GeeAbstractMap>() - 32usize];
    ["Alignment of _GeeAbstractMap"][::std::mem::align_of::<_GeeAbstractMap>() - 8usize];
    ["Offset of field: _GeeAbstractMap::parent_instance"]
        [::std::mem::offset_of!(_GeeAbstractMap, parent_instance) - 0usize];
    ["Offset of field: _GeeAbstractMap::priv_"]
        [::std::mem::offset_of!(_GeeAbstractMap, priv_) - 24usize];
};
impl Default for _GeeAbstractMap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeArrayList {
    pub parent_instance: GeeAbstractBidirList,
    pub priv_: *mut GeeArrayListPrivate,
    pub _items: *mut gpointer,
    pub _items_length1: gint,
    pub __items_size_: gint,
    pub _size: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeArrayList"][::std::mem::size_of::<_GeeArrayList>() - 80usize];
    ["Alignment of _GeeArrayList"][::std::mem::align_of::<_GeeArrayList>() - 8usize];
    ["Offset of field: _GeeArrayList::parent_instance"]
        [::std::mem::offset_of!(_GeeArrayList, parent_instance) - 0usize];
    ["Offset of field: _GeeArrayList::priv_"]
        [::std::mem::offset_of!(_GeeArrayList, priv_) - 48usize];
    ["Offset of field: _GeeArrayList::_items"]
        [::std::mem::offset_of!(_GeeArrayList, _items) - 56usize];
    ["Offset of field: _GeeArrayList::_items_length1"]
        [::std::mem::offset_of!(_GeeArrayList, _items_length1) - 64usize];
    ["Offset of field: _GeeArrayList::__items_size_"]
        [::std::mem::offset_of!(_GeeArrayList, __items_size_) - 68usize];
    ["Offset of field: _GeeArrayList::_size"]
        [::std::mem::offset_of!(_GeeArrayList, _size) - 72usize];
};
impl Default for _GeeArrayList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GeeHashMap {
    pub parent_instance: GeeAbstractMap,
    pub priv_: *mut GeeHashMapPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GeeHashMap"][::std::mem::size_of::<_GeeHashMap>() - 40usize];
    ["Alignment of _GeeHashMap"][::std::mem::align_of::<_GeeHashMap>() - 8usize];
    ["Offset of field: _GeeHashMap::parent_instance"]
        [::std::mem::offset_of!(_GeeHashMap, parent_instance) - 0usize];
    ["Offset of field: _GeeHashMap::priv_"][::std::mem::offset_of!(_GeeHashMap, priv_) - 32usize];
};
impl Default for _GeeHashMap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_darwin_grafter_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_darwin_module_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_cpu_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_memory_access_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_osabi_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_machine_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_source_mode_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_section_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_section_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_dynamic_tag_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_shdr_index_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_symbol_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_symbol_bind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_ia32_relocation_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_x64_relocation_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_arm_relocation_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_arm64_relocation_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_elf_mips_relocation_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_attach_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_attach_return_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_replace_return_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_import_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_export_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_symbol_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_dependency_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_teardown_requirement_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_code_signing_policy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_modify_thread_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_thread_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_thread_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_watch_conditions_get_type() -> GType;
}
pub const GumError_GUM_ERROR_FAILED: GumError = 0;
pub const GumError_GUM_ERROR_NOT_FOUND: GumError = 1;
pub const GumError_GUM_ERROR_EXISTS: GumError = 2;
pub const GumError_GUM_ERROR_PERMISSION_DENIED: GumError = 3;
pub const GumError_GUM_ERROR_INVALID_ARGUMENT: GumError = 4;
pub const GumError_GUM_ERROR_NOT_SUPPORTED: GumError = 5;
pub const GumError_GUM_ERROR_INVALID_DATA: GumError = 6;
pub type GumError = ::std::os::raw::c_uint;
pub type GumAddress = guint64;
pub type GumOS = guint;
pub type GumCallingConvention = guint;
pub type GumAbiType = guint;
pub type GumCpuFeatures = guint;
pub type GumInstructionEncoding = guint;
pub type GumArgType = guint;
pub type GumArgument = _GumArgument;
pub type GumBranchHint = guint;
pub type GumIA32CpuContext = _GumIA32CpuContext;
pub type GumX64CpuContext = _GumX64CpuContext;
pub type GumArmCpuContext = _GumArmCpuContext;
pub type GumArmVectorReg = _GumArmVectorReg;
pub type GumArm64CpuContext = _GumArm64CpuContext;
pub type GumArm64VectorReg = _GumArm64VectorReg;
pub type GumMipsCpuContext = _GumMipsCpuContext;
pub type GumRelocationScenario = guint;
pub type GumCpuContext = GumX64CpuContext;
pub const GumCpuType_GUM_CPU_INVALID: GumCpuType = 0;
pub const GumCpuType_GUM_CPU_IA32: GumCpuType = 1;
pub const GumCpuType_GUM_CPU_AMD64: GumCpuType = 2;
pub const GumCpuType_GUM_CPU_ARM: GumCpuType = 3;
pub const GumCpuType_GUM_CPU_ARM64: GumCpuType = 4;
pub const GumCpuType_GUM_CPU_MIPS: GumCpuType = 5;
pub type GumCpuType = ::std::os::raw::c_uint;
pub const GumMemoryAccess_GUM_MEMORY_ACCESS_OPEN: GumMemoryAccess = 0;
pub const GumMemoryAccess_GUM_MEMORY_ACCESS_EXCLUSIVE: GumMemoryAccess = 1;
pub type GumMemoryAccess = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArgument {
    pub type_: GumArgType,
    pub value: _GumArgument__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArgument__bindgen_ty_1 {
    pub address: GumAddress,
    pub reg: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArgument__bindgen_ty_1"]
        [::std::mem::size_of::<_GumArgument__bindgen_ty_1>() - 8usize];
    ["Alignment of _GumArgument__bindgen_ty_1"]
        [::std::mem::align_of::<_GumArgument__bindgen_ty_1>() - 8usize];
    ["Offset of field: _GumArgument__bindgen_ty_1::address"]
        [::std::mem::offset_of!(_GumArgument__bindgen_ty_1, address) - 0usize];
    ["Offset of field: _GumArgument__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(_GumArgument__bindgen_ty_1, reg) - 0usize];
};
impl Default for _GumArgument__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArgument"][::std::mem::size_of::<_GumArgument>() - 16usize];
    ["Alignment of _GumArgument"][::std::mem::align_of::<_GumArgument>() - 8usize];
    ["Offset of field: _GumArgument::type_"][::std::mem::offset_of!(_GumArgument, type_) - 0usize];
    ["Offset of field: _GumArgument::value"][::std::mem::offset_of!(_GumArgument, value) - 8usize];
};
impl Default for _GumArgument {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumIA32CpuContext {
    pub eip: guint32,
    pub edi: guint32,
    pub esi: guint32,
    pub ebp: guint32,
    pub esp: guint32,
    pub ebx: guint32,
    pub edx: guint32,
    pub ecx: guint32,
    pub eax: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumIA32CpuContext"][::std::mem::size_of::<_GumIA32CpuContext>() - 36usize];
    ["Alignment of _GumIA32CpuContext"][::std::mem::align_of::<_GumIA32CpuContext>() - 4usize];
    ["Offset of field: _GumIA32CpuContext::eip"]
        [::std::mem::offset_of!(_GumIA32CpuContext, eip) - 0usize];
    ["Offset of field: _GumIA32CpuContext::edi"]
        [::std::mem::offset_of!(_GumIA32CpuContext, edi) - 4usize];
    ["Offset of field: _GumIA32CpuContext::esi"]
        [::std::mem::offset_of!(_GumIA32CpuContext, esi) - 8usize];
    ["Offset of field: _GumIA32CpuContext::ebp"]
        [::std::mem::offset_of!(_GumIA32CpuContext, ebp) - 12usize];
    ["Offset of field: _GumIA32CpuContext::esp"]
        [::std::mem::offset_of!(_GumIA32CpuContext, esp) - 16usize];
    ["Offset of field: _GumIA32CpuContext::ebx"]
        [::std::mem::offset_of!(_GumIA32CpuContext, ebx) - 20usize];
    ["Offset of field: _GumIA32CpuContext::edx"]
        [::std::mem::offset_of!(_GumIA32CpuContext, edx) - 24usize];
    ["Offset of field: _GumIA32CpuContext::ecx"]
        [::std::mem::offset_of!(_GumIA32CpuContext, ecx) - 28usize];
    ["Offset of field: _GumIA32CpuContext::eax"]
        [::std::mem::offset_of!(_GumIA32CpuContext, eax) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumX64CpuContext {
    pub rip: guint64,
    pub r15: guint64,
    pub r14: guint64,
    pub r13: guint64,
    pub r12: guint64,
    pub r11: guint64,
    pub r10: guint64,
    pub r9: guint64,
    pub r8: guint64,
    pub rdi: guint64,
    pub rsi: guint64,
    pub rbp: guint64,
    pub rsp: guint64,
    pub rbx: guint64,
    pub rdx: guint64,
    pub rcx: guint64,
    pub rax: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumX64CpuContext"][::std::mem::size_of::<_GumX64CpuContext>() - 136usize];
    ["Alignment of _GumX64CpuContext"][::std::mem::align_of::<_GumX64CpuContext>() - 8usize];
    ["Offset of field: _GumX64CpuContext::rip"]
        [::std::mem::offset_of!(_GumX64CpuContext, rip) - 0usize];
    ["Offset of field: _GumX64CpuContext::r15"]
        [::std::mem::offset_of!(_GumX64CpuContext, r15) - 8usize];
    ["Offset of field: _GumX64CpuContext::r14"]
        [::std::mem::offset_of!(_GumX64CpuContext, r14) - 16usize];
    ["Offset of field: _GumX64CpuContext::r13"]
        [::std::mem::offset_of!(_GumX64CpuContext, r13) - 24usize];
    ["Offset of field: _GumX64CpuContext::r12"]
        [::std::mem::offset_of!(_GumX64CpuContext, r12) - 32usize];
    ["Offset of field: _GumX64CpuContext::r11"]
        [::std::mem::offset_of!(_GumX64CpuContext, r11) - 40usize];
    ["Offset of field: _GumX64CpuContext::r10"]
        [::std::mem::offset_of!(_GumX64CpuContext, r10) - 48usize];
    ["Offset of field: _GumX64CpuContext::r9"]
        [::std::mem::offset_of!(_GumX64CpuContext, r9) - 56usize];
    ["Offset of field: _GumX64CpuContext::r8"]
        [::std::mem::offset_of!(_GumX64CpuContext, r8) - 64usize];
    ["Offset of field: _GumX64CpuContext::rdi"]
        [::std::mem::offset_of!(_GumX64CpuContext, rdi) - 72usize];
    ["Offset of field: _GumX64CpuContext::rsi"]
        [::std::mem::offset_of!(_GumX64CpuContext, rsi) - 80usize];
    ["Offset of field: _GumX64CpuContext::rbp"]
        [::std::mem::offset_of!(_GumX64CpuContext, rbp) - 88usize];
    ["Offset of field: _GumX64CpuContext::rsp"]
        [::std::mem::offset_of!(_GumX64CpuContext, rsp) - 96usize];
    ["Offset of field: _GumX64CpuContext::rbx"]
        [::std::mem::offset_of!(_GumX64CpuContext, rbx) - 104usize];
    ["Offset of field: _GumX64CpuContext::rdx"]
        [::std::mem::offset_of!(_GumX64CpuContext, rdx) - 112usize];
    ["Offset of field: _GumX64CpuContext::rcx"]
        [::std::mem::offset_of!(_GumX64CpuContext, rcx) - 120usize];
    ["Offset of field: _GumX64CpuContext::rax"]
        [::std::mem::offset_of!(_GumX64CpuContext, rax) - 128usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArmVectorReg {
    pub q: [guint8; 16usize],
    pub d: [gdouble; 2usize],
    pub s: [gfloat; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArmVectorReg"][::std::mem::size_of::<_GumArmVectorReg>() - 16usize];
    ["Alignment of _GumArmVectorReg"][::std::mem::align_of::<_GumArmVectorReg>() - 8usize];
    ["Offset of field: _GumArmVectorReg::q"][::std::mem::offset_of!(_GumArmVectorReg, q) - 0usize];
    ["Offset of field: _GumArmVectorReg::d"][::std::mem::offset_of!(_GumArmVectorReg, d) - 0usize];
    ["Offset of field: _GumArmVectorReg::s"][::std::mem::offset_of!(_GumArmVectorReg, s) - 0usize];
};
impl Default for _GumArmVectorReg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArmCpuContext {
    pub pc: guint32,
    pub sp: guint32,
    pub cpsr: guint32,
    pub r8: guint32,
    pub r9: guint32,
    pub r10: guint32,
    pub r11: guint32,
    pub r12: guint32,
    pub v: [GumArmVectorReg; 16usize],
    pub _padding: guint32,
    pub r: [guint32; 8usize],
    pub lr: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArmCpuContext"][::std::mem::size_of::<_GumArmCpuContext>() - 328usize];
    ["Alignment of _GumArmCpuContext"][::std::mem::align_of::<_GumArmCpuContext>() - 8usize];
    ["Offset of field: _GumArmCpuContext::pc"]
        [::std::mem::offset_of!(_GumArmCpuContext, pc) - 0usize];
    ["Offset of field: _GumArmCpuContext::sp"]
        [::std::mem::offset_of!(_GumArmCpuContext, sp) - 4usize];
    ["Offset of field: _GumArmCpuContext::cpsr"]
        [::std::mem::offset_of!(_GumArmCpuContext, cpsr) - 8usize];
    ["Offset of field: _GumArmCpuContext::r8"]
        [::std::mem::offset_of!(_GumArmCpuContext, r8) - 12usize];
    ["Offset of field: _GumArmCpuContext::r9"]
        [::std::mem::offset_of!(_GumArmCpuContext, r9) - 16usize];
    ["Offset of field: _GumArmCpuContext::r10"]
        [::std::mem::offset_of!(_GumArmCpuContext, r10) - 20usize];
    ["Offset of field: _GumArmCpuContext::r11"]
        [::std::mem::offset_of!(_GumArmCpuContext, r11) - 24usize];
    ["Offset of field: _GumArmCpuContext::r12"]
        [::std::mem::offset_of!(_GumArmCpuContext, r12) - 28usize];
    ["Offset of field: _GumArmCpuContext::v"]
        [::std::mem::offset_of!(_GumArmCpuContext, v) - 32usize];
    ["Offset of field: _GumArmCpuContext::_padding"]
        [::std::mem::offset_of!(_GumArmCpuContext, _padding) - 288usize];
    ["Offset of field: _GumArmCpuContext::r"]
        [::std::mem::offset_of!(_GumArmCpuContext, r) - 292usize];
    ["Offset of field: _GumArmCpuContext::lr"]
        [::std::mem::offset_of!(_GumArmCpuContext, lr) - 324usize];
};
impl Default for _GumArmCpuContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArm64VectorReg {
    pub q: [guint8; 16usize],
    pub d: gdouble,
    pub s: gfloat,
    pub h: guint16,
    pub b: guint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArm64VectorReg"][::std::mem::size_of::<_GumArm64VectorReg>() - 16usize];
    ["Alignment of _GumArm64VectorReg"][::std::mem::align_of::<_GumArm64VectorReg>() - 8usize];
    ["Offset of field: _GumArm64VectorReg::q"]
        [::std::mem::offset_of!(_GumArm64VectorReg, q) - 0usize];
    ["Offset of field: _GumArm64VectorReg::d"]
        [::std::mem::offset_of!(_GumArm64VectorReg, d) - 0usize];
    ["Offset of field: _GumArm64VectorReg::s"]
        [::std::mem::offset_of!(_GumArm64VectorReg, s) - 0usize];
    ["Offset of field: _GumArm64VectorReg::h"]
        [::std::mem::offset_of!(_GumArm64VectorReg, h) - 0usize];
    ["Offset of field: _GumArm64VectorReg::b"]
        [::std::mem::offset_of!(_GumArm64VectorReg, b) - 0usize];
};
impl Default for _GumArm64VectorReg {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArm64CpuContext {
    pub pc: guint64,
    pub sp: guint64,
    pub nzcv: guint64,
    pub x: [guint64; 29usize],
    pub fp: guint64,
    pub lr: guint64,
    pub v: [GumArm64VectorReg; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArm64CpuContext"][::std::mem::size_of::<_GumArm64CpuContext>() - 784usize];
    ["Alignment of _GumArm64CpuContext"][::std::mem::align_of::<_GumArm64CpuContext>() - 8usize];
    ["Offset of field: _GumArm64CpuContext::pc"]
        [::std::mem::offset_of!(_GumArm64CpuContext, pc) - 0usize];
    ["Offset of field: _GumArm64CpuContext::sp"]
        [::std::mem::offset_of!(_GumArm64CpuContext, sp) - 8usize];
    ["Offset of field: _GumArm64CpuContext::nzcv"]
        [::std::mem::offset_of!(_GumArm64CpuContext, nzcv) - 16usize];
    ["Offset of field: _GumArm64CpuContext::x"]
        [::std::mem::offset_of!(_GumArm64CpuContext, x) - 24usize];
    ["Offset of field: _GumArm64CpuContext::fp"]
        [::std::mem::offset_of!(_GumArm64CpuContext, fp) - 256usize];
    ["Offset of field: _GumArm64CpuContext::lr"]
        [::std::mem::offset_of!(_GumArm64CpuContext, lr) - 264usize];
    ["Offset of field: _GumArm64CpuContext::v"]
        [::std::mem::offset_of!(_GumArm64CpuContext, v) - 272usize];
};
impl Default for _GumArm64CpuContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumMipsCpuContext {
    pub pc: gsize,
    pub gp: gsize,
    pub sp: gsize,
    pub fp: gsize,
    pub ra: gsize,
    pub hi: gsize,
    pub lo: gsize,
    pub at: gsize,
    pub v0: gsize,
    pub v1: gsize,
    pub a0: gsize,
    pub a1: gsize,
    pub a2: gsize,
    pub a3: gsize,
    pub t0: gsize,
    pub t1: gsize,
    pub t2: gsize,
    pub t3: gsize,
    pub t4: gsize,
    pub t5: gsize,
    pub t6: gsize,
    pub t7: gsize,
    pub t8: gsize,
    pub t9: gsize,
    pub s0: gsize,
    pub s1: gsize,
    pub s2: gsize,
    pub s3: gsize,
    pub s4: gsize,
    pub s5: gsize,
    pub s6: gsize,
    pub s7: gsize,
    pub k0: gsize,
    pub k1: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMipsCpuContext"][::std::mem::size_of::<_GumMipsCpuContext>() - 272usize];
    ["Alignment of _GumMipsCpuContext"][::std::mem::align_of::<_GumMipsCpuContext>() - 8usize];
    ["Offset of field: _GumMipsCpuContext::pc"]
        [::std::mem::offset_of!(_GumMipsCpuContext, pc) - 0usize];
    ["Offset of field: _GumMipsCpuContext::gp"]
        [::std::mem::offset_of!(_GumMipsCpuContext, gp) - 8usize];
    ["Offset of field: _GumMipsCpuContext::sp"]
        [::std::mem::offset_of!(_GumMipsCpuContext, sp) - 16usize];
    ["Offset of field: _GumMipsCpuContext::fp"]
        [::std::mem::offset_of!(_GumMipsCpuContext, fp) - 24usize];
    ["Offset of field: _GumMipsCpuContext::ra"]
        [::std::mem::offset_of!(_GumMipsCpuContext, ra) - 32usize];
    ["Offset of field: _GumMipsCpuContext::hi"]
        [::std::mem::offset_of!(_GumMipsCpuContext, hi) - 40usize];
    ["Offset of field: _GumMipsCpuContext::lo"]
        [::std::mem::offset_of!(_GumMipsCpuContext, lo) - 48usize];
    ["Offset of field: _GumMipsCpuContext::at"]
        [::std::mem::offset_of!(_GumMipsCpuContext, at) - 56usize];
    ["Offset of field: _GumMipsCpuContext::v0"]
        [::std::mem::offset_of!(_GumMipsCpuContext, v0) - 64usize];
    ["Offset of field: _GumMipsCpuContext::v1"]
        [::std::mem::offset_of!(_GumMipsCpuContext, v1) - 72usize];
    ["Offset of field: _GumMipsCpuContext::a0"]
        [::std::mem::offset_of!(_GumMipsCpuContext, a0) - 80usize];
    ["Offset of field: _GumMipsCpuContext::a1"]
        [::std::mem::offset_of!(_GumMipsCpuContext, a1) - 88usize];
    ["Offset of field: _GumMipsCpuContext::a2"]
        [::std::mem::offset_of!(_GumMipsCpuContext, a2) - 96usize];
    ["Offset of field: _GumMipsCpuContext::a3"]
        [::std::mem::offset_of!(_GumMipsCpuContext, a3) - 104usize];
    ["Offset of field: _GumMipsCpuContext::t0"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t0) - 112usize];
    ["Offset of field: _GumMipsCpuContext::t1"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t1) - 120usize];
    ["Offset of field: _GumMipsCpuContext::t2"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t2) - 128usize];
    ["Offset of field: _GumMipsCpuContext::t3"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t3) - 136usize];
    ["Offset of field: _GumMipsCpuContext::t4"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t4) - 144usize];
    ["Offset of field: _GumMipsCpuContext::t5"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t5) - 152usize];
    ["Offset of field: _GumMipsCpuContext::t6"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t6) - 160usize];
    ["Offset of field: _GumMipsCpuContext::t7"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t7) - 168usize];
    ["Offset of field: _GumMipsCpuContext::t8"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t8) - 176usize];
    ["Offset of field: _GumMipsCpuContext::t9"]
        [::std::mem::offset_of!(_GumMipsCpuContext, t9) - 184usize];
    ["Offset of field: _GumMipsCpuContext::s0"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s0) - 192usize];
    ["Offset of field: _GumMipsCpuContext::s1"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s1) - 200usize];
    ["Offset of field: _GumMipsCpuContext::s2"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s2) - 208usize];
    ["Offset of field: _GumMipsCpuContext::s3"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s3) - 216usize];
    ["Offset of field: _GumMipsCpuContext::s4"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s4) - 224usize];
    ["Offset of field: _GumMipsCpuContext::s5"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s5) - 232usize];
    ["Offset of field: _GumMipsCpuContext::s6"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s6) - 240usize];
    ["Offset of field: _GumMipsCpuContext::s7"]
        [::std::mem::offset_of!(_GumMipsCpuContext, s7) - 248usize];
    ["Offset of field: _GumMipsCpuContext::k0"]
        [::std::mem::offset_of!(_GumMipsCpuContext, k0) - 256usize];
    ["Offset of field: _GumMipsCpuContext::k1"]
        [::std::mem::offset_of!(_GumMipsCpuContext, k1) - 264usize];
};
unsafe extern "C" {
    pub fn gum_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn gum_panic(format: *const gchar, ...) -> !;
}
unsafe extern "C" {
    pub fn gum_query_cpu_features() -> GumCpuFeatures;
}
unsafe extern "C" {
    pub fn gum_cpu_context_get_nth_argument(self_: *mut GumCpuContext, n: guint) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_cpu_context_replace_nth_argument(
        self_: *mut GumCpuContext,
        n: guint,
        value: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_cpu_context_get_return_value(self_: *mut GumCpuContext) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_cpu_context_replace_return_value(self_: *mut GumCpuContext, value: gpointer);
}
unsafe extern "C" {
    pub fn gum_address_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_api_resolver_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumApiResolver {
    _unused: [u8; 0],
}
pub type GumApiResolver = _GumApiResolver;
pub type GumApiResolverInterface = _GumApiResolverInterface;
pub type GumApiResolver_autoptr = *mut GumApiResolver;
pub type GumApiResolver_listautoptr = *mut GList;
pub type GumApiResolver_slistautoptr = *mut GSList;
pub type GumApiResolver_queueautoptr = *mut GQueue;
pub type GumApiDetails = _GumApiDetails;
pub type GumFoundApiFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumApiDetails, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumApiResolverInterface {
    pub parent: GTypeInterface,
    pub enumerate_matches: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumApiResolver,
            query: *const gchar,
            func: GumFoundApiFunc,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumApiResolverInterface"]
        [::std::mem::size_of::<_GumApiResolverInterface>() - 24usize];
    ["Alignment of _GumApiResolverInterface"]
        [::std::mem::align_of::<_GumApiResolverInterface>() - 8usize];
    ["Offset of field: _GumApiResolverInterface::parent"]
        [::std::mem::offset_of!(_GumApiResolverInterface, parent) - 0usize];
    ["Offset of field: _GumApiResolverInterface::enumerate_matches"]
        [::std::mem::offset_of!(_GumApiResolverInterface, enumerate_matches) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumApiDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gssize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumApiDetails"][::std::mem::size_of::<_GumApiDetails>() - 24usize];
    ["Alignment of _GumApiDetails"][::std::mem::align_of::<_GumApiDetails>() - 8usize];
    ["Offset of field: _GumApiDetails::name"]
        [::std::mem::offset_of!(_GumApiDetails, name) - 0usize];
    ["Offset of field: _GumApiDetails::address"]
        [::std::mem::offset_of!(_GumApiDetails, address) - 8usize];
    ["Offset of field: _GumApiDetails::size"]
        [::std::mem::offset_of!(_GumApiDetails, size) - 16usize];
};
impl Default for _GumApiDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_api_resolver_make(type_: *const gchar) -> *mut GumApiResolver;
}
unsafe extern "C" {
    pub fn gum_api_resolver_enumerate_matches(
        self_: *mut GumApiResolver,
        query: *const gchar,
        func: GumFoundApiFunc,
        user_data: gpointer,
        error: *mut *mut GError,
    );
}
pub type GumReturnAddressDetails = _GumReturnAddressDetails;
pub type GumReturnAddress = gpointer;
pub type GumReturnAddressArray = _GumReturnAddressArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumReturnAddressDetails {
    pub address: GumReturnAddress,
    pub module_name: [gchar; 261usize],
    pub function_name: [gchar; 2049usize],
    pub file_name: [gchar; 261usize],
    pub line_number: guint,
    pub column: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumReturnAddressDetails"]
        [::std::mem::size_of::<_GumReturnAddressDetails>() - 2592usize];
    ["Alignment of _GumReturnAddressDetails"]
        [::std::mem::align_of::<_GumReturnAddressDetails>() - 8usize];
    ["Offset of field: _GumReturnAddressDetails::address"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, address) - 0usize];
    ["Offset of field: _GumReturnAddressDetails::module_name"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, module_name) - 8usize];
    ["Offset of field: _GumReturnAddressDetails::function_name"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, function_name) - 269usize];
    ["Offset of field: _GumReturnAddressDetails::file_name"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, file_name) - 2318usize];
    ["Offset of field: _GumReturnAddressDetails::line_number"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, line_number) - 2580usize];
    ["Offset of field: _GumReturnAddressDetails::column"]
        [::std::mem::offset_of!(_GumReturnAddressDetails, column) - 2584usize];
};
impl Default for _GumReturnAddressDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumReturnAddressArray {
    pub len: guint,
    pub items: [GumReturnAddress; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumReturnAddressArray"][::std::mem::size_of::<_GumReturnAddressArray>() - 136usize];
    ["Alignment of _GumReturnAddressArray"]
        [::std::mem::align_of::<_GumReturnAddressArray>() - 8usize];
    ["Offset of field: _GumReturnAddressArray::len"]
        [::std::mem::offset_of!(_GumReturnAddressArray, len) - 0usize];
    ["Offset of field: _GumReturnAddressArray::items"]
        [::std::mem::offset_of!(_GumReturnAddressArray, items) - 8usize];
};
impl Default for _GumReturnAddressArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_return_address_details_from_address(
        address: GumReturnAddress,
        details: *mut GumReturnAddressDetails,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_return_address_array_is_equal(
        array1: *const GumReturnAddressArray,
        array2: *const GumReturnAddressArray,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_backtracer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBacktracer {
    _unused: [u8; 0],
}
pub type GumBacktracer = _GumBacktracer;
pub type GumBacktracerInterface = _GumBacktracerInterface;
pub type GumBacktracer_autoptr = *mut GumBacktracer;
pub type GumBacktracer_listautoptr = *mut GList;
pub type GumBacktracer_slistautoptr = *mut GSList;
pub type GumBacktracer_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumBacktracerInterface {
    pub parent: GTypeInterface,
    pub generate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumBacktracer,
            cpu_context: *const GumCpuContext,
            return_addresses: *mut GumReturnAddressArray,
            limit: guint,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumBacktracerInterface"][::std::mem::size_of::<_GumBacktracerInterface>() - 24usize];
    ["Alignment of _GumBacktracerInterface"]
        [::std::mem::align_of::<_GumBacktracerInterface>() - 8usize];
    ["Offset of field: _GumBacktracerInterface::parent"]
        [::std::mem::offset_of!(_GumBacktracerInterface, parent) - 0usize];
    ["Offset of field: _GumBacktracerInterface::generate"]
        [::std::mem::offset_of!(_GumBacktracerInterface, generate) - 16usize];
};
unsafe extern "C" {
    pub fn gum_backtracer_make_accurate() -> *mut GumBacktracer;
}
unsafe extern "C" {
    pub fn gum_backtracer_make_fuzzy() -> *mut GumBacktracer;
}
unsafe extern "C" {
    pub fn gum_backtracer_generate(
        self_: *mut GumBacktracer,
        cpu_context: *const GumCpuContext,
        return_addresses: *mut GumReturnAddressArray,
    );
}
unsafe extern "C" {
    pub fn gum_backtracer_generate_with_limit(
        self_: *mut GumBacktracer,
        cpu_context: *const GumCpuContext,
        return_addresses: *mut GumReturnAddressArray,
        limit: guint,
    );
}
pub type GumPtrauthSupport = guint;
pub type GumRwxSupport = guint;
pub type GumMemoryOperation = guint;
pub type GumPageProtection = guint;
pub type GumAddressSpec = _GumAddressSpec;
pub type GumRangeDetails = _GumRangeDetails;
pub type GumMemoryRange = _GumMemoryRange;
pub type GumFileMapping = _GumFileMapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMatchPattern {
    _unused: [u8; 0],
}
pub type GumMatchPattern = _GumMatchPattern;
pub type GumMemoryIsNearFunc =
    ::std::option::Option<unsafe extern "C" fn(memory: gpointer, address: gpointer) -> gboolean>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumAddressSpec {
    pub near_address: gpointer,
    pub max_distance: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumAddressSpec"][::std::mem::size_of::<_GumAddressSpec>() - 16usize];
    ["Alignment of _GumAddressSpec"][::std::mem::align_of::<_GumAddressSpec>() - 8usize];
    ["Offset of field: _GumAddressSpec::near_address"]
        [::std::mem::offset_of!(_GumAddressSpec, near_address) - 0usize];
    ["Offset of field: _GumAddressSpec::max_distance"]
        [::std::mem::offset_of!(_GumAddressSpec, max_distance) - 8usize];
};
impl Default for _GumAddressSpec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumRangeDetails {
    pub range: *const GumMemoryRange,
    pub protection: GumPageProtection,
    pub file: *const GumFileMapping,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumRangeDetails"][::std::mem::size_of::<_GumRangeDetails>() - 24usize];
    ["Alignment of _GumRangeDetails"][::std::mem::align_of::<_GumRangeDetails>() - 8usize];
    ["Offset of field: _GumRangeDetails::range"]
        [::std::mem::offset_of!(_GumRangeDetails, range) - 0usize];
    ["Offset of field: _GumRangeDetails::protection"]
        [::std::mem::offset_of!(_GumRangeDetails, protection) - 8usize];
    ["Offset of field: _GumRangeDetails::file"]
        [::std::mem::offset_of!(_GumRangeDetails, file) - 16usize];
};
impl Default for _GumRangeDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumMemoryRange {
    pub base_address: GumAddress,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMemoryRange"][::std::mem::size_of::<_GumMemoryRange>() - 16usize];
    ["Alignment of _GumMemoryRange"][::std::mem::align_of::<_GumMemoryRange>() - 8usize];
    ["Offset of field: _GumMemoryRange::base_address"]
        [::std::mem::offset_of!(_GumMemoryRange, base_address) - 0usize];
    ["Offset of field: _GumMemoryRange::size"]
        [::std::mem::offset_of!(_GumMemoryRange, size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumFileMapping {
    pub path: *const gchar,
    pub offset: guint64,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumFileMapping"][::std::mem::size_of::<_GumFileMapping>() - 24usize];
    ["Alignment of _GumFileMapping"][::std::mem::align_of::<_GumFileMapping>() - 8usize];
    ["Offset of field: _GumFileMapping::path"]
        [::std::mem::offset_of!(_GumFileMapping, path) - 0usize];
    ["Offset of field: _GumFileMapping::offset"]
        [::std::mem::offset_of!(_GumFileMapping, offset) - 8usize];
    ["Offset of field: _GumFileMapping::size"]
        [::std::mem::offset_of!(_GumFileMapping, size) - 16usize];
};
impl Default for _GumFileMapping {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumFoundRangeFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumRangeDetails, user_data: gpointer) -> gboolean,
>;
pub type GumMemoryPatchApplyFunc =
    ::std::option::Option<unsafe extern "C" fn(mem: gpointer, user_data: gpointer)>;
pub type GumMemoryPatchPagesApplyFunc = ::std::option::Option<
    unsafe extern "C" fn(mem: gpointer, target_page: gpointer, n_pages: guint, user_data: gpointer),
>;
pub type GumMemoryScanMatchFunc = ::std::option::Option<
    unsafe extern "C" fn(address: GumAddress, size: gsize, user_data: gpointer) -> gboolean,
>;
unsafe extern "C" {
    pub fn gum_internal_heap_ref();
}
unsafe extern "C" {
    pub fn gum_internal_heap_unref();
}
unsafe extern "C" {
    pub fn gum_sign_code_pointer(value: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_strip_code_pointer(value: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_sign_code_address(value: GumAddress) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_strip_code_address(value: GumAddress) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_query_ptrauth_support() -> GumPtrauthSupport;
}
unsafe extern "C" {
    pub fn gum_query_page_size() -> guint;
}
unsafe extern "C" {
    pub fn gum_query_is_rwx_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_query_rwx_support() -> GumRwxSupport;
}
unsafe extern "C" {
    pub fn gum_memory_is_readable(address: gconstpointer, len: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_query_protection(
        address: gconstpointer,
        prot: *mut GumPageProtection,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_read(
        address: gconstpointer,
        len: gsize,
        n_bytes_read: *mut gsize,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn gum_memory_write(address: gpointer, bytes: *const guint8, len: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_patch_code(
        address: gpointer,
        size: gsize,
        apply: GumMemoryPatchApplyFunc,
        apply_data: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_patch_code_pages(
        sorted_addresses: *mut GPtrArray,
        coalesce: gboolean,
        apply: GumMemoryPatchPagesApplyFunc,
        apply_data: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_can_remap_writable() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_try_remap_writable_pages(first_page: gpointer, n_pages: guint) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memory_dispose_writable_pages(first_page: gpointer, n_pages: guint);
}
unsafe extern "C" {
    pub fn gum_memory_mark_code(address: gpointer, size: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_scan(
        range: *const GumMemoryRange,
        pattern: *const GumMatchPattern,
        func: GumMemoryScanMatchFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_match_pattern_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_match_pattern_new_from_string(pattern_str: *const gchar) -> *mut GumMatchPattern;
}
unsafe extern "C" {
    pub fn gum_match_pattern_ref(pattern: *mut GumMatchPattern) -> *mut GumMatchPattern;
}
unsafe extern "C" {
    pub fn gum_match_pattern_unref(pattern: *mut GumMatchPattern);
}
unsafe extern "C" {
    pub fn gum_match_pattern_get_size(pattern: *const GumMatchPattern) -> guint;
}
unsafe extern "C" {
    pub fn gum_match_pattern_get_tokens(pattern: *const GumMatchPattern) -> *mut GPtrArray;
}
unsafe extern "C" {
    pub fn gum_ensure_code_readable(address: gconstpointer, size: gsize);
}
unsafe extern "C" {
    pub fn gum_mprotect(address: gpointer, size: gsize, prot: GumPageProtection);
}
unsafe extern "C" {
    pub fn gum_try_mprotect(address: gpointer, size: gsize, prot: GumPageProtection) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_clear_cache(address: gpointer, size: gsize);
}
unsafe extern "C" {
    pub fn gum_peek_private_memory_usage() -> guint;
}
unsafe extern "C" {
    pub fn gum_malloc(size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_malloc0(size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_malloc_usable_size(mem: gconstpointer) -> gsize;
}
unsafe extern "C" {
    pub fn gum_calloc(count: gsize, size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_realloc(mem: gpointer, size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memalign(alignment: gsize, size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memdup(mem: gconstpointer, byte_size: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_free(mem: gpointer);
}
unsafe extern "C" {
    pub fn gum_alloc_n_pages(n_pages: guint, prot: GumPageProtection) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_try_alloc_n_pages(n_pages: guint, prot: GumPageProtection) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_alloc_n_pages_near(
        n_pages: guint,
        prot: GumPageProtection,
        spec: *const GumAddressSpec,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_try_alloc_n_pages_near(
        n_pages: guint,
        prot: GumPageProtection,
        spec: *const GumAddressSpec,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_query_page_allocation_range(
        mem: gconstpointer,
        size: guint,
        range: *mut GumMemoryRange,
    );
}
unsafe extern "C" {
    pub fn gum_free_pages(mem: gpointer);
}
unsafe extern "C" {
    pub fn gum_memory_allocate(
        address: gpointer,
        size: gsize,
        alignment: gsize,
        prot: GumPageProtection,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memory_allocate_near(
        spec: *const GumAddressSpec,
        size: gsize,
        alignment: gsize,
        prot: GumPageProtection,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memory_free(address: gpointer, size: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_release(address: gpointer, size: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_recommit(address: gpointer, size: gsize, prot: GumPageProtection)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_discard(address: gpointer, size: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_decommit(address: gpointer, size: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_address_spec_is_satisfied_by(
        spec: *const GumAddressSpec,
        address: gconstpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_range_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_memory_range_copy(range: *const GumMemoryRange) -> *mut GumMemoryRange;
}
unsafe extern "C" {
    pub fn gum_memory_range_free(range: *mut GumMemoryRange);
}
unsafe extern "C" {
    pub fn gum_module_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModule {
    _unused: [u8; 0],
}
pub type GumModule = _GumModule;
pub type GumModuleInterface = _GumModuleInterface;
pub type GumModule_autoptr = *mut GumModule;
pub type GumModule_listautoptr = *mut GList;
pub type GumModule_slistautoptr = *mut GSList;
pub type GumModule_queueautoptr = *mut GQueue;
pub type GumImportDetails = _GumImportDetails;
pub type GumExportDetails = _GumExportDetails;
pub type GumSymbolDetails = _GumSymbolDetails;
pub type GumSymbolSection = _GumSymbolSection;
pub type GumSectionDetails = _GumSectionDetails;
pub type GumDependencyDetails = _GumDependencyDetails;
pub type GumFoundImportFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumImportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundExportFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumExportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundSymbolFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumSymbolDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundSectionFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDependencyFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDependencyDetails, user_data: gpointer) -> gboolean,
>;
pub type GumResolveExportFunc = ::std::option::Option<
    unsafe extern "C" fn(
        module_name: *const ::std::os::raw::c_char,
        symbol_name: *const ::std::os::raw::c_char,
        user_data: gpointer,
    ) -> GumAddress,
>;
pub const GumImportType_GUM_IMPORT_UNKNOWN: GumImportType = 0;
pub const GumImportType_GUM_IMPORT_FUNCTION: GumImportType = 1;
pub const GumImportType_GUM_IMPORT_VARIABLE: GumImportType = 2;
pub type GumImportType = ::std::os::raw::c_uint;
pub const GumExportType_GUM_EXPORT_FUNCTION: GumExportType = 1;
pub const GumExportType_GUM_EXPORT_VARIABLE: GumExportType = 2;
pub type GumExportType = ::std::os::raw::c_uint;
pub const GumSymbolType_GUM_SYMBOL_UNKNOWN: GumSymbolType = 0;
pub const GumSymbolType_GUM_SYMBOL_SECTION: GumSymbolType = 1;
pub const GumSymbolType_GUM_SYMBOL_UNDEFINED: GumSymbolType = 2;
pub const GumSymbolType_GUM_SYMBOL_ABSOLUTE: GumSymbolType = 3;
pub const GumSymbolType_GUM_SYMBOL_PREBOUND_UNDEFINED: GumSymbolType = 4;
pub const GumSymbolType_GUM_SYMBOL_INDIRECT: GumSymbolType = 5;
pub const GumSymbolType_GUM_SYMBOL_OBJECT: GumSymbolType = 6;
pub const GumSymbolType_GUM_SYMBOL_FUNCTION: GumSymbolType = 7;
pub const GumSymbolType_GUM_SYMBOL_FILE: GumSymbolType = 8;
pub const GumSymbolType_GUM_SYMBOL_COMMON: GumSymbolType = 9;
pub const GumSymbolType_GUM_SYMBOL_TLS: GumSymbolType = 10;
pub type GumSymbolType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumModuleInterface {
    pub parent: GTypeInterface,
    pub get_name:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GumModule) -> *const gchar>,
    pub get_version:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GumModule) -> *const gchar>,
    pub get_path:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GumModule) -> *const gchar>,
    pub get_range:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GumModule) -> *const GumMemoryRange>,
    pub ensure_initialized: ::std::option::Option<unsafe extern "C" fn(self_: *mut GumModule)>,
    pub enumerate_imports: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, func: GumFoundImportFunc, user_data: gpointer),
    >,
    pub enumerate_exports: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, func: GumFoundExportFunc, user_data: gpointer),
    >,
    pub enumerate_symbols: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, func: GumFoundSymbolFunc, user_data: gpointer),
    >,
    pub enumerate_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumModule,
            prot: GumPageProtection,
            func: GumFoundRangeFunc,
            user_data: gpointer,
        ),
    >,
    pub enumerate_sections: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, func: GumFoundSectionFunc, user_data: gpointer),
    >,
    pub enumerate_dependencies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumModule,
            func: GumFoundDependencyFunc,
            user_data: gpointer,
        ),
    >,
    pub find_export_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, symbol_name: *const gchar) -> GumAddress,
    >,
    pub find_symbol_by_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumModule, symbol_name: *const gchar) -> GumAddress,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumModuleInterface"][::std::mem::size_of::<_GumModuleInterface>() - 120usize];
    ["Alignment of _GumModuleInterface"][::std::mem::align_of::<_GumModuleInterface>() - 8usize];
    ["Offset of field: _GumModuleInterface::parent"]
        [::std::mem::offset_of!(_GumModuleInterface, parent) - 0usize];
    ["Offset of field: _GumModuleInterface::get_name"]
        [::std::mem::offset_of!(_GumModuleInterface, get_name) - 16usize];
    ["Offset of field: _GumModuleInterface::get_version"]
        [::std::mem::offset_of!(_GumModuleInterface, get_version) - 24usize];
    ["Offset of field: _GumModuleInterface::get_path"]
        [::std::mem::offset_of!(_GumModuleInterface, get_path) - 32usize];
    ["Offset of field: _GumModuleInterface::get_range"]
        [::std::mem::offset_of!(_GumModuleInterface, get_range) - 40usize];
    ["Offset of field: _GumModuleInterface::ensure_initialized"]
        [::std::mem::offset_of!(_GumModuleInterface, ensure_initialized) - 48usize];
    ["Offset of field: _GumModuleInterface::enumerate_imports"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_imports) - 56usize];
    ["Offset of field: _GumModuleInterface::enumerate_exports"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_exports) - 64usize];
    ["Offset of field: _GumModuleInterface::enumerate_symbols"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_symbols) - 72usize];
    ["Offset of field: _GumModuleInterface::enumerate_ranges"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_ranges) - 80usize];
    ["Offset of field: _GumModuleInterface::enumerate_sections"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_sections) - 88usize];
    ["Offset of field: _GumModuleInterface::enumerate_dependencies"]
        [::std::mem::offset_of!(_GumModuleInterface, enumerate_dependencies) - 96usize];
    ["Offset of field: _GumModuleInterface::find_export_by_name"]
        [::std::mem::offset_of!(_GumModuleInterface, find_export_by_name) - 104usize];
    ["Offset of field: _GumModuleInterface::find_symbol_by_name"]
        [::std::mem::offset_of!(_GumModuleInterface, find_symbol_by_name) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumImportDetails {
    pub type_: GumImportType,
    pub name: *const gchar,
    pub module: *const gchar,
    pub address: GumAddress,
    pub slot: GumAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumImportDetails"][::std::mem::size_of::<_GumImportDetails>() - 40usize];
    ["Alignment of _GumImportDetails"][::std::mem::align_of::<_GumImportDetails>() - 8usize];
    ["Offset of field: _GumImportDetails::type_"]
        [::std::mem::offset_of!(_GumImportDetails, type_) - 0usize];
    ["Offset of field: _GumImportDetails::name"]
        [::std::mem::offset_of!(_GumImportDetails, name) - 8usize];
    ["Offset of field: _GumImportDetails::module"]
        [::std::mem::offset_of!(_GumImportDetails, module) - 16usize];
    ["Offset of field: _GumImportDetails::address"]
        [::std::mem::offset_of!(_GumImportDetails, address) - 24usize];
    ["Offset of field: _GumImportDetails::slot"]
        [::std::mem::offset_of!(_GumImportDetails, slot) - 32usize];
};
impl Default for _GumImportDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExportDetails {
    pub type_: GumExportType,
    pub name: *const gchar,
    pub address: GumAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumExportDetails"][::std::mem::size_of::<_GumExportDetails>() - 24usize];
    ["Alignment of _GumExportDetails"][::std::mem::align_of::<_GumExportDetails>() - 8usize];
    ["Offset of field: _GumExportDetails::type_"]
        [::std::mem::offset_of!(_GumExportDetails, type_) - 0usize];
    ["Offset of field: _GumExportDetails::name"]
        [::std::mem::offset_of!(_GumExportDetails, name) - 8usize];
    ["Offset of field: _GumExportDetails::address"]
        [::std::mem::offset_of!(_GumExportDetails, address) - 16usize];
};
impl Default for _GumExportDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymbolDetails {
    pub is_global: gboolean,
    pub type_: GumSymbolType,
    pub section: *const GumSymbolSection,
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gssize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumSymbolDetails"][::std::mem::size_of::<_GumSymbolDetails>() - 40usize];
    ["Alignment of _GumSymbolDetails"][::std::mem::align_of::<_GumSymbolDetails>() - 8usize];
    ["Offset of field: _GumSymbolDetails::is_global"]
        [::std::mem::offset_of!(_GumSymbolDetails, is_global) - 0usize];
    ["Offset of field: _GumSymbolDetails::type_"]
        [::std::mem::offset_of!(_GumSymbolDetails, type_) - 4usize];
    ["Offset of field: _GumSymbolDetails::section"]
        [::std::mem::offset_of!(_GumSymbolDetails, section) - 8usize];
    ["Offset of field: _GumSymbolDetails::name"]
        [::std::mem::offset_of!(_GumSymbolDetails, name) - 16usize];
    ["Offset of field: _GumSymbolDetails::address"]
        [::std::mem::offset_of!(_GumSymbolDetails, address) - 24usize];
    ["Offset of field: _GumSymbolDetails::size"]
        [::std::mem::offset_of!(_GumSymbolDetails, size) - 32usize];
};
impl Default for _GumSymbolDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymbolSection {
    pub id: *const gchar,
    pub protection: GumPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumSymbolSection"][::std::mem::size_of::<_GumSymbolSection>() - 16usize];
    ["Alignment of _GumSymbolSection"][::std::mem::align_of::<_GumSymbolSection>() - 8usize];
    ["Offset of field: _GumSymbolSection::id"]
        [::std::mem::offset_of!(_GumSymbolSection, id) - 0usize];
    ["Offset of field: _GumSymbolSection::protection"]
        [::std::mem::offset_of!(_GumSymbolSection, protection) - 8usize];
};
impl Default for _GumSymbolSection {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSectionDetails {
    pub id: *const gchar,
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumSectionDetails"][::std::mem::size_of::<_GumSectionDetails>() - 32usize];
    ["Alignment of _GumSectionDetails"][::std::mem::align_of::<_GumSectionDetails>() - 8usize];
    ["Offset of field: _GumSectionDetails::id"]
        [::std::mem::offset_of!(_GumSectionDetails, id) - 0usize];
    ["Offset of field: _GumSectionDetails::name"]
        [::std::mem::offset_of!(_GumSectionDetails, name) - 8usize];
    ["Offset of field: _GumSectionDetails::address"]
        [::std::mem::offset_of!(_GumSectionDetails, address) - 16usize];
    ["Offset of field: _GumSectionDetails::size"]
        [::std::mem::offset_of!(_GumSectionDetails, size) - 24usize];
};
impl Default for _GumSectionDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GumDependencyType_GUM_DEPENDENCY_REGULAR: GumDependencyType = 0;
pub const GumDependencyType_GUM_DEPENDENCY_WEAK: GumDependencyType = 1;
pub const GumDependencyType_GUM_DEPENDENCY_REEXPORT: GumDependencyType = 2;
pub const GumDependencyType_GUM_DEPENDENCY_UPWARD: GumDependencyType = 3;
pub type GumDependencyType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDependencyDetails {
    pub name: *const gchar,
    pub type_: GumDependencyType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDependencyDetails"][::std::mem::size_of::<_GumDependencyDetails>() - 16usize];
    ["Alignment of _GumDependencyDetails"]
        [::std::mem::align_of::<_GumDependencyDetails>() - 8usize];
    ["Offset of field: _GumDependencyDetails::name"]
        [::std::mem::offset_of!(_GumDependencyDetails, name) - 0usize];
    ["Offset of field: _GumDependencyDetails::type_"]
        [::std::mem::offset_of!(_GumDependencyDetails, type_) - 8usize];
};
impl Default for _GumDependencyDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_module_load(module_name: *const gchar, error: *mut *mut GError) -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_module_get_name(self_: *mut GumModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_module_get_version(self_: *mut GumModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_module_get_path(self_: *mut GumModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_module_get_range(self_: *mut GumModule) -> *const GumMemoryRange;
}
unsafe extern "C" {
    pub fn gum_module_ensure_initialized(self_: *mut GumModule);
}
unsafe extern "C" {
    pub fn gum_module_enumerate_imports(
        self_: *mut GumModule,
        func: GumFoundImportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_enumerate_exports(
        self_: *mut GumModule,
        func: GumFoundExportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_enumerate_symbols(
        self_: *mut GumModule,
        func: GumFoundSymbolFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_enumerate_ranges(
        self_: *mut GumModule,
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_enumerate_sections(
        self_: *mut GumModule,
        func: GumFoundSectionFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_enumerate_dependencies(
        self_: *mut GumModule,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_find_export_by_name(
        self_: *mut GumModule,
        symbol_name: *const gchar,
    ) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_module_find_global_export_by_name(symbol_name: *const gchar) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_module_find_symbol_by_name(
        self_: *mut GumModule,
        symbol_name: *const gchar,
    ) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_symbol_type_to_string(type_: GumSymbolType) -> *const gchar;
}
pub type GumProcessId = guint;
pub type GumThreadId = gsize;
pub type GumThreadDetails = _GumThreadDetails;
pub type GumThreadEntrypoint = _GumThreadEntrypoint;
pub type GumMallocRangeDetails = _GumMallocRangeDetails;
pub const GumTeardownRequirement_GUM_TEARDOWN_REQUIREMENT_FULL: GumTeardownRequirement = 0;
pub const GumTeardownRequirement_GUM_TEARDOWN_REQUIREMENT_MINIMAL: GumTeardownRequirement = 1;
pub type GumTeardownRequirement = ::std::os::raw::c_uint;
pub const GumCodeSigningPolicy_GUM_CODE_SIGNING_OPTIONAL: GumCodeSigningPolicy = 0;
pub const GumCodeSigningPolicy_GUM_CODE_SIGNING_REQUIRED: GumCodeSigningPolicy = 1;
pub type GumCodeSigningPolicy = ::std::os::raw::c_uint;
pub const GumModifyThreadFlags_GUM_MODIFY_THREAD_FLAGS_NONE: GumModifyThreadFlags = 0;
pub const GumModifyThreadFlags_GUM_MODIFY_THREAD_FLAGS_ABORT_SAFELY: GumModifyThreadFlags = 1;
pub type GumModifyThreadFlags = ::std::os::raw::c_uint;
pub const GumThreadFlags_GUM_THREAD_FLAGS_NAME: GumThreadFlags = 1;
pub const GumThreadFlags_GUM_THREAD_FLAGS_STATE: GumThreadFlags = 2;
pub const GumThreadFlags_GUM_THREAD_FLAGS_CPU_CONTEXT: GumThreadFlags = 4;
pub const GumThreadFlags_GUM_THREAD_FLAGS_ENTRYPOINT_ROUTINE: GumThreadFlags = 8;
pub const GumThreadFlags_GUM_THREAD_FLAGS_ENTRYPOINT_PARAMETER: GumThreadFlags = 16;
pub const GumThreadFlags_GUM_THREAD_FLAGS_NONE: GumThreadFlags = 0;
pub const GumThreadFlags_GUM_THREAD_FLAGS_ALL: GumThreadFlags = 31;
pub type GumThreadFlags = ::std::os::raw::c_uint;
pub const GumThreadState_GUM_THREAD_RUNNING: GumThreadState = 1;
pub const GumThreadState_GUM_THREAD_STOPPED: GumThreadState = 2;
pub const GumThreadState_GUM_THREAD_WAITING: GumThreadState = 3;
pub const GumThreadState_GUM_THREAD_UNINTERRUPTIBLE: GumThreadState = 4;
pub const GumThreadState_GUM_THREAD_HALTED: GumThreadState = 5;
pub type GumThreadState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumThreadEntrypoint {
    pub routine: GumAddress,
    pub parameter: GumAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumThreadEntrypoint"][::std::mem::size_of::<_GumThreadEntrypoint>() - 16usize];
    ["Alignment of _GumThreadEntrypoint"][::std::mem::align_of::<_GumThreadEntrypoint>() - 8usize];
    ["Offset of field: _GumThreadEntrypoint::routine"]
        [::std::mem::offset_of!(_GumThreadEntrypoint, routine) - 0usize];
    ["Offset of field: _GumThreadEntrypoint::parameter"]
        [::std::mem::offset_of!(_GumThreadEntrypoint, parameter) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumThreadDetails {
    pub flags: GumThreadFlags,
    pub id: GumThreadId,
    pub name: *const gchar,
    pub state: GumThreadState,
    pub cpu_context: GumCpuContext,
    pub entrypoint: GumThreadEntrypoint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumThreadDetails"][::std::mem::size_of::<_GumThreadDetails>() - 184usize];
    ["Alignment of _GumThreadDetails"][::std::mem::align_of::<_GumThreadDetails>() - 8usize];
    ["Offset of field: _GumThreadDetails::flags"]
        [::std::mem::offset_of!(_GumThreadDetails, flags) - 0usize];
    ["Offset of field: _GumThreadDetails::id"]
        [::std::mem::offset_of!(_GumThreadDetails, id) - 8usize];
    ["Offset of field: _GumThreadDetails::name"]
        [::std::mem::offset_of!(_GumThreadDetails, name) - 16usize];
    ["Offset of field: _GumThreadDetails::state"]
        [::std::mem::offset_of!(_GumThreadDetails, state) - 24usize];
    ["Offset of field: _GumThreadDetails::cpu_context"]
        [::std::mem::offset_of!(_GumThreadDetails, cpu_context) - 32usize];
    ["Offset of field: _GumThreadDetails::entrypoint"]
        [::std::mem::offset_of!(_GumThreadDetails, entrypoint) - 168usize];
};
impl Default for _GumThreadDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const GumWatchConditions_GUM_WATCH_READ: GumWatchConditions = 1;
pub const GumWatchConditions_GUM_WATCH_WRITE: GumWatchConditions = 2;
pub type GumWatchConditions = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMallocRangeDetails {
    pub range: *const GumMemoryRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMallocRangeDetails"][::std::mem::size_of::<_GumMallocRangeDetails>() - 8usize];
    ["Alignment of _GumMallocRangeDetails"]
        [::std::mem::align_of::<_GumMallocRangeDetails>() - 8usize];
    ["Offset of field: _GumMallocRangeDetails::range"]
        [::std::mem::offset_of!(_GumMallocRangeDetails, range) - 0usize];
};
impl Default for _GumMallocRangeDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumModifyThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        thread_id: GumThreadId,
        cpu_context: *mut GumCpuContext,
        user_data: gpointer,
    ),
>;
pub type GumFoundThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumThreadDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundModuleFunc = ::std::option::Option<
    unsafe extern "C" fn(module: *mut GumModule, user_data: gpointer) -> gboolean,
>;
pub type GumFoundMallocRangeFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumMallocRangeDetails, user_data: gpointer) -> gboolean,
>;
unsafe extern "C" {
    pub fn gum_process_get_native_os() -> GumOS;
}
unsafe extern "C" {
    pub fn gum_process_get_teardown_requirement() -> GumTeardownRequirement;
}
unsafe extern "C" {
    pub fn gum_process_set_teardown_requirement(requirement: GumTeardownRequirement);
}
unsafe extern "C" {
    pub fn gum_process_get_code_signing_policy() -> GumCodeSigningPolicy;
}
unsafe extern "C" {
    pub fn gum_process_set_code_signing_policy(policy: GumCodeSigningPolicy);
}
unsafe extern "C" {
    pub fn gum_process_is_debugger_attached() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_process_get_id() -> GumProcessId;
}
unsafe extern "C" {
    pub fn gum_process_get_current_thread_id() -> GumThreadId;
}
unsafe extern "C" {
    pub fn gum_process_has_thread(thread_id: GumThreadId) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_process_modify_thread(
        thread_id: GumThreadId,
        func: GumModifyThreadFunc,
        user_data: gpointer,
        flags: GumModifyThreadFlags,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_process_enumerate_threads(
        func: GumFoundThreadFunc,
        user_data: gpointer,
        flags: GumThreadFlags,
    );
}
unsafe extern "C" {
    pub fn gum_process_get_main_module() -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_process_get_libc_module() -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_process_find_module_by_name(name: *const gchar) -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_process_find_module_by_address(address: GumAddress) -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_process_enumerate_modules(func: GumFoundModuleFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_process_enumerate_ranges(
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_process_enumerate_malloc_ranges(func: GumFoundMallocRangeFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_thread_try_get_ranges(ranges: *mut GumMemoryRange, max_length: guint) -> guint;
}
unsafe extern "C" {
    pub fn gum_thread_get_system_error() -> gint;
}
unsafe extern "C" {
    pub fn gum_thread_set_system_error(value: gint);
}
unsafe extern "C" {
    pub fn gum_thread_suspend(thread_id: GumThreadId, error: *mut *mut GError) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_resume(thread_id: GumThreadId, error: *mut *mut GError) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_set_hardware_breakpoint(
        thread_id: GumThreadId,
        breakpoint_id: guint,
        address: GumAddress,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_unset_hardware_breakpoint(
        thread_id: GumThreadId,
        breakpoint_id: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_set_hardware_watchpoint(
        thread_id: GumThreadId,
        watchpoint_id: guint,
        address: GumAddress,
        size: gsize,
        wc: GumWatchConditions,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_unset_hardware_watchpoint(
        thread_id: GumThreadId,
        watchpoint_id: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_code_signing_policy_to_string(policy: GumCodeSigningPolicy) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_thread_details_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_thread_details_copy(details: *const GumThreadDetails) -> *mut GumThreadDetails;
}
unsafe extern "C" {
    pub fn gum_thread_details_free(details: *mut GumThreadDetails);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCloak {
    _unused: [u8; 0],
}
pub type GumCloak = _GumCloak;
pub type GumCloakFoundThreadFunc =
    ::std::option::Option<unsafe extern "C" fn(id: GumThreadId, user_data: gpointer) -> gboolean>;
pub type GumCloakFoundRangeFunc = ::std::option::Option<
    unsafe extern "C" fn(range: *const GumMemoryRange, user_data: gpointer) -> gboolean,
>;
pub type GumCloakFoundFDFunc =
    ::std::option::Option<unsafe extern "C" fn(fd: gint, user_data: gpointer) -> gboolean>;
pub type GumCloakLockedFunc = ::std::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
unsafe extern "C" {
    pub fn gum_cloak_add_thread(id: GumThreadId);
}
unsafe extern "C" {
    pub fn gum_cloak_remove_thread(id: GumThreadId);
}
unsafe extern "C" {
    pub fn gum_cloak_has_thread(id: GumThreadId) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_cloak_enumerate_threads(func: GumCloakFoundThreadFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_cloak_add_range(range: *const GumMemoryRange);
}
unsafe extern "C" {
    pub fn gum_cloak_remove_range(range: *const GumMemoryRange);
}
unsafe extern "C" {
    pub fn gum_cloak_has_range_containing(address: GumAddress) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_cloak_clip_range(range: *const GumMemoryRange) -> *mut GArray;
}
unsafe extern "C" {
    pub fn gum_cloak_enumerate_ranges(func: GumCloakFoundRangeFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_cloak_add_file_descriptor(fd: gint);
}
unsafe extern "C" {
    pub fn gum_cloak_remove_file_descriptor(fd: gint);
}
unsafe extern "C" {
    pub fn gum_cloak_has_file_descriptor(fd: gint) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_cloak_enumerate_file_descriptors(func: GumCloakFoundFDFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_cloak_with_lock_held(func: GumCloakLockedFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_cloak_is_locked() -> gboolean;
}
pub type GumCodeAllocator = _GumCodeAllocator;
pub type GumCodeSlice = _GumCodeSlice;
pub type GumCodeDeflector = _GumCodeDeflector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeAllocator {
    pub slice_size: gsize,
    pub pages_per_batch: gsize,
    pub slices_per_batch: gsize,
    pub pages_metadata_size: gsize,
    pub uncommitted_pages: *mut GSList,
    pub dirty_pages: *mut GHashTable,
    pub free_slices: *mut GList,
    pub dispatchers: *mut GSList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCodeAllocator"][::std::mem::size_of::<_GumCodeAllocator>() - 64usize];
    ["Alignment of _GumCodeAllocator"][::std::mem::align_of::<_GumCodeAllocator>() - 8usize];
    ["Offset of field: _GumCodeAllocator::slice_size"]
        [::std::mem::offset_of!(_GumCodeAllocator, slice_size) - 0usize];
    ["Offset of field: _GumCodeAllocator::pages_per_batch"]
        [::std::mem::offset_of!(_GumCodeAllocator, pages_per_batch) - 8usize];
    ["Offset of field: _GumCodeAllocator::slices_per_batch"]
        [::std::mem::offset_of!(_GumCodeAllocator, slices_per_batch) - 16usize];
    ["Offset of field: _GumCodeAllocator::pages_metadata_size"]
        [::std::mem::offset_of!(_GumCodeAllocator, pages_metadata_size) - 24usize];
    ["Offset of field: _GumCodeAllocator::uncommitted_pages"]
        [::std::mem::offset_of!(_GumCodeAllocator, uncommitted_pages) - 32usize];
    ["Offset of field: _GumCodeAllocator::dirty_pages"]
        [::std::mem::offset_of!(_GumCodeAllocator, dirty_pages) - 40usize];
    ["Offset of field: _GumCodeAllocator::free_slices"]
        [::std::mem::offset_of!(_GumCodeAllocator, free_slices) - 48usize];
    ["Offset of field: _GumCodeAllocator::dispatchers"]
        [::std::mem::offset_of!(_GumCodeAllocator, dispatchers) - 56usize];
};
impl Default for _GumCodeAllocator {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeSlice {
    pub data: gpointer,
    pub pc: gpointer,
    pub size: guint,
    pub ref_count: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCodeSlice"][::std::mem::size_of::<_GumCodeSlice>() - 24usize];
    ["Alignment of _GumCodeSlice"][::std::mem::align_of::<_GumCodeSlice>() - 8usize];
    ["Offset of field: _GumCodeSlice::data"][::std::mem::offset_of!(_GumCodeSlice, data) - 0usize];
    ["Offset of field: _GumCodeSlice::pc"][::std::mem::offset_of!(_GumCodeSlice, pc) - 8usize];
    ["Offset of field: _GumCodeSlice::size"][::std::mem::offset_of!(_GumCodeSlice, size) - 16usize];
    ["Offset of field: _GumCodeSlice::ref_count"]
        [::std::mem::offset_of!(_GumCodeSlice, ref_count) - 20usize];
};
impl Default for _GumCodeSlice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeDeflector {
    pub return_address: gpointer,
    pub target: gpointer,
    pub trampoline: gpointer,
    pub ref_count: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCodeDeflector"][::std::mem::size_of::<_GumCodeDeflector>() - 32usize];
    ["Alignment of _GumCodeDeflector"][::std::mem::align_of::<_GumCodeDeflector>() - 8usize];
    ["Offset of field: _GumCodeDeflector::return_address"]
        [::std::mem::offset_of!(_GumCodeDeflector, return_address) - 0usize];
    ["Offset of field: _GumCodeDeflector::target"]
        [::std::mem::offset_of!(_GumCodeDeflector, target) - 8usize];
    ["Offset of field: _GumCodeDeflector::trampoline"]
        [::std::mem::offset_of!(_GumCodeDeflector, trampoline) - 16usize];
    ["Offset of field: _GumCodeDeflector::ref_count"]
        [::std::mem::offset_of!(_GumCodeDeflector, ref_count) - 24usize];
};
impl Default for _GumCodeDeflector {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_code_allocator_init(allocator: *mut GumCodeAllocator, slice_size: gsize);
}
unsafe extern "C" {
    pub fn gum_code_allocator_free(allocator: *mut GumCodeAllocator);
}
unsafe extern "C" {
    pub fn gum_code_allocator_alloc_slice(self_: *mut GumCodeAllocator) -> *mut GumCodeSlice;
}
unsafe extern "C" {
    pub fn gum_code_allocator_try_alloc_slice_near(
        self_: *mut GumCodeAllocator,
        spec: *const GumAddressSpec,
        alignment: gsize,
    ) -> *mut GumCodeSlice;
}
unsafe extern "C" {
    pub fn gum_code_allocator_commit(self_: *mut GumCodeAllocator);
}
unsafe extern "C" {
    pub fn gum_code_slice_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_code_slice_ref(slice: *mut GumCodeSlice) -> *mut GumCodeSlice;
}
unsafe extern "C" {
    pub fn gum_code_slice_unref(slice: *mut GumCodeSlice);
}
unsafe extern "C" {
    pub fn gum_code_allocator_alloc_deflector(
        self_: *mut GumCodeAllocator,
        caller: *const GumAddressSpec,
        return_address: gpointer,
        target: gpointer,
        dedicated: gboolean,
    ) -> *mut GumCodeDeflector;
}
unsafe extern "C" {
    pub fn gum_code_deflector_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_code_deflector_ref(deflector: *mut GumCodeDeflector) -> *mut GumCodeDeflector;
}
unsafe extern "C" {
    pub fn gum_code_deflector_unref(deflector: *mut GumCodeDeflector);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeSegment {
    _unused: [u8; 0],
}
pub type GumCodeSegment = _GumCodeSegment;
unsafe extern "C" {
    pub fn gum_code_segment_is_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_code_segment_new(size: gsize, spec: *const GumAddressSpec) -> *mut GumCodeSegment;
}
unsafe extern "C" {
    pub fn gum_code_segment_free(segment: *mut GumCodeSegment);
}
unsafe extern "C" {
    pub fn gum_code_segment_get_address(self_: *mut GumCodeSegment) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_code_segment_get_size(self_: *mut GumCodeSegment) -> gsize;
}
unsafe extern "C" {
    pub fn gum_code_segment_get_virtual_size(self_: *mut GumCodeSegment) -> gsize;
}
unsafe extern "C" {
    pub fn gum_code_segment_realize(self_: *mut GumCodeSegment);
}
unsafe extern "C" {
    pub fn gum_code_segment_map(
        self_: *mut GumCodeSegment,
        source_offset: gsize,
        source_size: gsize,
        target_address: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_code_segment_mark(code: gpointer, size: gsize, error: *mut *mut GError) -> gboolean;
}
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_NONE: GumDarwinGrafterFlags = 0;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_INGEST_FUNCTION_STARTS:
    GumDarwinGrafterFlags = 1;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_INGEST_IMPORTS: GumDarwinGrafterFlags = 2;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_TRANSFORM_LAZY_BINDS:
    GumDarwinGrafterFlags = 4;
pub type GumDarwinGrafterFlags = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn gum_darwin_grafter_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinGrafter {
    _unused: [u8; 0],
}
pub type GumDarwinGrafter = _GumDarwinGrafter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDarwinGrafterClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumDarwinGrafterClass"][::std::mem::size_of::<GumDarwinGrafterClass>() - 136usize];
    ["Alignment of GumDarwinGrafterClass"]
        [::std::mem::align_of::<GumDarwinGrafterClass>() - 8usize];
    ["Offset of field: GumDarwinGrafterClass::parent_class"]
        [::std::mem::offset_of!(GumDarwinGrafterClass, parent_class) - 0usize];
};
impl Default for GumDarwinGrafterClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumDarwinGrafter_autoptr = *mut GumDarwinGrafter;
pub type GumDarwinGrafter_listautoptr = *mut GList;
pub type GumDarwinGrafter_slistautoptr = *mut GSList;
pub type GumDarwinGrafter_queueautoptr = *mut GQueue;
pub type GumDarwinGrafterClass_autoptr = *mut GumDarwinGrafterClass;
pub type GumDarwinGrafterClass_listautoptr = *mut GList;
pub type GumDarwinGrafterClass_slistautoptr = *mut GSList;
pub type GumDarwinGrafterClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_darwin_grafter_new_from_file(
        path: *const gchar,
        flags: GumDarwinGrafterFlags,
    ) -> *mut GumDarwinGrafter;
}
unsafe extern "C" {
    pub fn gum_darwin_grafter_add(self_: *mut GumDarwinGrafter, code_offset: guint32);
}
unsafe extern "C" {
    pub fn gum_darwin_grafter_graft(
        self_: *mut GumDarwinGrafter,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_module_get_type() -> GType;
}
pub type GumDarwinModule = _GumDarwinModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDarwinModuleClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumDarwinModuleClass"][::std::mem::size_of::<GumDarwinModuleClass>() - 136usize];
    ["Alignment of GumDarwinModuleClass"][::std::mem::align_of::<GumDarwinModuleClass>() - 8usize];
    ["Offset of field: GumDarwinModuleClass::parent_class"]
        [::std::mem::offset_of!(GumDarwinModuleClass, parent_class) - 0usize];
};
impl Default for GumDarwinModuleClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumDarwinModule_autoptr = *mut GumDarwinModule;
pub type GumDarwinModule_listautoptr = *mut GList;
pub type GumDarwinModule_slistautoptr = *mut GSList;
pub type GumDarwinModule_queueautoptr = *mut GQueue;
pub type GumDarwinModuleClass_autoptr = *mut GumDarwinModuleClass;
pub type GumDarwinModuleClass_listautoptr = *mut GList;
pub type GumDarwinModuleClass_slistautoptr = *mut GSList;
pub type GumDarwinModuleClass_queueautoptr = *mut GQueue;
pub type GumDarwinModuleFiletype = guint;
pub type GumDarwinCpuType = gint;
pub type GumDarwinCpuSubtype = gint;
pub type GumDarwinModuleImage = _GumDarwinModuleImage;
pub type GumDarwinModuleImageSegment = _GumDarwinModuleImageSegment;
pub type GumDarwinSectionDetails = _GumDarwinSectionDetails;
pub type GumDarwinChainedFixupsDetails = _GumDarwinChainedFixupsDetails;
pub type GumDarwinRebaseDetails = _GumDarwinRebaseDetails;
pub type GumDarwinBindDetails = _GumDarwinBindDetails;
pub type GumDarwinThreadedItem = _GumDarwinThreadedItem;
pub type GumDarwinTlvParameters = _GumDarwinTlvParameters;
pub type GumDarwinTlvDescriptorDetails = _GumDarwinTlvDescriptorDetails;
pub type GumDarwinInitPointersDetails = _GumDarwinInitPointersDetails;
pub type GumDarwinInitOffsetsDetails = _GumDarwinInitOffsetsDetails;
pub type GumDarwinTermPointersDetails = _GumDarwinTermPointersDetails;
pub type GumDarwinFunctionStartsDetails = _GumDarwinFunctionStartsDetails;
pub type GumDarwinSegment = _GumDarwinSegment;
pub type GumDarwinExportDetails = _GumDarwinExportDetails;
pub type GumDarwinSymbolDetails = _GumDarwinSymbolDetails;
pub type GumDarwinRebaseType = guint8;
pub type GumDarwinBindType = guint8;
pub type GumDarwinThreadedItemType = guint8;
pub type GumDarwinBindOrdinal = gint;
pub type GumDarwinBindSymbolFlags = guint8;
pub type GumDarwinExportSymbolKind = guint8;
pub type GumDarwinExportSymbolFlags = guint8;
pub type GumDarwinPort = guint;
pub type GumDarwinPageProtection = gint;
pub type GumFoundDarwinExportFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinExportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinSymbolFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinSymbolDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinSectionFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinChainedFixupsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinChainedFixupsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinRebaseFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinRebaseDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinBindFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinBindDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinTlvDescriptorFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinTlvDescriptorDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinInitPointersFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinInitPointersDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinInitOffsetsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinInitOffsetsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinTermPointersFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinTermPointersDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinFunctionStartsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinFunctionStartsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDyldInfoCommand {
    _unused: [u8; 0],
}
pub type GumDyldInfoCommand = _GumDyldInfoCommand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymtabCommand {
    _unused: [u8; 0],
}
pub type GumSymtabCommand = _GumSymtabCommand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDysymtabCommand {
    _unused: [u8; 0],
}
pub type GumDysymtabCommand = _GumDysymtabCommand;
pub const GumDarwinModuleFlags_GUM_DARWIN_MODULE_FLAGS_NONE: GumDarwinModuleFlags = 0;
pub const GumDarwinModuleFlags_GUM_DARWIN_MODULE_FLAGS_HEADER_ONLY: GumDarwinModuleFlags = 1;
pub type GumDarwinModuleFlags = ::std::os::raw::c_uint;
pub type GumChainedFixupsHeader = _GumChainedFixupsHeader;
pub type GumChainedStartsInImage = _GumChainedStartsInImage;
pub type GumChainedStartsInSegment = _GumChainedStartsInSegment;
pub type GumChainedImportFormat = guint32;
pub type GumChainedSymbolFormat = guint32;
pub type GumChainedPtrFormat = guint16;
pub type GumChainedImport = _GumChainedImport;
pub type GumChainedImportAddend = _GumChainedImportAddend;
pub type GumChainedImportAddend64 = _GumChainedImportAddend64;
pub type GumChainedPtr64Rebase = _GumChainedPtr64Rebase;
pub type GumChainedPtr64Bind = _GumChainedPtr64Bind;
pub type GumChainedPtrArm64eRebase = _GumChainedPtrArm64eRebase;
pub type GumChainedPtrArm64eBind = _GumChainedPtrArm64eBind;
pub type GumChainedPtrArm64eBind24 = _GumChainedPtrArm64eBind24;
pub type GumChainedPtrArm64eAuthRebase = _GumChainedPtrArm64eAuthRebase;
pub type GumChainedPtrArm64eAuthBind = _GumChainedPtrArm64eAuthBind;
pub type GumChainedPtrArm64eAuthBind24 = _GumChainedPtrArm64eAuthBind24;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinModule {
    pub parent: GObject,
    pub filetype: GumDarwinModuleFiletype,
    pub name: *mut gchar,
    pub uuid: *mut gchar,
    pub source_version: *mut gchar,
    pub task: GumDarwinPort,
    pub is_local: gboolean,
    pub is_kernel: gboolean,
    pub cpu_type: GumCpuType,
    pub ptrauth_support: GumPtrauthSupport,
    pub pointer_size: gsize,
    pub base_address: GumAddress,
    pub source_path: *mut gchar,
    pub source_blob: *mut GBytes,
    pub flags: GumDarwinModuleFlags,
    pub image: *mut GumDarwinModuleImage,
    pub info: *const GumDyldInfoCommand,
    pub symtab: *const GumSymtabCommand,
    pub dysymtab: *const GumDysymtabCommand,
    pub preferred_address: GumAddress,
    pub segments: *mut GArray,
    pub text_ranges: *mut GArray,
    pub text_size: gsize,
    pub rebases: *const guint8,
    pub rebases_end: *const guint8,
    pub rebases_malloc_data: gpointer,
    pub binds: *const guint8,
    pub binds_end: *const guint8,
    pub binds_malloc_data: gpointer,
    pub lazy_binds: *const guint8,
    pub lazy_binds_end: *const guint8,
    pub lazy_binds_malloc_data: gpointer,
    pub exports: *const guint8,
    pub exports_end: *const guint8,
    pub exports_malloc_data: gpointer,
    pub dependencies: *mut GArray,
    pub reexports: *mut GPtrArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinModule"][::std::mem::size_of::<_GumDarwinModule>() - 296usize];
    ["Alignment of _GumDarwinModule"][::std::mem::align_of::<_GumDarwinModule>() - 8usize];
    ["Offset of field: _GumDarwinModule::parent"]
        [::std::mem::offset_of!(_GumDarwinModule, parent) - 0usize];
    ["Offset of field: _GumDarwinModule::filetype"]
        [::std::mem::offset_of!(_GumDarwinModule, filetype) - 24usize];
    ["Offset of field: _GumDarwinModule::name"]
        [::std::mem::offset_of!(_GumDarwinModule, name) - 32usize];
    ["Offset of field: _GumDarwinModule::uuid"]
        [::std::mem::offset_of!(_GumDarwinModule, uuid) - 40usize];
    ["Offset of field: _GumDarwinModule::source_version"]
        [::std::mem::offset_of!(_GumDarwinModule, source_version) - 48usize];
    ["Offset of field: _GumDarwinModule::task"]
        [::std::mem::offset_of!(_GumDarwinModule, task) - 56usize];
    ["Offset of field: _GumDarwinModule::is_local"]
        [::std::mem::offset_of!(_GumDarwinModule, is_local) - 60usize];
    ["Offset of field: _GumDarwinModule::is_kernel"]
        [::std::mem::offset_of!(_GumDarwinModule, is_kernel) - 64usize];
    ["Offset of field: _GumDarwinModule::cpu_type"]
        [::std::mem::offset_of!(_GumDarwinModule, cpu_type) - 68usize];
    ["Offset of field: _GumDarwinModule::ptrauth_support"]
        [::std::mem::offset_of!(_GumDarwinModule, ptrauth_support) - 72usize];
    ["Offset of field: _GumDarwinModule::pointer_size"]
        [::std::mem::offset_of!(_GumDarwinModule, pointer_size) - 80usize];
    ["Offset of field: _GumDarwinModule::base_address"]
        [::std::mem::offset_of!(_GumDarwinModule, base_address) - 88usize];
    ["Offset of field: _GumDarwinModule::source_path"]
        [::std::mem::offset_of!(_GumDarwinModule, source_path) - 96usize];
    ["Offset of field: _GumDarwinModule::source_blob"]
        [::std::mem::offset_of!(_GumDarwinModule, source_blob) - 104usize];
    ["Offset of field: _GumDarwinModule::flags"]
        [::std::mem::offset_of!(_GumDarwinModule, flags) - 112usize];
    ["Offset of field: _GumDarwinModule::image"]
        [::std::mem::offset_of!(_GumDarwinModule, image) - 120usize];
    ["Offset of field: _GumDarwinModule::info"]
        [::std::mem::offset_of!(_GumDarwinModule, info) - 128usize];
    ["Offset of field: _GumDarwinModule::symtab"]
        [::std::mem::offset_of!(_GumDarwinModule, symtab) - 136usize];
    ["Offset of field: _GumDarwinModule::dysymtab"]
        [::std::mem::offset_of!(_GumDarwinModule, dysymtab) - 144usize];
    ["Offset of field: _GumDarwinModule::preferred_address"]
        [::std::mem::offset_of!(_GumDarwinModule, preferred_address) - 152usize];
    ["Offset of field: _GumDarwinModule::segments"]
        [::std::mem::offset_of!(_GumDarwinModule, segments) - 160usize];
    ["Offset of field: _GumDarwinModule::text_ranges"]
        [::std::mem::offset_of!(_GumDarwinModule, text_ranges) - 168usize];
    ["Offset of field: _GumDarwinModule::text_size"]
        [::std::mem::offset_of!(_GumDarwinModule, text_size) - 176usize];
    ["Offset of field: _GumDarwinModule::rebases"]
        [::std::mem::offset_of!(_GumDarwinModule, rebases) - 184usize];
    ["Offset of field: _GumDarwinModule::rebases_end"]
        [::std::mem::offset_of!(_GumDarwinModule, rebases_end) - 192usize];
    ["Offset of field: _GumDarwinModule::rebases_malloc_data"]
        [::std::mem::offset_of!(_GumDarwinModule, rebases_malloc_data) - 200usize];
    ["Offset of field: _GumDarwinModule::binds"]
        [::std::mem::offset_of!(_GumDarwinModule, binds) - 208usize];
    ["Offset of field: _GumDarwinModule::binds_end"]
        [::std::mem::offset_of!(_GumDarwinModule, binds_end) - 216usize];
    ["Offset of field: _GumDarwinModule::binds_malloc_data"]
        [::std::mem::offset_of!(_GumDarwinModule, binds_malloc_data) - 224usize];
    ["Offset of field: _GumDarwinModule::lazy_binds"]
        [::std::mem::offset_of!(_GumDarwinModule, lazy_binds) - 232usize];
    ["Offset of field: _GumDarwinModule::lazy_binds_end"]
        [::std::mem::offset_of!(_GumDarwinModule, lazy_binds_end) - 240usize];
    ["Offset of field: _GumDarwinModule::lazy_binds_malloc_data"]
        [::std::mem::offset_of!(_GumDarwinModule, lazy_binds_malloc_data) - 248usize];
    ["Offset of field: _GumDarwinModule::exports"]
        [::std::mem::offset_of!(_GumDarwinModule, exports) - 256usize];
    ["Offset of field: _GumDarwinModule::exports_end"]
        [::std::mem::offset_of!(_GumDarwinModule, exports_end) - 264usize];
    ["Offset of field: _GumDarwinModule::exports_malloc_data"]
        [::std::mem::offset_of!(_GumDarwinModule, exports_malloc_data) - 272usize];
    ["Offset of field: _GumDarwinModule::dependencies"]
        [::std::mem::offset_of!(_GumDarwinModule, dependencies) - 280usize];
    ["Offset of field: _GumDarwinModule::reexports"]
        [::std::mem::offset_of!(_GumDarwinModule, reexports) - 288usize];
};
impl Default for _GumDarwinModule {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinModuleImage {
    pub data: gpointer,
    pub size: guint64,
    pub linkedit: gconstpointer,
    pub source_offset: guint64,
    pub source_size: guint64,
    pub shared_offset: guint64,
    pub shared_size: guint64,
    pub shared_segments: *mut GArray,
    pub bytes: *mut GBytes,
    pub malloc_data: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinModuleImage"][::std::mem::size_of::<_GumDarwinModuleImage>() - 80usize];
    ["Alignment of _GumDarwinModuleImage"]
        [::std::mem::align_of::<_GumDarwinModuleImage>() - 8usize];
    ["Offset of field: _GumDarwinModuleImage::data"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, data) - 0usize];
    ["Offset of field: _GumDarwinModuleImage::size"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, size) - 8usize];
    ["Offset of field: _GumDarwinModuleImage::linkedit"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, linkedit) - 16usize];
    ["Offset of field: _GumDarwinModuleImage::source_offset"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, source_offset) - 24usize];
    ["Offset of field: _GumDarwinModuleImage::source_size"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, source_size) - 32usize];
    ["Offset of field: _GumDarwinModuleImage::shared_offset"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, shared_offset) - 40usize];
    ["Offset of field: _GumDarwinModuleImage::shared_size"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, shared_size) - 48usize];
    ["Offset of field: _GumDarwinModuleImage::shared_segments"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, shared_segments) - 56usize];
    ["Offset of field: _GumDarwinModuleImage::bytes"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, bytes) - 64usize];
    ["Offset of field: _GumDarwinModuleImage::malloc_data"]
        [::std::mem::offset_of!(_GumDarwinModuleImage, malloc_data) - 72usize];
};
impl Default for _GumDarwinModuleImage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinModuleImageSegment {
    pub offset: guint64,
    pub size: guint64,
    pub protection: GumDarwinPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinModuleImageSegment"]
        [::std::mem::size_of::<_GumDarwinModuleImageSegment>() - 24usize];
    ["Alignment of _GumDarwinModuleImageSegment"]
        [::std::mem::align_of::<_GumDarwinModuleImageSegment>() - 8usize];
    ["Offset of field: _GumDarwinModuleImageSegment::offset"]
        [::std::mem::offset_of!(_GumDarwinModuleImageSegment, offset) - 0usize];
    ["Offset of field: _GumDarwinModuleImageSegment::size"]
        [::std::mem::offset_of!(_GumDarwinModuleImageSegment, size) - 8usize];
    ["Offset of field: _GumDarwinModuleImageSegment::protection"]
        [::std::mem::offset_of!(_GumDarwinModuleImageSegment, protection) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinSectionDetails {
    pub segment_name: [gchar; 17usize],
    pub section_name: [gchar; 17usize],
    pub vm_address: GumAddress,
    pub size: guint64,
    pub protection: GumDarwinPageProtection,
    pub file_offset: guint32,
    pub flags: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinSectionDetails"]
        [::std::mem::size_of::<_GumDarwinSectionDetails>() - 72usize];
    ["Alignment of _GumDarwinSectionDetails"]
        [::std::mem::align_of::<_GumDarwinSectionDetails>() - 8usize];
    ["Offset of field: _GumDarwinSectionDetails::segment_name"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, segment_name) - 0usize];
    ["Offset of field: _GumDarwinSectionDetails::section_name"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, section_name) - 17usize];
    ["Offset of field: _GumDarwinSectionDetails::vm_address"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, vm_address) - 40usize];
    ["Offset of field: _GumDarwinSectionDetails::size"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, size) - 48usize];
    ["Offset of field: _GumDarwinSectionDetails::protection"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, protection) - 56usize];
    ["Offset of field: _GumDarwinSectionDetails::file_offset"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, file_offset) - 60usize];
    ["Offset of field: _GumDarwinSectionDetails::flags"]
        [::std::mem::offset_of!(_GumDarwinSectionDetails, flags) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinChainedFixupsDetails {
    pub vm_address: GumAddress,
    pub file_offset: guint64,
    pub size: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinChainedFixupsDetails"]
        [::std::mem::size_of::<_GumDarwinChainedFixupsDetails>() - 24usize];
    ["Alignment of _GumDarwinChainedFixupsDetails"]
        [::std::mem::align_of::<_GumDarwinChainedFixupsDetails>() - 8usize];
    ["Offset of field: _GumDarwinChainedFixupsDetails::vm_address"]
        [::std::mem::offset_of!(_GumDarwinChainedFixupsDetails, vm_address) - 0usize];
    ["Offset of field: _GumDarwinChainedFixupsDetails::file_offset"]
        [::std::mem::offset_of!(_GumDarwinChainedFixupsDetails, file_offset) - 8usize];
    ["Offset of field: _GumDarwinChainedFixupsDetails::size"]
        [::std::mem::offset_of!(_GumDarwinChainedFixupsDetails, size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinRebaseDetails {
    pub segment: *const GumDarwinSegment,
    pub offset: guint64,
    pub type_: GumDarwinRebaseType,
    pub slide: GumAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinRebaseDetails"][::std::mem::size_of::<_GumDarwinRebaseDetails>() - 32usize];
    ["Alignment of _GumDarwinRebaseDetails"]
        [::std::mem::align_of::<_GumDarwinRebaseDetails>() - 8usize];
    ["Offset of field: _GumDarwinRebaseDetails::segment"]
        [::std::mem::offset_of!(_GumDarwinRebaseDetails, segment) - 0usize];
    ["Offset of field: _GumDarwinRebaseDetails::offset"]
        [::std::mem::offset_of!(_GumDarwinRebaseDetails, offset) - 8usize];
    ["Offset of field: _GumDarwinRebaseDetails::type_"]
        [::std::mem::offset_of!(_GumDarwinRebaseDetails, type_) - 16usize];
    ["Offset of field: _GumDarwinRebaseDetails::slide"]
        [::std::mem::offset_of!(_GumDarwinRebaseDetails, slide) - 24usize];
};
impl Default for _GumDarwinRebaseDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinBindDetails {
    pub segment: *const GumDarwinSegment,
    pub offset: guint64,
    pub type_: GumDarwinBindType,
    pub library_ordinal: GumDarwinBindOrdinal,
    pub symbol_name: *const gchar,
    pub symbol_flags: GumDarwinBindSymbolFlags,
    pub addend: gint64,
    pub threaded_table_size: guint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinBindDetails"][::std::mem::size_of::<_GumDarwinBindDetails>() - 56usize];
    ["Alignment of _GumDarwinBindDetails"]
        [::std::mem::align_of::<_GumDarwinBindDetails>() - 8usize];
    ["Offset of field: _GumDarwinBindDetails::segment"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, segment) - 0usize];
    ["Offset of field: _GumDarwinBindDetails::offset"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, offset) - 8usize];
    ["Offset of field: _GumDarwinBindDetails::type_"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, type_) - 16usize];
    ["Offset of field: _GumDarwinBindDetails::library_ordinal"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, library_ordinal) - 20usize];
    ["Offset of field: _GumDarwinBindDetails::symbol_name"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, symbol_name) - 24usize];
    ["Offset of field: _GumDarwinBindDetails::symbol_flags"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, symbol_flags) - 32usize];
    ["Offset of field: _GumDarwinBindDetails::addend"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, addend) - 40usize];
    ["Offset of field: _GumDarwinBindDetails::threaded_table_size"]
        [::std::mem::offset_of!(_GumDarwinBindDetails, threaded_table_size) - 48usize];
};
impl Default for _GumDarwinBindDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinThreadedItem {
    pub is_authenticated: gboolean,
    pub type_: GumDarwinThreadedItemType,
    pub delta: guint16,
    pub key: guint8,
    pub has_address_diversity: gboolean,
    pub diversity: guint16,
    pub bind_ordinal: guint16,
    pub rebase_address: GumAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinThreadedItem"][::std::mem::size_of::<_GumDarwinThreadedItem>() - 32usize];
    ["Alignment of _GumDarwinThreadedItem"]
        [::std::mem::align_of::<_GumDarwinThreadedItem>() - 8usize];
    ["Offset of field: _GumDarwinThreadedItem::is_authenticated"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, is_authenticated) - 0usize];
    ["Offset of field: _GumDarwinThreadedItem::type_"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, type_) - 4usize];
    ["Offset of field: _GumDarwinThreadedItem::delta"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, delta) - 6usize];
    ["Offset of field: _GumDarwinThreadedItem::key"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, key) - 8usize];
    ["Offset of field: _GumDarwinThreadedItem::has_address_diversity"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, has_address_diversity) - 12usize];
    ["Offset of field: _GumDarwinThreadedItem::diversity"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, diversity) - 16usize];
    ["Offset of field: _GumDarwinThreadedItem::bind_ordinal"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, bind_ordinal) - 18usize];
    ["Offset of field: _GumDarwinThreadedItem::rebase_address"]
        [::std::mem::offset_of!(_GumDarwinThreadedItem, rebase_address) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinTlvParameters {
    pub num_descriptors: guint,
    pub descriptors_offset: guint,
    pub data_offset: guint,
    pub data_size: gsize,
    pub bss_size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinTlvParameters"][::std::mem::size_of::<_GumDarwinTlvParameters>() - 32usize];
    ["Alignment of _GumDarwinTlvParameters"]
        [::std::mem::align_of::<_GumDarwinTlvParameters>() - 8usize];
    ["Offset of field: _GumDarwinTlvParameters::num_descriptors"]
        [::std::mem::offset_of!(_GumDarwinTlvParameters, num_descriptors) - 0usize];
    ["Offset of field: _GumDarwinTlvParameters::descriptors_offset"]
        [::std::mem::offset_of!(_GumDarwinTlvParameters, descriptors_offset) - 4usize];
    ["Offset of field: _GumDarwinTlvParameters::data_offset"]
        [::std::mem::offset_of!(_GumDarwinTlvParameters, data_offset) - 8usize];
    ["Offset of field: _GumDarwinTlvParameters::data_size"]
        [::std::mem::offset_of!(_GumDarwinTlvParameters, data_size) - 16usize];
    ["Offset of field: _GumDarwinTlvParameters::bss_size"]
        [::std::mem::offset_of!(_GumDarwinTlvParameters, bss_size) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinTlvDescriptorDetails {
    pub file_offset: guint64,
    pub thunk: GumAddress,
    pub key: guint64,
    pub offset: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinTlvDescriptorDetails"]
        [::std::mem::size_of::<_GumDarwinTlvDescriptorDetails>() - 32usize];
    ["Alignment of _GumDarwinTlvDescriptorDetails"]
        [::std::mem::align_of::<_GumDarwinTlvDescriptorDetails>() - 8usize];
    ["Offset of field: _GumDarwinTlvDescriptorDetails::file_offset"]
        [::std::mem::offset_of!(_GumDarwinTlvDescriptorDetails, file_offset) - 0usize];
    ["Offset of field: _GumDarwinTlvDescriptorDetails::thunk"]
        [::std::mem::offset_of!(_GumDarwinTlvDescriptorDetails, thunk) - 8usize];
    ["Offset of field: _GumDarwinTlvDescriptorDetails::key"]
        [::std::mem::offset_of!(_GumDarwinTlvDescriptorDetails, key) - 16usize];
    ["Offset of field: _GumDarwinTlvDescriptorDetails::offset"]
        [::std::mem::offset_of!(_GumDarwinTlvDescriptorDetails, offset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinInitPointersDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinInitPointersDetails"]
        [::std::mem::size_of::<_GumDarwinInitPointersDetails>() - 16usize];
    ["Alignment of _GumDarwinInitPointersDetails"]
        [::std::mem::align_of::<_GumDarwinInitPointersDetails>() - 8usize];
    ["Offset of field: _GumDarwinInitPointersDetails::address"]
        [::std::mem::offset_of!(_GumDarwinInitPointersDetails, address) - 0usize];
    ["Offset of field: _GumDarwinInitPointersDetails::count"]
        [::std::mem::offset_of!(_GumDarwinInitPointersDetails, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinInitOffsetsDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinInitOffsetsDetails"]
        [::std::mem::size_of::<_GumDarwinInitOffsetsDetails>() - 16usize];
    ["Alignment of _GumDarwinInitOffsetsDetails"]
        [::std::mem::align_of::<_GumDarwinInitOffsetsDetails>() - 8usize];
    ["Offset of field: _GumDarwinInitOffsetsDetails::address"]
        [::std::mem::offset_of!(_GumDarwinInitOffsetsDetails, address) - 0usize];
    ["Offset of field: _GumDarwinInitOffsetsDetails::count"]
        [::std::mem::offset_of!(_GumDarwinInitOffsetsDetails, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinTermPointersDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinTermPointersDetails"]
        [::std::mem::size_of::<_GumDarwinTermPointersDetails>() - 16usize];
    ["Alignment of _GumDarwinTermPointersDetails"]
        [::std::mem::align_of::<_GumDarwinTermPointersDetails>() - 8usize];
    ["Offset of field: _GumDarwinTermPointersDetails::address"]
        [::std::mem::offset_of!(_GumDarwinTermPointersDetails, address) - 0usize];
    ["Offset of field: _GumDarwinTermPointersDetails::count"]
        [::std::mem::offset_of!(_GumDarwinTermPointersDetails, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinFunctionStartsDetails {
    pub vm_address: GumAddress,
    pub file_offset: guint64,
    pub size: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinFunctionStartsDetails"]
        [::std::mem::size_of::<_GumDarwinFunctionStartsDetails>() - 24usize];
    ["Alignment of _GumDarwinFunctionStartsDetails"]
        [::std::mem::align_of::<_GumDarwinFunctionStartsDetails>() - 8usize];
    ["Offset of field: _GumDarwinFunctionStartsDetails::vm_address"]
        [::std::mem::offset_of!(_GumDarwinFunctionStartsDetails, vm_address) - 0usize];
    ["Offset of field: _GumDarwinFunctionStartsDetails::file_offset"]
        [::std::mem::offset_of!(_GumDarwinFunctionStartsDetails, file_offset) - 8usize];
    ["Offset of field: _GumDarwinFunctionStartsDetails::size"]
        [::std::mem::offset_of!(_GumDarwinFunctionStartsDetails, size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinSegment {
    pub name: [gchar; 17usize],
    pub vm_address: GumAddress,
    pub vm_size: guint64,
    pub file_offset: guint64,
    pub file_size: guint64,
    pub protection: GumDarwinPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinSegment"][::std::mem::size_of::<_GumDarwinSegment>() - 64usize];
    ["Alignment of _GumDarwinSegment"][::std::mem::align_of::<_GumDarwinSegment>() - 8usize];
    ["Offset of field: _GumDarwinSegment::name"]
        [::std::mem::offset_of!(_GumDarwinSegment, name) - 0usize];
    ["Offset of field: _GumDarwinSegment::vm_address"]
        [::std::mem::offset_of!(_GumDarwinSegment, vm_address) - 24usize];
    ["Offset of field: _GumDarwinSegment::vm_size"]
        [::std::mem::offset_of!(_GumDarwinSegment, vm_size) - 32usize];
    ["Offset of field: _GumDarwinSegment::file_offset"]
        [::std::mem::offset_of!(_GumDarwinSegment, file_offset) - 40usize];
    ["Offset of field: _GumDarwinSegment::file_size"]
        [::std::mem::offset_of!(_GumDarwinSegment, file_size) - 48usize];
    ["Offset of field: _GumDarwinSegment::protection"]
        [::std::mem::offset_of!(_GumDarwinSegment, protection) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumDarwinExportDetails {
    pub name: *const gchar,
    pub flags: guint64,
    pub __bindgen_anon_1: _GumDarwinExportDetails__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumDarwinExportDetails__bindgen_ty_1 {
    pub __bindgen_anon_1: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1 {
    pub offset: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1::offset"][::std::mem::offset_of!(
        _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1,
        offset
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2 {
    pub stub: guint64,
    pub resolver: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2::stub"][::std::mem::offset_of!(
        _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2,
        stub
    ) - 0usize];
    ["Offset of field: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2::resolver"][::std::mem::offset_of!(
        _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2,
        resolver
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3 {
    pub reexport_library_ordinal: gint,
    pub reexport_symbol: *const gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<_GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    [
        "Offset of field: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3::reexport_library_ordinal",
    ][::std::mem::offset_of!(
        _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3,
        reexport_library_ordinal
    ) - 0usize];
    ["Offset of field: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3::reexport_symbol"][::std::mem::offset_of!(
        _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3,
        reexport_symbol
    )
        - 8usize];
};
impl Default for _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinExportDetails__bindgen_ty_1"]
        [::std::mem::size_of::<_GumDarwinExportDetails__bindgen_ty_1>() - 16usize];
    ["Alignment of _GumDarwinExportDetails__bindgen_ty_1"]
        [::std::mem::align_of::<_GumDarwinExportDetails__bindgen_ty_1>() - 8usize];
};
impl Default for _GumDarwinExportDetails__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinExportDetails"][::std::mem::size_of::<_GumDarwinExportDetails>() - 32usize];
    ["Alignment of _GumDarwinExportDetails"]
        [::std::mem::align_of::<_GumDarwinExportDetails>() - 8usize];
    ["Offset of field: _GumDarwinExportDetails::name"]
        [::std::mem::offset_of!(_GumDarwinExportDetails, name) - 0usize];
    ["Offset of field: _GumDarwinExportDetails::flags"]
        [::std::mem::offset_of!(_GumDarwinExportDetails, flags) - 8usize];
};
impl Default for _GumDarwinExportDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinSymbolDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub type_: guint8,
    pub section: guint8,
    pub description: guint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDarwinSymbolDetails"][::std::mem::size_of::<_GumDarwinSymbolDetails>() - 24usize];
    ["Alignment of _GumDarwinSymbolDetails"]
        [::std::mem::align_of::<_GumDarwinSymbolDetails>() - 8usize];
    ["Offset of field: _GumDarwinSymbolDetails::name"]
        [::std::mem::offset_of!(_GumDarwinSymbolDetails, name) - 0usize];
    ["Offset of field: _GumDarwinSymbolDetails::address"]
        [::std::mem::offset_of!(_GumDarwinSymbolDetails, address) - 8usize];
    ["Offset of field: _GumDarwinSymbolDetails::type_"]
        [::std::mem::offset_of!(_GumDarwinSymbolDetails, type_) - 16usize];
    ["Offset of field: _GumDarwinSymbolDetails::section"]
        [::std::mem::offset_of!(_GumDarwinSymbolDetails, section) - 17usize];
    ["Offset of field: _GumDarwinSymbolDetails::description"]
        [::std::mem::offset_of!(_GumDarwinSymbolDetails, description) - 18usize];
};
impl Default for _GumDarwinSymbolDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedFixupsHeader {
    pub fixups_version: guint32,
    pub starts_offset: guint32,
    pub imports_offset: guint32,
    pub symbols_offset: guint32,
    pub imports_count: guint32,
    pub imports_format: GumChainedImportFormat,
    pub symbols_format: GumChainedSymbolFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedFixupsHeader"][::std::mem::size_of::<_GumChainedFixupsHeader>() - 28usize];
    ["Alignment of _GumChainedFixupsHeader"]
        [::std::mem::align_of::<_GumChainedFixupsHeader>() - 4usize];
    ["Offset of field: _GumChainedFixupsHeader::fixups_version"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, fixups_version) - 0usize];
    ["Offset of field: _GumChainedFixupsHeader::starts_offset"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, starts_offset) - 4usize];
    ["Offset of field: _GumChainedFixupsHeader::imports_offset"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, imports_offset) - 8usize];
    ["Offset of field: _GumChainedFixupsHeader::symbols_offset"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, symbols_offset) - 12usize];
    ["Offset of field: _GumChainedFixupsHeader::imports_count"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, imports_count) - 16usize];
    ["Offset of field: _GumChainedFixupsHeader::imports_format"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, imports_format) - 20usize];
    ["Offset of field: _GumChainedFixupsHeader::symbols_format"]
        [::std::mem::offset_of!(_GumChainedFixupsHeader, symbols_format) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedImport {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedImport"][::std::mem::size_of::<_GumChainedImport>() - 4usize];
    ["Alignment of _GumChainedImport"][::std::mem::align_of::<_GumChainedImport>() - 4usize];
};
impl _GumChainedImport {
    #[inline]
    pub fn lib_ordinal(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lib_ordinal_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_lib_ordinal_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weak_import_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weak_import_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn name_offset_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_name_offset_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint32,
        weak_import: guint32,
        name_offset: guint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedImportAddend {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub addend: gint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedImportAddend"][::std::mem::size_of::<_GumChainedImportAddend>() - 8usize];
    ["Alignment of _GumChainedImportAddend"]
        [::std::mem::align_of::<_GumChainedImportAddend>() - 4usize];
    ["Offset of field: _GumChainedImportAddend::addend"]
        [::std::mem::offset_of!(_GumChainedImportAddend, addend) - 4usize];
};
impl _GumChainedImportAddend {
    #[inline]
    pub fn lib_ordinal(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lib_ordinal_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_lib_ordinal_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weak_import_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weak_import_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn name_offset_raw(this: *const Self) -> guint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_name_offset_raw(this: *mut Self, val: guint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint32,
        weak_import: guint32,
        name_offset: guint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedImportAddend64 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub addend: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedImportAddend64"]
        [::std::mem::size_of::<_GumChainedImportAddend64>() - 16usize];
    ["Alignment of _GumChainedImportAddend64"]
        [::std::mem::align_of::<_GumChainedImportAddend64>() - 8usize];
    ["Offset of field: _GumChainedImportAddend64::addend"]
        [::std::mem::offset_of!(_GumChainedImportAddend64, addend) - 8usize];
};
impl _GumChainedImportAddend64 {
    #[inline]
    pub fn lib_ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lib_ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_lib_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weak_import_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_weak_import_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                15u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                15u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn name_offset_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_name_offset_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint64,
        weak_import: guint64,
        reserved: guint64,
        name_offset: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let lib_ordinal: u64 = unsafe { ::std::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let weak_import: u64 = unsafe { ::std::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let name_offset: u64 = unsafe { ::std::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedStartsInImage {
    pub seg_count: guint32,
    pub seg_info_offset: [guint32; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedStartsInImage"]
        [::std::mem::size_of::<_GumChainedStartsInImage>() - 8usize];
    ["Alignment of _GumChainedStartsInImage"]
        [::std::mem::align_of::<_GumChainedStartsInImage>() - 4usize];
    ["Offset of field: _GumChainedStartsInImage::seg_count"]
        [::std::mem::offset_of!(_GumChainedStartsInImage, seg_count) - 0usize];
    ["Offset of field: _GumChainedStartsInImage::seg_info_offset"]
        [::std::mem::offset_of!(_GumChainedStartsInImage, seg_info_offset) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedStartsInSegment {
    pub size: guint32,
    pub page_size: guint16,
    pub pointer_format: GumChainedPtrFormat,
    pub segment_offset: guint64,
    pub max_valid_pointer: guint32,
    pub page_count: guint16,
    pub page_start: [guint16; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedStartsInSegment"]
        [::std::mem::size_of::<_GumChainedStartsInSegment>() - 24usize];
    ["Alignment of _GumChainedStartsInSegment"]
        [::std::mem::align_of::<_GumChainedStartsInSegment>() - 8usize];
    ["Offset of field: _GumChainedStartsInSegment::size"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, size) - 0usize];
    ["Offset of field: _GumChainedStartsInSegment::page_size"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, page_size) - 4usize];
    ["Offset of field: _GumChainedStartsInSegment::pointer_format"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, pointer_format) - 6usize];
    ["Offset of field: _GumChainedStartsInSegment::segment_offset"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, segment_offset) - 8usize];
    ["Offset of field: _GumChainedStartsInSegment::max_valid_pointer"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, max_valid_pointer) - 16usize];
    ["Offset of field: _GumChainedStartsInSegment::page_count"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, page_count) - 20usize];
    ["Offset of field: _GumChainedStartsInSegment::page_start"]
        [::std::mem::offset_of!(_GumChainedStartsInSegment, page_start) - 22usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtr64Rebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtr64Rebase"][::std::mem::size_of::<_GumChainedPtr64Rebase>() - 8usize];
    ["Alignment of _GumChainedPtr64Rebase"]
        [::std::mem::align_of::<_GumChainedPtr64Rebase>() - 8usize];
};
impl _GumChainedPtr64Rebase {
    #[inline]
    pub fn target(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 36u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 36u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn target_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                36u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_target_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                36u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn high8(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_high8(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn high8_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                36usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_high8_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                36usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 7u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                44usize,
                7u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                44usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                12u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: guint64,
        high8: guint64,
        reserved: guint64,
        next: guint64,
        bind: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 36u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(36usize, 8u8, {
            let high8: u64 = unsafe { ::std::mem::transmute(high8) };
            high8 as u64
        });
        __bindgen_bitfield_unit.set(44usize, 7u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtr64Bind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtr64Bind"][::std::mem::size_of::<_GumChainedPtr64Bind>() - 8usize];
    ["Alignment of _GumChainedPtr64Bind"][::std::mem::align_of::<_GumChainedPtr64Bind>() - 8usize];
};
impl _GumChainedPtr64Bind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addend_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addend_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                19u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                19u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                12u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        addend: guint64,
        reserved: guint64,
        next: guint64,
        bind: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eRebase {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eRebase"]
        [::std::mem::size_of::<_GumChainedPtrArm64eRebase>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eRebase"]
        [::std::mem::align_of::<_GumChainedPtrArm64eRebase>() - 8usize];
};
impl _GumChainedPtrArm64eRebase {
    #[inline]
    pub fn target(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 43u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 43u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn target_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                43u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_target_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                43u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn high8(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_high8(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn high8_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                43usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_high8_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                43usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: guint64,
        high8: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 43u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(43usize, 8u8, {
            let high8: u64 = unsafe { ::std::mem::transmute(high8) };
            high8 as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eBind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eBind"]
        [::std::mem::size_of::<_GumChainedPtrArm64eBind>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eBind"]
        [::std::mem::align_of::<_GumChainedPtrArm64eBind>() - 8usize];
};
impl _GumChainedPtrArm64eBind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn zero_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_zero_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addend_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                19u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addend_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                19u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        addend: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eBind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eBind24"]
        [::std::mem::size_of::<_GumChainedPtrArm64eBind24>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eBind24"]
        [::std::mem::align_of::<_GumChainedPtrArm64eBind24>() - 8usize];
};
impl _GumChainedPtrArm64eBind24 {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn zero_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_zero_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addend_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                19u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addend_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                19u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        addend: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::std::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthRebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eAuthRebase"]
        [::std::mem::size_of::<_GumChainedPtrArm64eAuthRebase>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eAuthRebase"]
        [::std::mem::align_of::<_GumChainedPtrArm64eAuthRebase>() - 8usize];
};
impl _GumChainedPtrArm64eAuthRebase {
    #[inline]
    pub fn target(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn target_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                32u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_target_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diversity_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_diversity_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addr_div_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addr_div_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn key_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                49usize,
                2u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_key_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                49usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let target: u64 = unsafe { ::std::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::std::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthBind {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eAuthBind"]
        [::std::mem::size_of::<_GumChainedPtrArm64eAuthBind>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eAuthBind"]
        [::std::mem::align_of::<_GumChainedPtrArm64eAuthBind>() - 8usize];
};
impl _GumChainedPtrArm64eAuthBind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn zero_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_zero_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diversity_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_diversity_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addr_div_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addr_div_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn key_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                49usize,
                2u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_key_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                49usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::std::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthBind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumChainedPtrArm64eAuthBind24"]
        [::std::mem::size_of::<_GumChainedPtrArm64eAuthBind24>() - 8usize];
    ["Alignment of _GumChainedPtrArm64eAuthBind24"]
        [::std::mem::align_of::<_GumChainedPtrArm64eAuthBind24>() - 8usize];
};
impl _GumChainedPtrArm64eAuthBind24 {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ordinal_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ordinal_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn zero_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_zero_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diversity_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_diversity_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn addr_div_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_addr_div_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn key_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                49usize,
                2u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_key_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                49usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn next_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                51usize,
                11u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_next_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                51usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bind_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                62usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_bind_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                62usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn auth_raw(this: *const Self) -> guint64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                63usize,
                1u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_auth_raw(this: *mut Self, val: guint64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                63usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::std::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::std::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::std::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::std::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::std::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::std::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::std::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::std::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub fn gum_darwin_module_new_from_file(
        path: *const gchar,
        cpu_type: GumCpuType,
        ptrauth_support: GumPtrauthSupport,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
unsafe extern "C" {
    pub fn gum_darwin_module_new_from_blob(
        blob: *mut GBytes,
        cpu_type: GumCpuType,
        ptrauth_support: GumPtrauthSupport,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
unsafe extern "C" {
    pub fn gum_darwin_module_new_from_memory(
        name: *const gchar,
        task: GumDarwinPort,
        base_address: GumAddress,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
unsafe extern "C" {
    pub fn gum_darwin_module_load(self_: *mut GumDarwinModule, error: *mut *mut GError)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_module_resolve_export(
        self_: *mut GumDarwinModule,
        symbol: *const gchar,
        details: *mut GumDarwinExportDetails,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_module_resolve_symbol_address(
        self_: *mut GumDarwinModule,
        symbol: *const gchar,
    ) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_darwin_module_get_lacks_exports_for_reexports(
        self_: *mut GumDarwinModule,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_imports(
        self_: *mut GumDarwinModule,
        func: GumFoundImportFunc,
        resolver: GumResolveExportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_exports(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinExportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_symbols(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinSymbolFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_get_slide(self_: *mut GumDarwinModule) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_darwin_module_get_nth_segment(
        self_: *mut GumDarwinModule,
        index: gsize,
    ) -> *const GumDarwinSegment;
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_sections(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinSectionFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_is_address_in_text_section(
        self_: *mut GumDarwinModule,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_chained_fixups(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinChainedFixupsFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_rebases(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinRebaseFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_binds(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinBindFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_lazy_binds(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinBindFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_query_tlv_parameters(
        self_: *mut GumDarwinModule,
        params: *mut GumDarwinTlvParameters,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_tlv_descriptors(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinTlvDescriptorFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_init_pointers(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinInitPointersFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_init_offsets(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinInitOffsetsFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_term_pointers(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinTermPointersFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_dependencies(
        self_: *mut GumDarwinModule,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_enumerate_function_starts(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinFunctionStartsFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_darwin_module_get_dependency_by_ordinal(
        self_: *mut GumDarwinModule,
        ordinal: gint,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_darwin_module_ensure_image_loaded(
        self_: *mut GumDarwinModule,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_darwin_threaded_item_parse(value: guint64, result: *mut GumDarwinThreadedItem);
}
unsafe extern "C" {
    pub fn gum_darwin_module_image_get_type() -> GType;
}
unsafe extern "C" {
    pub fn gum_darwin_module_image_new() -> *mut GumDarwinModuleImage;
}
unsafe extern "C" {
    pub fn gum_darwin_module_image_dup(
        other: *const GumDarwinModuleImage,
    ) -> *mut GumDarwinModuleImage;
}
unsafe extern "C" {
    pub fn gum_darwin_module_image_free(image: *mut GumDarwinModuleImage);
}
unsafe extern "C" {
    pub fn gum_elf_module_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfModule {
    _unused: [u8; 0],
}
pub type GumElfModule = _GumElfModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumElfModuleClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumElfModuleClass"][::std::mem::size_of::<GumElfModuleClass>() - 136usize];
    ["Alignment of GumElfModuleClass"][::std::mem::align_of::<GumElfModuleClass>() - 8usize];
    ["Offset of field: GumElfModuleClass::parent_class"]
        [::std::mem::offset_of!(GumElfModuleClass, parent_class) - 0usize];
};
impl Default for GumElfModuleClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumElfModule_autoptr = *mut GumElfModule;
pub type GumElfModule_listautoptr = *mut GList;
pub type GumElfModule_slistautoptr = *mut GSList;
pub type GumElfModule_queueautoptr = *mut GQueue;
pub type GumElfModuleClass_autoptr = *mut GumElfModuleClass;
pub type GumElfModuleClass_listautoptr = *mut GList;
pub type GumElfModuleClass_slistautoptr = *mut GSList;
pub type GumElfModuleClass_queueautoptr = *mut GQueue;
pub const GumElfType_GUM_ELF_NONE: GumElfType = 0;
pub const GumElfType_GUM_ELF_REL: GumElfType = 1;
pub const GumElfType_GUM_ELF_EXEC: GumElfType = 2;
pub const GumElfType_GUM_ELF_DYN: GumElfType = 3;
pub const GumElfType_GUM_ELF_CORE: GumElfType = 4;
pub type GumElfType = ::std::os::raw::c_uint;
pub const GumElfOSABI_GUM_ELF_OS_SYSV: GumElfOSABI = 0;
pub const GumElfOSABI_GUM_ELF_OS_HPUX: GumElfOSABI = 1;
pub const GumElfOSABI_GUM_ELF_OS_NETBSD: GumElfOSABI = 2;
pub const GumElfOSABI_GUM_ELF_OS_LINUX: GumElfOSABI = 3;
pub const GumElfOSABI_GUM_ELF_OS_SOLARIS: GumElfOSABI = 6;
pub const GumElfOSABI_GUM_ELF_OS_AIX: GumElfOSABI = 7;
pub const GumElfOSABI_GUM_ELF_OS_IRIX: GumElfOSABI = 8;
pub const GumElfOSABI_GUM_ELF_OS_FREEBSD: GumElfOSABI = 9;
pub const GumElfOSABI_GUM_ELF_OS_TRU64: GumElfOSABI = 10;
pub const GumElfOSABI_GUM_ELF_OS_MODESTO: GumElfOSABI = 11;
pub const GumElfOSABI_GUM_ELF_OS_OPENBSD: GumElfOSABI = 12;
pub const GumElfOSABI_GUM_ELF_OS_ARM_AEABI: GumElfOSABI = 64;
pub const GumElfOSABI_GUM_ELF_OS_ARM: GumElfOSABI = 97;
pub const GumElfOSABI_GUM_ELF_OS_STANDALONE: GumElfOSABI = 255;
pub type GumElfOSABI = ::std::os::raw::c_uint;
pub const GumElfMachine_GUM_ELF_MACHINE_NONE: GumElfMachine = 0;
pub const GumElfMachine_GUM_ELF_MACHINE_M32: GumElfMachine = 1;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARC: GumElfMachine = 2;
pub const GumElfMachine_GUM_ELF_MACHINE_386: GumElfMachine = 3;
pub const GumElfMachine_GUM_ELF_MACHINE_68K: GumElfMachine = 4;
pub const GumElfMachine_GUM_ELF_MACHINE_88K: GumElfMachine = 5;
pub const GumElfMachine_GUM_ELF_MACHINE_IAMCU: GumElfMachine = 6;
pub const GumElfMachine_GUM_ELF_MACHINE_860: GumElfMachine = 7;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS: GumElfMachine = 8;
pub const GumElfMachine_GUM_ELF_MACHINE_S370: GumElfMachine = 9;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS_RS3_LE: GumElfMachine = 10;
pub const GumElfMachine_GUM_ELF_MACHINE_PARISC: GumElfMachine = 15;
pub const GumElfMachine_GUM_ELF_MACHINE_VPP500: GumElfMachine = 17;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARC32PLUS: GumElfMachine = 18;
pub const GumElfMachine_GUM_ELF_MACHINE_960: GumElfMachine = 19;
pub const GumElfMachine_GUM_ELF_MACHINE_PPC: GumElfMachine = 20;
pub const GumElfMachine_GUM_ELF_MACHINE_PPC64: GumElfMachine = 21;
pub const GumElfMachine_GUM_ELF_MACHINE_S390: GumElfMachine = 22;
pub const GumElfMachine_GUM_ELF_MACHINE_SPU: GumElfMachine = 23;
pub const GumElfMachine_GUM_ELF_MACHINE_V800: GumElfMachine = 36;
pub const GumElfMachine_GUM_ELF_MACHINE_FR20: GumElfMachine = 37;
pub const GumElfMachine_GUM_ELF_MACHINE_RH32: GumElfMachine = 38;
pub const GumElfMachine_GUM_ELF_MACHINE_RCE: GumElfMachine = 39;
pub const GumElfMachine_GUM_ELF_MACHINE_ARM: GumElfMachine = 40;
pub const GumElfMachine_GUM_ELF_MACHINE_FAKE_ALPHA: GumElfMachine = 41;
pub const GumElfMachine_GUM_ELF_MACHINE_SH: GumElfMachine = 42;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARCV9: GumElfMachine = 43;
pub const GumElfMachine_GUM_ELF_MACHINE_TRICORE: GumElfMachine = 44;
pub const GumElfMachine_GUM_ELF_MACHINE_ARC: GumElfMachine = 45;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_300: GumElfMachine = 46;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_300H: GumElfMachine = 47;
pub const GumElfMachine_GUM_ELF_MACHINE_H8S: GumElfMachine = 48;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_500: GumElfMachine = 49;
pub const GumElfMachine_GUM_ELF_MACHINE_IA_64: GumElfMachine = 50;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS_X: GumElfMachine = 51;
pub const GumElfMachine_GUM_ELF_MACHINE_COLDFIRE: GumElfMachine = 52;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC12: GumElfMachine = 53;
pub const GumElfMachine_GUM_ELF_MACHINE_MMA: GumElfMachine = 54;
pub const GumElfMachine_GUM_ELF_MACHINE_PCP: GumElfMachine = 55;
pub const GumElfMachine_GUM_ELF_MACHINE_NCPU: GumElfMachine = 56;
pub const GumElfMachine_GUM_ELF_MACHINE_NDR1: GumElfMachine = 57;
pub const GumElfMachine_GUM_ELF_MACHINE_STARCORE: GumElfMachine = 58;
pub const GumElfMachine_GUM_ELF_MACHINE_ME16: GumElfMachine = 59;
pub const GumElfMachine_GUM_ELF_MACHINE_ST100: GumElfMachine = 60;
pub const GumElfMachine_GUM_ELF_MACHINE_TINYJ: GumElfMachine = 61;
pub const GumElfMachine_GUM_ELF_MACHINE_X86_64: GumElfMachine = 62;
pub const GumElfMachine_GUM_ELF_MACHINE_PDSP: GumElfMachine = 63;
pub const GumElfMachine_GUM_ELF_MACHINE_PDP10: GumElfMachine = 64;
pub const GumElfMachine_GUM_ELF_MACHINE_PDP11: GumElfMachine = 65;
pub const GumElfMachine_GUM_ELF_MACHINE_FX66: GumElfMachine = 66;
pub const GumElfMachine_GUM_ELF_MACHINE_ST9PLUS: GumElfMachine = 67;
pub const GumElfMachine_GUM_ELF_MACHINE_ST7: GumElfMachine = 68;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC16: GumElfMachine = 69;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC11: GumElfMachine = 70;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC08: GumElfMachine = 71;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC05: GumElfMachine = 72;
pub const GumElfMachine_GUM_ELF_MACHINE_SVX: GumElfMachine = 73;
pub const GumElfMachine_GUM_ELF_MACHINE_ST19: GumElfMachine = 74;
pub const GumElfMachine_GUM_ELF_MACHINE_VAX: GumElfMachine = 75;
pub const GumElfMachine_GUM_ELF_MACHINE_CRIS: GumElfMachine = 76;
pub const GumElfMachine_GUM_ELF_MACHINE_JAVELIN: GumElfMachine = 77;
pub const GumElfMachine_GUM_ELF_MACHINE_FIREPATH: GumElfMachine = 78;
pub const GumElfMachine_GUM_ELF_MACHINE_ZSP: GumElfMachine = 79;
pub const GumElfMachine_GUM_ELF_MACHINE_MMIX: GumElfMachine = 80;
pub const GumElfMachine_GUM_ELF_MACHINE_HUANY: GumElfMachine = 81;
pub const GumElfMachine_GUM_ELF_MACHINE_PRISM: GumElfMachine = 82;
pub const GumElfMachine_GUM_ELF_MACHINE_AVR: GumElfMachine = 83;
pub const GumElfMachine_GUM_ELF_MACHINE_FR30: GumElfMachine = 84;
pub const GumElfMachine_GUM_ELF_MACHINE_D10V: GumElfMachine = 85;
pub const GumElfMachine_GUM_ELF_MACHINE_D30V: GumElfMachine = 86;
pub const GumElfMachine_GUM_ELF_MACHINE_V850: GumElfMachine = 87;
pub const GumElfMachine_GUM_ELF_MACHINE_M32R: GumElfMachine = 88;
pub const GumElfMachine_GUM_ELF_MACHINE_MN10300: GumElfMachine = 89;
pub const GumElfMachine_GUM_ELF_MACHINE_MN10200: GumElfMachine = 90;
pub const GumElfMachine_GUM_ELF_MACHINE_PJ: GumElfMachine = 91;
pub const GumElfMachine_GUM_ELF_MACHINE_OPENRISC: GumElfMachine = 92;
pub const GumElfMachine_GUM_ELF_MACHINE_ARC_COMPACT: GumElfMachine = 93;
pub const GumElfMachine_GUM_ELF_MACHINE_XTENSA: GumElfMachine = 94;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE: GumElfMachine = 95;
pub const GumElfMachine_GUM_ELF_MACHINE_TMM_GPP: GumElfMachine = 96;
pub const GumElfMachine_GUM_ELF_MACHINE_NS32K: GumElfMachine = 97;
pub const GumElfMachine_GUM_ELF_MACHINE_TPC: GumElfMachine = 98;
pub const GumElfMachine_GUM_ELF_MACHINE_SNP1K: GumElfMachine = 99;
pub const GumElfMachine_GUM_ELF_MACHINE_ST200: GumElfMachine = 100;
pub const GumElfMachine_GUM_ELF_MACHINE_IP2K: GumElfMachine = 101;
pub const GumElfMachine_GUM_ELF_MACHINE_MAX: GumElfMachine = 102;
pub const GumElfMachine_GUM_ELF_MACHINE_CR: GumElfMachine = 103;
pub const GumElfMachine_GUM_ELF_MACHINE_F2MC16: GumElfMachine = 104;
pub const GumElfMachine_GUM_ELF_MACHINE_MSP430: GumElfMachine = 105;
pub const GumElfMachine_GUM_ELF_MACHINE_BLACKFIN: GumElfMachine = 106;
pub const GumElfMachine_GUM_ELF_MACHINE_SE_C33: GumElfMachine = 107;
pub const GumElfMachine_GUM_ELF_MACHINE_SEP: GumElfMachine = 108;
pub const GumElfMachine_GUM_ELF_MACHINE_ARCA: GumElfMachine = 109;
pub const GumElfMachine_GUM_ELF_MACHINE_UNICORE: GumElfMachine = 110;
pub const GumElfMachine_GUM_ELF_MACHINE_EXCESS: GumElfMachine = 111;
pub const GumElfMachine_GUM_ELF_MACHINE_DXP: GumElfMachine = 112;
pub const GumElfMachine_GUM_ELF_MACHINE_ALTERA_NIOS2: GumElfMachine = 113;
pub const GumElfMachine_GUM_ELF_MACHINE_CRX: GumElfMachine = 114;
pub const GumElfMachine_GUM_ELF_MACHINE_XGATE: GumElfMachine = 115;
pub const GumElfMachine_GUM_ELF_MACHINE_C166: GumElfMachine = 116;
pub const GumElfMachine_GUM_ELF_MACHINE_M16C: GumElfMachine = 117;
pub const GumElfMachine_GUM_ELF_MACHINE_DSPIC30F: GumElfMachine = 118;
pub const GumElfMachine_GUM_ELF_MACHINE_CE: GumElfMachine = 119;
pub const GumElfMachine_GUM_ELF_MACHINE_M32C: GumElfMachine = 120;
pub const GumElfMachine_GUM_ELF_MACHINE_TSK3000: GumElfMachine = 131;
pub const GumElfMachine_GUM_ELF_MACHINE_RS08: GumElfMachine = 132;
pub const GumElfMachine_GUM_ELF_MACHINE_SHARC: GumElfMachine = 133;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG2: GumElfMachine = 134;
pub const GumElfMachine_GUM_ELF_MACHINE_SCORE7: GumElfMachine = 135;
pub const GumElfMachine_GUM_ELF_MACHINE_DSP24: GumElfMachine = 136;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE3: GumElfMachine = 137;
pub const GumElfMachine_GUM_ELF_MACHINE_LATTICEMICO32: GumElfMachine = 138;
pub const GumElfMachine_GUM_ELF_MACHINE_SE_C17: GumElfMachine = 139;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C6000: GumElfMachine = 140;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C2000: GumElfMachine = 141;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C5500: GumElfMachine = 142;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_ARP32: GumElfMachine = 143;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_PRU: GumElfMachine = 144;
pub const GumElfMachine_GUM_ELF_MACHINE_MMDSP_PLUS: GumElfMachine = 160;
pub const GumElfMachine_GUM_ELF_MACHINE_CYPRESS_M8C: GumElfMachine = 161;
pub const GumElfMachine_GUM_ELF_MACHINE_R32C: GumElfMachine = 162;
pub const GumElfMachine_GUM_ELF_MACHINE_TRIMEDIA: GumElfMachine = 163;
pub const GumElfMachine_GUM_ELF_MACHINE_QDSP6: GumElfMachine = 164;
pub const GumElfMachine_GUM_ELF_MACHINE_8051: GumElfMachine = 165;
pub const GumElfMachine_GUM_ELF_MACHINE_STXP7X: GumElfMachine = 166;
pub const GumElfMachine_GUM_ELF_MACHINE_NDS32: GumElfMachine = 167;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG1X: GumElfMachine = 168;
pub const GumElfMachine_GUM_ELF_MACHINE_MAXQ30: GumElfMachine = 169;
pub const GumElfMachine_GUM_ELF_MACHINE_XIMO16: GumElfMachine = 170;
pub const GumElfMachine_GUM_ELF_MACHINE_MANIK: GumElfMachine = 171;
pub const GumElfMachine_GUM_ELF_MACHINE_CRAYNV2: GumElfMachine = 172;
pub const GumElfMachine_GUM_ELF_MACHINE_RX: GumElfMachine = 173;
pub const GumElfMachine_GUM_ELF_MACHINE_METAG: GumElfMachine = 174;
pub const GumElfMachine_GUM_ELF_MACHINE_MCST_ELBRUS: GumElfMachine = 175;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG16: GumElfMachine = 176;
pub const GumElfMachine_GUM_ELF_MACHINE_CR16: GumElfMachine = 177;
pub const GumElfMachine_GUM_ELF_MACHINE_ETPU: GumElfMachine = 178;
pub const GumElfMachine_GUM_ELF_MACHINE_SLE9X: GumElfMachine = 179;
pub const GumElfMachine_GUM_ELF_MACHINE_L10M: GumElfMachine = 180;
pub const GumElfMachine_GUM_ELF_MACHINE_K10M: GumElfMachine = 181;
pub const GumElfMachine_GUM_ELF_MACHINE_AARCH64: GumElfMachine = 183;
pub const GumElfMachine_GUM_ELF_MACHINE_AVR32: GumElfMachine = 185;
pub const GumElfMachine_GUM_ELF_MACHINE_STM8: GumElfMachine = 186;
pub const GumElfMachine_GUM_ELF_MACHINE_TILE64: GumElfMachine = 187;
pub const GumElfMachine_GUM_ELF_MACHINE_TILEPRO: GumElfMachine = 188;
pub const GumElfMachine_GUM_ELF_MACHINE_MICROBLAZE: GumElfMachine = 189;
pub const GumElfMachine_GUM_ELF_MACHINE_CUDA: GumElfMachine = 190;
pub const GumElfMachine_GUM_ELF_MACHINE_TILEGX: GumElfMachine = 191;
pub const GumElfMachine_GUM_ELF_MACHINE_CLOUDSHIELD: GumElfMachine = 192;
pub const GumElfMachine_GUM_ELF_MACHINE_COREA_1ST: GumElfMachine = 193;
pub const GumElfMachine_GUM_ELF_MACHINE_COREA_2ND: GumElfMachine = 194;
pub const GumElfMachine_GUM_ELF_MACHINE_ARCV2: GumElfMachine = 195;
pub const GumElfMachine_GUM_ELF_MACHINE_OPEN8: GumElfMachine = 196;
pub const GumElfMachine_GUM_ELF_MACHINE_RL78: GumElfMachine = 197;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE5: GumElfMachine = 198;
pub const GumElfMachine_GUM_ELF_MACHINE_78KOR: GumElfMachine = 199;
pub const GumElfMachine_GUM_ELF_MACHINE_56800EX: GumElfMachine = 200;
pub const GumElfMachine_GUM_ELF_MACHINE_BA1: GumElfMachine = 201;
pub const GumElfMachine_GUM_ELF_MACHINE_BA2: GumElfMachine = 202;
pub const GumElfMachine_GUM_ELF_MACHINE_XCORE: GumElfMachine = 203;
pub const GumElfMachine_GUM_ELF_MACHINE_MCHP_PIC: GumElfMachine = 204;
pub const GumElfMachine_GUM_ELF_MACHINE_KM32: GumElfMachine = 210;
pub const GumElfMachine_GUM_ELF_MACHINE_KMX32: GumElfMachine = 211;
pub const GumElfMachine_GUM_ELF_MACHINE_EMX16: GumElfMachine = 212;
pub const GumElfMachine_GUM_ELF_MACHINE_EMX8: GumElfMachine = 213;
pub const GumElfMachine_GUM_ELF_MACHINE_KVARC: GumElfMachine = 214;
pub const GumElfMachine_GUM_ELF_MACHINE_CDP: GumElfMachine = 215;
pub const GumElfMachine_GUM_ELF_MACHINE_COGE: GumElfMachine = 216;
pub const GumElfMachine_GUM_ELF_MACHINE_COOL: GumElfMachine = 217;
pub const GumElfMachine_GUM_ELF_MACHINE_NORC: GumElfMachine = 218;
pub const GumElfMachine_GUM_ELF_MACHINE_CSR_KALIMBA: GumElfMachine = 219;
pub const GumElfMachine_GUM_ELF_MACHINE_Z80: GumElfMachine = 220;
pub const GumElfMachine_GUM_ELF_MACHINE_VISIUM: GumElfMachine = 221;
pub const GumElfMachine_GUM_ELF_MACHINE_FT32: GumElfMachine = 222;
pub const GumElfMachine_GUM_ELF_MACHINE_MOXIE: GumElfMachine = 223;
pub const GumElfMachine_GUM_ELF_MACHINE_AMDGPU: GumElfMachine = 224;
pub const GumElfMachine_GUM_ELF_MACHINE_RISCV: GumElfMachine = 243;
pub const GumElfMachine_GUM_ELF_MACHINE_BPF: GumElfMachine = 247;
pub const GumElfMachine_GUM_ELF_MACHINE_CSKY: GumElfMachine = 252;
pub const GumElfMachine_GUM_ELF_MACHINE_ALPHA: GumElfMachine = 36902;
pub type GumElfMachine = ::std::os::raw::c_uint;
pub const GumElfSourceMode_GUM_ELF_SOURCE_MODE_OFFLINE: GumElfSourceMode = 0;
pub const GumElfSourceMode_GUM_ELF_SOURCE_MODE_ONLINE: GumElfSourceMode = 1;
pub type GumElfSourceMode = ::std::os::raw::c_uint;
pub const GumElfSectionType_GUM_ELF_SECTION_NULL: GumElfSectionType = 0;
pub const GumElfSectionType_GUM_ELF_SECTION_PROGBITS: GumElfSectionType = 1;
pub const GumElfSectionType_GUM_ELF_SECTION_SYMTAB: GumElfSectionType = 2;
pub const GumElfSectionType_GUM_ELF_SECTION_STRTAB: GumElfSectionType = 3;
pub const GumElfSectionType_GUM_ELF_SECTION_RELA: GumElfSectionType = 4;
pub const GumElfSectionType_GUM_ELF_SECTION_HASH: GumElfSectionType = 5;
pub const GumElfSectionType_GUM_ELF_SECTION_DYNAMIC: GumElfSectionType = 6;
pub const GumElfSectionType_GUM_ELF_SECTION_NOTE: GumElfSectionType = 7;
pub const GumElfSectionType_GUM_ELF_SECTION_NOBITS: GumElfSectionType = 8;
pub const GumElfSectionType_GUM_ELF_SECTION_REL: GumElfSectionType = 9;
pub const GumElfSectionType_GUM_ELF_SECTION_SHLIB: GumElfSectionType = 10;
pub const GumElfSectionType_GUM_ELF_SECTION_DYNSYM: GumElfSectionType = 11;
pub const GumElfSectionType_GUM_ELF_SECTION_INIT_ARRAY: GumElfSectionType = 14;
pub const GumElfSectionType_GUM_ELF_SECTION_FINI_ARRAY: GumElfSectionType = 15;
pub const GumElfSectionType_GUM_ELF_SECTION_PREINIT_ARRAY: GumElfSectionType = 16;
pub const GumElfSectionType_GUM_ELF_SECTION_GROUP: GumElfSectionType = 17;
pub const GumElfSectionType_GUM_ELF_SECTION_SYMTAB_SHNDX: GumElfSectionType = 18;
pub const GumElfSectionType_GUM_ELF_SECTION_RELR: GumElfSectionType = 19;
pub const GumElfSectionType_GUM_ELF_SECTION_NUM: GumElfSectionType = 20;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_ATTRIBUTES: GumElfSectionType = 1879048181;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_HASH: GumElfSectionType = 1879048182;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_LIBLIST: GumElfSectionType = 1879048183;
pub const GumElfSectionType_GUM_ELF_SECTION_CHECKSUM: GumElfSectionType = 1879048184;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_MOVE: GumElfSectionType = 1879048186;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_COMDAT: GumElfSectionType = 1879048187;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_SYMINFO: GumElfSectionType = 1879048188;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERDEF: GumElfSectionType = 1879048189;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERNEED: GumElfSectionType = 1879048190;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERSYM: GumElfSectionType = 1879048191;
pub type GumElfSectionType = ::std::os::raw::c_uint;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_WRITE: GumElfSectionFlags = 1;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_ALLOC: GumElfSectionFlags = 2;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_EXECINSTR: GumElfSectionFlags = 4;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_MERGE: GumElfSectionFlags = 16;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_STRINGS: GumElfSectionFlags = 32;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_INFO_LINK: GumElfSectionFlags = 64;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_LINK_ORDER: GumElfSectionFlags = 128;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_OS_NONCONFORMING: GumElfSectionFlags = 256;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_GROUP: GumElfSectionFlags = 512;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_TLS: GumElfSectionFlags = 1024;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_COMPRESSED: GumElfSectionFlags = 2048;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_GNU_RETAIN: GumElfSectionFlags = 2097152;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_ORDERED: GumElfSectionFlags = 1073741824;
pub const GumElfSectionFlags_GUM_ELF_SECTION_FLAG_EXCLUDE: GumElfSectionFlags = 2147483648;
pub type GumElfSectionFlags = ::std::os::raw::c_uint;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_NULL: GumElfDynamicTag = 0;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_NEEDED: GumElfDynamicTag = 1;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTRELSZ: GumElfDynamicTag = 2;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTGOT: GumElfDynamicTag = 3;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HASH: GumElfDynamicTag = 4;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_STRTAB: GumElfDynamicTag = 5;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMTAB: GumElfDynamicTag = 6;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELA: GumElfDynamicTag = 7;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELASZ: GumElfDynamicTag = 8;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELAENT: GumElfDynamicTag = 9;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_STRSZ: GumElfDynamicTag = 10;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMENT: GumElfDynamicTag = 11;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT: GumElfDynamicTag = 12;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI: GumElfDynamicTag = 13;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SONAME: GumElfDynamicTag = 14;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RPATH: GumElfDynamicTag = 15;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMBOLIC: GumElfDynamicTag = 16;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_REL: GumElfDynamicTag = 17;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELSZ: GumElfDynamicTag = 18;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELENT: GumElfDynamicTag = 19;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTREL: GumElfDynamicTag = 20;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEBUG: GumElfDynamicTag = 21;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TEXTREL: GumElfDynamicTag = 22;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_JMPREL: GumElfDynamicTag = 23;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_BIND_NOW: GumElfDynamicTag = 24;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT_ARRAY: GumElfDynamicTag = 25;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI_ARRAY: GumElfDynamicTag = 26;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT_ARRAYSZ: GumElfDynamicTag = 27;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI_ARRAYSZ: GumElfDynamicTag = 28;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RUNPATH: GumElfDynamicTag = 29;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FLAGS: GumElfDynamicTag = 30;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ENCODING: GumElfDynamicTag = 32;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PREINIT_ARRAY: GumElfDynamicTag = 32;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PREINIT_ARRAYSZ: GumElfDynamicTag = 33;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MAXPOSTAGS: GumElfDynamicTag = 34;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_LOOS: GumElfDynamicTag = 1610612749;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_AUXILIARY: GumElfDynamicTag = 1610612749;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_RTLDINF: GumElfDynamicTag = 1610612750;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_FILTER: GumElfDynamicTag = 1610612751;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_CAP: GumElfDynamicTag = 1610612752;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_ASLR: GumElfDynamicTag = 1610612771;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HIOS: GumElfDynamicTag = 1879044096;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VALRNGLO: GumElfDynamicTag = 1879047424;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_PRELINKED: GumElfDynamicTag = 1879047669;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_CONFLICTSZ: GumElfDynamicTag = 1879047670;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_LIBLISTSZ: GumElfDynamicTag = 1879047671;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_CHECKSUM: GumElfDynamicTag = 1879047672;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTPADSZ: GumElfDynamicTag = 1879047673;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVEENT: GumElfDynamicTag = 1879047674;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVESZ: GumElfDynamicTag = 1879047675;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FEATURE: GumElfDynamicTag = 1879047676;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FEATURE_1: GumElfDynamicTag = 1879047676;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_POSFLAG_1: GumElfDynamicTag = 1879047677;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINSZ: GumElfDynamicTag = 1879047678;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINENT: GumElfDynamicTag = 1879047679;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VALRNGHI: GumElfDynamicTag = 1879047679;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ADDRRNGLO: GumElfDynamicTag = 1879047680;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_HASH: GumElfDynamicTag = 1879047925;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TLSDESC_PLT: GumElfDynamicTag = 1879047926;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TLSDESC_GOT: GumElfDynamicTag = 1879047927;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_CONFLICT: GumElfDynamicTag = 1879047928;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_LIBLIST: GumElfDynamicTag = 1879047929;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_CONFIG: GumElfDynamicTag = 1879047930;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEPAUDIT: GumElfDynamicTag = 1879047931;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_AUDIT: GumElfDynamicTag = 1879047932;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTPAD: GumElfDynamicTag = 1879047933;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVETAB: GumElfDynamicTag = 1879047934;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINFO: GumElfDynamicTag = 1879047935;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ADDRRNGHI: GumElfDynamicTag = 1879047935;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERSYM: GumElfDynamicTag = 1879048176;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELACOUNT: GumElfDynamicTag = 1879048185;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELCOUNT: GumElfDynamicTag = 1879048186;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FLAGS_1: GumElfDynamicTag = 1879048187;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERDEF: GumElfDynamicTag = 1879048188;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERDEFNUM: GumElfDynamicTag = 1879048189;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERNEED: GumElfDynamicTag = 1879048190;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERNEEDNUM: GumElfDynamicTag = 1879048191;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_LOPROC: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ARM_SYMTABSZ: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ARM_PREEMPTMAP: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SPARC_REGISTER: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEPRECATED_SPARC_REGISTER: GumElfDynamicTag = 117440513;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_VERSION: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_TIME_STAMP: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_ICHECKSUM: GumElfDynamicTag = 1879048195;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_IVERSION: GumElfDynamicTag = 1879048196;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_FLAGS: GumElfDynamicTag = 1879048197;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_BASE_ADDRESS: GumElfDynamicTag = 1879048198;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CONFLICT: GumElfDynamicTag = 1879048200;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LIBLIST: GumElfDynamicTag = 1879048201;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCAL_GOTNO: GumElfDynamicTag = 1879048202;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CONFLICTNO: GumElfDynamicTag = 1879048203;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LIBLISTNO: GumElfDynamicTag = 1879048208;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_SYMTABNO: GumElfDynamicTag = 1879048209;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_UNREFEXTNO: GumElfDynamicTag = 1879048210;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_GOTSYM: GumElfDynamicTag = 1879048211;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_HIPAGENO: GumElfDynamicTag = 1879048212;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_MAP: GumElfDynamicTag = 1879048214;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASS: GumElfDynamicTag = 1879048215;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASS_NO: GumElfDynamicTag = 1879048216;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_INSTANCE: GumElfDynamicTag = 1879048217;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_INSTANCE_NO: GumElfDynamicTag = 1879048218;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_RELOC: GumElfDynamicTag = 1879048219;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_RELOC_NO: GumElfDynamicTag = 1879048220;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_SYM: GumElfDynamicTag = 1879048221;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_SYM_NO: GumElfDynamicTag = 1879048222;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASSSYM: GumElfDynamicTag = 1879048224;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASSSYM_NO: GumElfDynamicTag = 1879048225;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CXX_FLAGS: GumElfDynamicTag = 1879048226;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PIXIE_INIT: GumElfDynamicTag = 1879048227;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_SYMBOL_LIB: GumElfDynamicTag = 1879048228;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCALPAGE_GOTIDX: GumElfDynamicTag = 1879048229;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCAL_GOTIDX: GumElfDynamicTag = 1879048230;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_HIDDEN_GOTIDX: GumElfDynamicTag = 1879048231;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PROTECTED_GOTIDX: GumElfDynamicTag = 1879048232;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_OPTIONS: GumElfDynamicTag = 1879048233;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_INTERFACE: GumElfDynamicTag = 1879048234;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DYNSTR_ALIGN: GumElfDynamicTag = 1879048235;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_INTERFACE_SIZE: GumElfDynamicTag = 1879048236;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_TEXT_RESOLVE_ADDR: GumElfDynamicTag =
    1879048237;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PERF_SUFFIX: GumElfDynamicTag = 1879048238;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_COMPACT_SIZE: GumElfDynamicTag = 1879048239;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_GP_VALUE: GumElfDynamicTag = 1879048240;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_AUX_DYNAMIC: GumElfDynamicTag = 1879048241;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PLTGOT: GumElfDynamicTag = 1879048242;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_OBJ_UPDATE: GumElfDynamicTag = 1879048243;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RWPLT: GumElfDynamicTag = 1879048244;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_MAP_REL: GumElfDynamicTag = 1879048245;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC_GOT: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC_TLSOPT: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_GLINK: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_OPD: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_OPDSZ: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_TLSOPT: GumElfDynamicTag = 1879048195;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_AUXILIARY: GumElfDynamicTag = 2147483645;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_USED: GumElfDynamicTag = 2147483646;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FILTER: GumElfDynamicTag = 2147483647;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HIPROC: GumElfDynamicTag = 2147483647;
pub type GumElfDynamicTag = ::std::os::raw::c_uint;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_UNDEF: GumElfShdrIndex = 0;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_BEFORE: GumElfShdrIndex = 65280;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_AFTER: GumElfShdrIndex = 65281;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_ABS: GumElfShdrIndex = 65521;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_COMMON: GumElfShdrIndex = 65522;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_XINDEX: GumElfShdrIndex = 65535;
pub type GumElfShdrIndex = ::std::os::raw::c_uint;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_NOTYPE: GumElfSymbolType = 0;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_OBJECT: GumElfSymbolType = 1;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_FUNC: GumElfSymbolType = 2;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_SECTION: GumElfSymbolType = 3;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_FILE: GumElfSymbolType = 4;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_COMMON: GumElfSymbolType = 5;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_TLS: GumElfSymbolType = 6;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_NUM: GumElfSymbolType = 7;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_LOOS: GumElfSymbolType = 10;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_GNU_IFUNC: GumElfSymbolType = 10;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_HIOS: GumElfSymbolType = 12;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_LOPROC: GumElfSymbolType = 13;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_SPARC_REGISTER: GumElfSymbolType = 13;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_HIPROC: GumElfSymbolType = 15;
pub type GumElfSymbolType = ::std::os::raw::c_uint;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOCAL: GumElfSymbolBind = 0;
pub const GumElfSymbolBind_GUM_ELF_BIND_GLOBAL: GumElfSymbolBind = 1;
pub const GumElfSymbolBind_GUM_ELF_BIND_WEAK: GumElfSymbolBind = 2;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOOS: GumElfSymbolBind = 10;
pub const GumElfSymbolBind_GUM_ELF_BIND_GNU_UNIQUE: GumElfSymbolBind = 10;
pub const GumElfSymbolBind_GUM_ELF_BIND_HIOS: GumElfSymbolBind = 12;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOPROC: GumElfSymbolBind = 13;
pub const GumElfSymbolBind_GUM_ELF_BIND_HIPROC: GumElfSymbolBind = 15;
pub type GumElfSymbolBind = ::std::os::raw::c_uint;
pub const GumElfIA32Relocation_GUM_ELF_IA32_NONE: GumElfIA32Relocation = 0;
pub const GumElfIA32Relocation_GUM_ELF_IA32_32: GumElfIA32Relocation = 1;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC32: GumElfIA32Relocation = 2;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOT32: GumElfIA32Relocation = 3;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PLT32: GumElfIA32Relocation = 4;
pub const GumElfIA32Relocation_GUM_ELF_IA32_COPY: GumElfIA32Relocation = 5;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GLOB_DAT: GumElfIA32Relocation = 6;
pub const GumElfIA32Relocation_GUM_ELF_IA32_JMP_SLOT: GumElfIA32Relocation = 7;
pub const GumElfIA32Relocation_GUM_ELF_IA32_RELATIVE: GumElfIA32Relocation = 8;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOTOFF: GumElfIA32Relocation = 9;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOTPC: GumElfIA32Relocation = 10;
pub const GumElfIA32Relocation_GUM_ELF_IA32_32PLT: GumElfIA32Relocation = 11;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_TPOFF: GumElfIA32Relocation = 14;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_IE: GumElfIA32Relocation = 15;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GOTIE: GumElfIA32Relocation = 16;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LE: GumElfIA32Relocation = 17;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD: GumElfIA32Relocation = 18;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM: GumElfIA32Relocation = 19;
pub const GumElfIA32Relocation_GUM_ELF_IA32_16: GumElfIA32Relocation = 20;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC16: GumElfIA32Relocation = 21;
pub const GumElfIA32Relocation_GUM_ELF_IA32_8: GumElfIA32Relocation = 22;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC8: GumElfIA32Relocation = 23;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_32: GumElfIA32Relocation = 24;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_PUSH: GumElfIA32Relocation = 25;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_CALL: GumElfIA32Relocation = 26;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_POP: GumElfIA32Relocation = 27;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_32: GumElfIA32Relocation = 28;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_PUSH: GumElfIA32Relocation = 29;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_CALL: GumElfIA32Relocation = 30;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_POP: GumElfIA32Relocation = 31;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDO_32: GumElfIA32Relocation = 32;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_IE_32: GumElfIA32Relocation = 33;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LE_32: GumElfIA32Relocation = 34;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DTPMOD32: GumElfIA32Relocation = 35;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DTPOFF32: GumElfIA32Relocation = 36;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_TPOFF32: GumElfIA32Relocation = 37;
pub const GumElfIA32Relocation_GUM_ELF_IA32_SIZE32: GumElfIA32Relocation = 38;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GOTDESC: GumElfIA32Relocation = 39;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DESC_CALL: GumElfIA32Relocation = 40;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DESC: GumElfIA32Relocation = 41;
pub const GumElfIA32Relocation_GUM_ELF_IA32_IRELATIVE: GumElfIA32Relocation = 42;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOT32X: GumElfIA32Relocation = 43;
pub type GumElfIA32Relocation = ::std::os::raw::c_uint;
pub const GumElfX64Relocation_GUM_ELF_X64_NONE: GumElfX64Relocation = 0;
pub const GumElfX64Relocation_GUM_ELF_X64_64: GumElfX64Relocation = 1;
pub const GumElfX64Relocation_GUM_ELF_X64_PC32: GumElfX64Relocation = 2;
pub const GumElfX64Relocation_GUM_ELF_X64_GOT32: GumElfX64Relocation = 3;
pub const GumElfX64Relocation_GUM_ELF_X64_PLT32: GumElfX64Relocation = 4;
pub const GumElfX64Relocation_GUM_ELF_X64_COPY: GumElfX64Relocation = 5;
pub const GumElfX64Relocation_GUM_ELF_X64_GLOB_DAT: GumElfX64Relocation = 6;
pub const GumElfX64Relocation_GUM_ELF_X64_JUMP_SLOT: GumElfX64Relocation = 7;
pub const GumElfX64Relocation_GUM_ELF_X64_RELATIVE: GumElfX64Relocation = 8;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCREL: GumElfX64Relocation = 9;
pub const GumElfX64Relocation_GUM_ELF_X64_32: GumElfX64Relocation = 10;
pub const GumElfX64Relocation_GUM_ELF_X64_32S: GumElfX64Relocation = 11;
pub const GumElfX64Relocation_GUM_ELF_X64_16: GumElfX64Relocation = 12;
pub const GumElfX64Relocation_GUM_ELF_X64_PC16: GumElfX64Relocation = 13;
pub const GumElfX64Relocation_GUM_ELF_X64_8: GumElfX64Relocation = 14;
pub const GumElfX64Relocation_GUM_ELF_X64_PC8: GumElfX64Relocation = 15;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPMOD64: GumElfX64Relocation = 16;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPOFF64: GumElfX64Relocation = 17;
pub const GumElfX64Relocation_GUM_ELF_X64_TPOFF64: GumElfX64Relocation = 18;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSGD: GumElfX64Relocation = 19;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSLD: GumElfX64Relocation = 20;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPOFF32: GumElfX64Relocation = 21;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTTPOFF: GumElfX64Relocation = 22;
pub const GumElfX64Relocation_GUM_ELF_X64_TPOFF32: GumElfX64Relocation = 23;
pub const GumElfX64Relocation_GUM_ELF_X64_PC64: GumElfX64Relocation = 24;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTOFF64: GumElfX64Relocation = 25;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC32: GumElfX64Relocation = 26;
pub const GumElfX64Relocation_GUM_ELF_X64_GOT64: GumElfX64Relocation = 27;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCREL64: GumElfX64Relocation = 28;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC64: GumElfX64Relocation = 29;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPLT64: GumElfX64Relocation = 30;
pub const GumElfX64Relocation_GUM_ELF_X64_PLTOFF64: GumElfX64Relocation = 31;
pub const GumElfX64Relocation_GUM_ELF_X64_SIZE32: GumElfX64Relocation = 32;
pub const GumElfX64Relocation_GUM_ELF_X64_SIZE64: GumElfX64Relocation = 33;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC32_TLSDESC: GumElfX64Relocation = 34;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSDESC_CALL: GumElfX64Relocation = 35;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSDESC: GumElfX64Relocation = 36;
pub const GumElfX64Relocation_GUM_ELF_X64_IRELATIVE: GumElfX64Relocation = 37;
pub const GumElfX64Relocation_GUM_ELF_X64_RELATIVE64: GumElfX64Relocation = 38;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCRELX: GumElfX64Relocation = 41;
pub const GumElfX64Relocation_GUM_ELF_X64_REX_GOTPCRELX: GumElfX64Relocation = 42;
pub type GumElfX64Relocation = ::std::os::raw::c_uint;
pub const GumElfArmRelocation_GUM_ELF_ARM_NONE: GumElfArmRelocation = 0;
pub const GumElfArmRelocation_GUM_ELF_ARM_PC24: GumElfArmRelocation = 1;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS32: GumElfArmRelocation = 2;
pub const GumElfArmRelocation_GUM_ELF_ARM_REL32: GumElfArmRelocation = 3;
pub const GumElfArmRelocation_GUM_ELF_ARM_PC13: GumElfArmRelocation = 4;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS16: GumElfArmRelocation = 5;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS12: GumElfArmRelocation = 6;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_ABS5: GumElfArmRelocation = 7;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS8: GumElfArmRelocation = 8;
pub const GumElfArmRelocation_GUM_ELF_ARM_SBREL32: GumElfArmRelocation = 9;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC22: GumElfArmRelocation = 10;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC8: GumElfArmRelocation = 11;
pub const GumElfArmRelocation_GUM_ELF_ARM_AMP_VCALL9: GumElfArmRelocation = 12;
pub const GumElfArmRelocation_GUM_ELF_ARM_SWI24: GumElfArmRelocation = 13;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DESC: GumElfArmRelocation = 13;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_SWI8: GumElfArmRelocation = 14;
pub const GumElfArmRelocation_GUM_ELF_ARM_XPC25: GumElfArmRelocation = 15;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_XPC22: GumElfArmRelocation = 16;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DTPMOD32: GumElfArmRelocation = 17;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DTPOFF32: GumElfArmRelocation = 18;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_TPOFF32: GumElfArmRelocation = 19;
pub const GumElfArmRelocation_GUM_ELF_ARM_COPY: GumElfArmRelocation = 20;
pub const GumElfArmRelocation_GUM_ELF_ARM_GLOB_DAT: GumElfArmRelocation = 21;
pub const GumElfArmRelocation_GUM_ELF_ARM_JUMP_SLOT: GumElfArmRelocation = 22;
pub const GumElfArmRelocation_GUM_ELF_ARM_RELATIVE: GumElfArmRelocation = 23;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTOFF: GumElfArmRelocation = 24;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTPC: GumElfArmRelocation = 25;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT32: GumElfArmRelocation = 26;
pub const GumElfArmRelocation_GUM_ELF_ARM_PLT32: GumElfArmRelocation = 27;
pub const GumElfArmRelocation_GUM_ELF_ARM_CALL: GumElfArmRelocation = 28;
pub const GumElfArmRelocation_GUM_ELF_ARM_JUMP24: GumElfArmRelocation = 29;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP24: GumElfArmRelocation = 30;
pub const GumElfArmRelocation_GUM_ELF_ARM_BASE_ABS: GumElfArmRelocation = 31;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_7_0: GumElfArmRelocation = 32;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_15_8: GumElfArmRelocation = 33;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_23_15: GumElfArmRelocation = 34;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SBREL_11_0: GumElfArmRelocation = 35;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SBREL_19_12: GumElfArmRelocation = 36;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SBREL_27_20: GumElfArmRelocation = 37;
pub const GumElfArmRelocation_GUM_ELF_ARM_TARGET1: GumElfArmRelocation = 38;
pub const GumElfArmRelocation_GUM_ELF_ARM_SBREL31: GumElfArmRelocation = 39;
pub const GumElfArmRelocation_GUM_ELF_ARM_V4BX: GumElfArmRelocation = 40;
pub const GumElfArmRelocation_GUM_ELF_ARM_TARGET2: GumElfArmRelocation = 41;
pub const GumElfArmRelocation_GUM_ELF_ARM_PREL31: GumElfArmRelocation = 42;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_ABS_NC: GumElfArmRelocation = 43;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_ABS: GumElfArmRelocation = 44;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_PREL_NC: GumElfArmRelocation = 45;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_PREL: GumElfArmRelocation = 46;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_ABS_NC: GumElfArmRelocation = 47;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_ABS: GumElfArmRelocation = 48;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_PREL_NC: GumElfArmRelocation = 49;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_PREL: GumElfArmRelocation = 50;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP19: GumElfArmRelocation = 51;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP6: GumElfArmRelocation = 52;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_ALU_PREL_11_0: GumElfArmRelocation = 53;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC12: GumElfArmRelocation = 54;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS32_NOI: GumElfArmRelocation = 55;
pub const GumElfArmRelocation_GUM_ELF_ARM_REL32_NOI: GumElfArmRelocation = 56;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G0_NC: GumElfArmRelocation = 57;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G0: GumElfArmRelocation = 58;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G1_NC: GumElfArmRelocation = 59;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G1: GumElfArmRelocation = 60;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G2: GumElfArmRelocation = 61;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_PC_G1: GumElfArmRelocation = 62;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_PC_G2: GumElfArmRelocation = 63;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G0: GumElfArmRelocation = 64;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G1: GumElfArmRelocation = 65;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G2: GumElfArmRelocation = 66;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G0: GumElfArmRelocation = 67;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G1: GumElfArmRelocation = 68;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G2: GumElfArmRelocation = 69;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G0_NC: GumElfArmRelocation = 70;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G0: GumElfArmRelocation = 71;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G1_NC: GumElfArmRelocation = 72;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G1: GumElfArmRelocation = 73;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G2: GumElfArmRelocation = 74;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G0: GumElfArmRelocation = 75;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G1: GumElfArmRelocation = 76;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G2: GumElfArmRelocation = 77;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G0: GumElfArmRelocation = 78;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G1: GumElfArmRelocation = 79;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G2: GumElfArmRelocation = 80;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G0: GumElfArmRelocation = 81;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G1: GumElfArmRelocation = 82;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G2: GumElfArmRelocation = 83;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_BREL_NC: GumElfArmRelocation = 84;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_BREL: GumElfArmRelocation = 85;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_BREL: GumElfArmRelocation = 86;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_BREL_NC: GumElfArmRelocation = 87;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_BREL: GumElfArmRelocation = 88;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_BREL: GumElfArmRelocation = 89;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_GOTDESC: GumElfArmRelocation = 90;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_CALL: GumElfArmRelocation = 91;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DESCSEQ: GumElfArmRelocation = 92;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_CALL: GumElfArmRelocation = 93;
pub const GumElfArmRelocation_GUM_ELF_ARM_PLT32_ABS: GumElfArmRelocation = 94;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_ABS: GumElfArmRelocation = 95;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_PREL: GumElfArmRelocation = 96;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_BREL12: GumElfArmRelocation = 97;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTOFF12: GumElfArmRelocation = 98;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTRELAX: GumElfArmRelocation = 99;
pub const GumElfArmRelocation_GUM_ELF_ARM_GNU_VTENTRY: GumElfArmRelocation = 100;
pub const GumElfArmRelocation_GUM_ELF_ARM_GNU_VTINHERIT: GumElfArmRelocation = 101;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC11: GumElfArmRelocation = 102;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC9: GumElfArmRelocation = 103;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_GD32: GumElfArmRelocation = 104;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDM32: GumElfArmRelocation = 105;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDO32: GumElfArmRelocation = 106;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_IE32: GumElfArmRelocation = 107;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LE32: GumElfArmRelocation = 108;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDO12: GumElfArmRelocation = 109;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LE12: GumElfArmRelocation = 110;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_IE12GP: GumElfArmRelocation = 111;
pub const GumElfArmRelocation_GUM_ELF_ARM_ME_TOO: GumElfArmRelocation = 128;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ: GumElfArmRelocation = 129;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ16: GumElfArmRelocation = 129;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ32: GumElfArmRelocation = 130;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_GOT_BREL12: GumElfArmRelocation = 131;
pub const GumElfArmRelocation_GUM_ELF_ARM_IRELATIVE: GumElfArmRelocation = 160;
pub const GumElfArmRelocation_GUM_ELF_ARM_RXPC25: GumElfArmRelocation = 249;
pub const GumElfArmRelocation_GUM_ELF_ARM_RSBREL32: GumElfArmRelocation = 250;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_RPC22: GumElfArmRelocation = 251;
pub const GumElfArmRelocation_GUM_ELF_ARM_RREL32: GumElfArmRelocation = 252;
pub const GumElfArmRelocation_GUM_ELF_ARM_RABS22: GumElfArmRelocation = 253;
pub const GumElfArmRelocation_GUM_ELF_ARM_RPC24: GumElfArmRelocation = 254;
pub const GumElfArmRelocation_GUM_ELF_ARM_RBASE: GumElfArmRelocation = 255;
pub type GumElfArmRelocation = ::std::os::raw::c_uint;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_NONE: GumElfArm64Relocation = 0;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_ABS32: GumElfArm64Relocation = 1;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_COPY: GumElfArm64Relocation = 180;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_GLOB_DAT: GumElfArm64Relocation = 181;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_JUMP_SLOT: GumElfArm64Relocation = 182;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_RELATIVE: GumElfArm64Relocation = 183;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_DTPMOD: GumElfArm64Relocation = 184;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_DTPREL: GumElfArm64Relocation = 185;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_TPREL: GumElfArm64Relocation = 186;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLSDESC: GumElfArm64Relocation = 187;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_IRELATIVE: GumElfArm64Relocation = 188;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS64: GumElfArm64Relocation = 257;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS32: GumElfArm64Relocation = 258;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS16: GumElfArm64Relocation = 259;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL64: GumElfArm64Relocation = 260;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL32: GumElfArm64Relocation = 261;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL16: GumElfArm64Relocation = 262;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G0: GumElfArm64Relocation = 263;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G0_NC: GumElfArm64Relocation = 264;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G1: GumElfArm64Relocation = 265;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G1_NC: GumElfArm64Relocation = 266;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G2: GumElfArm64Relocation = 267;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G2_NC: GumElfArm64Relocation = 268;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G3: GumElfArm64Relocation = 269;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G0: GumElfArm64Relocation = 270;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G1: GumElfArm64Relocation = 271;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G2: GumElfArm64Relocation = 272;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD_PREL_LO19: GumElfArm64Relocation = 273;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_LO21: GumElfArm64Relocation = 274;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_PG_HI21: GumElfArm64Relocation = 275;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_PG_HI21_NC: GumElfArm64Relocation = 276;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADD_ABS_LO12_NC: GumElfArm64Relocation = 277;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST8_ABS_LO12_NC: GumElfArm64Relocation = 278;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TSTBR14: GumElfArm64Relocation = 279;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_CONDBR19: GumElfArm64Relocation = 280;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_JUMP26: GumElfArm64Relocation = 282;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_CALL26: GumElfArm64Relocation = 283;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST16_ABS_LO12_NC: GumElfArm64Relocation = 284;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST32_ABS_LO12_NC: GumElfArm64Relocation = 285;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST64_ABS_LO12_NC: GumElfArm64Relocation = 286;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G0: GumElfArm64Relocation = 287;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G0_NC: GumElfArm64Relocation = 288;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G1: GumElfArm64Relocation = 289;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G1_NC: GumElfArm64Relocation = 290;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G2: GumElfArm64Relocation = 291;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G2_NC: GumElfArm64Relocation = 292;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G3: GumElfArm64Relocation = 293;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST128_ABS_LO12_NC: GumElfArm64Relocation = 299;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G0: GumElfArm64Relocation = 300;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G0_NC: GumElfArm64Relocation = 301;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G1: GumElfArm64Relocation = 302;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G1_NC: GumElfArm64Relocation = 303;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G2: GumElfArm64Relocation = 304;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G2_NC: GumElfArm64Relocation = 305;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G3: GumElfArm64Relocation = 306;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOTREL64: GumElfArm64Relocation = 307;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOTREL32: GumElfArm64Relocation = 308;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOT_LD_PREL19: GumElfArm64Relocation = 309;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOTOFF_LO15: GumElfArm64Relocation = 310;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_GOT_PAGE: GumElfArm64Relocation = 311;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOT_LO12_NC: GumElfArm64Relocation = 312;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOTPAGE_LO15: GumElfArm64Relocation = 313;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADR_PREL21: GumElfArm64Relocation = 512;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADR_PAGE21: GumElfArm64Relocation = 513;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADD_LO12_NC: GumElfArm64Relocation = 514;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_MOVW_G1: GumElfArm64Relocation = 515;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_MOVW_G0_NC: GumElfArm64Relocation = 516;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADR_PREL21: GumElfArm64Relocation = 517;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADR_PAGE21: GumElfArm64Relocation = 518;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_LO12_NC: GumElfArm64Relocation = 519;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_G1: GumElfArm64Relocation = 520;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_G0_NC: GumElfArm64Relocation = 521;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LD_PREL19: GumElfArm64Relocation = 522;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G2: GumElfArm64Relocation = 523;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G1: GumElfArm64Relocation = 524;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G1_NC: GumElfArm64Relocation = 525;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G0: GumElfArm64Relocation = 526;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G0_NC: GumElfArm64Relocation = 527;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_HI12: GumElfArm64Relocation = 528;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_LO12: GumElfArm64Relocation = 529;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_LO12_NC: GumElfArm64Relocation = 530;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST8_DTPREL_LO12: GumElfArm64Relocation = 531;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST8_DTPREL_LO12_NC: GumElfArm64Relocation =
    532;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST16_DTPREL_LO12: GumElfArm64Relocation = 533;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST16_DTPREL_LO12_NC: GumElfArm64Relocation =
    534;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST32_DTPREL_LO12: GumElfArm64Relocation = 535;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST32_DTPREL_LO12_NC: GumElfArm64Relocation =
    536;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST64_DTPREL_LO12: GumElfArm64Relocation = 537;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST64_DTPREL_LO12_NC: GumElfArm64Relocation =
    538;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_MOVW_GOTTPREL_G1: GumElfArm64Relocation = 539;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_MOVW_GOTTPREL_G0_NC: GumElfArm64Relocation =
    540;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_ADR_GOTTPREL_PAGE21: GumElfArm64Relocation =
    541;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_LD64_GOTTPREL_LO12_NC: GumElfArm64Relocation =
    542;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_LD_GOTTPREL_PREL19: GumElfArm64Relocation = 543;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G2: GumElfArm64Relocation = 544;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G1: GumElfArm64Relocation = 545;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G1_NC: GumElfArm64Relocation = 546;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G0: GumElfArm64Relocation = 547;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G0_NC: GumElfArm64Relocation = 548;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_HI12: GumElfArm64Relocation = 549;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_LO12: GumElfArm64Relocation = 550;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_LO12_NC: GumElfArm64Relocation = 551;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST8_TPREL_LO12: GumElfArm64Relocation = 552;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST8_TPREL_LO12_NC: GumElfArm64Relocation =
    553;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST16_TPREL_LO12: GumElfArm64Relocation = 554;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST16_TPREL_LO12_NC: GumElfArm64Relocation =
    555;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST32_TPREL_LO12: GumElfArm64Relocation = 556;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST32_TPREL_LO12_NC: GumElfArm64Relocation =
    557;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST64_TPREL_LO12: GumElfArm64Relocation = 558;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST64_TPREL_LO12_NC: GumElfArm64Relocation =
    559;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LD_PREL19: GumElfArm64Relocation = 560;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADR_PREL21: GumElfArm64Relocation = 561;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADR_PAGE21: GumElfArm64Relocation = 562;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LD64_LO12: GumElfArm64Relocation = 563;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADD_LO12: GumElfArm64Relocation = 564;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_OFF_G1: GumElfArm64Relocation = 565;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_OFF_G0_NC: GumElfArm64Relocation = 566;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LDR: GumElfArm64Relocation = 567;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADD: GumElfArm64Relocation = 568;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_CALL: GumElfArm64Relocation = 569;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST128_TPREL_LO12: GumElfArm64Relocation = 570;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST128_TPREL_LO12_NC: GumElfArm64Relocation =
    571;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST128_DTPREL_LO12: GumElfArm64Relocation =
    572;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST128_DTPREL_LO12_NC: GumElfArm64Relocation =
    573;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_COPY: GumElfArm64Relocation = 1024;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GLOB_DAT: GumElfArm64Relocation = 1025;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_JUMP_SLOT: GumElfArm64Relocation = 1026;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_RELATIVE: GumElfArm64Relocation = 1027;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_DTPMOD: GumElfArm64Relocation = 1028;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_DTPREL: GumElfArm64Relocation = 1029;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_TPREL: GumElfArm64Relocation = 1030;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC: GumElfArm64Relocation = 1031;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_IRELATIVE: GumElfArm64Relocation = 1032;
pub type GumElfArm64Relocation = ::std::os::raw::c_uint;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_NONE: GumElfMipsRelocation = 0;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_16: GumElfMipsRelocation = 1;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_32: GumElfMipsRelocation = 2;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_REL32: GumElfMipsRelocation = 3;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_26: GumElfMipsRelocation = 4;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HI16: GumElfMipsRelocation = 5;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_LO16: GumElfMipsRelocation = 6;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GPREL16: GumElfMipsRelocation = 7;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_LITERAL: GumElfMipsRelocation = 8;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT16: GumElfMipsRelocation = 9;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_PC16: GumElfMipsRelocation = 10;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL16: GumElfMipsRelocation = 11;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GPREL32: GumElfMipsRelocation = 12;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SHIFT5: GumElfMipsRelocation = 16;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SHIFT6: GumElfMipsRelocation = 17;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_64: GumElfMipsRelocation = 18;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_DISP: GumElfMipsRelocation = 19;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_PAGE: GumElfMipsRelocation = 20;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_OFST: GumElfMipsRelocation = 21;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_HI16: GumElfMipsRelocation = 22;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_LO16: GumElfMipsRelocation = 23;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SUB: GumElfMipsRelocation = 24;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_INSERT_A: GumElfMipsRelocation = 25;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_INSERT_B: GumElfMipsRelocation = 26;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_DELETE: GumElfMipsRelocation = 27;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HIGHER: GumElfMipsRelocation = 28;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HIGHEST: GumElfMipsRelocation = 29;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL_HI16: GumElfMipsRelocation = 30;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL_LO16: GumElfMipsRelocation = 31;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SCN_DISP: GumElfMipsRelocation = 32;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_REL16: GumElfMipsRelocation = 33;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_ADD_IMMEDIATE: GumElfMipsRelocation = 34;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_PJUMP: GumElfMipsRelocation = 35;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_RELGOT: GumElfMipsRelocation = 36;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_JALR: GumElfMipsRelocation = 37;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPMOD32: GumElfMipsRelocation = 38;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL32: GumElfMipsRelocation = 39;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPMOD64: GumElfMipsRelocation = 40;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL64: GumElfMipsRelocation = 41;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_GD: GumElfMipsRelocation = 42;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_LDM: GumElfMipsRelocation = 43;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL_HI16: GumElfMipsRelocation = 44;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL_LO16: GumElfMipsRelocation = 45;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_GOTTPREL: GumElfMipsRelocation = 46;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL32: GumElfMipsRelocation = 47;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL64: GumElfMipsRelocation = 48;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL_HI16: GumElfMipsRelocation = 49;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL_LO16: GumElfMipsRelocation = 50;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GLOB_DAT: GumElfMipsRelocation = 51;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_COPY: GumElfMipsRelocation = 126;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_JUMP_SLOT: GumElfMipsRelocation = 127;
pub type GumElfMipsRelocation = ::std::os::raw::c_uint;
pub type GumElfSegmentDetails = _GumElfSegmentDetails;
pub type GumElfSectionDetails = _GumElfSectionDetails;
pub type GumElfRelocationDetails = _GumElfRelocationDetails;
pub type GumElfDynamicEntryDetails = _GumElfDynamicEntryDetails;
pub type GumElfSymbolDetails = _GumElfSymbolDetails;
pub type GumElfNoteHeader = _GumElfNoteHeader;
pub type GumFoundElfSegmentFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumElfSegmentDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfSectionFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumElfSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfRelocationFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumElfRelocationDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfDynamicEntryFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumElfDynamicEntryDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundElfSymbolFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumElfSymbolDetails, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumElfSegmentDetails {
    pub vm_address: GumAddress,
    pub vm_size: guint64,
    pub file_offset: guint64,
    pub file_size: guint64,
    pub protection: GumPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfSegmentDetails"][::std::mem::size_of::<_GumElfSegmentDetails>() - 40usize];
    ["Alignment of _GumElfSegmentDetails"]
        [::std::mem::align_of::<_GumElfSegmentDetails>() - 8usize];
    ["Offset of field: _GumElfSegmentDetails::vm_address"]
        [::std::mem::offset_of!(_GumElfSegmentDetails, vm_address) - 0usize];
    ["Offset of field: _GumElfSegmentDetails::vm_size"]
        [::std::mem::offset_of!(_GumElfSegmentDetails, vm_size) - 8usize];
    ["Offset of field: _GumElfSegmentDetails::file_offset"]
        [::std::mem::offset_of!(_GumElfSegmentDetails, file_offset) - 16usize];
    ["Offset of field: _GumElfSegmentDetails::file_size"]
        [::std::mem::offset_of!(_GumElfSegmentDetails, file_size) - 24usize];
    ["Offset of field: _GumElfSegmentDetails::protection"]
        [::std::mem::offset_of!(_GumElfSegmentDetails, protection) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfSectionDetails {
    pub id: *const gchar,
    pub name: *const gchar,
    pub type_: GumElfSectionType,
    pub flags: guint64,
    pub address: GumAddress,
    pub offset: guint64,
    pub size: gsize,
    pub link: guint32,
    pub info: guint32,
    pub alignment: guint64,
    pub entry_size: guint64,
    pub protection: GumPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfSectionDetails"][::std::mem::size_of::<_GumElfSectionDetails>() - 88usize];
    ["Alignment of _GumElfSectionDetails"]
        [::std::mem::align_of::<_GumElfSectionDetails>() - 8usize];
    ["Offset of field: _GumElfSectionDetails::id"]
        [::std::mem::offset_of!(_GumElfSectionDetails, id) - 0usize];
    ["Offset of field: _GumElfSectionDetails::name"]
        [::std::mem::offset_of!(_GumElfSectionDetails, name) - 8usize];
    ["Offset of field: _GumElfSectionDetails::type_"]
        [::std::mem::offset_of!(_GumElfSectionDetails, type_) - 16usize];
    ["Offset of field: _GumElfSectionDetails::flags"]
        [::std::mem::offset_of!(_GumElfSectionDetails, flags) - 24usize];
    ["Offset of field: _GumElfSectionDetails::address"]
        [::std::mem::offset_of!(_GumElfSectionDetails, address) - 32usize];
    ["Offset of field: _GumElfSectionDetails::offset"]
        [::std::mem::offset_of!(_GumElfSectionDetails, offset) - 40usize];
    ["Offset of field: _GumElfSectionDetails::size"]
        [::std::mem::offset_of!(_GumElfSectionDetails, size) - 48usize];
    ["Offset of field: _GumElfSectionDetails::link"]
        [::std::mem::offset_of!(_GumElfSectionDetails, link) - 56usize];
    ["Offset of field: _GumElfSectionDetails::info"]
        [::std::mem::offset_of!(_GumElfSectionDetails, info) - 60usize];
    ["Offset of field: _GumElfSectionDetails::alignment"]
        [::std::mem::offset_of!(_GumElfSectionDetails, alignment) - 64usize];
    ["Offset of field: _GumElfSectionDetails::entry_size"]
        [::std::mem::offset_of!(_GumElfSectionDetails, entry_size) - 72usize];
    ["Offset of field: _GumElfSectionDetails::protection"]
        [::std::mem::offset_of!(_GumElfSectionDetails, protection) - 80usize];
};
impl Default for _GumElfSectionDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfRelocationDetails {
    pub address: GumAddress,
    pub type_: guint32,
    pub symbol: *const GumElfSymbolDetails,
    pub addend: gint64,
    pub parent: *const GumElfSectionDetails,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfRelocationDetails"]
        [::std::mem::size_of::<_GumElfRelocationDetails>() - 40usize];
    ["Alignment of _GumElfRelocationDetails"]
        [::std::mem::align_of::<_GumElfRelocationDetails>() - 8usize];
    ["Offset of field: _GumElfRelocationDetails::address"]
        [::std::mem::offset_of!(_GumElfRelocationDetails, address) - 0usize];
    ["Offset of field: _GumElfRelocationDetails::type_"]
        [::std::mem::offset_of!(_GumElfRelocationDetails, type_) - 8usize];
    ["Offset of field: _GumElfRelocationDetails::symbol"]
        [::std::mem::offset_of!(_GumElfRelocationDetails, symbol) - 16usize];
    ["Offset of field: _GumElfRelocationDetails::addend"]
        [::std::mem::offset_of!(_GumElfRelocationDetails, addend) - 24usize];
    ["Offset of field: _GumElfRelocationDetails::parent"]
        [::std::mem::offset_of!(_GumElfRelocationDetails, parent) - 32usize];
};
impl Default for _GumElfRelocationDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfDynamicEntryDetails {
    pub tag: GumElfDynamicTag,
    pub val: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfDynamicEntryDetails"]
        [::std::mem::size_of::<_GumElfDynamicEntryDetails>() - 16usize];
    ["Alignment of _GumElfDynamicEntryDetails"]
        [::std::mem::align_of::<_GumElfDynamicEntryDetails>() - 8usize];
    ["Offset of field: _GumElfDynamicEntryDetails::tag"]
        [::std::mem::offset_of!(_GumElfDynamicEntryDetails, tag) - 0usize];
    ["Offset of field: _GumElfDynamicEntryDetails::val"]
        [::std::mem::offset_of!(_GumElfDynamicEntryDetails, val) - 8usize];
};
impl Default for _GumElfDynamicEntryDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfSymbolDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gsize,
    pub type_: GumElfSymbolType,
    pub bind: GumElfSymbolBind,
    pub shdr_index: guint16,
    pub section: *const GumElfSectionDetails,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfSymbolDetails"][::std::mem::size_of::<_GumElfSymbolDetails>() - 48usize];
    ["Alignment of _GumElfSymbolDetails"][::std::mem::align_of::<_GumElfSymbolDetails>() - 8usize];
    ["Offset of field: _GumElfSymbolDetails::name"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, name) - 0usize];
    ["Offset of field: _GumElfSymbolDetails::address"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, address) - 8usize];
    ["Offset of field: _GumElfSymbolDetails::size"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, size) - 16usize];
    ["Offset of field: _GumElfSymbolDetails::type_"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, type_) - 24usize];
    ["Offset of field: _GumElfSymbolDetails::bind"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, bind) - 28usize];
    ["Offset of field: _GumElfSymbolDetails::shdr_index"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, shdr_index) - 32usize];
    ["Offset of field: _GumElfSymbolDetails::section"]
        [::std::mem::offset_of!(_GumElfSymbolDetails, section) - 40usize];
};
impl Default for _GumElfSymbolDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumElfNoteHeader {
    pub name_size: guint32,
    pub desc_size: guint32,
    pub type_: guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumElfNoteHeader"][::std::mem::size_of::<_GumElfNoteHeader>() - 12usize];
    ["Alignment of _GumElfNoteHeader"][::std::mem::align_of::<_GumElfNoteHeader>() - 4usize];
    ["Offset of field: _GumElfNoteHeader::name_size"]
        [::std::mem::offset_of!(_GumElfNoteHeader, name_size) - 0usize];
    ["Offset of field: _GumElfNoteHeader::desc_size"]
        [::std::mem::offset_of!(_GumElfNoteHeader, desc_size) - 4usize];
    ["Offset of field: _GumElfNoteHeader::type_"]
        [::std::mem::offset_of!(_GumElfNoteHeader, type_) - 8usize];
};
unsafe extern "C" {
    pub fn gum_elf_module_new_from_file(
        path: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
unsafe extern "C" {
    pub fn gum_elf_module_new_from_blob(
        blob: *mut GBytes,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
unsafe extern "C" {
    pub fn gum_elf_module_new_from_memory(
        path: *const gchar,
        base_address: GumAddress,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
unsafe extern "C" {
    pub fn gum_elf_module_load(self_: *mut GumElfModule, error: *mut *mut GError) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_etype(self_: *mut GumElfModule) -> GumElfType;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_pointer_size(self_: *mut GumElfModule) -> guint;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_byte_order(self_: *mut GumElfModule) -> gint;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_os_abi(self_: *mut GumElfModule) -> GumElfOSABI;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_os_abi_version(self_: *mut GumElfModule) -> guint8;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_machine(self_: *mut GumElfModule) -> GumElfMachine;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_base_address(self_: *mut GumElfModule) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_preferred_address(self_: *mut GumElfModule) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_mapped_size(self_: *mut GumElfModule) -> guint64;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_entrypoint(self_: *mut GumElfModule) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_interpreter(self_: *mut GumElfModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_source_path(self_: *mut GumElfModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_source_blob(self_: *mut GumElfModule) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_source_mode(self_: *mut GumElfModule) -> GumElfSourceMode;
}
unsafe extern "C" {
    pub fn gum_elf_module_get_file_data(
        self_: *mut GumElfModule,
        size: *mut gsize,
    ) -> gconstpointer;
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_segments(
        self_: *mut GumElfModule,
        func: GumFoundElfSegmentFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_sections(
        self_: *mut GumElfModule,
        func: GumFoundElfSectionFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_relocations(
        self_: *mut GumElfModule,
        func: GumFoundElfRelocationFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_dynamic_entries(
        self_: *mut GumElfModule,
        func: GumFoundElfDynamicEntryFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_imports(
        self_: *mut GumElfModule,
        func: GumFoundImportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_exports(
        self_: *mut GumElfModule,
        func: GumFoundExportFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_dynamic_symbols(
        self_: *mut GumElfModule,
        func: GumFoundElfSymbolFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_symbols(
        self_: *mut GumElfModule,
        func: GumFoundElfSymbolFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_enumerate_dependencies(
        self_: *mut GumElfModule,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_elf_module_translate_to_offline(
        self_: *mut GumElfModule,
        online_address: GumAddress,
    ) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_elf_module_translate_to_online(
        self_: *mut GumElfModule,
        offline_address: GumAddress,
    ) -> GumAddress;
}
pub type GumEventType = guint;
pub type GumEvent = _GumEvent;
pub type GumAnyEvent = _GumAnyEvent;
pub type GumCallEvent = _GumCallEvent;
pub type GumRetEvent = _GumRetEvent;
pub type GumExecEvent = _GumExecEvent;
pub type GumBlockEvent = _GumBlockEvent;
pub type GumCompileEvent = _GumCompileEvent;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumAnyEvent {
    pub type_: GumEventType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumAnyEvent"][::std::mem::size_of::<_GumAnyEvent>() - 4usize];
    ["Alignment of _GumAnyEvent"][::std::mem::align_of::<_GumAnyEvent>() - 4usize];
    ["Offset of field: _GumAnyEvent::type_"][::std::mem::offset_of!(_GumAnyEvent, type_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallEvent {
    pub type_: GumEventType,
    pub location: gpointer,
    pub target: gpointer,
    pub depth: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCallEvent"][::std::mem::size_of::<_GumCallEvent>() - 32usize];
    ["Alignment of _GumCallEvent"][::std::mem::align_of::<_GumCallEvent>() - 8usize];
    ["Offset of field: _GumCallEvent::type_"]
        [::std::mem::offset_of!(_GumCallEvent, type_) - 0usize];
    ["Offset of field: _GumCallEvent::location"]
        [::std::mem::offset_of!(_GumCallEvent, location) - 8usize];
    ["Offset of field: _GumCallEvent::target"]
        [::std::mem::offset_of!(_GumCallEvent, target) - 16usize];
    ["Offset of field: _GumCallEvent::depth"]
        [::std::mem::offset_of!(_GumCallEvent, depth) - 24usize];
};
impl Default for _GumCallEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumRetEvent {
    pub type_: GumEventType,
    pub location: gpointer,
    pub target: gpointer,
    pub depth: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumRetEvent"][::std::mem::size_of::<_GumRetEvent>() - 32usize];
    ["Alignment of _GumRetEvent"][::std::mem::align_of::<_GumRetEvent>() - 8usize];
    ["Offset of field: _GumRetEvent::type_"][::std::mem::offset_of!(_GumRetEvent, type_) - 0usize];
    ["Offset of field: _GumRetEvent::location"]
        [::std::mem::offset_of!(_GumRetEvent, location) - 8usize];
    ["Offset of field: _GumRetEvent::target"]
        [::std::mem::offset_of!(_GumRetEvent, target) - 16usize];
    ["Offset of field: _GumRetEvent::depth"][::std::mem::offset_of!(_GumRetEvent, depth) - 24usize];
};
impl Default for _GumRetEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExecEvent {
    pub type_: GumEventType,
    pub location: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumExecEvent"][::std::mem::size_of::<_GumExecEvent>() - 16usize];
    ["Alignment of _GumExecEvent"][::std::mem::align_of::<_GumExecEvent>() - 8usize];
    ["Offset of field: _GumExecEvent::type_"]
        [::std::mem::offset_of!(_GumExecEvent, type_) - 0usize];
    ["Offset of field: _GumExecEvent::location"]
        [::std::mem::offset_of!(_GumExecEvent, location) - 8usize];
};
impl Default for _GumExecEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBlockEvent {
    pub type_: GumEventType,
    pub start: gpointer,
    pub end: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumBlockEvent"][::std::mem::size_of::<_GumBlockEvent>() - 24usize];
    ["Alignment of _GumBlockEvent"][::std::mem::align_of::<_GumBlockEvent>() - 8usize];
    ["Offset of field: _GumBlockEvent::type_"]
        [::std::mem::offset_of!(_GumBlockEvent, type_) - 0usize];
    ["Offset of field: _GumBlockEvent::start"]
        [::std::mem::offset_of!(_GumBlockEvent, start) - 8usize];
    ["Offset of field: _GumBlockEvent::end"][::std::mem::offset_of!(_GumBlockEvent, end) - 16usize];
};
impl Default for _GumBlockEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCompileEvent {
    pub type_: GumEventType,
    pub start: gpointer,
    pub end: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCompileEvent"][::std::mem::size_of::<_GumCompileEvent>() - 24usize];
    ["Alignment of _GumCompileEvent"][::std::mem::align_of::<_GumCompileEvent>() - 8usize];
    ["Offset of field: _GumCompileEvent::type_"]
        [::std::mem::offset_of!(_GumCompileEvent, type_) - 0usize];
    ["Offset of field: _GumCompileEvent::start"]
        [::std::mem::offset_of!(_GumCompileEvent, start) - 8usize];
    ["Offset of field: _GumCompileEvent::end"]
        [::std::mem::offset_of!(_GumCompileEvent, end) - 16usize];
};
impl Default for _GumCompileEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumEvent {
    pub type_: GumEventType,
    pub any: GumAnyEvent,
    pub call: GumCallEvent,
    pub ret: GumRetEvent,
    pub exec: GumExecEvent,
    pub block: GumBlockEvent,
    pub compile: GumCompileEvent,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumEvent"][::std::mem::size_of::<_GumEvent>() - 32usize];
    ["Alignment of _GumEvent"][::std::mem::align_of::<_GumEvent>() - 8usize];
    ["Offset of field: _GumEvent::type_"][::std::mem::offset_of!(_GumEvent, type_) - 0usize];
    ["Offset of field: _GumEvent::any"][::std::mem::offset_of!(_GumEvent, any) - 0usize];
    ["Offset of field: _GumEvent::call"][::std::mem::offset_of!(_GumEvent, call) - 0usize];
    ["Offset of field: _GumEvent::ret"][::std::mem::offset_of!(_GumEvent, ret) - 0usize];
    ["Offset of field: _GumEvent::exec"][::std::mem::offset_of!(_GumEvent, exec) - 0usize];
    ["Offset of field: _GumEvent::block"][::std::mem::offset_of!(_GumEvent, block) - 0usize];
    ["Offset of field: _GumEvent::compile"][::std::mem::offset_of!(_GumEvent, compile) - 0usize];
};
impl Default for _GumEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumEventSink {
    _unused: [u8; 0],
}
pub type GumEventSink = _GumEventSink;
pub type GumEventSinkInterface = _GumEventSinkInterface;
pub type GumEventSink_autoptr = *mut GumEventSink;
pub type GumEventSink_listautoptr = *mut GList;
pub type GumEventSink_slistautoptr = *mut GSList;
pub type GumEventSink_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_default_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDefaultEventSink {
    _unused: [u8; 0],
}
pub type GumDefaultEventSink = _GumDefaultEventSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDefaultEventSinkClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumDefaultEventSinkClass"]
        [::std::mem::size_of::<GumDefaultEventSinkClass>() - 136usize];
    ["Alignment of GumDefaultEventSinkClass"]
        [::std::mem::align_of::<GumDefaultEventSinkClass>() - 8usize];
    ["Offset of field: GumDefaultEventSinkClass::parent_class"]
        [::std::mem::offset_of!(GumDefaultEventSinkClass, parent_class) - 0usize];
};
impl Default for GumDefaultEventSinkClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumDefaultEventSink_autoptr = *mut GumDefaultEventSink;
pub type GumDefaultEventSink_listautoptr = *mut GList;
pub type GumDefaultEventSink_slistautoptr = *mut GSList;
pub type GumDefaultEventSink_queueautoptr = *mut GQueue;
pub type GumDefaultEventSinkClass_autoptr = *mut GumDefaultEventSinkClass;
pub type GumDefaultEventSinkClass_listautoptr = *mut GList;
pub type GumDefaultEventSinkClass_slistautoptr = *mut GSList;
pub type GumDefaultEventSinkClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_callback_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallbackEventSink {
    _unused: [u8; 0],
}
pub type GumCallbackEventSink = _GumCallbackEventSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumCallbackEventSinkClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumCallbackEventSinkClass"]
        [::std::mem::size_of::<GumCallbackEventSinkClass>() - 136usize];
    ["Alignment of GumCallbackEventSinkClass"]
        [::std::mem::align_of::<GumCallbackEventSinkClass>() - 8usize];
    ["Offset of field: GumCallbackEventSinkClass::parent_class"]
        [::std::mem::offset_of!(GumCallbackEventSinkClass, parent_class) - 0usize];
};
impl Default for GumCallbackEventSinkClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumCallbackEventSink_autoptr = *mut GumCallbackEventSink;
pub type GumCallbackEventSink_listautoptr = *mut GList;
pub type GumCallbackEventSink_slistautoptr = *mut GSList;
pub type GumCallbackEventSink_queueautoptr = *mut GQueue;
pub type GumCallbackEventSinkClass_autoptr = *mut GumCallbackEventSinkClass;
pub type GumCallbackEventSinkClass_listautoptr = *mut GList;
pub type GumCallbackEventSinkClass_slistautoptr = *mut GSList;
pub type GumCallbackEventSinkClass_queueautoptr = *mut GQueue;
pub type GumEventSinkCallback = ::std::option::Option<
    unsafe extern "C" fn(
        event: *const GumEvent,
        cpu_context: *mut GumCpuContext,
        user_data: gpointer,
    ),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumEventSinkInterface {
    pub parent: GTypeInterface,
    pub query_mask:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink) -> GumEventType>,
    pub start: ::std::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumEventSink,
            event: *const GumEvent,
            cpu_context: *mut GumCpuContext,
        ),
    >,
    pub flush: ::std::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
    pub stop: ::std::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumEventSinkInterface"][::std::mem::size_of::<_GumEventSinkInterface>() - 56usize];
    ["Alignment of _GumEventSinkInterface"]
        [::std::mem::align_of::<_GumEventSinkInterface>() - 8usize];
    ["Offset of field: _GumEventSinkInterface::parent"]
        [::std::mem::offset_of!(_GumEventSinkInterface, parent) - 0usize];
    ["Offset of field: _GumEventSinkInterface::query_mask"]
        [::std::mem::offset_of!(_GumEventSinkInterface, query_mask) - 16usize];
    ["Offset of field: _GumEventSinkInterface::start"]
        [::std::mem::offset_of!(_GumEventSinkInterface, start) - 24usize];
    ["Offset of field: _GumEventSinkInterface::process"]
        [::std::mem::offset_of!(_GumEventSinkInterface, process) - 32usize];
    ["Offset of field: _GumEventSinkInterface::flush"]
        [::std::mem::offset_of!(_GumEventSinkInterface, flush) - 40usize];
    ["Offset of field: _GumEventSinkInterface::stop"]
        [::std::mem::offset_of!(_GumEventSinkInterface, stop) - 48usize];
};
unsafe extern "C" {
    pub fn gum_event_sink_query_mask(self_: *mut GumEventSink) -> GumEventType;
}
unsafe extern "C" {
    pub fn gum_event_sink_start(self_: *mut GumEventSink);
}
unsafe extern "C" {
    pub fn gum_event_sink_process(
        self_: *mut GumEventSink,
        event: *const GumEvent,
        cpu_context: *mut GumCpuContext,
    );
}
unsafe extern "C" {
    pub fn gum_event_sink_flush(self_: *mut GumEventSink);
}
unsafe extern "C" {
    pub fn gum_event_sink_stop(self_: *mut GumEventSink);
}
unsafe extern "C" {
    pub fn gum_event_sink_make_default() -> *mut GumEventSink;
}
unsafe extern "C" {
    pub fn gum_event_sink_make_from_callback(
        mask: GumEventType,
        callback: GumEventSinkCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumEventSink;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
unsafe extern "C" {
    pub fn gum_exceptor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptor {
    _unused: [u8; 0],
}
pub type GumExceptor = _GumExceptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumExceptorClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumExceptorClass"][::std::mem::size_of::<GumExceptorClass>() - 136usize];
    ["Alignment of GumExceptorClass"][::std::mem::align_of::<GumExceptorClass>() - 8usize];
    ["Offset of field: GumExceptorClass::parent_class"]
        [::std::mem::offset_of!(GumExceptorClass, parent_class) - 0usize];
};
impl Default for GumExceptorClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumExceptor_autoptr = *mut GumExceptor;
pub type GumExceptor_listautoptr = *mut GList;
pub type GumExceptor_slistautoptr = *mut GSList;
pub type GumExceptor_queueautoptr = *mut GQueue;
pub type GumExceptorClass_autoptr = *mut GumExceptorClass;
pub type GumExceptorClass_listautoptr = *mut GList;
pub type GumExceptorClass_slistautoptr = *mut GSList;
pub type GumExceptorClass_queueautoptr = *mut GQueue;
pub type GumExceptorNativeJmpBuf = sigjmp_buf;
pub type GumExceptionDetails = _GumExceptionDetails;
pub type GumExceptionType = guint;
pub type GumExceptionMemoryDetails = _GumExceptionMemoryDetails;
pub type GumExceptionHandler = ::std::option::Option<
    unsafe extern "C" fn(details: *mut GumExceptionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumExceptorScope = _GumExceptorScope;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptionMemoryDetails {
    pub operation: GumMemoryOperation,
    pub address: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumExceptionMemoryDetails"]
        [::std::mem::size_of::<_GumExceptionMemoryDetails>() - 16usize];
    ["Alignment of _GumExceptionMemoryDetails"]
        [::std::mem::align_of::<_GumExceptionMemoryDetails>() - 8usize];
    ["Offset of field: _GumExceptionMemoryDetails::operation"]
        [::std::mem::offset_of!(_GumExceptionMemoryDetails, operation) - 0usize];
    ["Offset of field: _GumExceptionMemoryDetails::address"]
        [::std::mem::offset_of!(_GumExceptionMemoryDetails, address) - 8usize];
};
impl Default for _GumExceptionMemoryDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptionDetails {
    pub thread_id: GumThreadId,
    pub type_: GumExceptionType,
    pub address: gpointer,
    pub memory: GumExceptionMemoryDetails,
    pub context: GumCpuContext,
    pub native_context: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumExceptionDetails"][::std::mem::size_of::<_GumExceptionDetails>() - 184usize];
    ["Alignment of _GumExceptionDetails"][::std::mem::align_of::<_GumExceptionDetails>() - 8usize];
    ["Offset of field: _GumExceptionDetails::thread_id"]
        [::std::mem::offset_of!(_GumExceptionDetails, thread_id) - 0usize];
    ["Offset of field: _GumExceptionDetails::type_"]
        [::std::mem::offset_of!(_GumExceptionDetails, type_) - 8usize];
    ["Offset of field: _GumExceptionDetails::address"]
        [::std::mem::offset_of!(_GumExceptionDetails, address) - 16usize];
    ["Offset of field: _GumExceptionDetails::memory"]
        [::std::mem::offset_of!(_GumExceptionDetails, memory) - 24usize];
    ["Offset of field: _GumExceptionDetails::context"]
        [::std::mem::offset_of!(_GumExceptionDetails, context) - 40usize];
    ["Offset of field: _GumExceptionDetails::native_context"]
        [::std::mem::offset_of!(_GumExceptionDetails, native_context) - 176usize];
};
impl Default for _GumExceptionDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptorScope {
    pub exception: GumExceptionDetails,
    pub exception_occurred: gboolean,
    pub padding: [gpointer; 2usize],
    pub env: GumExceptorNativeJmpBuf,
    pub next: *mut GumExceptorScope,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumExceptorScope"][::std::mem::size_of::<_GumExceptorScope>() - 416usize];
    ["Alignment of _GumExceptorScope"][::std::mem::align_of::<_GumExceptorScope>() - 8usize];
    ["Offset of field: _GumExceptorScope::exception"]
        [::std::mem::offset_of!(_GumExceptorScope, exception) - 0usize];
    ["Offset of field: _GumExceptorScope::exception_occurred"]
        [::std::mem::offset_of!(_GumExceptorScope, exception_occurred) - 184usize];
    ["Offset of field: _GumExceptorScope::padding"]
        [::std::mem::offset_of!(_GumExceptorScope, padding) - 192usize];
    ["Offset of field: _GumExceptorScope::env"]
        [::std::mem::offset_of!(_GumExceptorScope, env) - 208usize];
    ["Offset of field: _GumExceptorScope::next"]
        [::std::mem::offset_of!(_GumExceptorScope, next) - 408usize];
};
impl Default for _GumExceptorScope {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_exceptor_disable();
}
unsafe extern "C" {
    pub fn gum_exceptor_obtain() -> *mut GumExceptor;
}
unsafe extern "C" {
    pub fn gum_exceptor_reset(self_: *mut GumExceptor);
}
unsafe extern "C" {
    pub fn gum_exceptor_add(
        self_: *mut GumExceptor,
        func: GumExceptionHandler,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_exceptor_remove(
        self_: *mut GumExceptor,
        func: GumExceptionHandler,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_exceptor_catch(self_: *mut GumExceptor, scope: *mut GumExceptorScope) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_exceptor_has_scope(self_: *mut GumExceptor, thread_id: GumThreadId) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_exception_details_to_string(details: *const GumExceptionDetails) -> *mut gchar;
}
pub type GumFunctionDetails = _GumFunctionDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumFunctionDetails {
    pub name: *const gchar,
    pub address: gpointer,
    pub num_arguments: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumFunctionDetails"][::std::mem::size_of::<_GumFunctionDetails>() - 24usize];
    ["Alignment of _GumFunctionDetails"][::std::mem::align_of::<_GumFunctionDetails>() - 8usize];
    ["Offset of field: _GumFunctionDetails::name"]
        [::std::mem::offset_of!(_GumFunctionDetails, name) - 0usize];
    ["Offset of field: _GumFunctionDetails::address"]
        [::std::mem::offset_of!(_GumFunctionDetails, address) - 8usize];
    ["Offset of field: _GumFunctionDetails::num_arguments"]
        [::std::mem::offset_of!(_GumFunctionDetails, num_arguments) - 16usize];
};
impl Default for _GumFunctionDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumInvocationBackend = _GumInvocationBackend;
pub type GumInvocationContext = _GumInvocationContext;
pub type GumPointCut = guint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationBackend {
    pub get_point_cut: ::std::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> GumPointCut,
    >,
    pub get_thread_id: ::std::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> GumThreadId,
    >,
    pub get_depth:
        ::std::option::Option<unsafe extern "C" fn(context: *mut GumInvocationContext) -> guint>,
    pub get_listener_thread_data: ::std::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext, required_size: gsize) -> gpointer,
    >,
    pub get_listener_function_data:
        ::std::option::Option<unsafe extern "C" fn(context: *mut GumInvocationContext) -> gpointer>,
    pub get_listener_invocation_data: ::std::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext, required_size: gsize) -> gpointer,
    >,
    pub get_replacement_data:
        ::std::option::Option<unsafe extern "C" fn(context: *mut GumInvocationContext) -> gpointer>,
    pub state: gpointer,
    pub data: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumInvocationBackend"][::std::mem::size_of::<_GumInvocationBackend>() - 72usize];
    ["Alignment of _GumInvocationBackend"]
        [::std::mem::align_of::<_GumInvocationBackend>() - 8usize];
    ["Offset of field: _GumInvocationBackend::get_point_cut"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_point_cut) - 0usize];
    ["Offset of field: _GumInvocationBackend::get_thread_id"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_thread_id) - 8usize];
    ["Offset of field: _GumInvocationBackend::get_depth"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_depth) - 16usize];
    ["Offset of field: _GumInvocationBackend::get_listener_thread_data"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_listener_thread_data) - 24usize];
    ["Offset of field: _GumInvocationBackend::get_listener_function_data"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_listener_function_data) - 32usize];
    ["Offset of field: _GumInvocationBackend::get_listener_invocation_data"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_listener_invocation_data) - 40usize];
    ["Offset of field: _GumInvocationBackend::get_replacement_data"]
        [::std::mem::offset_of!(_GumInvocationBackend, get_replacement_data) - 48usize];
    ["Offset of field: _GumInvocationBackend::state"]
        [::std::mem::offset_of!(_GumInvocationBackend, state) - 56usize];
    ["Offset of field: _GumInvocationBackend::data"]
        [::std::mem::offset_of!(_GumInvocationBackend, data) - 64usize];
};
impl Default for _GumInvocationBackend {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationContext {
    pub function: gpointer,
    pub cpu_context: *mut GumCpuContext,
    pub system_error: gint,
    pub backend: *mut GumInvocationBackend,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumInvocationContext"][::std::mem::size_of::<_GumInvocationContext>() - 32usize];
    ["Alignment of _GumInvocationContext"]
        [::std::mem::align_of::<_GumInvocationContext>() - 8usize];
    ["Offset of field: _GumInvocationContext::function"]
        [::std::mem::offset_of!(_GumInvocationContext, function) - 0usize];
    ["Offset of field: _GumInvocationContext::cpu_context"]
        [::std::mem::offset_of!(_GumInvocationContext, cpu_context) - 8usize];
    ["Offset of field: _GumInvocationContext::system_error"]
        [::std::mem::offset_of!(_GumInvocationContext, system_error) - 16usize];
    ["Offset of field: _GumInvocationContext::backend"]
        [::std::mem::offset_of!(_GumInvocationContext, backend) - 24usize];
};
impl Default for _GumInvocationContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_point_cut(context: *mut GumInvocationContext) -> GumPointCut;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_nth_argument(
        context: *mut GumInvocationContext,
        n: guint,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_replace_nth_argument(
        context: *mut GumInvocationContext,
        n: guint,
        value: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_return_value(context: *mut GumInvocationContext) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_replace_return_value(
        context: *mut GumInvocationContext,
        value: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_return_address(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_thread_id(context: *mut GumInvocationContext) -> guint;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_depth(context: *mut GumInvocationContext) -> guint;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_listener_thread_data(
        context: *mut GumInvocationContext,
        required_size: gsize,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_listener_function_data(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_listener_invocation_data(
        context: *mut GumInvocationContext,
        required_size: gsize,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_context_get_replacement_data(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_invocation_listener_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationListener {
    _unused: [u8; 0],
}
pub type GumInvocationListener = _GumInvocationListener;
pub type GumInvocationListenerInterface = _GumInvocationListenerInterface;
pub type GumInvocationListener_autoptr = *mut GumInvocationListener;
pub type GumInvocationListener_listautoptr = *mut GList;
pub type GumInvocationListener_slistautoptr = *mut GSList;
pub type GumInvocationListener_queueautoptr = *mut GQueue;
pub type GumInvocationCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut GumInvocationContext, user_data: gpointer),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumInvocationListenerInterface {
    pub parent: GTypeInterface,
    pub on_enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumInvocationListener, context: *mut GumInvocationContext),
    >,
    pub on_leave: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GumInvocationListener, context: *mut GumInvocationContext),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumInvocationListenerInterface"]
        [::std::mem::size_of::<_GumInvocationListenerInterface>() - 32usize];
    ["Alignment of _GumInvocationListenerInterface"]
        [::std::mem::align_of::<_GumInvocationListenerInterface>() - 8usize];
    ["Offset of field: _GumInvocationListenerInterface::parent"]
        [::std::mem::offset_of!(_GumInvocationListenerInterface, parent) - 0usize];
    ["Offset of field: _GumInvocationListenerInterface::on_enter"]
        [::std::mem::offset_of!(_GumInvocationListenerInterface, on_enter) - 16usize];
    ["Offset of field: _GumInvocationListenerInterface::on_leave"]
        [::std::mem::offset_of!(_GumInvocationListenerInterface, on_leave) - 24usize];
};
unsafe extern "C" {
    pub fn gum_make_call_listener(
        on_enter: GumInvocationCallback,
        on_leave: GumInvocationCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumInvocationListener;
}
unsafe extern "C" {
    pub fn gum_make_probe_listener(
        on_hit: GumInvocationCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumInvocationListener;
}
unsafe extern "C" {
    pub fn gum_invocation_listener_on_enter(
        self_: *mut GumInvocationListener,
        context: *mut GumInvocationContext,
    );
}
unsafe extern "C" {
    pub fn gum_invocation_listener_on_leave(
        self_: *mut GumInvocationListener,
        context: *mut GumInvocationContext,
    );
}
pub type csh = usize;
pub const arm_shifter_ARM_SFT_INVALID: arm_shifter = 0;
#[doc = "< shift with immediate const"]
pub const arm_shifter_ARM_SFT_ASR: arm_shifter = 1;
#[doc = "< shift with immediate const"]
pub const arm_shifter_ARM_SFT_LSL: arm_shifter = 2;
#[doc = "< shift with immediate const"]
pub const arm_shifter_ARM_SFT_LSR: arm_shifter = 3;
#[doc = "< shift with immediate const"]
pub const arm_shifter_ARM_SFT_ROR: arm_shifter = 4;
#[doc = "< shift with immediate const"]
pub const arm_shifter_ARM_SFT_RRX: arm_shifter = 5;
#[doc = "< shift with register"]
pub const arm_shifter_ARM_SFT_ASR_REG: arm_shifter = 6;
#[doc = "< shift with register"]
pub const arm_shifter_ARM_SFT_LSL_REG: arm_shifter = 7;
#[doc = "< shift with register"]
pub const arm_shifter_ARM_SFT_LSR_REG: arm_shifter = 8;
#[doc = "< shift with register"]
pub const arm_shifter_ARM_SFT_ROR_REG: arm_shifter = 9;
#[doc = "< shift with register"]
pub const arm_shifter_ARM_SFT_RRX_REG: arm_shifter = 10;
#[doc = " ARM shift type"]
pub type arm_shifter = ::std::os::raw::c_uint;
pub const arm_cc_ARM_CC_INVALID: arm_cc = 0;
#[doc = "< Equal                      Equal"]
pub const arm_cc_ARM_CC_EQ: arm_cc = 1;
#[doc = "< Not equal                  Not equal, or unordered"]
pub const arm_cc_ARM_CC_NE: arm_cc = 2;
#[doc = "< Carry set                  >, ==, or unordered"]
pub const arm_cc_ARM_CC_HS: arm_cc = 3;
#[doc = "< Carry clear                Less than"]
pub const arm_cc_ARM_CC_LO: arm_cc = 4;
#[doc = "< Minus, negative            Less than"]
pub const arm_cc_ARM_CC_MI: arm_cc = 5;
#[doc = "< Plus, positive or zero     >, ==, or unordered"]
pub const arm_cc_ARM_CC_PL: arm_cc = 6;
#[doc = "< Overflow                   Unordered"]
pub const arm_cc_ARM_CC_VS: arm_cc = 7;
#[doc = "< No overflow                Not unordered"]
pub const arm_cc_ARM_CC_VC: arm_cc = 8;
#[doc = "< Unsigned higher            Greater than, or unordered"]
pub const arm_cc_ARM_CC_HI: arm_cc = 9;
#[doc = "< Unsigned lower or same     Less than or equal"]
pub const arm_cc_ARM_CC_LS: arm_cc = 10;
#[doc = "< Greater than or equal      Greater than or equal"]
pub const arm_cc_ARM_CC_GE: arm_cc = 11;
#[doc = "< Less than                  Less than, or unordered"]
pub const arm_cc_ARM_CC_LT: arm_cc = 12;
#[doc = "< Greater than               Greater than"]
pub const arm_cc_ARM_CC_GT: arm_cc = 13;
#[doc = "< Less than or equal         <, ==, or unordered"]
pub const arm_cc_ARM_CC_LE: arm_cc = 14;
#[doc = "< Always (unconditional)     Always (unconditional)"]
pub const arm_cc_ARM_CC_AL: arm_cc = 15;
#[doc = " ARM condition code"]
pub type arm_cc = ::std::os::raw::c_uint;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_INVALID: arm_sysreg = 0;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_C: arm_sysreg = 1;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_X: arm_sysreg = 2;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_S: arm_sysreg = 4;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_F: arm_sysreg = 8;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CPSR_C: arm_sysreg = 16;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CPSR_X: arm_sysreg = 32;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CPSR_S: arm_sysreg = 64;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CPSR_F: arm_sysreg = 128;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_APSR: arm_sysreg = 256;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_APSR_G: arm_sysreg = 257;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_APSR_NZCVQ: arm_sysreg = 258;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_APSR_NZCVQG: arm_sysreg = 259;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IAPSR: arm_sysreg = 260;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IAPSR_G: arm_sysreg = 261;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IAPSR_NZCVQG: arm_sysreg = 262;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IAPSR_NZCVQ: arm_sysreg = 263;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_EAPSR: arm_sysreg = 264;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_EAPSR_G: arm_sysreg = 265;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_EAPSR_NZCVQG: arm_sysreg = 266;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_EAPSR_NZCVQ: arm_sysreg = 267;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_XPSR: arm_sysreg = 268;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_XPSR_G: arm_sysreg = 269;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_XPSR_NZCVQG: arm_sysreg = 270;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_XPSR_NZCVQ: arm_sysreg = 271;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IPSR: arm_sysreg = 272;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_EPSR: arm_sysreg = 273;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_IEPSR: arm_sysreg = 274;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_MSP: arm_sysreg = 275;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PSP: arm_sysreg = 276;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PRIMASK: arm_sysreg = 277;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_BASEPRI: arm_sysreg = 278;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_BASEPRI_MAX: arm_sysreg = 279;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_FAULTMASK: arm_sysreg = 280;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CONTROL: arm_sysreg = 281;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_MSPLIM: arm_sysreg = 282;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PSPLIM: arm_sysreg = 283;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_MSP_NS: arm_sysreg = 284;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PSP_NS: arm_sysreg = 285;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_MSPLIM_NS: arm_sysreg = 286;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PSPLIM_NS: arm_sysreg = 287;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_PRIMASK_NS: arm_sysreg = 288;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_BASEPRI_NS: arm_sysreg = 289;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_FAULTMASK_NS: arm_sysreg = 290;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_CONTROL_NS: arm_sysreg = 291;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_NS: arm_sysreg = 292;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R8_USR: arm_sysreg = 293;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R9_USR: arm_sysreg = 294;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R10_USR: arm_sysreg = 295;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R11_USR: arm_sysreg = 296;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R12_USR: arm_sysreg = 297;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_USR: arm_sysreg = 298;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_USR: arm_sysreg = 299;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R8_FIQ: arm_sysreg = 300;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R9_FIQ: arm_sysreg = 301;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R10_FIQ: arm_sysreg = 302;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R11_FIQ: arm_sysreg = 303;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_R12_FIQ: arm_sysreg = 304;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_FIQ: arm_sysreg = 305;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_FIQ: arm_sysreg = 306;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_IRQ: arm_sysreg = 307;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_IRQ: arm_sysreg = 308;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_SVC: arm_sysreg = 309;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_SVC: arm_sysreg = 310;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_ABT: arm_sysreg = 311;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_ABT: arm_sysreg = 312;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_UND: arm_sysreg = 313;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_UND: arm_sysreg = 314;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_LR_MON: arm_sysreg = 315;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_MON: arm_sysreg = 316;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_ELR_HYP: arm_sysreg = 317;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SP_HYP: arm_sysreg = 318;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_FIQ: arm_sysreg = 319;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_IRQ: arm_sysreg = 320;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_SVC: arm_sysreg = 321;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_ABT: arm_sysreg = 322;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_UND: arm_sysreg = 323;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_MON: arm_sysreg = 324;
#[doc = " Special registers for MSR"]
pub const arm_sysreg_ARM_SYSREG_SPSR_HYP: arm_sysreg = 325;
pub type arm_sysreg = ::std::os::raw::c_uint;
pub const arm_mem_barrier_ARM_MB_INVALID: arm_mem_barrier = 0;
pub const arm_mem_barrier_ARM_MB_RESERVED_0: arm_mem_barrier = 1;
pub const arm_mem_barrier_ARM_MB_OSHLD: arm_mem_barrier = 2;
pub const arm_mem_barrier_ARM_MB_OSHST: arm_mem_barrier = 3;
pub const arm_mem_barrier_ARM_MB_OSH: arm_mem_barrier = 4;
pub const arm_mem_barrier_ARM_MB_RESERVED_4: arm_mem_barrier = 5;
pub const arm_mem_barrier_ARM_MB_NSHLD: arm_mem_barrier = 6;
pub const arm_mem_barrier_ARM_MB_NSHST: arm_mem_barrier = 7;
pub const arm_mem_barrier_ARM_MB_NSH: arm_mem_barrier = 8;
pub const arm_mem_barrier_ARM_MB_RESERVED_8: arm_mem_barrier = 9;
pub const arm_mem_barrier_ARM_MB_ISHLD: arm_mem_barrier = 10;
pub const arm_mem_barrier_ARM_MB_ISHST: arm_mem_barrier = 11;
pub const arm_mem_barrier_ARM_MB_ISH: arm_mem_barrier = 12;
pub const arm_mem_barrier_ARM_MB_RESERVED_12: arm_mem_barrier = 13;
pub const arm_mem_barrier_ARM_MB_LD: arm_mem_barrier = 14;
pub const arm_mem_barrier_ARM_MB_ST: arm_mem_barrier = 15;
pub const arm_mem_barrier_ARM_MB_SY: arm_mem_barrier = 16;
#[doc = " The memory barrier constants map directly to the 4-bit encoding of\n the option field for Memory Barrier operations."]
pub type arm_mem_barrier = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const arm_op_type_ARM_OP_INVALID: arm_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const arm_op_type_ARM_OP_REG: arm_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const arm_op_type_ARM_OP_IMM: arm_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const arm_op_type_ARM_OP_MEM: arm_op_type = 3;
#[doc = "< = CS_OP_FP (Floating-Point operand)."]
pub const arm_op_type_ARM_OP_FP: arm_op_type = 4;
#[doc = "< C-Immediate (coprocessor registers)"]
pub const arm_op_type_ARM_OP_CIMM: arm_op_type = 64;
#[doc = "< P-Immediate (coprocessor registers)"]
pub const arm_op_type_ARM_OP_PIMM: arm_op_type = 65;
#[doc = "< operand for SETEND instruction"]
pub const arm_op_type_ARM_OP_SETEND: arm_op_type = 66;
#[doc = "< MSR/MRS special register operand"]
pub const arm_op_type_ARM_OP_SYSREG: arm_op_type = 67;
#[doc = " Operand type for instruction's operands"]
pub type arm_op_type = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const arm_setend_type_ARM_SETEND_INVALID: arm_setend_type = 0;
#[doc = "< BE operand."]
pub const arm_setend_type_ARM_SETEND_BE: arm_setend_type = 1;
#[doc = "< LE operand"]
pub const arm_setend_type_ARM_SETEND_LE: arm_setend_type = 2;
#[doc = " Operand type for SETEND instruction"]
pub type arm_setend_type = ::std::os::raw::c_uint;
pub const arm_cpsmode_type_ARM_CPSMODE_INVALID: arm_cpsmode_type = 0;
pub const arm_cpsmode_type_ARM_CPSMODE_IE: arm_cpsmode_type = 2;
pub const arm_cpsmode_type_ARM_CPSMODE_ID: arm_cpsmode_type = 3;
pub type arm_cpsmode_type = ::std::os::raw::c_uint;
pub const arm_cpsflag_type_ARM_CPSFLAG_INVALID: arm_cpsflag_type = 0;
pub const arm_cpsflag_type_ARM_CPSFLAG_F: arm_cpsflag_type = 1;
pub const arm_cpsflag_type_ARM_CPSFLAG_I: arm_cpsflag_type = 2;
pub const arm_cpsflag_type_ARM_CPSFLAG_A: arm_cpsflag_type = 4;
#[doc = "< no flag"]
pub const arm_cpsflag_type_ARM_CPSFLAG_NONE: arm_cpsflag_type = 16;
#[doc = " Operand type for SETEND instruction"]
pub type arm_cpsflag_type = ::std::os::raw::c_uint;
pub const arm_vectordata_type_ARM_VECTORDATA_INVALID: arm_vectordata_type = 0;
pub const arm_vectordata_type_ARM_VECTORDATA_I8: arm_vectordata_type = 1;
pub const arm_vectordata_type_ARM_VECTORDATA_I16: arm_vectordata_type = 2;
pub const arm_vectordata_type_ARM_VECTORDATA_I32: arm_vectordata_type = 3;
pub const arm_vectordata_type_ARM_VECTORDATA_I64: arm_vectordata_type = 4;
pub const arm_vectordata_type_ARM_VECTORDATA_S8: arm_vectordata_type = 5;
pub const arm_vectordata_type_ARM_VECTORDATA_S16: arm_vectordata_type = 6;
pub const arm_vectordata_type_ARM_VECTORDATA_S32: arm_vectordata_type = 7;
pub const arm_vectordata_type_ARM_VECTORDATA_S64: arm_vectordata_type = 8;
pub const arm_vectordata_type_ARM_VECTORDATA_U8: arm_vectordata_type = 9;
pub const arm_vectordata_type_ARM_VECTORDATA_U16: arm_vectordata_type = 10;
pub const arm_vectordata_type_ARM_VECTORDATA_U32: arm_vectordata_type = 11;
pub const arm_vectordata_type_ARM_VECTORDATA_U64: arm_vectordata_type = 12;
pub const arm_vectordata_type_ARM_VECTORDATA_P8: arm_vectordata_type = 13;
pub const arm_vectordata_type_ARM_VECTORDATA_F16: arm_vectordata_type = 14;
pub const arm_vectordata_type_ARM_VECTORDATA_F32: arm_vectordata_type = 15;
pub const arm_vectordata_type_ARM_VECTORDATA_F64: arm_vectordata_type = 16;
pub const arm_vectordata_type_ARM_VECTORDATA_F16F64: arm_vectordata_type = 17;
pub const arm_vectordata_type_ARM_VECTORDATA_F64F16: arm_vectordata_type = 18;
pub const arm_vectordata_type_ARM_VECTORDATA_F32F16: arm_vectordata_type = 19;
pub const arm_vectordata_type_ARM_VECTORDATA_F16F32: arm_vectordata_type = 20;
pub const arm_vectordata_type_ARM_VECTORDATA_F64F32: arm_vectordata_type = 21;
pub const arm_vectordata_type_ARM_VECTORDATA_F32F64: arm_vectordata_type = 22;
pub const arm_vectordata_type_ARM_VECTORDATA_S32F32: arm_vectordata_type = 23;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F32: arm_vectordata_type = 24;
pub const arm_vectordata_type_ARM_VECTORDATA_F32S32: arm_vectordata_type = 25;
pub const arm_vectordata_type_ARM_VECTORDATA_F32U32: arm_vectordata_type = 26;
pub const arm_vectordata_type_ARM_VECTORDATA_F64S16: arm_vectordata_type = 27;
pub const arm_vectordata_type_ARM_VECTORDATA_F32S16: arm_vectordata_type = 28;
pub const arm_vectordata_type_ARM_VECTORDATA_F64S32: arm_vectordata_type = 29;
pub const arm_vectordata_type_ARM_VECTORDATA_S16F64: arm_vectordata_type = 30;
pub const arm_vectordata_type_ARM_VECTORDATA_S16F32: arm_vectordata_type = 31;
pub const arm_vectordata_type_ARM_VECTORDATA_S32F64: arm_vectordata_type = 32;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F64: arm_vectordata_type = 33;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F32: arm_vectordata_type = 34;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F64: arm_vectordata_type = 35;
pub const arm_vectordata_type_ARM_VECTORDATA_F64U16: arm_vectordata_type = 36;
pub const arm_vectordata_type_ARM_VECTORDATA_F32U16: arm_vectordata_type = 37;
pub const arm_vectordata_type_ARM_VECTORDATA_F64U32: arm_vectordata_type = 38;
pub const arm_vectordata_type_ARM_VECTORDATA_F16U16: arm_vectordata_type = 39;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F16: arm_vectordata_type = 40;
pub const arm_vectordata_type_ARM_VECTORDATA_F16U32: arm_vectordata_type = 41;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F16: arm_vectordata_type = 42;
#[doc = " Data type for elements of vector instructions."]
pub type arm_vectordata_type = ::std::os::raw::c_uint;
pub const arm_reg_ARM_REG_INVALID: arm_reg = 0;
pub const arm_reg_ARM_REG_APSR: arm_reg = 1;
pub const arm_reg_ARM_REG_APSR_NZCV: arm_reg = 2;
pub const arm_reg_ARM_REG_CPSR: arm_reg = 3;
pub const arm_reg_ARM_REG_FPEXC: arm_reg = 4;
pub const arm_reg_ARM_REG_FPINST: arm_reg = 5;
pub const arm_reg_ARM_REG_FPSCR: arm_reg = 6;
pub const arm_reg_ARM_REG_FPSCR_NZCV: arm_reg = 7;
pub const arm_reg_ARM_REG_FPSID: arm_reg = 8;
pub const arm_reg_ARM_REG_ITSTATE: arm_reg = 9;
pub const arm_reg_ARM_REG_LR: arm_reg = 10;
pub const arm_reg_ARM_REG_PC: arm_reg = 11;
pub const arm_reg_ARM_REG_SP: arm_reg = 12;
pub const arm_reg_ARM_REG_SPSR: arm_reg = 13;
pub const arm_reg_ARM_REG_D0: arm_reg = 14;
pub const arm_reg_ARM_REG_D1: arm_reg = 15;
pub const arm_reg_ARM_REG_D2: arm_reg = 16;
pub const arm_reg_ARM_REG_D3: arm_reg = 17;
pub const arm_reg_ARM_REG_D4: arm_reg = 18;
pub const arm_reg_ARM_REG_D5: arm_reg = 19;
pub const arm_reg_ARM_REG_D6: arm_reg = 20;
pub const arm_reg_ARM_REG_D7: arm_reg = 21;
pub const arm_reg_ARM_REG_D8: arm_reg = 22;
pub const arm_reg_ARM_REG_D9: arm_reg = 23;
pub const arm_reg_ARM_REG_D10: arm_reg = 24;
pub const arm_reg_ARM_REG_D11: arm_reg = 25;
pub const arm_reg_ARM_REG_D12: arm_reg = 26;
pub const arm_reg_ARM_REG_D13: arm_reg = 27;
pub const arm_reg_ARM_REG_D14: arm_reg = 28;
pub const arm_reg_ARM_REG_D15: arm_reg = 29;
pub const arm_reg_ARM_REG_D16: arm_reg = 30;
pub const arm_reg_ARM_REG_D17: arm_reg = 31;
pub const arm_reg_ARM_REG_D18: arm_reg = 32;
pub const arm_reg_ARM_REG_D19: arm_reg = 33;
pub const arm_reg_ARM_REG_D20: arm_reg = 34;
pub const arm_reg_ARM_REG_D21: arm_reg = 35;
pub const arm_reg_ARM_REG_D22: arm_reg = 36;
pub const arm_reg_ARM_REG_D23: arm_reg = 37;
pub const arm_reg_ARM_REG_D24: arm_reg = 38;
pub const arm_reg_ARM_REG_D25: arm_reg = 39;
pub const arm_reg_ARM_REG_D26: arm_reg = 40;
pub const arm_reg_ARM_REG_D27: arm_reg = 41;
pub const arm_reg_ARM_REG_D28: arm_reg = 42;
pub const arm_reg_ARM_REG_D29: arm_reg = 43;
pub const arm_reg_ARM_REG_D30: arm_reg = 44;
pub const arm_reg_ARM_REG_D31: arm_reg = 45;
pub const arm_reg_ARM_REG_FPINST2: arm_reg = 46;
pub const arm_reg_ARM_REG_MVFR0: arm_reg = 47;
pub const arm_reg_ARM_REG_MVFR1: arm_reg = 48;
pub const arm_reg_ARM_REG_MVFR2: arm_reg = 49;
pub const arm_reg_ARM_REG_Q0: arm_reg = 50;
pub const arm_reg_ARM_REG_Q1: arm_reg = 51;
pub const arm_reg_ARM_REG_Q2: arm_reg = 52;
pub const arm_reg_ARM_REG_Q3: arm_reg = 53;
pub const arm_reg_ARM_REG_Q4: arm_reg = 54;
pub const arm_reg_ARM_REG_Q5: arm_reg = 55;
pub const arm_reg_ARM_REG_Q6: arm_reg = 56;
pub const arm_reg_ARM_REG_Q7: arm_reg = 57;
pub const arm_reg_ARM_REG_Q8: arm_reg = 58;
pub const arm_reg_ARM_REG_Q9: arm_reg = 59;
pub const arm_reg_ARM_REG_Q10: arm_reg = 60;
pub const arm_reg_ARM_REG_Q11: arm_reg = 61;
pub const arm_reg_ARM_REG_Q12: arm_reg = 62;
pub const arm_reg_ARM_REG_Q13: arm_reg = 63;
pub const arm_reg_ARM_REG_Q14: arm_reg = 64;
pub const arm_reg_ARM_REG_Q15: arm_reg = 65;
pub const arm_reg_ARM_REG_R0: arm_reg = 66;
pub const arm_reg_ARM_REG_R1: arm_reg = 67;
pub const arm_reg_ARM_REG_R2: arm_reg = 68;
pub const arm_reg_ARM_REG_R3: arm_reg = 69;
pub const arm_reg_ARM_REG_R4: arm_reg = 70;
pub const arm_reg_ARM_REG_R5: arm_reg = 71;
pub const arm_reg_ARM_REG_R6: arm_reg = 72;
pub const arm_reg_ARM_REG_R7: arm_reg = 73;
pub const arm_reg_ARM_REG_R8: arm_reg = 74;
pub const arm_reg_ARM_REG_R9: arm_reg = 75;
pub const arm_reg_ARM_REG_R10: arm_reg = 76;
pub const arm_reg_ARM_REG_R11: arm_reg = 77;
pub const arm_reg_ARM_REG_R12: arm_reg = 78;
pub const arm_reg_ARM_REG_S0: arm_reg = 79;
pub const arm_reg_ARM_REG_S1: arm_reg = 80;
pub const arm_reg_ARM_REG_S2: arm_reg = 81;
pub const arm_reg_ARM_REG_S3: arm_reg = 82;
pub const arm_reg_ARM_REG_S4: arm_reg = 83;
pub const arm_reg_ARM_REG_S5: arm_reg = 84;
pub const arm_reg_ARM_REG_S6: arm_reg = 85;
pub const arm_reg_ARM_REG_S7: arm_reg = 86;
pub const arm_reg_ARM_REG_S8: arm_reg = 87;
pub const arm_reg_ARM_REG_S9: arm_reg = 88;
pub const arm_reg_ARM_REG_S10: arm_reg = 89;
pub const arm_reg_ARM_REG_S11: arm_reg = 90;
pub const arm_reg_ARM_REG_S12: arm_reg = 91;
pub const arm_reg_ARM_REG_S13: arm_reg = 92;
pub const arm_reg_ARM_REG_S14: arm_reg = 93;
pub const arm_reg_ARM_REG_S15: arm_reg = 94;
pub const arm_reg_ARM_REG_S16: arm_reg = 95;
pub const arm_reg_ARM_REG_S17: arm_reg = 96;
pub const arm_reg_ARM_REG_S18: arm_reg = 97;
pub const arm_reg_ARM_REG_S19: arm_reg = 98;
pub const arm_reg_ARM_REG_S20: arm_reg = 99;
pub const arm_reg_ARM_REG_S21: arm_reg = 100;
pub const arm_reg_ARM_REG_S22: arm_reg = 101;
pub const arm_reg_ARM_REG_S23: arm_reg = 102;
pub const arm_reg_ARM_REG_S24: arm_reg = 103;
pub const arm_reg_ARM_REG_S25: arm_reg = 104;
pub const arm_reg_ARM_REG_S26: arm_reg = 105;
pub const arm_reg_ARM_REG_S27: arm_reg = 106;
pub const arm_reg_ARM_REG_S28: arm_reg = 107;
pub const arm_reg_ARM_REG_S29: arm_reg = 108;
pub const arm_reg_ARM_REG_S30: arm_reg = 109;
pub const arm_reg_ARM_REG_S31: arm_reg = 110;
pub const arm_reg_ARM_REG_ENDING: arm_reg = 111;
pub const arm_reg_ARM_REG_R13: arm_reg = 12;
pub const arm_reg_ARM_REG_R14: arm_reg = 10;
pub const arm_reg_ARM_REG_R15: arm_reg = 11;
pub const arm_reg_ARM_REG_SB: arm_reg = 75;
pub const arm_reg_ARM_REG_SL: arm_reg = 76;
pub const arm_reg_ARM_REG_FP: arm_reg = 77;
pub const arm_reg_ARM_REG_IP: arm_reg = 78;
#[doc = " ARM registers"]
pub type arm_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with ARM_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_op_mem {
    #[doc = "< base register"]
    pub base: arm_reg,
    #[doc = "< index register"]
    pub index: arm_reg,
    #[doc = "< scale for index register (can be 1, or -1)"]
    pub scale: ::std::os::raw::c_int,
    #[doc = "< displacement/offset value"]
    pub disp: ::std::os::raw::c_int,
    #[doc = " left-shift on index register, or 0 if irrelevant\n NOTE: this value can also be fetched via operand.shift.value"]
    pub lshift: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm_op_mem"][::std::mem::size_of::<arm_op_mem>() - 20usize];
    ["Alignment of arm_op_mem"][::std::mem::align_of::<arm_op_mem>() - 4usize];
    ["Offset of field: arm_op_mem::base"][::std::mem::offset_of!(arm_op_mem, base) - 0usize];
    ["Offset of field: arm_op_mem::index"][::std::mem::offset_of!(arm_op_mem, index) - 4usize];
    ["Offset of field: arm_op_mem::scale"][::std::mem::offset_of!(arm_op_mem, scale) - 8usize];
    ["Offset of field: arm_op_mem::disp"][::std::mem::offset_of!(arm_op_mem, disp) - 12usize];
    ["Offset of field: arm_op_mem::lshift"][::std::mem::offset_of!(arm_op_mem, lshift) - 16usize];
};
impl Default for arm_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm_op {
    #[doc = "< Vector Index for some vector operands (or -1 if irrelevant)"]
    pub vector_index: ::std::os::raw::c_int,
    pub shift: cs_arm_op__bindgen_ty_1,
    #[doc = "< operand type"]
    pub type_: arm_op_type,
    pub __bindgen_anon_1: cs_arm_op__bindgen_ty_2,
    #[doc = " in some instructions, an operand can be subtracted or added to\n the base register,\n if TRUE, this operand is subtracted. otherwise, it is added."]
    pub subtracted: bool,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
    #[doc = " Neon lane index for NEON instructions (or -1 if irrelevant)"]
    pub neon_lane: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm_op__bindgen_ty_1 {
    pub type_: arm_shifter,
    pub value: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm_op__bindgen_ty_1"][::std::mem::size_of::<cs_arm_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_arm_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_arm_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_arm_op__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: cs_arm_op__bindgen_ty_1::value"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_1, value) - 4usize];
};
impl Default for cs_arm_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm_op__bindgen_ty_2 {
    #[doc = "< register value for REG/SYSREG operand"]
    pub reg: ::std::os::raw::c_int,
    #[doc = "< immediate value for C-IMM, P-IMM or IMM operand"]
    pub imm: i32,
    #[doc = "< floating point value for FP operand"]
    pub fp: f64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: arm_op_mem,
    #[doc = "< SETEND instruction's operand type"]
    pub setend: arm_setend_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm_op__bindgen_ty_2"][::std::mem::size_of::<cs_arm_op__bindgen_ty_2>() - 24usize];
    ["Alignment of cs_arm_op__bindgen_ty_2"]
        [::std::mem::align_of::<cs_arm_op__bindgen_ty_2>() - 8usize];
    ["Offset of field: cs_arm_op__bindgen_ty_2::reg"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_2, reg) - 0usize];
    ["Offset of field: cs_arm_op__bindgen_ty_2::imm"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_2, imm) - 0usize];
    ["Offset of field: cs_arm_op__bindgen_ty_2::fp"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_2, fp) - 0usize];
    ["Offset of field: cs_arm_op__bindgen_ty_2::mem"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_2, mem) - 0usize];
    ["Offset of field: cs_arm_op__bindgen_ty_2::setend"]
        [::std::mem::offset_of!(cs_arm_op__bindgen_ty_2, setend) - 0usize];
};
impl Default for cs_arm_op__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm_op"][::std::mem::size_of::<cs_arm_op>() - 48usize];
    ["Alignment of cs_arm_op"][::std::mem::align_of::<cs_arm_op>() - 8usize];
    ["Offset of field: cs_arm_op::vector_index"]
        [::std::mem::offset_of!(cs_arm_op, vector_index) - 0usize];
    ["Offset of field: cs_arm_op::shift"][::std::mem::offset_of!(cs_arm_op, shift) - 4usize];
    ["Offset of field: cs_arm_op::type_"][::std::mem::offset_of!(cs_arm_op, type_) - 12usize];
    ["Offset of field: cs_arm_op::subtracted"]
        [::std::mem::offset_of!(cs_arm_op, subtracted) - 40usize];
    ["Offset of field: cs_arm_op::access"][::std::mem::offset_of!(cs_arm_op, access) - 41usize];
    ["Offset of field: cs_arm_op::neon_lane"]
        [::std::mem::offset_of!(cs_arm_op, neon_lane) - 42usize];
};
impl Default for cs_arm_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm {
    #[doc = "< User-mode registers to be loaded (for LDM/STM instructions)"]
    pub usermode: bool,
    #[doc = "< Scalar size for vector instructions"]
    pub vector_size: ::std::os::raw::c_int,
    #[doc = "< Data type for elements of vector instructions"]
    pub vector_data: arm_vectordata_type,
    #[doc = "< CPS mode for CPS instruction"]
    pub cps_mode: arm_cpsmode_type,
    #[doc = "< CPS mode for CPS instruction"]
    pub cps_flag: arm_cpsflag_type,
    #[doc = "< conditional code for this insn"]
    pub cc: arm_cc,
    #[doc = "< does this insn update flags?"]
    pub update_flags: bool,
    #[doc = "< does this insn write-back?"]
    pub writeback: bool,
    #[doc = "< only set if writeback is 'True', if 'False' pre-index, otherwise post."]
    pub post_index: bool,
    #[doc = "< Option for some memory barrier instructions"]
    pub mem_barrier: arm_mem_barrier,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_arm_op; 36usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm"][::std::mem::size_of::<cs_arm>() - 1768usize];
    ["Alignment of cs_arm"][::std::mem::align_of::<cs_arm>() - 8usize];
    ["Offset of field: cs_arm::usermode"][::std::mem::offset_of!(cs_arm, usermode) - 0usize];
    ["Offset of field: cs_arm::vector_size"][::std::mem::offset_of!(cs_arm, vector_size) - 4usize];
    ["Offset of field: cs_arm::vector_data"][::std::mem::offset_of!(cs_arm, vector_data) - 8usize];
    ["Offset of field: cs_arm::cps_mode"][::std::mem::offset_of!(cs_arm, cps_mode) - 12usize];
    ["Offset of field: cs_arm::cps_flag"][::std::mem::offset_of!(cs_arm, cps_flag) - 16usize];
    ["Offset of field: cs_arm::cc"][::std::mem::offset_of!(cs_arm, cc) - 20usize];
    ["Offset of field: cs_arm::update_flags"]
        [::std::mem::offset_of!(cs_arm, update_flags) - 24usize];
    ["Offset of field: cs_arm::writeback"][::std::mem::offset_of!(cs_arm, writeback) - 25usize];
    ["Offset of field: cs_arm::post_index"][::std::mem::offset_of!(cs_arm, post_index) - 26usize];
    ["Offset of field: cs_arm::mem_barrier"][::std::mem::offset_of!(cs_arm, mem_barrier) - 28usize];
    ["Offset of field: cs_arm::op_count"][::std::mem::offset_of!(cs_arm, op_count) - 32usize];
    ["Offset of field: cs_arm::operands"][::std::mem::offset_of!(cs_arm, operands) - 40usize];
};
impl Default for cs_arm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const arm64_shifter_ARM64_SFT_INVALID: arm64_shifter = 0;
pub const arm64_shifter_ARM64_SFT_LSL: arm64_shifter = 1;
pub const arm64_shifter_ARM64_SFT_MSL: arm64_shifter = 2;
pub const arm64_shifter_ARM64_SFT_LSR: arm64_shifter = 3;
pub const arm64_shifter_ARM64_SFT_ASR: arm64_shifter = 4;
pub const arm64_shifter_ARM64_SFT_ROR: arm64_shifter = 5;
#[doc = " ARM64 shift type"]
pub type arm64_shifter = ::std::os::raw::c_uint;
pub const arm64_extender_ARM64_EXT_INVALID: arm64_extender = 0;
pub const arm64_extender_ARM64_EXT_UXTB: arm64_extender = 1;
pub const arm64_extender_ARM64_EXT_UXTH: arm64_extender = 2;
pub const arm64_extender_ARM64_EXT_UXTW: arm64_extender = 3;
pub const arm64_extender_ARM64_EXT_UXTX: arm64_extender = 4;
pub const arm64_extender_ARM64_EXT_SXTB: arm64_extender = 5;
pub const arm64_extender_ARM64_EXT_SXTH: arm64_extender = 6;
pub const arm64_extender_ARM64_EXT_SXTW: arm64_extender = 7;
pub const arm64_extender_ARM64_EXT_SXTX: arm64_extender = 8;
#[doc = " ARM64 extender type"]
pub type arm64_extender = ::std::os::raw::c_uint;
pub const arm64_cc_ARM64_CC_INVALID: arm64_cc = 0;
#[doc = "< Equal"]
pub const arm64_cc_ARM64_CC_EQ: arm64_cc = 1;
#[doc = "< Not equal:                 Not equal, or unordered"]
pub const arm64_cc_ARM64_CC_NE: arm64_cc = 2;
#[doc = "< Unsigned higher or same:   >, ==, or unordered"]
pub const arm64_cc_ARM64_CC_HS: arm64_cc = 3;
#[doc = "< Unsigned lower or same:    Less than"]
pub const arm64_cc_ARM64_CC_LO: arm64_cc = 4;
#[doc = "< Minus, negative:           Less than"]
pub const arm64_cc_ARM64_CC_MI: arm64_cc = 5;
#[doc = "< Plus, positive or zero:    >, ==, or unordered"]
pub const arm64_cc_ARM64_CC_PL: arm64_cc = 6;
#[doc = "< Overflow:                  Unordered"]
pub const arm64_cc_ARM64_CC_VS: arm64_cc = 7;
#[doc = "< No overflow:               Ordered"]
pub const arm64_cc_ARM64_CC_VC: arm64_cc = 8;
#[doc = "< Unsigned higher:           Greater than, or unordered"]
pub const arm64_cc_ARM64_CC_HI: arm64_cc = 9;
#[doc = "< Unsigned lower or same:    Less than or equal"]
pub const arm64_cc_ARM64_CC_LS: arm64_cc = 10;
#[doc = "< Greater than or equal:     Greater than or equal"]
pub const arm64_cc_ARM64_CC_GE: arm64_cc = 11;
#[doc = "< Less than:                 Less than, or unordered"]
pub const arm64_cc_ARM64_CC_LT: arm64_cc = 12;
#[doc = "< Signed greater than:       Greater than"]
pub const arm64_cc_ARM64_CC_GT: arm64_cc = 13;
#[doc = "< Signed less than or equal: <, ==, or unordered"]
pub const arm64_cc_ARM64_CC_LE: arm64_cc = 14;
#[doc = "< Always (unconditional):    Always (unconditional)"]
pub const arm64_cc_ARM64_CC_AL: arm64_cc = 15;
#[doc = "< Always (unconditional):   Always (unconditional)"]
pub const arm64_cc_ARM64_CC_NV: arm64_cc = 16;
#[doc = " ARM64 condition code"]
pub type arm64_cc = ::std::os::raw::c_uint;
pub const arm64_pstate_ARM64_PSTATE_INVALID: arm64_pstate = 0;
pub const arm64_pstate_ARM64_PSTATE_SPSEL: arm64_pstate = 5;
pub const arm64_pstate_ARM64_PSTATE_DAIFSET: arm64_pstate = 30;
pub const arm64_pstate_ARM64_PSTATE_DAIFCLR: arm64_pstate = 31;
pub const arm64_pstate_ARM64_PSTATE_PAN: arm64_pstate = 4;
pub const arm64_pstate_ARM64_PSTATE_UAO: arm64_pstate = 3;
pub const arm64_pstate_ARM64_PSTATE_DIT: arm64_pstate = 26;
#[doc = " System PState Field (MSR instruction)"]
pub type arm64_pstate = ::std::os::raw::c_uint;
pub const arm64_vas_ARM64_VAS_INVALID: arm64_vas = 0;
pub const arm64_vas_ARM64_VAS_16B: arm64_vas = 1;
pub const arm64_vas_ARM64_VAS_8B: arm64_vas = 2;
pub const arm64_vas_ARM64_VAS_4B: arm64_vas = 3;
pub const arm64_vas_ARM64_VAS_1B: arm64_vas = 4;
pub const arm64_vas_ARM64_VAS_8H: arm64_vas = 5;
pub const arm64_vas_ARM64_VAS_4H: arm64_vas = 6;
pub const arm64_vas_ARM64_VAS_2H: arm64_vas = 7;
pub const arm64_vas_ARM64_VAS_1H: arm64_vas = 8;
pub const arm64_vas_ARM64_VAS_4S: arm64_vas = 9;
pub const arm64_vas_ARM64_VAS_2S: arm64_vas = 10;
pub const arm64_vas_ARM64_VAS_1S: arm64_vas = 11;
pub const arm64_vas_ARM64_VAS_2D: arm64_vas = 12;
pub const arm64_vas_ARM64_VAS_1D: arm64_vas = 13;
pub const arm64_vas_ARM64_VAS_1Q: arm64_vas = 14;
#[doc = " Vector arrangement specifier (for FloatingPoint/Advanced SIMD insn)"]
pub type arm64_vas = ::std::os::raw::c_uint;
pub const arm64_barrier_op_ARM64_BARRIER_INVALID: arm64_barrier_op = 0;
pub const arm64_barrier_op_ARM64_BARRIER_OSHLD: arm64_barrier_op = 1;
pub const arm64_barrier_op_ARM64_BARRIER_OSHST: arm64_barrier_op = 2;
pub const arm64_barrier_op_ARM64_BARRIER_OSH: arm64_barrier_op = 3;
pub const arm64_barrier_op_ARM64_BARRIER_NSHLD: arm64_barrier_op = 5;
pub const arm64_barrier_op_ARM64_BARRIER_NSHST: arm64_barrier_op = 6;
pub const arm64_barrier_op_ARM64_BARRIER_NSH: arm64_barrier_op = 7;
pub const arm64_barrier_op_ARM64_BARRIER_ISHLD: arm64_barrier_op = 9;
pub const arm64_barrier_op_ARM64_BARRIER_ISHST: arm64_barrier_op = 10;
pub const arm64_barrier_op_ARM64_BARRIER_ISH: arm64_barrier_op = 11;
pub const arm64_barrier_op_ARM64_BARRIER_LD: arm64_barrier_op = 13;
pub const arm64_barrier_op_ARM64_BARRIER_ST: arm64_barrier_op = 14;
pub const arm64_barrier_op_ARM64_BARRIER_SY: arm64_barrier_op = 15;
#[doc = " Memory barrier operands"]
pub type arm64_barrier_op = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const arm64_op_type_ARM64_OP_INVALID: arm64_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const arm64_op_type_ARM64_OP_REG: arm64_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const arm64_op_type_ARM64_OP_IMM: arm64_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const arm64_op_type_ARM64_OP_MEM: arm64_op_type = 3;
#[doc = "< = CS_OP_FP (Floating-Point operand)."]
pub const arm64_op_type_ARM64_OP_FP: arm64_op_type = 4;
#[doc = "< C-Immediate"]
pub const arm64_op_type_ARM64_OP_CIMM: arm64_op_type = 64;
#[doc = "< MRS register operand."]
pub const arm64_op_type_ARM64_OP_REG_MRS: arm64_op_type = 65;
#[doc = "< MSR register operand."]
pub const arm64_op_type_ARM64_OP_REG_MSR: arm64_op_type = 66;
#[doc = "< PState operand."]
pub const arm64_op_type_ARM64_OP_PSTATE: arm64_op_type = 67;
#[doc = "< SYS operand for IC/DC/AT/TLBI instructions."]
pub const arm64_op_type_ARM64_OP_SYS: arm64_op_type = 68;
#[doc = "< SVCR operand for MSR SVCR instructions."]
pub const arm64_op_type_ARM64_OP_SVCR: arm64_op_type = 69;
#[doc = "< Prefetch operand (PRFM)."]
pub const arm64_op_type_ARM64_OP_PREFETCH: arm64_op_type = 70;
#[doc = "< Memory barrier operand (ISB/DMB/DSB instructions)."]
pub const arm64_op_type_ARM64_OP_BARRIER: arm64_op_type = 71;
#[doc = "< SME instruction operand with with index."]
pub const arm64_op_type_ARM64_OP_SME_INDEX: arm64_op_type = 72;
#[doc = " Operand type for instruction's operands"]
pub type arm64_op_type = ::std::os::raw::c_uint;
pub const arm64_sys_op_ARM64_SYS_INVALID: arm64_sys_op = 0;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1: arm64_sys_op = 1;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1IS: arm64_sys_op = 2;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1ISNXS: arm64_sys_op = 3;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1NXS: arm64_sys_op = 4;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1OS: arm64_sys_op = 5;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE1OSNXS: arm64_sys_op = 6;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2: arm64_sys_op = 7;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2IS: arm64_sys_op = 8;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2ISNXS: arm64_sys_op = 9;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2NXS: arm64_sys_op = 10;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2OS: arm64_sys_op = 11;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE2OSNXS: arm64_sys_op = 12;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3: arm64_sys_op = 13;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3IS: arm64_sys_op = 14;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3ISNXS: arm64_sys_op = 15;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3NXS: arm64_sys_op = 16;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3OS: arm64_sys_op = 17;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ALLE3OSNXS: arm64_sys_op = 18;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1: arm64_sys_op = 19;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1IS: arm64_sys_op = 20;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1ISNXS: arm64_sys_op = 21;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1NXS: arm64_sys_op = 22;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1OS: arm64_sys_op = 23;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_ASIDE1OSNXS: arm64_sys_op = 24;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1: arm64_sys_op = 25;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1IS: arm64_sys_op = 26;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1ISNXS: arm64_sys_op = 27;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1NXS: arm64_sys_op = 28;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1OS: arm64_sys_op = 29;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1OSNXS: arm64_sys_op = 30;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1: arm64_sys_op = 31;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1IS: arm64_sys_op = 32;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1ISNXS: arm64_sys_op = 33;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1NXS: arm64_sys_op = 34;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1OS: arm64_sys_op = 35;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1OSNXS: arm64_sys_op = 36;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_PAALL: arm64_sys_op = 37;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_PAALLNXS: arm64_sys_op = 38;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_PAALLOS: arm64_sys_op = 39;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_PAALLOSNXS: arm64_sys_op = 40;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1: arm64_sys_op = 41;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1IS: arm64_sys_op = 42;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1ISNXS: arm64_sys_op = 43;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1NXS: arm64_sys_op = 44;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1OS: arm64_sys_op = 45;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1OSNXS: arm64_sys_op = 46;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1: arm64_sys_op = 47;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1IS: arm64_sys_op = 48;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1ISNXS: arm64_sys_op = 49;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1NXS: arm64_sys_op = 50;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1OS: arm64_sys_op = 51;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1OSNXS: arm64_sys_op = 52;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RPALOS: arm64_sys_op = 53;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RPALOSNXS: arm64_sys_op = 54;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RPAOS: arm64_sys_op = 55;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RPAOSNXS: arm64_sys_op = 56;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1: arm64_sys_op = 57;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1IS: arm64_sys_op = 58;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1ISNXS: arm64_sys_op = 59;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1NXS: arm64_sys_op = 60;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1OS: arm64_sys_op = 61;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAAE1OSNXS: arm64_sys_op = 62;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1: arm64_sys_op = 63;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1IS: arm64_sys_op = 64;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1ISNXS: arm64_sys_op = 65;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1NXS: arm64_sys_op = 66;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1OS: arm64_sys_op = 67;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAALE1OSNXS: arm64_sys_op = 68;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1: arm64_sys_op = 69;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1IS: arm64_sys_op = 70;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1ISNXS: arm64_sys_op = 71;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1NXS: arm64_sys_op = 72;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1OS: arm64_sys_op = 73;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE1OSNXS: arm64_sys_op = 74;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2: arm64_sys_op = 75;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2IS: arm64_sys_op = 76;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2ISNXS: arm64_sys_op = 77;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2NXS: arm64_sys_op = 78;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2OS: arm64_sys_op = 79;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE2OSNXS: arm64_sys_op = 80;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3: arm64_sys_op = 81;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3IS: arm64_sys_op = 82;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3ISNXS: arm64_sys_op = 83;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3NXS: arm64_sys_op = 84;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3OS: arm64_sys_op = 85;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVAE3OSNXS: arm64_sys_op = 86;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1: arm64_sys_op = 87;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1IS: arm64_sys_op = 88;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1ISNXS: arm64_sys_op = 89;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1NXS: arm64_sys_op = 90;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1OS: arm64_sys_op = 91;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE1OSNXS: arm64_sys_op = 92;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2: arm64_sys_op = 93;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2IS: arm64_sys_op = 94;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2ISNXS: arm64_sys_op = 95;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2NXS: arm64_sys_op = 96;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2OS: arm64_sys_op = 97;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE2OSNXS: arm64_sys_op = 98;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3: arm64_sys_op = 99;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3IS: arm64_sys_op = 100;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3ISNXS: arm64_sys_op = 101;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3NXS: arm64_sys_op = 102;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3OS: arm64_sys_op = 103;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_RVALE3OSNXS: arm64_sys_op = 104;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1: arm64_sys_op = 105;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1IS: arm64_sys_op = 106;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1ISNXS: arm64_sys_op = 107;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1NXS: arm64_sys_op = 108;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1OS: arm64_sys_op = 109;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAAE1OSNXS: arm64_sys_op = 110;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1: arm64_sys_op = 111;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1IS: arm64_sys_op = 112;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1ISNXS: arm64_sys_op = 113;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1NXS: arm64_sys_op = 114;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1OS: arm64_sys_op = 115;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAALE1OSNXS: arm64_sys_op = 116;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1: arm64_sys_op = 117;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1IS: arm64_sys_op = 118;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1ISNXS: arm64_sys_op = 119;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1NXS: arm64_sys_op = 120;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1OS: arm64_sys_op = 121;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE1OSNXS: arm64_sys_op = 122;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2: arm64_sys_op = 123;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2IS: arm64_sys_op = 124;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2ISNXS: arm64_sys_op = 125;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2NXS: arm64_sys_op = 126;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2OS: arm64_sys_op = 127;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE2OSNXS: arm64_sys_op = 128;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3: arm64_sys_op = 129;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3IS: arm64_sys_op = 130;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3ISNXS: arm64_sys_op = 131;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3NXS: arm64_sys_op = 132;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3OS: arm64_sys_op = 133;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VAE3OSNXS: arm64_sys_op = 134;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1: arm64_sys_op = 135;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1IS: arm64_sys_op = 136;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1ISNXS: arm64_sys_op = 137;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1NXS: arm64_sys_op = 138;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1OS: arm64_sys_op = 139;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE1OSNXS: arm64_sys_op = 140;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2: arm64_sys_op = 141;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2IS: arm64_sys_op = 142;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2ISNXS: arm64_sys_op = 143;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2NXS: arm64_sys_op = 144;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2OS: arm64_sys_op = 145;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE2OSNXS: arm64_sys_op = 146;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3: arm64_sys_op = 147;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3IS: arm64_sys_op = 148;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3ISNXS: arm64_sys_op = 149;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3NXS: arm64_sys_op = 150;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3OS: arm64_sys_op = 151;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VALE3OSNXS: arm64_sys_op = 152;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1: arm64_sys_op = 153;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1IS: arm64_sys_op = 154;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1ISNXS: arm64_sys_op = 155;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1NXS: arm64_sys_op = 156;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1OS: arm64_sys_op = 157;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLE1OSNXS: arm64_sys_op = 158;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1: arm64_sys_op = 159;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1IS: arm64_sys_op = 160;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1ISNXS: arm64_sys_op = 161;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1NXS: arm64_sys_op = 162;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1OS: arm64_sys_op = 163;
#[doc = " TLBI operations"]
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1OSNXS: arm64_sys_op = 164;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E1R: arm64_sys_op = 165;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E2R: arm64_sys_op = 166;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E3R: arm64_sys_op = 167;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E1W: arm64_sys_op = 168;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E2W: arm64_sys_op = 169;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E3W: arm64_sys_op = 170;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E0R: arm64_sys_op = 171;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E0W: arm64_sys_op = 172;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S12E1R: arm64_sys_op = 173;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S12E1W: arm64_sys_op = 174;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S12E0R: arm64_sys_op = 175;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S12E0W: arm64_sys_op = 176;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E1RP: arm64_sys_op = 177;
#[doc = " AT operations"]
pub const arm64_sys_op_ARM64_AT_S1E1WP: arm64_sys_op = 178;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGDSW: arm64_sys_op = 179;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGDVAC: arm64_sys_op = 180;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGDVADP: arm64_sys_op = 181;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGDVAP: arm64_sys_op = 182;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGSW: arm64_sys_op = 183;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGVAC: arm64_sys_op = 184;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGVADP: arm64_sys_op = 185;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CGVAP: arm64_sys_op = 186;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CIGDSW: arm64_sys_op = 187;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CIGDVAC: arm64_sys_op = 188;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CIGSW: arm64_sys_op = 189;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CIGVAC: arm64_sys_op = 190;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CISW: arm64_sys_op = 191;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CIVAC: arm64_sys_op = 192;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CSW: arm64_sys_op = 193;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CVAC: arm64_sys_op = 194;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CVADP: arm64_sys_op = 195;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CVAP: arm64_sys_op = 196;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_CVAU: arm64_sys_op = 197;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_GVA: arm64_sys_op = 198;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_GZVA: arm64_sys_op = 199;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_IGDSW: arm64_sys_op = 200;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_IGDVAC: arm64_sys_op = 201;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_IGSW: arm64_sys_op = 202;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_IGVAC: arm64_sys_op = 203;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_ISW: arm64_sys_op = 204;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_IVAC: arm64_sys_op = 205;
#[doc = " DC operations"]
pub const arm64_sys_op_ARM64_DC_ZVA: arm64_sys_op = 206;
#[doc = " IC operations"]
pub const arm64_sys_op_ARM64_IC_IALLUIS: arm64_sys_op = 207;
#[doc = " IC operations"]
pub const arm64_sys_op_ARM64_IC_IALLU: arm64_sys_op = 208;
#[doc = " IC operations"]
pub const arm64_sys_op_ARM64_IC_IVAU: arm64_sys_op = 209;
#[doc = " SYS operands (IC/DC/AC/TLBI)"]
pub type arm64_sys_op = ::std::os::raw::c_uint;
pub const arm64_svcr_op_ARM64_SVCR_INVALID: arm64_svcr_op = 0;
pub const arm64_svcr_op_ARM64_SVCR_SVCRSM: arm64_svcr_op = 1;
pub const arm64_svcr_op_ARM64_SVCR_SVCRSMZA: arm64_svcr_op = 3;
pub const arm64_svcr_op_ARM64_SVCR_SVCRZA: arm64_svcr_op = 2;
#[doc = " SVCR operands"]
pub type arm64_svcr_op = ::std::os::raw::c_uint;
pub const arm64_prefetch_op_ARM64_PRFM_INVALID: arm64_prefetch_op = 0;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL1KEEP: arm64_prefetch_op = 1;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL1STRM: arm64_prefetch_op = 2;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL2KEEP: arm64_prefetch_op = 3;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL2STRM: arm64_prefetch_op = 4;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL3KEEP: arm64_prefetch_op = 5;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL3STRM: arm64_prefetch_op = 6;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL1KEEP: arm64_prefetch_op = 9;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL1STRM: arm64_prefetch_op = 10;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL2KEEP: arm64_prefetch_op = 11;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL2STRM: arm64_prefetch_op = 12;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL3KEEP: arm64_prefetch_op = 13;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL3STRM: arm64_prefetch_op = 14;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL1KEEP: arm64_prefetch_op = 17;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL1STRM: arm64_prefetch_op = 18;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL2KEEP: arm64_prefetch_op = 19;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL2STRM: arm64_prefetch_op = 20;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL3KEEP: arm64_prefetch_op = 21;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL3STRM: arm64_prefetch_op = 22;
#[doc = " Prefetch operations (PRFM)"]
pub type arm64_prefetch_op = ::std::os::raw::c_uint;
pub const arm64_reg_ARM64_REG_INVALID: arm64_reg = 0;
pub const arm64_reg_ARM64_REG_FFR: arm64_reg = 1;
pub const arm64_reg_ARM64_REG_FP: arm64_reg = 2;
pub const arm64_reg_ARM64_REG_LR: arm64_reg = 3;
pub const arm64_reg_ARM64_REG_NZCV: arm64_reg = 4;
pub const arm64_reg_ARM64_REG_SP: arm64_reg = 5;
pub const arm64_reg_ARM64_REG_VG: arm64_reg = 6;
pub const arm64_reg_ARM64_REG_WSP: arm64_reg = 7;
pub const arm64_reg_ARM64_REG_WZR: arm64_reg = 8;
pub const arm64_reg_ARM64_REG_XZR: arm64_reg = 9;
pub const arm64_reg_ARM64_REG_ZA: arm64_reg = 10;
pub const arm64_reg_ARM64_REG_B0: arm64_reg = 11;
pub const arm64_reg_ARM64_REG_B1: arm64_reg = 12;
pub const arm64_reg_ARM64_REG_B2: arm64_reg = 13;
pub const arm64_reg_ARM64_REG_B3: arm64_reg = 14;
pub const arm64_reg_ARM64_REG_B4: arm64_reg = 15;
pub const arm64_reg_ARM64_REG_B5: arm64_reg = 16;
pub const arm64_reg_ARM64_REG_B6: arm64_reg = 17;
pub const arm64_reg_ARM64_REG_B7: arm64_reg = 18;
pub const arm64_reg_ARM64_REG_B8: arm64_reg = 19;
pub const arm64_reg_ARM64_REG_B9: arm64_reg = 20;
pub const arm64_reg_ARM64_REG_B10: arm64_reg = 21;
pub const arm64_reg_ARM64_REG_B11: arm64_reg = 22;
pub const arm64_reg_ARM64_REG_B12: arm64_reg = 23;
pub const arm64_reg_ARM64_REG_B13: arm64_reg = 24;
pub const arm64_reg_ARM64_REG_B14: arm64_reg = 25;
pub const arm64_reg_ARM64_REG_B15: arm64_reg = 26;
pub const arm64_reg_ARM64_REG_B16: arm64_reg = 27;
pub const arm64_reg_ARM64_REG_B17: arm64_reg = 28;
pub const arm64_reg_ARM64_REG_B18: arm64_reg = 29;
pub const arm64_reg_ARM64_REG_B19: arm64_reg = 30;
pub const arm64_reg_ARM64_REG_B20: arm64_reg = 31;
pub const arm64_reg_ARM64_REG_B21: arm64_reg = 32;
pub const arm64_reg_ARM64_REG_B22: arm64_reg = 33;
pub const arm64_reg_ARM64_REG_B23: arm64_reg = 34;
pub const arm64_reg_ARM64_REG_B24: arm64_reg = 35;
pub const arm64_reg_ARM64_REG_B25: arm64_reg = 36;
pub const arm64_reg_ARM64_REG_B26: arm64_reg = 37;
pub const arm64_reg_ARM64_REG_B27: arm64_reg = 38;
pub const arm64_reg_ARM64_REG_B28: arm64_reg = 39;
pub const arm64_reg_ARM64_REG_B29: arm64_reg = 40;
pub const arm64_reg_ARM64_REG_B30: arm64_reg = 41;
pub const arm64_reg_ARM64_REG_B31: arm64_reg = 42;
pub const arm64_reg_ARM64_REG_D0: arm64_reg = 43;
pub const arm64_reg_ARM64_REG_D1: arm64_reg = 44;
pub const arm64_reg_ARM64_REG_D2: arm64_reg = 45;
pub const arm64_reg_ARM64_REG_D3: arm64_reg = 46;
pub const arm64_reg_ARM64_REG_D4: arm64_reg = 47;
pub const arm64_reg_ARM64_REG_D5: arm64_reg = 48;
pub const arm64_reg_ARM64_REG_D6: arm64_reg = 49;
pub const arm64_reg_ARM64_REG_D7: arm64_reg = 50;
pub const arm64_reg_ARM64_REG_D8: arm64_reg = 51;
pub const arm64_reg_ARM64_REG_D9: arm64_reg = 52;
pub const arm64_reg_ARM64_REG_D10: arm64_reg = 53;
pub const arm64_reg_ARM64_REG_D11: arm64_reg = 54;
pub const arm64_reg_ARM64_REG_D12: arm64_reg = 55;
pub const arm64_reg_ARM64_REG_D13: arm64_reg = 56;
pub const arm64_reg_ARM64_REG_D14: arm64_reg = 57;
pub const arm64_reg_ARM64_REG_D15: arm64_reg = 58;
pub const arm64_reg_ARM64_REG_D16: arm64_reg = 59;
pub const arm64_reg_ARM64_REG_D17: arm64_reg = 60;
pub const arm64_reg_ARM64_REG_D18: arm64_reg = 61;
pub const arm64_reg_ARM64_REG_D19: arm64_reg = 62;
pub const arm64_reg_ARM64_REG_D20: arm64_reg = 63;
pub const arm64_reg_ARM64_REG_D21: arm64_reg = 64;
pub const arm64_reg_ARM64_REG_D22: arm64_reg = 65;
pub const arm64_reg_ARM64_REG_D23: arm64_reg = 66;
pub const arm64_reg_ARM64_REG_D24: arm64_reg = 67;
pub const arm64_reg_ARM64_REG_D25: arm64_reg = 68;
pub const arm64_reg_ARM64_REG_D26: arm64_reg = 69;
pub const arm64_reg_ARM64_REG_D27: arm64_reg = 70;
pub const arm64_reg_ARM64_REG_D28: arm64_reg = 71;
pub const arm64_reg_ARM64_REG_D29: arm64_reg = 72;
pub const arm64_reg_ARM64_REG_D30: arm64_reg = 73;
pub const arm64_reg_ARM64_REG_D31: arm64_reg = 74;
pub const arm64_reg_ARM64_REG_H0: arm64_reg = 75;
pub const arm64_reg_ARM64_REG_H1: arm64_reg = 76;
pub const arm64_reg_ARM64_REG_H2: arm64_reg = 77;
pub const arm64_reg_ARM64_REG_H3: arm64_reg = 78;
pub const arm64_reg_ARM64_REG_H4: arm64_reg = 79;
pub const arm64_reg_ARM64_REG_H5: arm64_reg = 80;
pub const arm64_reg_ARM64_REG_H6: arm64_reg = 81;
pub const arm64_reg_ARM64_REG_H7: arm64_reg = 82;
pub const arm64_reg_ARM64_REG_H8: arm64_reg = 83;
pub const arm64_reg_ARM64_REG_H9: arm64_reg = 84;
pub const arm64_reg_ARM64_REG_H10: arm64_reg = 85;
pub const arm64_reg_ARM64_REG_H11: arm64_reg = 86;
pub const arm64_reg_ARM64_REG_H12: arm64_reg = 87;
pub const arm64_reg_ARM64_REG_H13: arm64_reg = 88;
pub const arm64_reg_ARM64_REG_H14: arm64_reg = 89;
pub const arm64_reg_ARM64_REG_H15: arm64_reg = 90;
pub const arm64_reg_ARM64_REG_H16: arm64_reg = 91;
pub const arm64_reg_ARM64_REG_H17: arm64_reg = 92;
pub const arm64_reg_ARM64_REG_H18: arm64_reg = 93;
pub const arm64_reg_ARM64_REG_H19: arm64_reg = 94;
pub const arm64_reg_ARM64_REG_H20: arm64_reg = 95;
pub const arm64_reg_ARM64_REG_H21: arm64_reg = 96;
pub const arm64_reg_ARM64_REG_H22: arm64_reg = 97;
pub const arm64_reg_ARM64_REG_H23: arm64_reg = 98;
pub const arm64_reg_ARM64_REG_H24: arm64_reg = 99;
pub const arm64_reg_ARM64_REG_H25: arm64_reg = 100;
pub const arm64_reg_ARM64_REG_H26: arm64_reg = 101;
pub const arm64_reg_ARM64_REG_H27: arm64_reg = 102;
pub const arm64_reg_ARM64_REG_H28: arm64_reg = 103;
pub const arm64_reg_ARM64_REG_H29: arm64_reg = 104;
pub const arm64_reg_ARM64_REG_H30: arm64_reg = 105;
pub const arm64_reg_ARM64_REG_H31: arm64_reg = 106;
pub const arm64_reg_ARM64_REG_P0: arm64_reg = 107;
pub const arm64_reg_ARM64_REG_P1: arm64_reg = 108;
pub const arm64_reg_ARM64_REG_P2: arm64_reg = 109;
pub const arm64_reg_ARM64_REG_P3: arm64_reg = 110;
pub const arm64_reg_ARM64_REG_P4: arm64_reg = 111;
pub const arm64_reg_ARM64_REG_P5: arm64_reg = 112;
pub const arm64_reg_ARM64_REG_P6: arm64_reg = 113;
pub const arm64_reg_ARM64_REG_P7: arm64_reg = 114;
pub const arm64_reg_ARM64_REG_P8: arm64_reg = 115;
pub const arm64_reg_ARM64_REG_P9: arm64_reg = 116;
pub const arm64_reg_ARM64_REG_P10: arm64_reg = 117;
pub const arm64_reg_ARM64_REG_P11: arm64_reg = 118;
pub const arm64_reg_ARM64_REG_P12: arm64_reg = 119;
pub const arm64_reg_ARM64_REG_P13: arm64_reg = 120;
pub const arm64_reg_ARM64_REG_P14: arm64_reg = 121;
pub const arm64_reg_ARM64_REG_P15: arm64_reg = 122;
pub const arm64_reg_ARM64_REG_Q0: arm64_reg = 123;
pub const arm64_reg_ARM64_REG_Q1: arm64_reg = 124;
pub const arm64_reg_ARM64_REG_Q2: arm64_reg = 125;
pub const arm64_reg_ARM64_REG_Q3: arm64_reg = 126;
pub const arm64_reg_ARM64_REG_Q4: arm64_reg = 127;
pub const arm64_reg_ARM64_REG_Q5: arm64_reg = 128;
pub const arm64_reg_ARM64_REG_Q6: arm64_reg = 129;
pub const arm64_reg_ARM64_REG_Q7: arm64_reg = 130;
pub const arm64_reg_ARM64_REG_Q8: arm64_reg = 131;
pub const arm64_reg_ARM64_REG_Q9: arm64_reg = 132;
pub const arm64_reg_ARM64_REG_Q10: arm64_reg = 133;
pub const arm64_reg_ARM64_REG_Q11: arm64_reg = 134;
pub const arm64_reg_ARM64_REG_Q12: arm64_reg = 135;
pub const arm64_reg_ARM64_REG_Q13: arm64_reg = 136;
pub const arm64_reg_ARM64_REG_Q14: arm64_reg = 137;
pub const arm64_reg_ARM64_REG_Q15: arm64_reg = 138;
pub const arm64_reg_ARM64_REG_Q16: arm64_reg = 139;
pub const arm64_reg_ARM64_REG_Q17: arm64_reg = 140;
pub const arm64_reg_ARM64_REG_Q18: arm64_reg = 141;
pub const arm64_reg_ARM64_REG_Q19: arm64_reg = 142;
pub const arm64_reg_ARM64_REG_Q20: arm64_reg = 143;
pub const arm64_reg_ARM64_REG_Q21: arm64_reg = 144;
pub const arm64_reg_ARM64_REG_Q22: arm64_reg = 145;
pub const arm64_reg_ARM64_REG_Q23: arm64_reg = 146;
pub const arm64_reg_ARM64_REG_Q24: arm64_reg = 147;
pub const arm64_reg_ARM64_REG_Q25: arm64_reg = 148;
pub const arm64_reg_ARM64_REG_Q26: arm64_reg = 149;
pub const arm64_reg_ARM64_REG_Q27: arm64_reg = 150;
pub const arm64_reg_ARM64_REG_Q28: arm64_reg = 151;
pub const arm64_reg_ARM64_REG_Q29: arm64_reg = 152;
pub const arm64_reg_ARM64_REG_Q30: arm64_reg = 153;
pub const arm64_reg_ARM64_REG_Q31: arm64_reg = 154;
pub const arm64_reg_ARM64_REG_S0: arm64_reg = 155;
pub const arm64_reg_ARM64_REG_S1: arm64_reg = 156;
pub const arm64_reg_ARM64_REG_S2: arm64_reg = 157;
pub const arm64_reg_ARM64_REG_S3: arm64_reg = 158;
pub const arm64_reg_ARM64_REG_S4: arm64_reg = 159;
pub const arm64_reg_ARM64_REG_S5: arm64_reg = 160;
pub const arm64_reg_ARM64_REG_S6: arm64_reg = 161;
pub const arm64_reg_ARM64_REG_S7: arm64_reg = 162;
pub const arm64_reg_ARM64_REG_S8: arm64_reg = 163;
pub const arm64_reg_ARM64_REG_S9: arm64_reg = 164;
pub const arm64_reg_ARM64_REG_S10: arm64_reg = 165;
pub const arm64_reg_ARM64_REG_S11: arm64_reg = 166;
pub const arm64_reg_ARM64_REG_S12: arm64_reg = 167;
pub const arm64_reg_ARM64_REG_S13: arm64_reg = 168;
pub const arm64_reg_ARM64_REG_S14: arm64_reg = 169;
pub const arm64_reg_ARM64_REG_S15: arm64_reg = 170;
pub const arm64_reg_ARM64_REG_S16: arm64_reg = 171;
pub const arm64_reg_ARM64_REG_S17: arm64_reg = 172;
pub const arm64_reg_ARM64_REG_S18: arm64_reg = 173;
pub const arm64_reg_ARM64_REG_S19: arm64_reg = 174;
pub const arm64_reg_ARM64_REG_S20: arm64_reg = 175;
pub const arm64_reg_ARM64_REG_S21: arm64_reg = 176;
pub const arm64_reg_ARM64_REG_S22: arm64_reg = 177;
pub const arm64_reg_ARM64_REG_S23: arm64_reg = 178;
pub const arm64_reg_ARM64_REG_S24: arm64_reg = 179;
pub const arm64_reg_ARM64_REG_S25: arm64_reg = 180;
pub const arm64_reg_ARM64_REG_S26: arm64_reg = 181;
pub const arm64_reg_ARM64_REG_S27: arm64_reg = 182;
pub const arm64_reg_ARM64_REG_S28: arm64_reg = 183;
pub const arm64_reg_ARM64_REG_S29: arm64_reg = 184;
pub const arm64_reg_ARM64_REG_S30: arm64_reg = 185;
pub const arm64_reg_ARM64_REG_S31: arm64_reg = 186;
pub const arm64_reg_ARM64_REG_W0: arm64_reg = 187;
pub const arm64_reg_ARM64_REG_W1: arm64_reg = 188;
pub const arm64_reg_ARM64_REG_W2: arm64_reg = 189;
pub const arm64_reg_ARM64_REG_W3: arm64_reg = 190;
pub const arm64_reg_ARM64_REG_W4: arm64_reg = 191;
pub const arm64_reg_ARM64_REG_W5: arm64_reg = 192;
pub const arm64_reg_ARM64_REG_W6: arm64_reg = 193;
pub const arm64_reg_ARM64_REG_W7: arm64_reg = 194;
pub const arm64_reg_ARM64_REG_W8: arm64_reg = 195;
pub const arm64_reg_ARM64_REG_W9: arm64_reg = 196;
pub const arm64_reg_ARM64_REG_W10: arm64_reg = 197;
pub const arm64_reg_ARM64_REG_W11: arm64_reg = 198;
pub const arm64_reg_ARM64_REG_W12: arm64_reg = 199;
pub const arm64_reg_ARM64_REG_W13: arm64_reg = 200;
pub const arm64_reg_ARM64_REG_W14: arm64_reg = 201;
pub const arm64_reg_ARM64_REG_W15: arm64_reg = 202;
pub const arm64_reg_ARM64_REG_W16: arm64_reg = 203;
pub const arm64_reg_ARM64_REG_W17: arm64_reg = 204;
pub const arm64_reg_ARM64_REG_W18: arm64_reg = 205;
pub const arm64_reg_ARM64_REG_W19: arm64_reg = 206;
pub const arm64_reg_ARM64_REG_W20: arm64_reg = 207;
pub const arm64_reg_ARM64_REG_W21: arm64_reg = 208;
pub const arm64_reg_ARM64_REG_W22: arm64_reg = 209;
pub const arm64_reg_ARM64_REG_W23: arm64_reg = 210;
pub const arm64_reg_ARM64_REG_W24: arm64_reg = 211;
pub const arm64_reg_ARM64_REG_W25: arm64_reg = 212;
pub const arm64_reg_ARM64_REG_W26: arm64_reg = 213;
pub const arm64_reg_ARM64_REG_W27: arm64_reg = 214;
pub const arm64_reg_ARM64_REG_W28: arm64_reg = 215;
pub const arm64_reg_ARM64_REG_W29: arm64_reg = 216;
pub const arm64_reg_ARM64_REG_W30: arm64_reg = 217;
pub const arm64_reg_ARM64_REG_X0: arm64_reg = 218;
pub const arm64_reg_ARM64_REG_X1: arm64_reg = 219;
pub const arm64_reg_ARM64_REG_X2: arm64_reg = 220;
pub const arm64_reg_ARM64_REG_X3: arm64_reg = 221;
pub const arm64_reg_ARM64_REG_X4: arm64_reg = 222;
pub const arm64_reg_ARM64_REG_X5: arm64_reg = 223;
pub const arm64_reg_ARM64_REG_X6: arm64_reg = 224;
pub const arm64_reg_ARM64_REG_X7: arm64_reg = 225;
pub const arm64_reg_ARM64_REG_X8: arm64_reg = 226;
pub const arm64_reg_ARM64_REG_X9: arm64_reg = 227;
pub const arm64_reg_ARM64_REG_X10: arm64_reg = 228;
pub const arm64_reg_ARM64_REG_X11: arm64_reg = 229;
pub const arm64_reg_ARM64_REG_X12: arm64_reg = 230;
pub const arm64_reg_ARM64_REG_X13: arm64_reg = 231;
pub const arm64_reg_ARM64_REG_X14: arm64_reg = 232;
pub const arm64_reg_ARM64_REG_X15: arm64_reg = 233;
pub const arm64_reg_ARM64_REG_X16: arm64_reg = 234;
pub const arm64_reg_ARM64_REG_X17: arm64_reg = 235;
pub const arm64_reg_ARM64_REG_X18: arm64_reg = 236;
pub const arm64_reg_ARM64_REG_X19: arm64_reg = 237;
pub const arm64_reg_ARM64_REG_X20: arm64_reg = 238;
pub const arm64_reg_ARM64_REG_X21: arm64_reg = 239;
pub const arm64_reg_ARM64_REG_X22: arm64_reg = 240;
pub const arm64_reg_ARM64_REG_X23: arm64_reg = 241;
pub const arm64_reg_ARM64_REG_X24: arm64_reg = 242;
pub const arm64_reg_ARM64_REG_X25: arm64_reg = 243;
pub const arm64_reg_ARM64_REG_X26: arm64_reg = 244;
pub const arm64_reg_ARM64_REG_X27: arm64_reg = 245;
pub const arm64_reg_ARM64_REG_X28: arm64_reg = 246;
pub const arm64_reg_ARM64_REG_Z0: arm64_reg = 247;
pub const arm64_reg_ARM64_REG_Z1: arm64_reg = 248;
pub const arm64_reg_ARM64_REG_Z2: arm64_reg = 249;
pub const arm64_reg_ARM64_REG_Z3: arm64_reg = 250;
pub const arm64_reg_ARM64_REG_Z4: arm64_reg = 251;
pub const arm64_reg_ARM64_REG_Z5: arm64_reg = 252;
pub const arm64_reg_ARM64_REG_Z6: arm64_reg = 253;
pub const arm64_reg_ARM64_REG_Z7: arm64_reg = 254;
pub const arm64_reg_ARM64_REG_Z8: arm64_reg = 255;
pub const arm64_reg_ARM64_REG_Z9: arm64_reg = 256;
pub const arm64_reg_ARM64_REG_Z10: arm64_reg = 257;
pub const arm64_reg_ARM64_REG_Z11: arm64_reg = 258;
pub const arm64_reg_ARM64_REG_Z12: arm64_reg = 259;
pub const arm64_reg_ARM64_REG_Z13: arm64_reg = 260;
pub const arm64_reg_ARM64_REG_Z14: arm64_reg = 261;
pub const arm64_reg_ARM64_REG_Z15: arm64_reg = 262;
pub const arm64_reg_ARM64_REG_Z16: arm64_reg = 263;
pub const arm64_reg_ARM64_REG_Z17: arm64_reg = 264;
pub const arm64_reg_ARM64_REG_Z18: arm64_reg = 265;
pub const arm64_reg_ARM64_REG_Z19: arm64_reg = 266;
pub const arm64_reg_ARM64_REG_Z20: arm64_reg = 267;
pub const arm64_reg_ARM64_REG_Z21: arm64_reg = 268;
pub const arm64_reg_ARM64_REG_Z22: arm64_reg = 269;
pub const arm64_reg_ARM64_REG_Z23: arm64_reg = 270;
pub const arm64_reg_ARM64_REG_Z24: arm64_reg = 271;
pub const arm64_reg_ARM64_REG_Z25: arm64_reg = 272;
pub const arm64_reg_ARM64_REG_Z26: arm64_reg = 273;
pub const arm64_reg_ARM64_REG_Z27: arm64_reg = 274;
pub const arm64_reg_ARM64_REG_Z28: arm64_reg = 275;
pub const arm64_reg_ARM64_REG_Z29: arm64_reg = 276;
pub const arm64_reg_ARM64_REG_Z30: arm64_reg = 277;
pub const arm64_reg_ARM64_REG_Z31: arm64_reg = 278;
pub const arm64_reg_ARM64_REG_ZAB0: arm64_reg = 279;
pub const arm64_reg_ARM64_REG_ZAD0: arm64_reg = 280;
pub const arm64_reg_ARM64_REG_ZAD1: arm64_reg = 281;
pub const arm64_reg_ARM64_REG_ZAD2: arm64_reg = 282;
pub const arm64_reg_ARM64_REG_ZAD3: arm64_reg = 283;
pub const arm64_reg_ARM64_REG_ZAD4: arm64_reg = 284;
pub const arm64_reg_ARM64_REG_ZAD5: arm64_reg = 285;
pub const arm64_reg_ARM64_REG_ZAD6: arm64_reg = 286;
pub const arm64_reg_ARM64_REG_ZAD7: arm64_reg = 287;
pub const arm64_reg_ARM64_REG_ZAH0: arm64_reg = 288;
pub const arm64_reg_ARM64_REG_ZAH1: arm64_reg = 289;
pub const arm64_reg_ARM64_REG_ZAQ0: arm64_reg = 290;
pub const arm64_reg_ARM64_REG_ZAQ1: arm64_reg = 291;
pub const arm64_reg_ARM64_REG_ZAQ2: arm64_reg = 292;
pub const arm64_reg_ARM64_REG_ZAQ3: arm64_reg = 293;
pub const arm64_reg_ARM64_REG_ZAQ4: arm64_reg = 294;
pub const arm64_reg_ARM64_REG_ZAQ5: arm64_reg = 295;
pub const arm64_reg_ARM64_REG_ZAQ6: arm64_reg = 296;
pub const arm64_reg_ARM64_REG_ZAQ7: arm64_reg = 297;
pub const arm64_reg_ARM64_REG_ZAQ8: arm64_reg = 298;
pub const arm64_reg_ARM64_REG_ZAQ9: arm64_reg = 299;
pub const arm64_reg_ARM64_REG_ZAQ10: arm64_reg = 300;
pub const arm64_reg_ARM64_REG_ZAQ11: arm64_reg = 301;
pub const arm64_reg_ARM64_REG_ZAQ12: arm64_reg = 302;
pub const arm64_reg_ARM64_REG_ZAQ13: arm64_reg = 303;
pub const arm64_reg_ARM64_REG_ZAQ14: arm64_reg = 304;
pub const arm64_reg_ARM64_REG_ZAQ15: arm64_reg = 305;
pub const arm64_reg_ARM64_REG_ZAS0: arm64_reg = 306;
pub const arm64_reg_ARM64_REG_ZAS1: arm64_reg = 307;
pub const arm64_reg_ARM64_REG_ZAS2: arm64_reg = 308;
pub const arm64_reg_ARM64_REG_ZAS3: arm64_reg = 309;
pub const arm64_reg_ARM64_REG_V0: arm64_reg = 310;
pub const arm64_reg_ARM64_REG_V1: arm64_reg = 311;
pub const arm64_reg_ARM64_REG_V2: arm64_reg = 312;
pub const arm64_reg_ARM64_REG_V3: arm64_reg = 313;
pub const arm64_reg_ARM64_REG_V4: arm64_reg = 314;
pub const arm64_reg_ARM64_REG_V5: arm64_reg = 315;
pub const arm64_reg_ARM64_REG_V6: arm64_reg = 316;
pub const arm64_reg_ARM64_REG_V7: arm64_reg = 317;
pub const arm64_reg_ARM64_REG_V8: arm64_reg = 318;
pub const arm64_reg_ARM64_REG_V9: arm64_reg = 319;
pub const arm64_reg_ARM64_REG_V10: arm64_reg = 320;
pub const arm64_reg_ARM64_REG_V11: arm64_reg = 321;
pub const arm64_reg_ARM64_REG_V12: arm64_reg = 322;
pub const arm64_reg_ARM64_REG_V13: arm64_reg = 323;
pub const arm64_reg_ARM64_REG_V14: arm64_reg = 324;
pub const arm64_reg_ARM64_REG_V15: arm64_reg = 325;
pub const arm64_reg_ARM64_REG_V16: arm64_reg = 326;
pub const arm64_reg_ARM64_REG_V17: arm64_reg = 327;
pub const arm64_reg_ARM64_REG_V18: arm64_reg = 328;
pub const arm64_reg_ARM64_REG_V19: arm64_reg = 329;
pub const arm64_reg_ARM64_REG_V20: arm64_reg = 330;
pub const arm64_reg_ARM64_REG_V21: arm64_reg = 331;
pub const arm64_reg_ARM64_REG_V22: arm64_reg = 332;
pub const arm64_reg_ARM64_REG_V23: arm64_reg = 333;
pub const arm64_reg_ARM64_REG_V24: arm64_reg = 334;
pub const arm64_reg_ARM64_REG_V25: arm64_reg = 335;
pub const arm64_reg_ARM64_REG_V26: arm64_reg = 336;
pub const arm64_reg_ARM64_REG_V27: arm64_reg = 337;
pub const arm64_reg_ARM64_REG_V28: arm64_reg = 338;
pub const arm64_reg_ARM64_REG_V29: arm64_reg = 339;
pub const arm64_reg_ARM64_REG_V30: arm64_reg = 340;
pub const arm64_reg_ARM64_REG_V31: arm64_reg = 341;
pub const arm64_reg_ARM64_REG_ENDING: arm64_reg = 342;
pub const arm64_reg_ARM64_REG_IP0: arm64_reg = 234;
pub const arm64_reg_ARM64_REG_IP1: arm64_reg = 235;
pub const arm64_reg_ARM64_REG_X29: arm64_reg = 2;
pub const arm64_reg_ARM64_REG_X30: arm64_reg = 3;
#[doc = " ARM64 registers"]
pub type arm64_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with ARM64_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm64_op_mem {
    #[doc = "< base register"]
    pub base: arm64_reg,
    #[doc = "< index register"]
    pub index: arm64_reg,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm64_op_mem"][::std::mem::size_of::<arm64_op_mem>() - 12usize];
    ["Alignment of arm64_op_mem"][::std::mem::align_of::<arm64_op_mem>() - 4usize];
    ["Offset of field: arm64_op_mem::base"][::std::mem::offset_of!(arm64_op_mem, base) - 0usize];
    ["Offset of field: arm64_op_mem::index"][::std::mem::offset_of!(arm64_op_mem, index) - 4usize];
    ["Offset of field: arm64_op_mem::disp"][::std::mem::offset_of!(arm64_op_mem, disp) - 8usize];
};
impl Default for arm64_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " SME Instruction's operand has index\n This is associated with ARM64_OP_SME_INDEX operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm64_op_sme_index {
    #[doc = "< register being indexed"]
    pub reg: arm64_reg,
    #[doc = "< base register"]
    pub base: arm64_reg,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arm64_op_sme_index"][::std::mem::size_of::<arm64_op_sme_index>() - 12usize];
    ["Alignment of arm64_op_sme_index"][::std::mem::align_of::<arm64_op_sme_index>() - 4usize];
    ["Offset of field: arm64_op_sme_index::reg"]
        [::std::mem::offset_of!(arm64_op_sme_index, reg) - 0usize];
    ["Offset of field: arm64_op_sme_index::base"]
        [::std::mem::offset_of!(arm64_op_sme_index, base) - 4usize];
    ["Offset of field: arm64_op_sme_index::disp"]
        [::std::mem::offset_of!(arm64_op_sme_index, disp) - 8usize];
};
impl Default for arm64_op_sme_index {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64_op {
    #[doc = "< Vector Index for some vector operands (or -1 if\n< irrelevant)"]
    pub vector_index: ::std::os::raw::c_int,
    #[doc = "< Vector Arrangement Specifier"]
    pub vas: arm64_vas,
    pub shift: cs_arm64_op__bindgen_ty_1,
    #[doc = "< extender type of this operand"]
    pub ext: arm64_extender,
    #[doc = "< operand type"]
    pub type_: arm64_op_type,
    #[doc = "< MSR/MRS SVCR instruction variant."]
    pub svcr: arm64_svcr_op,
    pub __bindgen_anon_1: cs_arm64_op__bindgen_ty_2,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm64_op__bindgen_ty_1 {
    #[doc = "< shifter type of this operand"]
    pub type_: arm64_shifter,
    #[doc = "< shifter value of this operand"]
    pub value: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm64_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_arm64_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_arm64_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_arm64_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_1::value"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_1, value) - 4usize];
};
impl Default for cs_arm64_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm64_op__bindgen_ty_2 {
    #[doc = "< register value for REG operand"]
    pub reg: arm64_reg,
    #[doc = "< immediate value, or index for C-IMM or IMM operand"]
    pub imm: i64,
    #[doc = "< floating point value for FP operand"]
    pub fp: f64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: arm64_op_mem,
    #[doc = "< PState field of MSR instruction."]
    pub pstate: arm64_pstate,
    #[doc = "< IC/DC/AT/TLBI operation (see arm64_ic_op,\n< arm64_dc_op, arm64_at_op, arm64_tlbi_op)"]
    pub sys: arm64_sys_op,
    #[doc = "< PRFM operation."]
    pub prefetch: arm64_prefetch_op,
    #[doc = "< Memory barrier operation (ISB/DMB/DSB instructions)."]
    pub barrier: arm64_barrier_op,
    #[doc = "< base/disp value for matrix tile slice\n< instructions."]
    pub sme_index: arm64_op_sme_index,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm64_op__bindgen_ty_2"]
        [::std::mem::size_of::<cs_arm64_op__bindgen_ty_2>() - 16usize];
    ["Alignment of cs_arm64_op__bindgen_ty_2"]
        [::std::mem::align_of::<cs_arm64_op__bindgen_ty_2>() - 8usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::reg"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, reg) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::imm"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, imm) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::fp"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, fp) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::mem"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, mem) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::pstate"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, pstate) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::sys"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, sys) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::prefetch"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, prefetch) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::barrier"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, barrier) - 0usize];
    ["Offset of field: cs_arm64_op__bindgen_ty_2::sme_index"]
        [::std::mem::offset_of!(cs_arm64_op__bindgen_ty_2, sme_index) - 0usize];
};
impl Default for cs_arm64_op__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm64_op"][::std::mem::size_of::<cs_arm64_op>() - 56usize];
    ["Alignment of cs_arm64_op"][::std::mem::align_of::<cs_arm64_op>() - 8usize];
    ["Offset of field: cs_arm64_op::vector_index"]
        [::std::mem::offset_of!(cs_arm64_op, vector_index) - 0usize];
    ["Offset of field: cs_arm64_op::vas"][::std::mem::offset_of!(cs_arm64_op, vas) - 4usize];
    ["Offset of field: cs_arm64_op::shift"][::std::mem::offset_of!(cs_arm64_op, shift) - 8usize];
    ["Offset of field: cs_arm64_op::ext"][::std::mem::offset_of!(cs_arm64_op, ext) - 16usize];
    ["Offset of field: cs_arm64_op::type_"][::std::mem::offset_of!(cs_arm64_op, type_) - 20usize];
    ["Offset of field: cs_arm64_op::svcr"][::std::mem::offset_of!(cs_arm64_op, svcr) - 24usize];
    ["Offset of field: cs_arm64_op::access"][::std::mem::offset_of!(cs_arm64_op, access) - 48usize];
};
impl Default for cs_arm64_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64 {
    #[doc = "< conditional code for this insn"]
    pub cc: arm64_cc,
    #[doc = "< does this insn update flags?"]
    pub update_flags: bool,
    #[doc = "< does this insn request writeback? 'True' means 'yes'"]
    pub writeback: bool,
    #[doc = "< only set if writeback is 'True', if 'False' pre-index, otherwise post."]
    pub post_index: bool,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_arm64_op; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_arm64"][::std::mem::size_of::<cs_arm64>() - 456usize];
    ["Alignment of cs_arm64"][::std::mem::align_of::<cs_arm64>() - 8usize];
    ["Offset of field: cs_arm64::cc"][::std::mem::offset_of!(cs_arm64, cc) - 0usize];
    ["Offset of field: cs_arm64::update_flags"]
        [::std::mem::offset_of!(cs_arm64, update_flags) - 4usize];
    ["Offset of field: cs_arm64::writeback"][::std::mem::offset_of!(cs_arm64, writeback) - 5usize];
    ["Offset of field: cs_arm64::post_index"]
        [::std::mem::offset_of!(cs_arm64, post_index) - 6usize];
    ["Offset of field: cs_arm64::op_count"][::std::mem::offset_of!(cs_arm64, op_count) - 7usize];
    ["Offset of field: cs_arm64::operands"][::std::mem::offset_of!(cs_arm64, operands) - 8usize];
};
impl Default for cs_arm64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const m68k_reg_M68K_REG_INVALID: m68k_reg = 0;
pub const m68k_reg_M68K_REG_D0: m68k_reg = 1;
pub const m68k_reg_M68K_REG_D1: m68k_reg = 2;
pub const m68k_reg_M68K_REG_D2: m68k_reg = 3;
pub const m68k_reg_M68K_REG_D3: m68k_reg = 4;
pub const m68k_reg_M68K_REG_D4: m68k_reg = 5;
pub const m68k_reg_M68K_REG_D5: m68k_reg = 6;
pub const m68k_reg_M68K_REG_D6: m68k_reg = 7;
pub const m68k_reg_M68K_REG_D7: m68k_reg = 8;
pub const m68k_reg_M68K_REG_A0: m68k_reg = 9;
pub const m68k_reg_M68K_REG_A1: m68k_reg = 10;
pub const m68k_reg_M68K_REG_A2: m68k_reg = 11;
pub const m68k_reg_M68K_REG_A3: m68k_reg = 12;
pub const m68k_reg_M68K_REG_A4: m68k_reg = 13;
pub const m68k_reg_M68K_REG_A5: m68k_reg = 14;
pub const m68k_reg_M68K_REG_A6: m68k_reg = 15;
pub const m68k_reg_M68K_REG_A7: m68k_reg = 16;
pub const m68k_reg_M68K_REG_FP0: m68k_reg = 17;
pub const m68k_reg_M68K_REG_FP1: m68k_reg = 18;
pub const m68k_reg_M68K_REG_FP2: m68k_reg = 19;
pub const m68k_reg_M68K_REG_FP3: m68k_reg = 20;
pub const m68k_reg_M68K_REG_FP4: m68k_reg = 21;
pub const m68k_reg_M68K_REG_FP5: m68k_reg = 22;
pub const m68k_reg_M68K_REG_FP6: m68k_reg = 23;
pub const m68k_reg_M68K_REG_FP7: m68k_reg = 24;
pub const m68k_reg_M68K_REG_PC: m68k_reg = 25;
pub const m68k_reg_M68K_REG_SR: m68k_reg = 26;
pub const m68k_reg_M68K_REG_CCR: m68k_reg = 27;
pub const m68k_reg_M68K_REG_SFC: m68k_reg = 28;
pub const m68k_reg_M68K_REG_DFC: m68k_reg = 29;
pub const m68k_reg_M68K_REG_USP: m68k_reg = 30;
pub const m68k_reg_M68K_REG_VBR: m68k_reg = 31;
pub const m68k_reg_M68K_REG_CACR: m68k_reg = 32;
pub const m68k_reg_M68K_REG_CAAR: m68k_reg = 33;
pub const m68k_reg_M68K_REG_MSP: m68k_reg = 34;
pub const m68k_reg_M68K_REG_ISP: m68k_reg = 35;
pub const m68k_reg_M68K_REG_TC: m68k_reg = 36;
pub const m68k_reg_M68K_REG_ITT0: m68k_reg = 37;
pub const m68k_reg_M68K_REG_ITT1: m68k_reg = 38;
pub const m68k_reg_M68K_REG_DTT0: m68k_reg = 39;
pub const m68k_reg_M68K_REG_DTT1: m68k_reg = 40;
pub const m68k_reg_M68K_REG_MMUSR: m68k_reg = 41;
pub const m68k_reg_M68K_REG_URP: m68k_reg = 42;
pub const m68k_reg_M68K_REG_SRP: m68k_reg = 43;
pub const m68k_reg_M68K_REG_FPCR: m68k_reg = 44;
pub const m68k_reg_M68K_REG_FPSR: m68k_reg = 45;
pub const m68k_reg_M68K_REG_FPIAR: m68k_reg = 46;
pub const m68k_reg_M68K_REG_ENDING: m68k_reg = 47;
#[doc = " M68K registers and special registers"]
pub type m68k_reg = ::std::os::raw::c_uint;
#[doc = "< No address mode."]
pub const m68k_address_mode_M68K_AM_NONE: m68k_address_mode = 0;
#[doc = "< Register Direct - Data"]
pub const m68k_address_mode_M68K_AM_REG_DIRECT_DATA: m68k_address_mode = 1;
#[doc = "< Register Direct - Address"]
pub const m68k_address_mode_M68K_AM_REG_DIRECT_ADDR: m68k_address_mode = 2;
#[doc = "< Register Indirect - Address"]
pub const m68k_address_mode_M68K_AM_REGI_ADDR: m68k_address_mode = 3;
#[doc = "< Register Indirect - Address with Postincrement"]
pub const m68k_address_mode_M68K_AM_REGI_ADDR_POST_INC: m68k_address_mode = 4;
#[doc = "< Register Indirect - Address with Predecrement"]
pub const m68k_address_mode_M68K_AM_REGI_ADDR_PRE_DEC: m68k_address_mode = 5;
#[doc = "< Register Indirect - Address with Displacement"]
pub const m68k_address_mode_M68K_AM_REGI_ADDR_DISP: m68k_address_mode = 6;
#[doc = "< Address Register Indirect With Index- 8-bit displacement"]
pub const m68k_address_mode_M68K_AM_AREGI_INDEX_8_BIT_DISP: m68k_address_mode = 7;
#[doc = "< Address Register Indirect With Index- Base displacement"]
pub const m68k_address_mode_M68K_AM_AREGI_INDEX_BASE_DISP: m68k_address_mode = 8;
#[doc = "< Memory indirect - Postindex"]
pub const m68k_address_mode_M68K_AM_MEMI_POST_INDEX: m68k_address_mode = 9;
#[doc = "< Memory indirect - Preindex"]
pub const m68k_address_mode_M68K_AM_MEMI_PRE_INDEX: m68k_address_mode = 10;
#[doc = "< Program Counter Indirect - with Displacement"]
pub const m68k_address_mode_M68K_AM_PCI_DISP: m68k_address_mode = 11;
#[doc = "< Program Counter Indirect with Index - with 8-Bit Displacement"]
pub const m68k_address_mode_M68K_AM_PCI_INDEX_8_BIT_DISP: m68k_address_mode = 12;
#[doc = "< Program Counter Indirect with Index - with Base Displacement"]
pub const m68k_address_mode_M68K_AM_PCI_INDEX_BASE_DISP: m68k_address_mode = 13;
#[doc = "< Program Counter Memory Indirect - Postindexed"]
pub const m68k_address_mode_M68K_AM_PC_MEMI_POST_INDEX: m68k_address_mode = 14;
#[doc = "< Program Counter Memory Indirect - Preindexed"]
pub const m68k_address_mode_M68K_AM_PC_MEMI_PRE_INDEX: m68k_address_mode = 15;
#[doc = "< Absolute Data Addressing  - Short"]
pub const m68k_address_mode_M68K_AM_ABSOLUTE_DATA_SHORT: m68k_address_mode = 16;
#[doc = "< Absolute Data Addressing  - Long"]
pub const m68k_address_mode_M68K_AM_ABSOLUTE_DATA_LONG: m68k_address_mode = 17;
#[doc = "< Immediate value"]
pub const m68k_address_mode_M68K_AM_IMMEDIATE: m68k_address_mode = 18;
#[doc = "< Address as displacement from (PC+2) used by branches"]
pub const m68k_address_mode_M68K_AM_BRANCH_DISPLACEMENT: m68k_address_mode = 19;
#[doc = " M68K Addressing Modes"]
pub type m68k_address_mode = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const m68k_op_type_M68K_OP_INVALID: m68k_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const m68k_op_type_M68K_OP_REG: m68k_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const m68k_op_type_M68K_OP_IMM: m68k_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const m68k_op_type_M68K_OP_MEM: m68k_op_type = 3;
#[doc = "< single precision Floating-Point operand"]
pub const m68k_op_type_M68K_OP_FP_SINGLE: m68k_op_type = 4;
#[doc = "< double precision Floating-Point operand"]
pub const m68k_op_type_M68K_OP_FP_DOUBLE: m68k_op_type = 5;
#[doc = "< Register bits move"]
pub const m68k_op_type_M68K_OP_REG_BITS: m68k_op_type = 6;
#[doc = "< Register pair in the same op (upper 4 bits for first reg, lower for second)"]
pub const m68k_op_type_M68K_OP_REG_PAIR: m68k_op_type = 7;
#[doc = "< Branch displacement"]
pub const m68k_op_type_M68K_OP_BR_DISP: m68k_op_type = 8;
#[doc = " Operand type for instruction's operands"]
pub type m68k_op_type = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with M68K_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_mem {
    #[doc = "< base register (or M68K_REG_INVALID if irrelevant)"]
    pub base_reg: m68k_reg,
    #[doc = "< index register (or M68K_REG_INVALID if irrelevant)"]
    pub index_reg: m68k_reg,
    #[doc = "< indirect base register (or M68K_REG_INVALID if irrelevant)"]
    pub in_base_reg: m68k_reg,
    #[doc = "< indirect displacement"]
    pub in_disp: u32,
    #[doc = "< other displacement"]
    pub out_disp: u32,
    #[doc = "< displacement value"]
    pub disp: i16,
    #[doc = "< scale for index register"]
    pub scale: u8,
    #[doc = "< set to true if the two values below should be used"]
    pub bitfield: u8,
    #[doc = "< used for bf* instructions"]
    pub width: u8,
    #[doc = "< used for bf* instructions"]
    pub offset: u8,
    #[doc = "< 0 = w, 1 = l"]
    pub index_size: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m68k_op_mem"][::std::mem::size_of::<m68k_op_mem>() - 28usize];
    ["Alignment of m68k_op_mem"][::std::mem::align_of::<m68k_op_mem>() - 4usize];
    ["Offset of field: m68k_op_mem::base_reg"]
        [::std::mem::offset_of!(m68k_op_mem, base_reg) - 0usize];
    ["Offset of field: m68k_op_mem::index_reg"]
        [::std::mem::offset_of!(m68k_op_mem, index_reg) - 4usize];
    ["Offset of field: m68k_op_mem::in_base_reg"]
        [::std::mem::offset_of!(m68k_op_mem, in_base_reg) - 8usize];
    ["Offset of field: m68k_op_mem::in_disp"]
        [::std::mem::offset_of!(m68k_op_mem, in_disp) - 12usize];
    ["Offset of field: m68k_op_mem::out_disp"]
        [::std::mem::offset_of!(m68k_op_mem, out_disp) - 16usize];
    ["Offset of field: m68k_op_mem::disp"][::std::mem::offset_of!(m68k_op_mem, disp) - 20usize];
    ["Offset of field: m68k_op_mem::scale"][::std::mem::offset_of!(m68k_op_mem, scale) - 22usize];
    ["Offset of field: m68k_op_mem::bitfield"]
        [::std::mem::offset_of!(m68k_op_mem, bitfield) - 23usize];
    ["Offset of field: m68k_op_mem::width"][::std::mem::offset_of!(m68k_op_mem, width) - 24usize];
    ["Offset of field: m68k_op_mem::offset"][::std::mem::offset_of!(m68k_op_mem, offset) - 25usize];
    ["Offset of field: m68k_op_mem::index_size"]
        [::std::mem::offset_of!(m68k_op_mem, index_size) - 26usize];
};
impl Default for m68k_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct m68k_op_br_disp {
    #[doc = "< displacement value"]
    pub disp: i32,
    #[doc = "< Size from m68k_op_br_disp_size type above"]
    pub disp_size: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m68k_op_br_disp"][::std::mem::size_of::<m68k_op_br_disp>() - 8usize];
    ["Alignment of m68k_op_br_disp"][::std::mem::align_of::<m68k_op_br_disp>() - 4usize];
    ["Offset of field: m68k_op_br_disp::disp"]
        [::std::mem::offset_of!(m68k_op_br_disp, disp) - 0usize];
    ["Offset of field: m68k_op_br_disp::disp_size"]
        [::std::mem::offset_of!(m68k_op_br_disp, disp_size) - 4usize];
};
#[doc = " Register pair in one operand."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_m68k_op_reg_pair {
    pub reg_0: m68k_reg,
    pub reg_1: m68k_reg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m68k_op_reg_pair"][::std::mem::size_of::<cs_m68k_op_reg_pair>() - 8usize];
    ["Alignment of cs_m68k_op_reg_pair"][::std::mem::align_of::<cs_m68k_op_reg_pair>() - 4usize];
    ["Offset of field: cs_m68k_op_reg_pair::reg_0"]
        [::std::mem::offset_of!(cs_m68k_op_reg_pair, reg_0) - 0usize];
    ["Offset of field: cs_m68k_op_reg_pair::reg_1"]
        [::std::mem::offset_of!(cs_m68k_op_reg_pair, reg_1) - 4usize];
};
impl Default for cs_m68k_op_reg_pair {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k_op {
    pub __bindgen_anon_1: cs_m68k_op__bindgen_ty_1,
    #[doc = "< data when operand is targeting memory"]
    pub mem: m68k_op_mem,
    #[doc = "< data when operand is a branch displacement"]
    pub br_disp: m68k_op_br_disp,
    #[doc = "< register bits for movem etc. (always in d0-d7, a0-a7, fp0 - fp7 order)"]
    pub register_bits: u32,
    pub type_: m68k_op_type,
    #[doc = "< M68K addressing mode for this op"]
    pub address_mode: m68k_address_mode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m68k_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: u64,
    #[doc = "< double imm"]
    pub dimm: f64,
    #[doc = "< float imm"]
    pub simm: f32,
    #[doc = "< register value for REG operand"]
    pub reg: m68k_reg,
    #[doc = "< register pair in one operand"]
    pub reg_pair: cs_m68k_op_reg_pair,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m68k_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_m68k_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_m68k_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_m68k_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_m68k_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_m68k_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_m68k_op__bindgen_ty_1::dimm"]
        [::std::mem::offset_of!(cs_m68k_op__bindgen_ty_1, dimm) - 0usize];
    ["Offset of field: cs_m68k_op__bindgen_ty_1::simm"]
        [::std::mem::offset_of!(cs_m68k_op__bindgen_ty_1, simm) - 0usize];
    ["Offset of field: cs_m68k_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_m68k_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_m68k_op__bindgen_ty_1::reg_pair"]
        [::std::mem::offset_of!(cs_m68k_op__bindgen_ty_1, reg_pair) - 0usize];
};
impl Default for cs_m68k_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m68k_op"][::std::mem::size_of::<cs_m68k_op>() - 56usize];
    ["Alignment of cs_m68k_op"][::std::mem::align_of::<cs_m68k_op>() - 8usize];
    ["Offset of field: cs_m68k_op::mem"][::std::mem::offset_of!(cs_m68k_op, mem) - 8usize];
    ["Offset of field: cs_m68k_op::br_disp"][::std::mem::offset_of!(cs_m68k_op, br_disp) - 36usize];
    ["Offset of field: cs_m68k_op::register_bits"]
        [::std::mem::offset_of!(cs_m68k_op, register_bits) - 44usize];
    ["Offset of field: cs_m68k_op::type_"][::std::mem::offset_of!(cs_m68k_op, type_) - 48usize];
    ["Offset of field: cs_m68k_op::address_mode"]
        [::std::mem::offset_of!(cs_m68k_op, address_mode) - 52usize];
};
impl Default for cs_m68k_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< unsized or unspecified"]
pub const m68k_cpu_size_M68K_CPU_SIZE_NONE: m68k_cpu_size = 0;
#[doc = "< 1 byte in size"]
pub const m68k_cpu_size_M68K_CPU_SIZE_BYTE: m68k_cpu_size = 1;
#[doc = "< 2 bytes in size"]
pub const m68k_cpu_size_M68K_CPU_SIZE_WORD: m68k_cpu_size = 2;
#[doc = "< 4 bytes in size"]
pub const m68k_cpu_size_M68K_CPU_SIZE_LONG: m68k_cpu_size = 4;
#[doc = " Operation size of the CPU instructions"]
pub type m68k_cpu_size = ::std::os::raw::c_uint;
#[doc = "< unsized like fsave/frestore"]
pub const m68k_fpu_size_M68K_FPU_SIZE_NONE: m68k_fpu_size = 0;
#[doc = "< 4 byte in size (single float)"]
pub const m68k_fpu_size_M68K_FPU_SIZE_SINGLE: m68k_fpu_size = 4;
#[doc = "< 8 byte in size (double)"]
pub const m68k_fpu_size_M68K_FPU_SIZE_DOUBLE: m68k_fpu_size = 8;
#[doc = "< 12 byte in size (extended real format)"]
pub const m68k_fpu_size_M68K_FPU_SIZE_EXTENDED: m68k_fpu_size = 12;
#[doc = " Operation size of the FPU instructions (Notice that FPU instruction can also use CPU sizes if needed)"]
pub type m68k_fpu_size = ::std::os::raw::c_uint;
pub const m68k_size_type_M68K_SIZE_TYPE_INVALID: m68k_size_type = 0;
pub const m68k_size_type_M68K_SIZE_TYPE_CPU: m68k_size_type = 1;
pub const m68k_size_type_M68K_SIZE_TYPE_FPU: m68k_size_type = 2;
#[doc = " Type of size that is being used for the current instruction"]
pub type m68k_size_type = ::std::os::raw::c_uint;
#[doc = " Operation size of the current instruction (NOT the actually size of instruction)"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m68k_op_size {
    pub type_: m68k_size_type,
    pub __bindgen_anon_1: m68k_op_size__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m68k_op_size__bindgen_ty_1 {
    pub cpu_size: m68k_cpu_size,
    pub fpu_size: m68k_fpu_size,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m68k_op_size__bindgen_ty_1"]
        [::std::mem::size_of::<m68k_op_size__bindgen_ty_1>() - 4usize];
    ["Alignment of m68k_op_size__bindgen_ty_1"]
        [::std::mem::align_of::<m68k_op_size__bindgen_ty_1>() - 4usize];
    ["Offset of field: m68k_op_size__bindgen_ty_1::cpu_size"]
        [::std::mem::offset_of!(m68k_op_size__bindgen_ty_1, cpu_size) - 0usize];
    ["Offset of field: m68k_op_size__bindgen_ty_1::fpu_size"]
        [::std::mem::offset_of!(m68k_op_size__bindgen_ty_1, fpu_size) - 0usize];
};
impl Default for m68k_op_size__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m68k_op_size"][::std::mem::size_of::<m68k_op_size>() - 8usize];
    ["Alignment of m68k_op_size"][::std::mem::align_of::<m68k_op_size>() - 4usize];
    ["Offset of field: m68k_op_size::type_"][::std::mem::offset_of!(m68k_op_size, type_) - 0usize];
};
impl Default for m68k_op_size {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " The M68K instruction and it's operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k {
    #[doc = "< operands for this instruction."]
    pub operands: [cs_m68k_op; 4usize],
    #[doc = "< size of data operand works on in bytes (.b, .w, .l, etc)"]
    pub op_size: m68k_op_size,
    #[doc = "< number of operands for the instruction"]
    pub op_count: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m68k"][::std::mem::size_of::<cs_m68k>() - 240usize];
    ["Alignment of cs_m68k"][::std::mem::align_of::<cs_m68k>() - 8usize];
    ["Offset of field: cs_m68k::operands"][::std::mem::offset_of!(cs_m68k, operands) - 0usize];
    ["Offset of field: cs_m68k::op_size"][::std::mem::offset_of!(cs_m68k, op_size) - 224usize];
    ["Offset of field: cs_m68k::op_count"][::std::mem::offset_of!(cs_m68k, op_count) - 232usize];
};
impl Default for cs_m68k {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const mips_op_type_MIPS_OP_INVALID: mips_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const mips_op_type_MIPS_OP_REG: mips_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const mips_op_type_MIPS_OP_IMM: mips_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const mips_op_type_MIPS_OP_MEM: mips_op_type = 3;
#[doc = " Operand type for instruction's operands"]
pub type mips_op_type = ::std::os::raw::c_uint;
pub const mips_reg_MIPS_REG_INVALID: mips_reg = 0;
pub const mips_reg_MIPS_REG_PC: mips_reg = 1;
pub const mips_reg_MIPS_REG_0: mips_reg = 2;
pub const mips_reg_MIPS_REG_1: mips_reg = 3;
pub const mips_reg_MIPS_REG_2: mips_reg = 4;
pub const mips_reg_MIPS_REG_3: mips_reg = 5;
pub const mips_reg_MIPS_REG_4: mips_reg = 6;
pub const mips_reg_MIPS_REG_5: mips_reg = 7;
pub const mips_reg_MIPS_REG_6: mips_reg = 8;
pub const mips_reg_MIPS_REG_7: mips_reg = 9;
pub const mips_reg_MIPS_REG_8: mips_reg = 10;
pub const mips_reg_MIPS_REG_9: mips_reg = 11;
pub const mips_reg_MIPS_REG_10: mips_reg = 12;
pub const mips_reg_MIPS_REG_11: mips_reg = 13;
pub const mips_reg_MIPS_REG_12: mips_reg = 14;
pub const mips_reg_MIPS_REG_13: mips_reg = 15;
pub const mips_reg_MIPS_REG_14: mips_reg = 16;
pub const mips_reg_MIPS_REG_15: mips_reg = 17;
pub const mips_reg_MIPS_REG_16: mips_reg = 18;
pub const mips_reg_MIPS_REG_17: mips_reg = 19;
pub const mips_reg_MIPS_REG_18: mips_reg = 20;
pub const mips_reg_MIPS_REG_19: mips_reg = 21;
pub const mips_reg_MIPS_REG_20: mips_reg = 22;
pub const mips_reg_MIPS_REG_21: mips_reg = 23;
pub const mips_reg_MIPS_REG_22: mips_reg = 24;
pub const mips_reg_MIPS_REG_23: mips_reg = 25;
pub const mips_reg_MIPS_REG_24: mips_reg = 26;
pub const mips_reg_MIPS_REG_25: mips_reg = 27;
pub const mips_reg_MIPS_REG_26: mips_reg = 28;
pub const mips_reg_MIPS_REG_27: mips_reg = 29;
pub const mips_reg_MIPS_REG_28: mips_reg = 30;
pub const mips_reg_MIPS_REG_29: mips_reg = 31;
pub const mips_reg_MIPS_REG_30: mips_reg = 32;
pub const mips_reg_MIPS_REG_31: mips_reg = 33;
pub const mips_reg_MIPS_REG_DSPCCOND: mips_reg = 34;
pub const mips_reg_MIPS_REG_DSPCARRY: mips_reg = 35;
pub const mips_reg_MIPS_REG_DSPEFI: mips_reg = 36;
pub const mips_reg_MIPS_REG_DSPOUTFLAG: mips_reg = 37;
pub const mips_reg_MIPS_REG_DSPOUTFLAG16_19: mips_reg = 38;
pub const mips_reg_MIPS_REG_DSPOUTFLAG20: mips_reg = 39;
pub const mips_reg_MIPS_REG_DSPOUTFLAG21: mips_reg = 40;
pub const mips_reg_MIPS_REG_DSPOUTFLAG22: mips_reg = 41;
pub const mips_reg_MIPS_REG_DSPOUTFLAG23: mips_reg = 42;
pub const mips_reg_MIPS_REG_DSPPOS: mips_reg = 43;
pub const mips_reg_MIPS_REG_DSPSCOUNT: mips_reg = 44;
pub const mips_reg_MIPS_REG_AC0: mips_reg = 45;
pub const mips_reg_MIPS_REG_AC1: mips_reg = 46;
pub const mips_reg_MIPS_REG_AC2: mips_reg = 47;
pub const mips_reg_MIPS_REG_AC3: mips_reg = 48;
pub const mips_reg_MIPS_REG_CC0: mips_reg = 49;
pub const mips_reg_MIPS_REG_CC1: mips_reg = 50;
pub const mips_reg_MIPS_REG_CC2: mips_reg = 51;
pub const mips_reg_MIPS_REG_CC3: mips_reg = 52;
pub const mips_reg_MIPS_REG_CC4: mips_reg = 53;
pub const mips_reg_MIPS_REG_CC5: mips_reg = 54;
pub const mips_reg_MIPS_REG_CC6: mips_reg = 55;
pub const mips_reg_MIPS_REG_CC7: mips_reg = 56;
pub const mips_reg_MIPS_REG_F0: mips_reg = 57;
pub const mips_reg_MIPS_REG_F1: mips_reg = 58;
pub const mips_reg_MIPS_REG_F2: mips_reg = 59;
pub const mips_reg_MIPS_REG_F3: mips_reg = 60;
pub const mips_reg_MIPS_REG_F4: mips_reg = 61;
pub const mips_reg_MIPS_REG_F5: mips_reg = 62;
pub const mips_reg_MIPS_REG_F6: mips_reg = 63;
pub const mips_reg_MIPS_REG_F7: mips_reg = 64;
pub const mips_reg_MIPS_REG_F8: mips_reg = 65;
pub const mips_reg_MIPS_REG_F9: mips_reg = 66;
pub const mips_reg_MIPS_REG_F10: mips_reg = 67;
pub const mips_reg_MIPS_REG_F11: mips_reg = 68;
pub const mips_reg_MIPS_REG_F12: mips_reg = 69;
pub const mips_reg_MIPS_REG_F13: mips_reg = 70;
pub const mips_reg_MIPS_REG_F14: mips_reg = 71;
pub const mips_reg_MIPS_REG_F15: mips_reg = 72;
pub const mips_reg_MIPS_REG_F16: mips_reg = 73;
pub const mips_reg_MIPS_REG_F17: mips_reg = 74;
pub const mips_reg_MIPS_REG_F18: mips_reg = 75;
pub const mips_reg_MIPS_REG_F19: mips_reg = 76;
pub const mips_reg_MIPS_REG_F20: mips_reg = 77;
pub const mips_reg_MIPS_REG_F21: mips_reg = 78;
pub const mips_reg_MIPS_REG_F22: mips_reg = 79;
pub const mips_reg_MIPS_REG_F23: mips_reg = 80;
pub const mips_reg_MIPS_REG_F24: mips_reg = 81;
pub const mips_reg_MIPS_REG_F25: mips_reg = 82;
pub const mips_reg_MIPS_REG_F26: mips_reg = 83;
pub const mips_reg_MIPS_REG_F27: mips_reg = 84;
pub const mips_reg_MIPS_REG_F28: mips_reg = 85;
pub const mips_reg_MIPS_REG_F29: mips_reg = 86;
pub const mips_reg_MIPS_REG_F30: mips_reg = 87;
pub const mips_reg_MIPS_REG_F31: mips_reg = 88;
pub const mips_reg_MIPS_REG_FCC0: mips_reg = 89;
pub const mips_reg_MIPS_REG_FCC1: mips_reg = 90;
pub const mips_reg_MIPS_REG_FCC2: mips_reg = 91;
pub const mips_reg_MIPS_REG_FCC3: mips_reg = 92;
pub const mips_reg_MIPS_REG_FCC4: mips_reg = 93;
pub const mips_reg_MIPS_REG_FCC5: mips_reg = 94;
pub const mips_reg_MIPS_REG_FCC6: mips_reg = 95;
pub const mips_reg_MIPS_REG_FCC7: mips_reg = 96;
pub const mips_reg_MIPS_REG_W0: mips_reg = 97;
pub const mips_reg_MIPS_REG_W1: mips_reg = 98;
pub const mips_reg_MIPS_REG_W2: mips_reg = 99;
pub const mips_reg_MIPS_REG_W3: mips_reg = 100;
pub const mips_reg_MIPS_REG_W4: mips_reg = 101;
pub const mips_reg_MIPS_REG_W5: mips_reg = 102;
pub const mips_reg_MIPS_REG_W6: mips_reg = 103;
pub const mips_reg_MIPS_REG_W7: mips_reg = 104;
pub const mips_reg_MIPS_REG_W8: mips_reg = 105;
pub const mips_reg_MIPS_REG_W9: mips_reg = 106;
pub const mips_reg_MIPS_REG_W10: mips_reg = 107;
pub const mips_reg_MIPS_REG_W11: mips_reg = 108;
pub const mips_reg_MIPS_REG_W12: mips_reg = 109;
pub const mips_reg_MIPS_REG_W13: mips_reg = 110;
pub const mips_reg_MIPS_REG_W14: mips_reg = 111;
pub const mips_reg_MIPS_REG_W15: mips_reg = 112;
pub const mips_reg_MIPS_REG_W16: mips_reg = 113;
pub const mips_reg_MIPS_REG_W17: mips_reg = 114;
pub const mips_reg_MIPS_REG_W18: mips_reg = 115;
pub const mips_reg_MIPS_REG_W19: mips_reg = 116;
pub const mips_reg_MIPS_REG_W20: mips_reg = 117;
pub const mips_reg_MIPS_REG_W21: mips_reg = 118;
pub const mips_reg_MIPS_REG_W22: mips_reg = 119;
pub const mips_reg_MIPS_REG_W23: mips_reg = 120;
pub const mips_reg_MIPS_REG_W24: mips_reg = 121;
pub const mips_reg_MIPS_REG_W25: mips_reg = 122;
pub const mips_reg_MIPS_REG_W26: mips_reg = 123;
pub const mips_reg_MIPS_REG_W27: mips_reg = 124;
pub const mips_reg_MIPS_REG_W28: mips_reg = 125;
pub const mips_reg_MIPS_REG_W29: mips_reg = 126;
pub const mips_reg_MIPS_REG_W30: mips_reg = 127;
pub const mips_reg_MIPS_REG_W31: mips_reg = 128;
pub const mips_reg_MIPS_REG_HI: mips_reg = 129;
pub const mips_reg_MIPS_REG_LO: mips_reg = 130;
pub const mips_reg_MIPS_REG_P0: mips_reg = 131;
pub const mips_reg_MIPS_REG_P1: mips_reg = 132;
pub const mips_reg_MIPS_REG_P2: mips_reg = 133;
pub const mips_reg_MIPS_REG_MPL0: mips_reg = 134;
pub const mips_reg_MIPS_REG_MPL1: mips_reg = 135;
pub const mips_reg_MIPS_REG_MPL2: mips_reg = 136;
pub const mips_reg_MIPS_REG_ENDING: mips_reg = 137;
pub const mips_reg_MIPS_REG_ZERO: mips_reg = 2;
pub const mips_reg_MIPS_REG_AT: mips_reg = 3;
pub const mips_reg_MIPS_REG_V0: mips_reg = 4;
pub const mips_reg_MIPS_REG_V1: mips_reg = 5;
pub const mips_reg_MIPS_REG_A0: mips_reg = 6;
pub const mips_reg_MIPS_REG_A1: mips_reg = 7;
pub const mips_reg_MIPS_REG_A2: mips_reg = 8;
pub const mips_reg_MIPS_REG_A3: mips_reg = 9;
pub const mips_reg_MIPS_REG_T0: mips_reg = 10;
pub const mips_reg_MIPS_REG_T1: mips_reg = 11;
pub const mips_reg_MIPS_REG_T2: mips_reg = 12;
pub const mips_reg_MIPS_REG_T3: mips_reg = 13;
pub const mips_reg_MIPS_REG_T4: mips_reg = 14;
pub const mips_reg_MIPS_REG_T5: mips_reg = 15;
pub const mips_reg_MIPS_REG_T6: mips_reg = 16;
pub const mips_reg_MIPS_REG_T7: mips_reg = 17;
pub const mips_reg_MIPS_REG_S0: mips_reg = 18;
pub const mips_reg_MIPS_REG_S1: mips_reg = 19;
pub const mips_reg_MIPS_REG_S2: mips_reg = 20;
pub const mips_reg_MIPS_REG_S3: mips_reg = 21;
pub const mips_reg_MIPS_REG_S4: mips_reg = 22;
pub const mips_reg_MIPS_REG_S5: mips_reg = 23;
pub const mips_reg_MIPS_REG_S6: mips_reg = 24;
pub const mips_reg_MIPS_REG_S7: mips_reg = 25;
pub const mips_reg_MIPS_REG_T8: mips_reg = 26;
pub const mips_reg_MIPS_REG_T9: mips_reg = 27;
pub const mips_reg_MIPS_REG_K0: mips_reg = 28;
pub const mips_reg_MIPS_REG_K1: mips_reg = 29;
pub const mips_reg_MIPS_REG_GP: mips_reg = 30;
pub const mips_reg_MIPS_REG_SP: mips_reg = 31;
pub const mips_reg_MIPS_REG_FP: mips_reg = 32;
pub const mips_reg_MIPS_REG_S8: mips_reg = 32;
pub const mips_reg_MIPS_REG_RA: mips_reg = 33;
pub const mips_reg_MIPS_REG_HI0: mips_reg = 45;
pub const mips_reg_MIPS_REG_HI1: mips_reg = 46;
pub const mips_reg_MIPS_REG_HI2: mips_reg = 47;
pub const mips_reg_MIPS_REG_HI3: mips_reg = 48;
pub const mips_reg_MIPS_REG_LO0: mips_reg = 45;
pub const mips_reg_MIPS_REG_LO1: mips_reg = 46;
pub const mips_reg_MIPS_REG_LO2: mips_reg = 47;
pub const mips_reg_MIPS_REG_LO3: mips_reg = 48;
#[doc = " MIPS registers"]
pub type mips_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with MIPS_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mips_op_mem {
    #[doc = "< base register"]
    pub base: mips_reg,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mips_op_mem"][::std::mem::size_of::<mips_op_mem>() - 16usize];
    ["Alignment of mips_op_mem"][::std::mem::align_of::<mips_op_mem>() - 8usize];
    ["Offset of field: mips_op_mem::base"][::std::mem::offset_of!(mips_op_mem, base) - 0usize];
    ["Offset of field: mips_op_mem::disp"][::std::mem::offset_of!(mips_op_mem, disp) - 8usize];
};
impl Default for mips_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips_op {
    #[doc = "< operand type"]
    pub type_: mips_op_type,
    pub __bindgen_anon_1: cs_mips_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mips_op__bindgen_ty_1 {
    #[doc = "< register id for REG operand"]
    pub reg: mips_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: mips_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mips_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_mips_op__bindgen_ty_1>() - 16usize];
    ["Alignment of cs_mips_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_mips_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_mips_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_mips_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_mips_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_mips_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_mips_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_mips_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_mips_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mips_op"][::std::mem::size_of::<cs_mips_op>() - 24usize];
    ["Alignment of cs_mips_op"][::std::mem::align_of::<cs_mips_op>() - 8usize];
    ["Offset of field: cs_mips_op::type_"][::std::mem::offset_of!(cs_mips_op, type_) - 0usize];
};
impl Default for cs_mips_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips {
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_mips_op; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mips"][::std::mem::size_of::<cs_mips>() - 248usize];
    ["Alignment of cs_mips"][::std::mem::align_of::<cs_mips>() - 8usize];
    ["Offset of field: cs_mips::op_count"][::std::mem::offset_of!(cs_mips, op_count) - 0usize];
    ["Offset of field: cs_mips::operands"][::std::mem::offset_of!(cs_mips, operands) - 8usize];
};
impl Default for cs_mips {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ppc_bc_PPC_BC_INVALID: ppc_bc = 0;
pub const ppc_bc_PPC_BC_LT: ppc_bc = 12;
pub const ppc_bc_PPC_BC_LE: ppc_bc = 36;
pub const ppc_bc_PPC_BC_EQ: ppc_bc = 76;
pub const ppc_bc_PPC_BC_GE: ppc_bc = 4;
pub const ppc_bc_PPC_BC_GT: ppc_bc = 44;
pub const ppc_bc_PPC_BC_NE: ppc_bc = 68;
pub const ppc_bc_PPC_BC_UN: ppc_bc = 108;
pub const ppc_bc_PPC_BC_NU: ppc_bc = 100;
#[doc = "< summary overflow"]
pub const ppc_bc_PPC_BC_SO: ppc_bc = 140;
#[doc = "< not summary overflow"]
pub const ppc_bc_PPC_BC_NS: ppc_bc = 132;
#[doc = " PPC branch codes for some branch instructions"]
pub type ppc_bc = ::std::os::raw::c_uint;
#[doc = "< no hint"]
pub const ppc_bh_PPC_BH_INVALID: ppc_bh = 0;
#[doc = "< PLUS hint"]
pub const ppc_bh_PPC_BH_PLUS: ppc_bh = 1;
#[doc = "< MINUS hint"]
pub const ppc_bh_PPC_BH_MINUS: ppc_bh = 2;
#[doc = " PPC branch hint for some branch instructions"]
pub type ppc_bh = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const ppc_op_type_PPC_OP_INVALID: ppc_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const ppc_op_type_PPC_OP_REG: ppc_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const ppc_op_type_PPC_OP_IMM: ppc_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const ppc_op_type_PPC_OP_MEM: ppc_op_type = 3;
#[doc = "< Condition Register field"]
pub const ppc_op_type_PPC_OP_CRX: ppc_op_type = 64;
#[doc = " Operand type for instruction's operands"]
pub type ppc_op_type = ::std::os::raw::c_uint;
pub const ppc_reg_PPC_REG_INVALID: ppc_reg = 0;
pub const ppc_reg_PPC_REG_CARRY: ppc_reg = 2;
pub const ppc_reg_PPC_REG_CTR: ppc_reg = 3;
pub const ppc_reg_PPC_REG_LR: ppc_reg = 5;
pub const ppc_reg_PPC_REG_RM: ppc_reg = 6;
pub const ppc_reg_PPC_REG_VRSAVE: ppc_reg = 8;
pub const ppc_reg_PPC_REG_XER: ppc_reg = 9;
pub const ppc_reg_PPC_REG_ZERO: ppc_reg = 10;
pub const ppc_reg_PPC_REG_CR0: ppc_reg = 12;
pub const ppc_reg_PPC_REG_CR1: ppc_reg = 13;
pub const ppc_reg_PPC_REG_CR2: ppc_reg = 14;
pub const ppc_reg_PPC_REG_CR3: ppc_reg = 15;
pub const ppc_reg_PPC_REG_CR4: ppc_reg = 16;
pub const ppc_reg_PPC_REG_CR5: ppc_reg = 17;
pub const ppc_reg_PPC_REG_CR6: ppc_reg = 18;
pub const ppc_reg_PPC_REG_CR7: ppc_reg = 19;
pub const ppc_reg_PPC_REG_CTR8: ppc_reg = 20;
pub const ppc_reg_PPC_REG_F0: ppc_reg = 21;
pub const ppc_reg_PPC_REG_F1: ppc_reg = 22;
pub const ppc_reg_PPC_REG_F2: ppc_reg = 23;
pub const ppc_reg_PPC_REG_F3: ppc_reg = 24;
pub const ppc_reg_PPC_REG_F4: ppc_reg = 25;
pub const ppc_reg_PPC_REG_F5: ppc_reg = 26;
pub const ppc_reg_PPC_REG_F6: ppc_reg = 27;
pub const ppc_reg_PPC_REG_F7: ppc_reg = 28;
pub const ppc_reg_PPC_REG_F8: ppc_reg = 29;
pub const ppc_reg_PPC_REG_F9: ppc_reg = 30;
pub const ppc_reg_PPC_REG_F10: ppc_reg = 31;
pub const ppc_reg_PPC_REG_F11: ppc_reg = 32;
pub const ppc_reg_PPC_REG_F12: ppc_reg = 33;
pub const ppc_reg_PPC_REG_F13: ppc_reg = 34;
pub const ppc_reg_PPC_REG_F14: ppc_reg = 35;
pub const ppc_reg_PPC_REG_F15: ppc_reg = 36;
pub const ppc_reg_PPC_REG_F16: ppc_reg = 37;
pub const ppc_reg_PPC_REG_F17: ppc_reg = 38;
pub const ppc_reg_PPC_REG_F18: ppc_reg = 39;
pub const ppc_reg_PPC_REG_F19: ppc_reg = 40;
pub const ppc_reg_PPC_REG_F20: ppc_reg = 41;
pub const ppc_reg_PPC_REG_F21: ppc_reg = 42;
pub const ppc_reg_PPC_REG_F22: ppc_reg = 43;
pub const ppc_reg_PPC_REG_F23: ppc_reg = 44;
pub const ppc_reg_PPC_REG_F24: ppc_reg = 45;
pub const ppc_reg_PPC_REG_F25: ppc_reg = 46;
pub const ppc_reg_PPC_REG_F26: ppc_reg = 47;
pub const ppc_reg_PPC_REG_F27: ppc_reg = 48;
pub const ppc_reg_PPC_REG_F28: ppc_reg = 49;
pub const ppc_reg_PPC_REG_F29: ppc_reg = 50;
pub const ppc_reg_PPC_REG_F30: ppc_reg = 51;
pub const ppc_reg_PPC_REG_F31: ppc_reg = 52;
pub const ppc_reg_PPC_REG_LR8: ppc_reg = 54;
pub const ppc_reg_PPC_REG_Q0: ppc_reg = 55;
pub const ppc_reg_PPC_REG_Q1: ppc_reg = 56;
pub const ppc_reg_PPC_REG_Q2: ppc_reg = 57;
pub const ppc_reg_PPC_REG_Q3: ppc_reg = 58;
pub const ppc_reg_PPC_REG_Q4: ppc_reg = 59;
pub const ppc_reg_PPC_REG_Q5: ppc_reg = 60;
pub const ppc_reg_PPC_REG_Q6: ppc_reg = 61;
pub const ppc_reg_PPC_REG_Q7: ppc_reg = 62;
pub const ppc_reg_PPC_REG_Q8: ppc_reg = 63;
pub const ppc_reg_PPC_REG_Q9: ppc_reg = 64;
pub const ppc_reg_PPC_REG_Q10: ppc_reg = 65;
pub const ppc_reg_PPC_REG_Q11: ppc_reg = 66;
pub const ppc_reg_PPC_REG_Q12: ppc_reg = 67;
pub const ppc_reg_PPC_REG_Q13: ppc_reg = 68;
pub const ppc_reg_PPC_REG_Q14: ppc_reg = 69;
pub const ppc_reg_PPC_REG_Q15: ppc_reg = 70;
pub const ppc_reg_PPC_REG_Q16: ppc_reg = 71;
pub const ppc_reg_PPC_REG_Q17: ppc_reg = 72;
pub const ppc_reg_PPC_REG_Q18: ppc_reg = 73;
pub const ppc_reg_PPC_REG_Q19: ppc_reg = 74;
pub const ppc_reg_PPC_REG_Q20: ppc_reg = 75;
pub const ppc_reg_PPC_REG_Q21: ppc_reg = 76;
pub const ppc_reg_PPC_REG_Q22: ppc_reg = 77;
pub const ppc_reg_PPC_REG_Q23: ppc_reg = 78;
pub const ppc_reg_PPC_REG_Q24: ppc_reg = 79;
pub const ppc_reg_PPC_REG_Q25: ppc_reg = 80;
pub const ppc_reg_PPC_REG_Q26: ppc_reg = 81;
pub const ppc_reg_PPC_REG_Q27: ppc_reg = 82;
pub const ppc_reg_PPC_REG_Q28: ppc_reg = 83;
pub const ppc_reg_PPC_REG_Q29: ppc_reg = 84;
pub const ppc_reg_PPC_REG_Q30: ppc_reg = 85;
pub const ppc_reg_PPC_REG_Q31: ppc_reg = 86;
pub const ppc_reg_PPC_REG_R0: ppc_reg = 87;
pub const ppc_reg_PPC_REG_R1: ppc_reg = 88;
pub const ppc_reg_PPC_REG_R2: ppc_reg = 89;
pub const ppc_reg_PPC_REG_R3: ppc_reg = 90;
pub const ppc_reg_PPC_REG_R4: ppc_reg = 91;
pub const ppc_reg_PPC_REG_R5: ppc_reg = 92;
pub const ppc_reg_PPC_REG_R6: ppc_reg = 93;
pub const ppc_reg_PPC_REG_R7: ppc_reg = 94;
pub const ppc_reg_PPC_REG_R8: ppc_reg = 95;
pub const ppc_reg_PPC_REG_R9: ppc_reg = 96;
pub const ppc_reg_PPC_REG_R10: ppc_reg = 97;
pub const ppc_reg_PPC_REG_R11: ppc_reg = 98;
pub const ppc_reg_PPC_REG_R12: ppc_reg = 99;
pub const ppc_reg_PPC_REG_R13: ppc_reg = 100;
pub const ppc_reg_PPC_REG_R14: ppc_reg = 101;
pub const ppc_reg_PPC_REG_R15: ppc_reg = 102;
pub const ppc_reg_PPC_REG_R16: ppc_reg = 103;
pub const ppc_reg_PPC_REG_R17: ppc_reg = 104;
pub const ppc_reg_PPC_REG_R18: ppc_reg = 105;
pub const ppc_reg_PPC_REG_R19: ppc_reg = 106;
pub const ppc_reg_PPC_REG_R20: ppc_reg = 107;
pub const ppc_reg_PPC_REG_R21: ppc_reg = 108;
pub const ppc_reg_PPC_REG_R22: ppc_reg = 109;
pub const ppc_reg_PPC_REG_R23: ppc_reg = 110;
pub const ppc_reg_PPC_REG_R24: ppc_reg = 111;
pub const ppc_reg_PPC_REG_R25: ppc_reg = 112;
pub const ppc_reg_PPC_REG_R26: ppc_reg = 113;
pub const ppc_reg_PPC_REG_R27: ppc_reg = 114;
pub const ppc_reg_PPC_REG_R28: ppc_reg = 115;
pub const ppc_reg_PPC_REG_R29: ppc_reg = 116;
pub const ppc_reg_PPC_REG_R30: ppc_reg = 117;
pub const ppc_reg_PPC_REG_R31: ppc_reg = 118;
pub const ppc_reg_PPC_REG_V0: ppc_reg = 151;
pub const ppc_reg_PPC_REG_V1: ppc_reg = 152;
pub const ppc_reg_PPC_REG_V2: ppc_reg = 153;
pub const ppc_reg_PPC_REG_V3: ppc_reg = 154;
pub const ppc_reg_PPC_REG_V4: ppc_reg = 155;
pub const ppc_reg_PPC_REG_V5: ppc_reg = 156;
pub const ppc_reg_PPC_REG_V6: ppc_reg = 157;
pub const ppc_reg_PPC_REG_V7: ppc_reg = 158;
pub const ppc_reg_PPC_REG_V8: ppc_reg = 159;
pub const ppc_reg_PPC_REG_V9: ppc_reg = 160;
pub const ppc_reg_PPC_REG_V10: ppc_reg = 161;
pub const ppc_reg_PPC_REG_V11: ppc_reg = 162;
pub const ppc_reg_PPC_REG_V12: ppc_reg = 163;
pub const ppc_reg_PPC_REG_V13: ppc_reg = 164;
pub const ppc_reg_PPC_REG_V14: ppc_reg = 165;
pub const ppc_reg_PPC_REG_V15: ppc_reg = 166;
pub const ppc_reg_PPC_REG_V16: ppc_reg = 167;
pub const ppc_reg_PPC_REG_V17: ppc_reg = 168;
pub const ppc_reg_PPC_REG_V18: ppc_reg = 169;
pub const ppc_reg_PPC_REG_V19: ppc_reg = 170;
pub const ppc_reg_PPC_REG_V20: ppc_reg = 171;
pub const ppc_reg_PPC_REG_V21: ppc_reg = 172;
pub const ppc_reg_PPC_REG_V22: ppc_reg = 173;
pub const ppc_reg_PPC_REG_V23: ppc_reg = 174;
pub const ppc_reg_PPC_REG_V24: ppc_reg = 175;
pub const ppc_reg_PPC_REG_V25: ppc_reg = 176;
pub const ppc_reg_PPC_REG_V26: ppc_reg = 177;
pub const ppc_reg_PPC_REG_V27: ppc_reg = 178;
pub const ppc_reg_PPC_REG_V28: ppc_reg = 179;
pub const ppc_reg_PPC_REG_V29: ppc_reg = 180;
pub const ppc_reg_PPC_REG_V30: ppc_reg = 181;
pub const ppc_reg_PPC_REG_V31: ppc_reg = 182;
pub const ppc_reg_PPC_REG_VS0: ppc_reg = 215;
pub const ppc_reg_PPC_REG_VS1: ppc_reg = 216;
pub const ppc_reg_PPC_REG_VS2: ppc_reg = 217;
pub const ppc_reg_PPC_REG_VS3: ppc_reg = 218;
pub const ppc_reg_PPC_REG_VS4: ppc_reg = 219;
pub const ppc_reg_PPC_REG_VS5: ppc_reg = 220;
pub const ppc_reg_PPC_REG_VS6: ppc_reg = 221;
pub const ppc_reg_PPC_REG_VS7: ppc_reg = 222;
pub const ppc_reg_PPC_REG_VS8: ppc_reg = 223;
pub const ppc_reg_PPC_REG_VS9: ppc_reg = 224;
pub const ppc_reg_PPC_REG_VS10: ppc_reg = 225;
pub const ppc_reg_PPC_REG_VS11: ppc_reg = 226;
pub const ppc_reg_PPC_REG_VS12: ppc_reg = 227;
pub const ppc_reg_PPC_REG_VS13: ppc_reg = 228;
pub const ppc_reg_PPC_REG_VS14: ppc_reg = 229;
pub const ppc_reg_PPC_REG_VS15: ppc_reg = 230;
pub const ppc_reg_PPC_REG_VS16: ppc_reg = 231;
pub const ppc_reg_PPC_REG_VS17: ppc_reg = 232;
pub const ppc_reg_PPC_REG_VS18: ppc_reg = 233;
pub const ppc_reg_PPC_REG_VS19: ppc_reg = 234;
pub const ppc_reg_PPC_REG_VS20: ppc_reg = 235;
pub const ppc_reg_PPC_REG_VS21: ppc_reg = 236;
pub const ppc_reg_PPC_REG_VS22: ppc_reg = 237;
pub const ppc_reg_PPC_REG_VS23: ppc_reg = 238;
pub const ppc_reg_PPC_REG_VS24: ppc_reg = 239;
pub const ppc_reg_PPC_REG_VS25: ppc_reg = 240;
pub const ppc_reg_PPC_REG_VS26: ppc_reg = 241;
pub const ppc_reg_PPC_REG_VS27: ppc_reg = 242;
pub const ppc_reg_PPC_REG_VS28: ppc_reg = 243;
pub const ppc_reg_PPC_REG_VS29: ppc_reg = 244;
pub const ppc_reg_PPC_REG_VS30: ppc_reg = 245;
pub const ppc_reg_PPC_REG_VS31: ppc_reg = 246;
pub const ppc_reg_PPC_REG_VS32: ppc_reg = 247;
pub const ppc_reg_PPC_REG_VS33: ppc_reg = 248;
pub const ppc_reg_PPC_REG_VS34: ppc_reg = 249;
pub const ppc_reg_PPC_REG_VS35: ppc_reg = 250;
pub const ppc_reg_PPC_REG_VS36: ppc_reg = 251;
pub const ppc_reg_PPC_REG_VS37: ppc_reg = 252;
pub const ppc_reg_PPC_REG_VS38: ppc_reg = 253;
pub const ppc_reg_PPC_REG_VS39: ppc_reg = 254;
pub const ppc_reg_PPC_REG_VS40: ppc_reg = 255;
pub const ppc_reg_PPC_REG_VS41: ppc_reg = 256;
pub const ppc_reg_PPC_REG_VS42: ppc_reg = 257;
pub const ppc_reg_PPC_REG_VS43: ppc_reg = 258;
pub const ppc_reg_PPC_REG_VS44: ppc_reg = 259;
pub const ppc_reg_PPC_REG_VS45: ppc_reg = 260;
pub const ppc_reg_PPC_REG_VS46: ppc_reg = 261;
pub const ppc_reg_PPC_REG_VS47: ppc_reg = 262;
pub const ppc_reg_PPC_REG_VS48: ppc_reg = 263;
pub const ppc_reg_PPC_REG_VS49: ppc_reg = 264;
pub const ppc_reg_PPC_REG_VS50: ppc_reg = 265;
pub const ppc_reg_PPC_REG_VS51: ppc_reg = 266;
pub const ppc_reg_PPC_REG_VS52: ppc_reg = 267;
pub const ppc_reg_PPC_REG_VS53: ppc_reg = 268;
pub const ppc_reg_PPC_REG_VS54: ppc_reg = 269;
pub const ppc_reg_PPC_REG_VS55: ppc_reg = 270;
pub const ppc_reg_PPC_REG_VS56: ppc_reg = 271;
pub const ppc_reg_PPC_REG_VS57: ppc_reg = 272;
pub const ppc_reg_PPC_REG_VS58: ppc_reg = 273;
pub const ppc_reg_PPC_REG_VS59: ppc_reg = 274;
pub const ppc_reg_PPC_REG_VS60: ppc_reg = 275;
pub const ppc_reg_PPC_REG_VS61: ppc_reg = 276;
pub const ppc_reg_PPC_REG_VS62: ppc_reg = 277;
pub const ppc_reg_PPC_REG_VS63: ppc_reg = 278;
pub const ppc_reg_PPC_REG_CR0EQ: ppc_reg = 312;
pub const ppc_reg_PPC_REG_CR1EQ: ppc_reg = 313;
pub const ppc_reg_PPC_REG_CR2EQ: ppc_reg = 314;
pub const ppc_reg_PPC_REG_CR3EQ: ppc_reg = 315;
pub const ppc_reg_PPC_REG_CR4EQ: ppc_reg = 316;
pub const ppc_reg_PPC_REG_CR5EQ: ppc_reg = 317;
pub const ppc_reg_PPC_REG_CR6EQ: ppc_reg = 318;
pub const ppc_reg_PPC_REG_CR7EQ: ppc_reg = 319;
pub const ppc_reg_PPC_REG_CR0GT: ppc_reg = 320;
pub const ppc_reg_PPC_REG_CR1GT: ppc_reg = 321;
pub const ppc_reg_PPC_REG_CR2GT: ppc_reg = 322;
pub const ppc_reg_PPC_REG_CR3GT: ppc_reg = 323;
pub const ppc_reg_PPC_REG_CR4GT: ppc_reg = 324;
pub const ppc_reg_PPC_REG_CR5GT: ppc_reg = 325;
pub const ppc_reg_PPC_REG_CR6GT: ppc_reg = 326;
pub const ppc_reg_PPC_REG_CR7GT: ppc_reg = 327;
pub const ppc_reg_PPC_REG_CR0LT: ppc_reg = 328;
pub const ppc_reg_PPC_REG_CR1LT: ppc_reg = 329;
pub const ppc_reg_PPC_REG_CR2LT: ppc_reg = 330;
pub const ppc_reg_PPC_REG_CR3LT: ppc_reg = 331;
pub const ppc_reg_PPC_REG_CR4LT: ppc_reg = 332;
pub const ppc_reg_PPC_REG_CR5LT: ppc_reg = 333;
pub const ppc_reg_PPC_REG_CR6LT: ppc_reg = 334;
pub const ppc_reg_PPC_REG_CR7LT: ppc_reg = 335;
pub const ppc_reg_PPC_REG_CR0UN: ppc_reg = 336;
pub const ppc_reg_PPC_REG_CR1UN: ppc_reg = 337;
pub const ppc_reg_PPC_REG_CR2UN: ppc_reg = 338;
pub const ppc_reg_PPC_REG_CR3UN: ppc_reg = 339;
pub const ppc_reg_PPC_REG_CR4UN: ppc_reg = 340;
pub const ppc_reg_PPC_REG_CR5UN: ppc_reg = 341;
pub const ppc_reg_PPC_REG_CR6UN: ppc_reg = 342;
pub const ppc_reg_PPC_REG_CR7UN: ppc_reg = 343;
pub const ppc_reg_PPC_REG_ENDING: ppc_reg = 344;
#[doc = " PPC registers"]
pub type ppc_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with PPC_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_mem {
    #[doc = "< base register"]
    pub base: ppc_reg,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ppc_op_mem"][::std::mem::size_of::<ppc_op_mem>() - 8usize];
    ["Alignment of ppc_op_mem"][::std::mem::align_of::<ppc_op_mem>() - 4usize];
    ["Offset of field: ppc_op_mem::base"][::std::mem::offset_of!(ppc_op_mem, base) - 0usize];
    ["Offset of field: ppc_op_mem::disp"][::std::mem::offset_of!(ppc_op_mem, disp) - 4usize];
};
impl Default for ppc_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_crx {
    pub scale: ::std::os::raw::c_uint,
    pub reg: ppc_reg,
    pub cond: ppc_bc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ppc_op_crx"][::std::mem::size_of::<ppc_op_crx>() - 12usize];
    ["Alignment of ppc_op_crx"][::std::mem::align_of::<ppc_op_crx>() - 4usize];
    ["Offset of field: ppc_op_crx::scale"][::std::mem::offset_of!(ppc_op_crx, scale) - 0usize];
    ["Offset of field: ppc_op_crx::reg"][::std::mem::offset_of!(ppc_op_crx, reg) - 4usize];
    ["Offset of field: ppc_op_crx::cond"][::std::mem::offset_of!(ppc_op_crx, cond) - 8usize];
};
impl Default for ppc_op_crx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc_op {
    #[doc = "< operand type"]
    pub type_: ppc_op_type,
    pub __bindgen_anon_1: cs_ppc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_ppc_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: ppc_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: ppc_op_mem,
    #[doc = "< operand with condition register"]
    pub crx: ppc_op_crx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_ppc_op__bindgen_ty_1"][::std::mem::size_of::<cs_ppc_op__bindgen_ty_1>() - 16usize];
    ["Alignment of cs_ppc_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_ppc_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_ppc_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_ppc_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_ppc_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_ppc_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_ppc_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_ppc_op__bindgen_ty_1, mem) - 0usize];
    ["Offset of field: cs_ppc_op__bindgen_ty_1::crx"]
        [::std::mem::offset_of!(cs_ppc_op__bindgen_ty_1, crx) - 0usize];
};
impl Default for cs_ppc_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_ppc_op"][::std::mem::size_of::<cs_ppc_op>() - 24usize];
    ["Alignment of cs_ppc_op"][::std::mem::align_of::<cs_ppc_op>() - 8usize];
    ["Offset of field: cs_ppc_op::type_"][::std::mem::offset_of!(cs_ppc_op, type_) - 0usize];
};
impl Default for cs_ppc_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc {
    #[doc = " branch code for branch instructions"]
    pub bc: ppc_bc,
    #[doc = " branch hint for branch instructions"]
    pub bh: ppc_bh,
    #[doc = " if update_cr0 = True, then this 'dot' insn updates CR0"]
    pub update_cr0: bool,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_ppc_op; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_ppc"][::std::mem::size_of::<cs_ppc>() - 208usize];
    ["Alignment of cs_ppc"][::std::mem::align_of::<cs_ppc>() - 8usize];
    ["Offset of field: cs_ppc::bc"][::std::mem::offset_of!(cs_ppc, bc) - 0usize];
    ["Offset of field: cs_ppc::bh"][::std::mem::offset_of!(cs_ppc, bh) - 4usize];
    ["Offset of field: cs_ppc::update_cr0"][::std::mem::offset_of!(cs_ppc, update_cr0) - 8usize];
    ["Offset of field: cs_ppc::op_count"][::std::mem::offset_of!(cs_ppc, op_count) - 9usize];
    ["Offset of field: cs_ppc::operands"][::std::mem::offset_of!(cs_ppc, operands) - 16usize];
};
impl Default for cs_ppc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< invalid CC (default)"]
pub const sparc_cc_SPARC_CC_INVALID: sparc_cc = 0;
#[doc = "< Always"]
pub const sparc_cc_SPARC_CC_ICC_A: sparc_cc = 264;
#[doc = "< Never"]
pub const sparc_cc_SPARC_CC_ICC_N: sparc_cc = 256;
#[doc = "< Not Equal"]
pub const sparc_cc_SPARC_CC_ICC_NE: sparc_cc = 265;
#[doc = "< Equal"]
pub const sparc_cc_SPARC_CC_ICC_E: sparc_cc = 257;
#[doc = "< Greater"]
pub const sparc_cc_SPARC_CC_ICC_G: sparc_cc = 266;
#[doc = "< Less or Equal"]
pub const sparc_cc_SPARC_CC_ICC_LE: sparc_cc = 258;
#[doc = "< Greater or Equal"]
pub const sparc_cc_SPARC_CC_ICC_GE: sparc_cc = 267;
#[doc = "< Less"]
pub const sparc_cc_SPARC_CC_ICC_L: sparc_cc = 259;
#[doc = "< Greater Unsigned"]
pub const sparc_cc_SPARC_CC_ICC_GU: sparc_cc = 268;
#[doc = "< Less or Equal Unsigned"]
pub const sparc_cc_SPARC_CC_ICC_LEU: sparc_cc = 260;
#[doc = "< Carry Clear/Great or Equal Unsigned"]
pub const sparc_cc_SPARC_CC_ICC_CC: sparc_cc = 269;
#[doc = "< Carry Set/Less Unsigned"]
pub const sparc_cc_SPARC_CC_ICC_CS: sparc_cc = 261;
#[doc = "< Positive"]
pub const sparc_cc_SPARC_CC_ICC_POS: sparc_cc = 270;
#[doc = "< Negative"]
pub const sparc_cc_SPARC_CC_ICC_NEG: sparc_cc = 262;
#[doc = "< Overflow Clear"]
pub const sparc_cc_SPARC_CC_ICC_VC: sparc_cc = 271;
#[doc = "< Overflow Set"]
pub const sparc_cc_SPARC_CC_ICC_VS: sparc_cc = 263;
#[doc = "< Always"]
pub const sparc_cc_SPARC_CC_FCC_A: sparc_cc = 280;
#[doc = "< Never"]
pub const sparc_cc_SPARC_CC_FCC_N: sparc_cc = 272;
#[doc = "< Unordered"]
pub const sparc_cc_SPARC_CC_FCC_U: sparc_cc = 279;
#[doc = "< Greater"]
pub const sparc_cc_SPARC_CC_FCC_G: sparc_cc = 278;
#[doc = "< Unordered or Greater"]
pub const sparc_cc_SPARC_CC_FCC_UG: sparc_cc = 277;
#[doc = "< Less"]
pub const sparc_cc_SPARC_CC_FCC_L: sparc_cc = 276;
#[doc = "< Unordered or Less"]
pub const sparc_cc_SPARC_CC_FCC_UL: sparc_cc = 275;
#[doc = "< Less or Greater"]
pub const sparc_cc_SPARC_CC_FCC_LG: sparc_cc = 274;
#[doc = "< Not Equal"]
pub const sparc_cc_SPARC_CC_FCC_NE: sparc_cc = 273;
#[doc = "< Equal"]
pub const sparc_cc_SPARC_CC_FCC_E: sparc_cc = 281;
#[doc = "< Unordered or Equal"]
pub const sparc_cc_SPARC_CC_FCC_UE: sparc_cc = 282;
#[doc = "< Greater or Equal"]
pub const sparc_cc_SPARC_CC_FCC_GE: sparc_cc = 283;
#[doc = "< Unordered or Greater or Equal"]
pub const sparc_cc_SPARC_CC_FCC_UGE: sparc_cc = 284;
#[doc = "< Less or Equal"]
pub const sparc_cc_SPARC_CC_FCC_LE: sparc_cc = 285;
#[doc = "< Unordered or Less or Equal"]
pub const sparc_cc_SPARC_CC_FCC_ULE: sparc_cc = 286;
#[doc = "< Ordered"]
pub const sparc_cc_SPARC_CC_FCC_O: sparc_cc = 287;
#[doc = " Enums corresponding to Sparc condition codes, both icc's and fcc's."]
pub type sparc_cc = ::std::os::raw::c_uint;
#[doc = "< no hint"]
pub const sparc_hint_SPARC_HINT_INVALID: sparc_hint = 0;
#[doc = "< annul delay slot instruction"]
pub const sparc_hint_SPARC_HINT_A: sparc_hint = 1;
#[doc = "< branch taken"]
pub const sparc_hint_SPARC_HINT_PT: sparc_hint = 2;
#[doc = "< branch NOT taken"]
pub const sparc_hint_SPARC_HINT_PN: sparc_hint = 4;
#[doc = " Branch hint"]
pub type sparc_hint = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const sparc_op_type_SPARC_OP_INVALID: sparc_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const sparc_op_type_SPARC_OP_REG: sparc_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const sparc_op_type_SPARC_OP_IMM: sparc_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const sparc_op_type_SPARC_OP_MEM: sparc_op_type = 3;
#[doc = " Operand type for instruction's operands"]
pub type sparc_op_type = ::std::os::raw::c_uint;
pub const sparc_reg_SPARC_REG_INVALID: sparc_reg = 0;
pub const sparc_reg_SPARC_REG_F0: sparc_reg = 1;
pub const sparc_reg_SPARC_REG_F1: sparc_reg = 2;
pub const sparc_reg_SPARC_REG_F2: sparc_reg = 3;
pub const sparc_reg_SPARC_REG_F3: sparc_reg = 4;
pub const sparc_reg_SPARC_REG_F4: sparc_reg = 5;
pub const sparc_reg_SPARC_REG_F5: sparc_reg = 6;
pub const sparc_reg_SPARC_REG_F6: sparc_reg = 7;
pub const sparc_reg_SPARC_REG_F7: sparc_reg = 8;
pub const sparc_reg_SPARC_REG_F8: sparc_reg = 9;
pub const sparc_reg_SPARC_REG_F9: sparc_reg = 10;
pub const sparc_reg_SPARC_REG_F10: sparc_reg = 11;
pub const sparc_reg_SPARC_REG_F11: sparc_reg = 12;
pub const sparc_reg_SPARC_REG_F12: sparc_reg = 13;
pub const sparc_reg_SPARC_REG_F13: sparc_reg = 14;
pub const sparc_reg_SPARC_REG_F14: sparc_reg = 15;
pub const sparc_reg_SPARC_REG_F15: sparc_reg = 16;
pub const sparc_reg_SPARC_REG_F16: sparc_reg = 17;
pub const sparc_reg_SPARC_REG_F17: sparc_reg = 18;
pub const sparc_reg_SPARC_REG_F18: sparc_reg = 19;
pub const sparc_reg_SPARC_REG_F19: sparc_reg = 20;
pub const sparc_reg_SPARC_REG_F20: sparc_reg = 21;
pub const sparc_reg_SPARC_REG_F21: sparc_reg = 22;
pub const sparc_reg_SPARC_REG_F22: sparc_reg = 23;
pub const sparc_reg_SPARC_REG_F23: sparc_reg = 24;
pub const sparc_reg_SPARC_REG_F24: sparc_reg = 25;
pub const sparc_reg_SPARC_REG_F25: sparc_reg = 26;
pub const sparc_reg_SPARC_REG_F26: sparc_reg = 27;
pub const sparc_reg_SPARC_REG_F27: sparc_reg = 28;
pub const sparc_reg_SPARC_REG_F28: sparc_reg = 29;
pub const sparc_reg_SPARC_REG_F29: sparc_reg = 30;
pub const sparc_reg_SPARC_REG_F30: sparc_reg = 31;
pub const sparc_reg_SPARC_REG_F31: sparc_reg = 32;
pub const sparc_reg_SPARC_REG_F32: sparc_reg = 33;
pub const sparc_reg_SPARC_REG_F34: sparc_reg = 34;
pub const sparc_reg_SPARC_REG_F36: sparc_reg = 35;
pub const sparc_reg_SPARC_REG_F38: sparc_reg = 36;
pub const sparc_reg_SPARC_REG_F40: sparc_reg = 37;
pub const sparc_reg_SPARC_REG_F42: sparc_reg = 38;
pub const sparc_reg_SPARC_REG_F44: sparc_reg = 39;
pub const sparc_reg_SPARC_REG_F46: sparc_reg = 40;
pub const sparc_reg_SPARC_REG_F48: sparc_reg = 41;
pub const sparc_reg_SPARC_REG_F50: sparc_reg = 42;
pub const sparc_reg_SPARC_REG_F52: sparc_reg = 43;
pub const sparc_reg_SPARC_REG_F54: sparc_reg = 44;
pub const sparc_reg_SPARC_REG_F56: sparc_reg = 45;
pub const sparc_reg_SPARC_REG_F58: sparc_reg = 46;
pub const sparc_reg_SPARC_REG_F60: sparc_reg = 47;
pub const sparc_reg_SPARC_REG_F62: sparc_reg = 48;
pub const sparc_reg_SPARC_REG_FCC0: sparc_reg = 49;
pub const sparc_reg_SPARC_REG_FCC1: sparc_reg = 50;
pub const sparc_reg_SPARC_REG_FCC2: sparc_reg = 51;
pub const sparc_reg_SPARC_REG_FCC3: sparc_reg = 52;
pub const sparc_reg_SPARC_REG_FP: sparc_reg = 53;
pub const sparc_reg_SPARC_REG_G0: sparc_reg = 54;
pub const sparc_reg_SPARC_REG_G1: sparc_reg = 55;
pub const sparc_reg_SPARC_REG_G2: sparc_reg = 56;
pub const sparc_reg_SPARC_REG_G3: sparc_reg = 57;
pub const sparc_reg_SPARC_REG_G4: sparc_reg = 58;
pub const sparc_reg_SPARC_REG_G5: sparc_reg = 59;
pub const sparc_reg_SPARC_REG_G6: sparc_reg = 60;
pub const sparc_reg_SPARC_REG_G7: sparc_reg = 61;
pub const sparc_reg_SPARC_REG_I0: sparc_reg = 62;
pub const sparc_reg_SPARC_REG_I1: sparc_reg = 63;
pub const sparc_reg_SPARC_REG_I2: sparc_reg = 64;
pub const sparc_reg_SPARC_REG_I3: sparc_reg = 65;
pub const sparc_reg_SPARC_REG_I4: sparc_reg = 66;
pub const sparc_reg_SPARC_REG_I5: sparc_reg = 67;
pub const sparc_reg_SPARC_REG_I7: sparc_reg = 68;
pub const sparc_reg_SPARC_REG_ICC: sparc_reg = 69;
pub const sparc_reg_SPARC_REG_L0: sparc_reg = 70;
pub const sparc_reg_SPARC_REG_L1: sparc_reg = 71;
pub const sparc_reg_SPARC_REG_L2: sparc_reg = 72;
pub const sparc_reg_SPARC_REG_L3: sparc_reg = 73;
pub const sparc_reg_SPARC_REG_L4: sparc_reg = 74;
pub const sparc_reg_SPARC_REG_L5: sparc_reg = 75;
pub const sparc_reg_SPARC_REG_L6: sparc_reg = 76;
pub const sparc_reg_SPARC_REG_L7: sparc_reg = 77;
pub const sparc_reg_SPARC_REG_O0: sparc_reg = 78;
pub const sparc_reg_SPARC_REG_O1: sparc_reg = 79;
pub const sparc_reg_SPARC_REG_O2: sparc_reg = 80;
pub const sparc_reg_SPARC_REG_O3: sparc_reg = 81;
pub const sparc_reg_SPARC_REG_O4: sparc_reg = 82;
pub const sparc_reg_SPARC_REG_O5: sparc_reg = 83;
pub const sparc_reg_SPARC_REG_O7: sparc_reg = 84;
pub const sparc_reg_SPARC_REG_SP: sparc_reg = 85;
pub const sparc_reg_SPARC_REG_Y: sparc_reg = 86;
pub const sparc_reg_SPARC_REG_XCC: sparc_reg = 87;
pub const sparc_reg_SPARC_REG_ENDING: sparc_reg = 88;
pub const sparc_reg_SPARC_REG_O6: sparc_reg = 85;
pub const sparc_reg_SPARC_REG_I6: sparc_reg = 53;
#[doc = " SPARC registers"]
pub type sparc_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with SPARC_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sparc_op_mem {
    #[doc = "< base register, can be safely interpreted as\n< a value of type `sparc_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sparc_op_mem"][::std::mem::size_of::<sparc_op_mem>() - 8usize];
    ["Alignment of sparc_op_mem"][::std::mem::align_of::<sparc_op_mem>() - 4usize];
    ["Offset of field: sparc_op_mem::base"][::std::mem::offset_of!(sparc_op_mem, base) - 0usize];
    ["Offset of field: sparc_op_mem::index"][::std::mem::offset_of!(sparc_op_mem, index) - 1usize];
    ["Offset of field: sparc_op_mem::disp"][::std::mem::offset_of!(sparc_op_mem, disp) - 4usize];
};
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc_op {
    #[doc = "< operand type"]
    pub type_: sparc_op_type,
    pub __bindgen_anon_1: cs_sparc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sparc_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: sparc_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: sparc_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sparc_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_sparc_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_sparc_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_sparc_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_sparc_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_sparc_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_sparc_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_sparc_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_sparc_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_sparc_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_sparc_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sparc_op"][::std::mem::size_of::<cs_sparc_op>() - 16usize];
    ["Alignment of cs_sparc_op"][::std::mem::align_of::<cs_sparc_op>() - 8usize];
    ["Offset of field: cs_sparc_op::type_"][::std::mem::offset_of!(cs_sparc_op, type_) - 0usize];
};
impl Default for cs_sparc_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc {
    #[doc = "< code condition for this insn"]
    pub cc: sparc_cc,
    #[doc = "< branch hint: encoding as bitwise OR of sparc_hint."]
    pub hint: sparc_hint,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_sparc_op; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sparc"][::std::mem::size_of::<cs_sparc>() - 80usize];
    ["Alignment of cs_sparc"][::std::mem::align_of::<cs_sparc>() - 8usize];
    ["Offset of field: cs_sparc::cc"][::std::mem::offset_of!(cs_sparc, cc) - 0usize];
    ["Offset of field: cs_sparc::hint"][::std::mem::offset_of!(cs_sparc, hint) - 4usize];
    ["Offset of field: cs_sparc::op_count"][::std::mem::offset_of!(cs_sparc, op_count) - 8usize];
    ["Offset of field: cs_sparc::operands"][::std::mem::offset_of!(cs_sparc, operands) - 16usize];
};
impl Default for cs_sparc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< invalid CC (default)"]
pub const sysz_cc_SYSZ_CC_INVALID: sysz_cc = 0;
pub const sysz_cc_SYSZ_CC_O: sysz_cc = 1;
pub const sysz_cc_SYSZ_CC_H: sysz_cc = 2;
pub const sysz_cc_SYSZ_CC_NLE: sysz_cc = 3;
pub const sysz_cc_SYSZ_CC_L: sysz_cc = 4;
pub const sysz_cc_SYSZ_CC_NHE: sysz_cc = 5;
pub const sysz_cc_SYSZ_CC_LH: sysz_cc = 6;
pub const sysz_cc_SYSZ_CC_NE: sysz_cc = 7;
pub const sysz_cc_SYSZ_CC_E: sysz_cc = 8;
pub const sysz_cc_SYSZ_CC_NLH: sysz_cc = 9;
pub const sysz_cc_SYSZ_CC_HE: sysz_cc = 10;
pub const sysz_cc_SYSZ_CC_NL: sysz_cc = 11;
pub const sysz_cc_SYSZ_CC_LE: sysz_cc = 12;
pub const sysz_cc_SYSZ_CC_NH: sysz_cc = 13;
pub const sysz_cc_SYSZ_CC_NO: sysz_cc = 14;
#[doc = " Enums corresponding to SystemZ condition codes"]
pub type sysz_cc = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const sysz_op_type_SYSZ_OP_INVALID: sysz_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const sysz_op_type_SYSZ_OP_REG: sysz_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const sysz_op_type_SYSZ_OP_IMM: sysz_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const sysz_op_type_SYSZ_OP_MEM: sysz_op_type = 3;
#[doc = "< Access register operand."]
pub const sysz_op_type_SYSZ_OP_ACREG: sysz_op_type = 64;
#[doc = " Operand type for instruction's operands"]
pub type sysz_op_type = ::std::os::raw::c_uint;
pub const sysz_reg_SYSZ_REG_INVALID: sysz_reg = 0;
pub const sysz_reg_SYSZ_REG_0: sysz_reg = 1;
pub const sysz_reg_SYSZ_REG_1: sysz_reg = 2;
pub const sysz_reg_SYSZ_REG_2: sysz_reg = 3;
pub const sysz_reg_SYSZ_REG_3: sysz_reg = 4;
pub const sysz_reg_SYSZ_REG_4: sysz_reg = 5;
pub const sysz_reg_SYSZ_REG_5: sysz_reg = 6;
pub const sysz_reg_SYSZ_REG_6: sysz_reg = 7;
pub const sysz_reg_SYSZ_REG_7: sysz_reg = 8;
pub const sysz_reg_SYSZ_REG_8: sysz_reg = 9;
pub const sysz_reg_SYSZ_REG_9: sysz_reg = 10;
pub const sysz_reg_SYSZ_REG_10: sysz_reg = 11;
pub const sysz_reg_SYSZ_REG_11: sysz_reg = 12;
pub const sysz_reg_SYSZ_REG_12: sysz_reg = 13;
pub const sysz_reg_SYSZ_REG_13: sysz_reg = 14;
pub const sysz_reg_SYSZ_REG_14: sysz_reg = 15;
pub const sysz_reg_SYSZ_REG_15: sysz_reg = 16;
pub const sysz_reg_SYSZ_REG_CC: sysz_reg = 17;
pub const sysz_reg_SYSZ_REG_F0: sysz_reg = 18;
pub const sysz_reg_SYSZ_REG_F1: sysz_reg = 19;
pub const sysz_reg_SYSZ_REG_F2: sysz_reg = 20;
pub const sysz_reg_SYSZ_REG_F3: sysz_reg = 21;
pub const sysz_reg_SYSZ_REG_F4: sysz_reg = 22;
pub const sysz_reg_SYSZ_REG_F5: sysz_reg = 23;
pub const sysz_reg_SYSZ_REG_F6: sysz_reg = 24;
pub const sysz_reg_SYSZ_REG_F7: sysz_reg = 25;
pub const sysz_reg_SYSZ_REG_F8: sysz_reg = 26;
pub const sysz_reg_SYSZ_REG_F9: sysz_reg = 27;
pub const sysz_reg_SYSZ_REG_F10: sysz_reg = 28;
pub const sysz_reg_SYSZ_REG_F11: sysz_reg = 29;
pub const sysz_reg_SYSZ_REG_F12: sysz_reg = 30;
pub const sysz_reg_SYSZ_REG_F13: sysz_reg = 31;
pub const sysz_reg_SYSZ_REG_F14: sysz_reg = 32;
pub const sysz_reg_SYSZ_REG_F15: sysz_reg = 33;
pub const sysz_reg_SYSZ_REG_R0L: sysz_reg = 34;
pub const sysz_reg_SYSZ_REG_A0: sysz_reg = 35;
pub const sysz_reg_SYSZ_REG_A1: sysz_reg = 36;
pub const sysz_reg_SYSZ_REG_A2: sysz_reg = 37;
pub const sysz_reg_SYSZ_REG_A3: sysz_reg = 38;
pub const sysz_reg_SYSZ_REG_A4: sysz_reg = 39;
pub const sysz_reg_SYSZ_REG_A5: sysz_reg = 40;
pub const sysz_reg_SYSZ_REG_A6: sysz_reg = 41;
pub const sysz_reg_SYSZ_REG_A7: sysz_reg = 42;
pub const sysz_reg_SYSZ_REG_A8: sysz_reg = 43;
pub const sysz_reg_SYSZ_REG_A9: sysz_reg = 44;
pub const sysz_reg_SYSZ_REG_A10: sysz_reg = 45;
pub const sysz_reg_SYSZ_REG_A11: sysz_reg = 46;
pub const sysz_reg_SYSZ_REG_A12: sysz_reg = 47;
pub const sysz_reg_SYSZ_REG_A13: sysz_reg = 48;
pub const sysz_reg_SYSZ_REG_A14: sysz_reg = 49;
pub const sysz_reg_SYSZ_REG_A15: sysz_reg = 50;
pub const sysz_reg_SYSZ_REG_C0: sysz_reg = 51;
pub const sysz_reg_SYSZ_REG_C1: sysz_reg = 52;
pub const sysz_reg_SYSZ_REG_C2: sysz_reg = 53;
pub const sysz_reg_SYSZ_REG_C3: sysz_reg = 54;
pub const sysz_reg_SYSZ_REG_C4: sysz_reg = 55;
pub const sysz_reg_SYSZ_REG_C5: sysz_reg = 56;
pub const sysz_reg_SYSZ_REG_C6: sysz_reg = 57;
pub const sysz_reg_SYSZ_REG_C7: sysz_reg = 58;
pub const sysz_reg_SYSZ_REG_C8: sysz_reg = 59;
pub const sysz_reg_SYSZ_REG_C9: sysz_reg = 60;
pub const sysz_reg_SYSZ_REG_C10: sysz_reg = 61;
pub const sysz_reg_SYSZ_REG_C11: sysz_reg = 62;
pub const sysz_reg_SYSZ_REG_C12: sysz_reg = 63;
pub const sysz_reg_SYSZ_REG_C13: sysz_reg = 64;
pub const sysz_reg_SYSZ_REG_C14: sysz_reg = 65;
pub const sysz_reg_SYSZ_REG_C15: sysz_reg = 66;
pub const sysz_reg_SYSZ_REG_V0: sysz_reg = 67;
pub const sysz_reg_SYSZ_REG_V1: sysz_reg = 68;
pub const sysz_reg_SYSZ_REG_V2: sysz_reg = 69;
pub const sysz_reg_SYSZ_REG_V3: sysz_reg = 70;
pub const sysz_reg_SYSZ_REG_V4: sysz_reg = 71;
pub const sysz_reg_SYSZ_REG_V5: sysz_reg = 72;
pub const sysz_reg_SYSZ_REG_V6: sysz_reg = 73;
pub const sysz_reg_SYSZ_REG_V7: sysz_reg = 74;
pub const sysz_reg_SYSZ_REG_V8: sysz_reg = 75;
pub const sysz_reg_SYSZ_REG_V9: sysz_reg = 76;
pub const sysz_reg_SYSZ_REG_V10: sysz_reg = 77;
pub const sysz_reg_SYSZ_REG_V11: sysz_reg = 78;
pub const sysz_reg_SYSZ_REG_V12: sysz_reg = 79;
pub const sysz_reg_SYSZ_REG_V13: sysz_reg = 80;
pub const sysz_reg_SYSZ_REG_V14: sysz_reg = 81;
pub const sysz_reg_SYSZ_REG_V15: sysz_reg = 82;
pub const sysz_reg_SYSZ_REG_V16: sysz_reg = 83;
pub const sysz_reg_SYSZ_REG_V17: sysz_reg = 84;
pub const sysz_reg_SYSZ_REG_V18: sysz_reg = 85;
pub const sysz_reg_SYSZ_REG_V19: sysz_reg = 86;
pub const sysz_reg_SYSZ_REG_V20: sysz_reg = 87;
pub const sysz_reg_SYSZ_REG_V21: sysz_reg = 88;
pub const sysz_reg_SYSZ_REG_V22: sysz_reg = 89;
pub const sysz_reg_SYSZ_REG_V23: sysz_reg = 90;
pub const sysz_reg_SYSZ_REG_V24: sysz_reg = 91;
pub const sysz_reg_SYSZ_REG_V25: sysz_reg = 92;
pub const sysz_reg_SYSZ_REG_V26: sysz_reg = 93;
pub const sysz_reg_SYSZ_REG_V27: sysz_reg = 94;
pub const sysz_reg_SYSZ_REG_V28: sysz_reg = 95;
pub const sysz_reg_SYSZ_REG_V29: sysz_reg = 96;
pub const sysz_reg_SYSZ_REG_V30: sysz_reg = 97;
pub const sysz_reg_SYSZ_REG_V31: sysz_reg = 98;
pub const sysz_reg_SYSZ_REG_F16: sysz_reg = 99;
pub const sysz_reg_SYSZ_REG_F17: sysz_reg = 100;
pub const sysz_reg_SYSZ_REG_F18: sysz_reg = 101;
pub const sysz_reg_SYSZ_REG_F19: sysz_reg = 102;
pub const sysz_reg_SYSZ_REG_F20: sysz_reg = 103;
pub const sysz_reg_SYSZ_REG_F21: sysz_reg = 104;
pub const sysz_reg_SYSZ_REG_F22: sysz_reg = 105;
pub const sysz_reg_SYSZ_REG_F23: sysz_reg = 106;
pub const sysz_reg_SYSZ_REG_F24: sysz_reg = 107;
pub const sysz_reg_SYSZ_REG_F25: sysz_reg = 108;
pub const sysz_reg_SYSZ_REG_F26: sysz_reg = 109;
pub const sysz_reg_SYSZ_REG_F27: sysz_reg = 110;
pub const sysz_reg_SYSZ_REG_F28: sysz_reg = 111;
pub const sysz_reg_SYSZ_REG_F29: sysz_reg = 112;
pub const sysz_reg_SYSZ_REG_F30: sysz_reg = 113;
pub const sysz_reg_SYSZ_REG_F31: sysz_reg = 114;
pub const sysz_reg_SYSZ_REG_F0Q: sysz_reg = 115;
pub const sysz_reg_SYSZ_REG_F4Q: sysz_reg = 116;
pub const sysz_reg_SYSZ_REG_ENDING: sysz_reg = 117;
#[doc = " SystemZ registers"]
pub type sysz_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with SYSZ_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sysz_op_mem {
    #[doc = "< base register, can be safely interpreted as\n< a value of type `sysz_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< BDLAddr operand"]
    pub length: u64,
    #[doc = "< displacement/offset value"]
    pub disp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysz_op_mem"][::std::mem::size_of::<sysz_op_mem>() - 24usize];
    ["Alignment of sysz_op_mem"][::std::mem::align_of::<sysz_op_mem>() - 8usize];
    ["Offset of field: sysz_op_mem::base"][::std::mem::offset_of!(sysz_op_mem, base) - 0usize];
    ["Offset of field: sysz_op_mem::index"][::std::mem::offset_of!(sysz_op_mem, index) - 1usize];
    ["Offset of field: sysz_op_mem::length"][::std::mem::offset_of!(sysz_op_mem, length) - 8usize];
    ["Offset of field: sysz_op_mem::disp"][::std::mem::offset_of!(sysz_op_mem, disp) - 16usize];
};
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz_op {
    #[doc = "< operand type"]
    pub type_: sysz_op_type,
    pub __bindgen_anon_1: cs_sysz_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sysz_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: sysz_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: sysz_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sysz_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_sysz_op__bindgen_ty_1>() - 24usize];
    ["Alignment of cs_sysz_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_sysz_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_sysz_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_sysz_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_sysz_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_sysz_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_sysz_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_sysz_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_sysz_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sysz_op"][::std::mem::size_of::<cs_sysz_op>() - 32usize];
    ["Alignment of cs_sysz_op"][::std::mem::align_of::<cs_sysz_op>() - 8usize];
    ["Offset of field: cs_sysz_op::type_"][::std::mem::offset_of!(cs_sysz_op, type_) - 0usize];
};
impl Default for cs_sysz_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz {
    #[doc = "< Code condition"]
    pub cc: sysz_cc,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_sysz_op; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sysz"][::std::mem::size_of::<cs_sysz>() - 200usize];
    ["Alignment of cs_sysz"][::std::mem::align_of::<cs_sysz>() - 8usize];
    ["Offset of field: cs_sysz::cc"][::std::mem::offset_of!(cs_sysz, cc) - 0usize];
    ["Offset of field: cs_sysz::op_count"][::std::mem::offset_of!(cs_sysz, op_count) - 4usize];
    ["Offset of field: cs_sysz::operands"][::std::mem::offset_of!(cs_sysz, operands) - 8usize];
};
impl Default for cs_sysz {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const x86_reg_X86_REG_INVALID: x86_reg = 0;
pub const x86_reg_X86_REG_AH: x86_reg = 1;
pub const x86_reg_X86_REG_AL: x86_reg = 2;
pub const x86_reg_X86_REG_AX: x86_reg = 3;
pub const x86_reg_X86_REG_BH: x86_reg = 4;
pub const x86_reg_X86_REG_BL: x86_reg = 5;
pub const x86_reg_X86_REG_BP: x86_reg = 6;
pub const x86_reg_X86_REG_BPL: x86_reg = 7;
pub const x86_reg_X86_REG_BX: x86_reg = 8;
pub const x86_reg_X86_REG_CH: x86_reg = 9;
pub const x86_reg_X86_REG_CL: x86_reg = 10;
pub const x86_reg_X86_REG_CS: x86_reg = 11;
pub const x86_reg_X86_REG_CX: x86_reg = 12;
pub const x86_reg_X86_REG_DH: x86_reg = 13;
pub const x86_reg_X86_REG_DI: x86_reg = 14;
pub const x86_reg_X86_REG_DIL: x86_reg = 15;
pub const x86_reg_X86_REG_DL: x86_reg = 16;
pub const x86_reg_X86_REG_DS: x86_reg = 17;
pub const x86_reg_X86_REG_DX: x86_reg = 18;
pub const x86_reg_X86_REG_EAX: x86_reg = 19;
pub const x86_reg_X86_REG_EBP: x86_reg = 20;
pub const x86_reg_X86_REG_EBX: x86_reg = 21;
pub const x86_reg_X86_REG_ECX: x86_reg = 22;
pub const x86_reg_X86_REG_EDI: x86_reg = 23;
pub const x86_reg_X86_REG_EDX: x86_reg = 24;
pub const x86_reg_X86_REG_EFLAGS: x86_reg = 25;
pub const x86_reg_X86_REG_EIP: x86_reg = 26;
pub const x86_reg_X86_REG_EIZ: x86_reg = 27;
pub const x86_reg_X86_REG_ES: x86_reg = 28;
pub const x86_reg_X86_REG_ESI: x86_reg = 29;
pub const x86_reg_X86_REG_ESP: x86_reg = 30;
pub const x86_reg_X86_REG_FPSW: x86_reg = 31;
pub const x86_reg_X86_REG_FS: x86_reg = 32;
pub const x86_reg_X86_REG_GS: x86_reg = 33;
pub const x86_reg_X86_REG_IP: x86_reg = 34;
pub const x86_reg_X86_REG_RAX: x86_reg = 35;
pub const x86_reg_X86_REG_RBP: x86_reg = 36;
pub const x86_reg_X86_REG_RBX: x86_reg = 37;
pub const x86_reg_X86_REG_RCX: x86_reg = 38;
pub const x86_reg_X86_REG_RDI: x86_reg = 39;
pub const x86_reg_X86_REG_RDX: x86_reg = 40;
pub const x86_reg_X86_REG_RIP: x86_reg = 41;
pub const x86_reg_X86_REG_RIZ: x86_reg = 42;
pub const x86_reg_X86_REG_RSI: x86_reg = 43;
pub const x86_reg_X86_REG_RSP: x86_reg = 44;
pub const x86_reg_X86_REG_SI: x86_reg = 45;
pub const x86_reg_X86_REG_SIL: x86_reg = 46;
pub const x86_reg_X86_REG_SP: x86_reg = 47;
pub const x86_reg_X86_REG_SPL: x86_reg = 48;
pub const x86_reg_X86_REG_SS: x86_reg = 49;
pub const x86_reg_X86_REG_CR0: x86_reg = 50;
pub const x86_reg_X86_REG_CR1: x86_reg = 51;
pub const x86_reg_X86_REG_CR2: x86_reg = 52;
pub const x86_reg_X86_REG_CR3: x86_reg = 53;
pub const x86_reg_X86_REG_CR4: x86_reg = 54;
pub const x86_reg_X86_REG_CR5: x86_reg = 55;
pub const x86_reg_X86_REG_CR6: x86_reg = 56;
pub const x86_reg_X86_REG_CR7: x86_reg = 57;
pub const x86_reg_X86_REG_CR8: x86_reg = 58;
pub const x86_reg_X86_REG_CR9: x86_reg = 59;
pub const x86_reg_X86_REG_CR10: x86_reg = 60;
pub const x86_reg_X86_REG_CR11: x86_reg = 61;
pub const x86_reg_X86_REG_CR12: x86_reg = 62;
pub const x86_reg_X86_REG_CR13: x86_reg = 63;
pub const x86_reg_X86_REG_CR14: x86_reg = 64;
pub const x86_reg_X86_REG_CR15: x86_reg = 65;
pub const x86_reg_X86_REG_DR0: x86_reg = 66;
pub const x86_reg_X86_REG_DR1: x86_reg = 67;
pub const x86_reg_X86_REG_DR2: x86_reg = 68;
pub const x86_reg_X86_REG_DR3: x86_reg = 69;
pub const x86_reg_X86_REG_DR4: x86_reg = 70;
pub const x86_reg_X86_REG_DR5: x86_reg = 71;
pub const x86_reg_X86_REG_DR6: x86_reg = 72;
pub const x86_reg_X86_REG_DR7: x86_reg = 73;
pub const x86_reg_X86_REG_DR8: x86_reg = 74;
pub const x86_reg_X86_REG_DR9: x86_reg = 75;
pub const x86_reg_X86_REG_DR10: x86_reg = 76;
pub const x86_reg_X86_REG_DR11: x86_reg = 77;
pub const x86_reg_X86_REG_DR12: x86_reg = 78;
pub const x86_reg_X86_REG_DR13: x86_reg = 79;
pub const x86_reg_X86_REG_DR14: x86_reg = 80;
pub const x86_reg_X86_REG_DR15: x86_reg = 81;
pub const x86_reg_X86_REG_FP0: x86_reg = 82;
pub const x86_reg_X86_REG_FP1: x86_reg = 83;
pub const x86_reg_X86_REG_FP2: x86_reg = 84;
pub const x86_reg_X86_REG_FP3: x86_reg = 85;
pub const x86_reg_X86_REG_FP4: x86_reg = 86;
pub const x86_reg_X86_REG_FP5: x86_reg = 87;
pub const x86_reg_X86_REG_FP6: x86_reg = 88;
pub const x86_reg_X86_REG_FP7: x86_reg = 89;
pub const x86_reg_X86_REG_K0: x86_reg = 90;
pub const x86_reg_X86_REG_K1: x86_reg = 91;
pub const x86_reg_X86_REG_K2: x86_reg = 92;
pub const x86_reg_X86_REG_K3: x86_reg = 93;
pub const x86_reg_X86_REG_K4: x86_reg = 94;
pub const x86_reg_X86_REG_K5: x86_reg = 95;
pub const x86_reg_X86_REG_K6: x86_reg = 96;
pub const x86_reg_X86_REG_K7: x86_reg = 97;
pub const x86_reg_X86_REG_MM0: x86_reg = 98;
pub const x86_reg_X86_REG_MM1: x86_reg = 99;
pub const x86_reg_X86_REG_MM2: x86_reg = 100;
pub const x86_reg_X86_REG_MM3: x86_reg = 101;
pub const x86_reg_X86_REG_MM4: x86_reg = 102;
pub const x86_reg_X86_REG_MM5: x86_reg = 103;
pub const x86_reg_X86_REG_MM6: x86_reg = 104;
pub const x86_reg_X86_REG_MM7: x86_reg = 105;
pub const x86_reg_X86_REG_R8: x86_reg = 106;
pub const x86_reg_X86_REG_R9: x86_reg = 107;
pub const x86_reg_X86_REG_R10: x86_reg = 108;
pub const x86_reg_X86_REG_R11: x86_reg = 109;
pub const x86_reg_X86_REG_R12: x86_reg = 110;
pub const x86_reg_X86_REG_R13: x86_reg = 111;
pub const x86_reg_X86_REG_R14: x86_reg = 112;
pub const x86_reg_X86_REG_R15: x86_reg = 113;
pub const x86_reg_X86_REG_ST0: x86_reg = 114;
pub const x86_reg_X86_REG_ST1: x86_reg = 115;
pub const x86_reg_X86_REG_ST2: x86_reg = 116;
pub const x86_reg_X86_REG_ST3: x86_reg = 117;
pub const x86_reg_X86_REG_ST4: x86_reg = 118;
pub const x86_reg_X86_REG_ST5: x86_reg = 119;
pub const x86_reg_X86_REG_ST6: x86_reg = 120;
pub const x86_reg_X86_REG_ST7: x86_reg = 121;
pub const x86_reg_X86_REG_XMM0: x86_reg = 122;
pub const x86_reg_X86_REG_XMM1: x86_reg = 123;
pub const x86_reg_X86_REG_XMM2: x86_reg = 124;
pub const x86_reg_X86_REG_XMM3: x86_reg = 125;
pub const x86_reg_X86_REG_XMM4: x86_reg = 126;
pub const x86_reg_X86_REG_XMM5: x86_reg = 127;
pub const x86_reg_X86_REG_XMM6: x86_reg = 128;
pub const x86_reg_X86_REG_XMM7: x86_reg = 129;
pub const x86_reg_X86_REG_XMM8: x86_reg = 130;
pub const x86_reg_X86_REG_XMM9: x86_reg = 131;
pub const x86_reg_X86_REG_XMM10: x86_reg = 132;
pub const x86_reg_X86_REG_XMM11: x86_reg = 133;
pub const x86_reg_X86_REG_XMM12: x86_reg = 134;
pub const x86_reg_X86_REG_XMM13: x86_reg = 135;
pub const x86_reg_X86_REG_XMM14: x86_reg = 136;
pub const x86_reg_X86_REG_XMM15: x86_reg = 137;
pub const x86_reg_X86_REG_XMM16: x86_reg = 138;
pub const x86_reg_X86_REG_XMM17: x86_reg = 139;
pub const x86_reg_X86_REG_XMM18: x86_reg = 140;
pub const x86_reg_X86_REG_XMM19: x86_reg = 141;
pub const x86_reg_X86_REG_XMM20: x86_reg = 142;
pub const x86_reg_X86_REG_XMM21: x86_reg = 143;
pub const x86_reg_X86_REG_XMM22: x86_reg = 144;
pub const x86_reg_X86_REG_XMM23: x86_reg = 145;
pub const x86_reg_X86_REG_XMM24: x86_reg = 146;
pub const x86_reg_X86_REG_XMM25: x86_reg = 147;
pub const x86_reg_X86_REG_XMM26: x86_reg = 148;
pub const x86_reg_X86_REG_XMM27: x86_reg = 149;
pub const x86_reg_X86_REG_XMM28: x86_reg = 150;
pub const x86_reg_X86_REG_XMM29: x86_reg = 151;
pub const x86_reg_X86_REG_XMM30: x86_reg = 152;
pub const x86_reg_X86_REG_XMM31: x86_reg = 153;
pub const x86_reg_X86_REG_YMM0: x86_reg = 154;
pub const x86_reg_X86_REG_YMM1: x86_reg = 155;
pub const x86_reg_X86_REG_YMM2: x86_reg = 156;
pub const x86_reg_X86_REG_YMM3: x86_reg = 157;
pub const x86_reg_X86_REG_YMM4: x86_reg = 158;
pub const x86_reg_X86_REG_YMM5: x86_reg = 159;
pub const x86_reg_X86_REG_YMM6: x86_reg = 160;
pub const x86_reg_X86_REG_YMM7: x86_reg = 161;
pub const x86_reg_X86_REG_YMM8: x86_reg = 162;
pub const x86_reg_X86_REG_YMM9: x86_reg = 163;
pub const x86_reg_X86_REG_YMM10: x86_reg = 164;
pub const x86_reg_X86_REG_YMM11: x86_reg = 165;
pub const x86_reg_X86_REG_YMM12: x86_reg = 166;
pub const x86_reg_X86_REG_YMM13: x86_reg = 167;
pub const x86_reg_X86_REG_YMM14: x86_reg = 168;
pub const x86_reg_X86_REG_YMM15: x86_reg = 169;
pub const x86_reg_X86_REG_YMM16: x86_reg = 170;
pub const x86_reg_X86_REG_YMM17: x86_reg = 171;
pub const x86_reg_X86_REG_YMM18: x86_reg = 172;
pub const x86_reg_X86_REG_YMM19: x86_reg = 173;
pub const x86_reg_X86_REG_YMM20: x86_reg = 174;
pub const x86_reg_X86_REG_YMM21: x86_reg = 175;
pub const x86_reg_X86_REG_YMM22: x86_reg = 176;
pub const x86_reg_X86_REG_YMM23: x86_reg = 177;
pub const x86_reg_X86_REG_YMM24: x86_reg = 178;
pub const x86_reg_X86_REG_YMM25: x86_reg = 179;
pub const x86_reg_X86_REG_YMM26: x86_reg = 180;
pub const x86_reg_X86_REG_YMM27: x86_reg = 181;
pub const x86_reg_X86_REG_YMM28: x86_reg = 182;
pub const x86_reg_X86_REG_YMM29: x86_reg = 183;
pub const x86_reg_X86_REG_YMM30: x86_reg = 184;
pub const x86_reg_X86_REG_YMM31: x86_reg = 185;
pub const x86_reg_X86_REG_ZMM0: x86_reg = 186;
pub const x86_reg_X86_REG_ZMM1: x86_reg = 187;
pub const x86_reg_X86_REG_ZMM2: x86_reg = 188;
pub const x86_reg_X86_REG_ZMM3: x86_reg = 189;
pub const x86_reg_X86_REG_ZMM4: x86_reg = 190;
pub const x86_reg_X86_REG_ZMM5: x86_reg = 191;
pub const x86_reg_X86_REG_ZMM6: x86_reg = 192;
pub const x86_reg_X86_REG_ZMM7: x86_reg = 193;
pub const x86_reg_X86_REG_ZMM8: x86_reg = 194;
pub const x86_reg_X86_REG_ZMM9: x86_reg = 195;
pub const x86_reg_X86_REG_ZMM10: x86_reg = 196;
pub const x86_reg_X86_REG_ZMM11: x86_reg = 197;
pub const x86_reg_X86_REG_ZMM12: x86_reg = 198;
pub const x86_reg_X86_REG_ZMM13: x86_reg = 199;
pub const x86_reg_X86_REG_ZMM14: x86_reg = 200;
pub const x86_reg_X86_REG_ZMM15: x86_reg = 201;
pub const x86_reg_X86_REG_ZMM16: x86_reg = 202;
pub const x86_reg_X86_REG_ZMM17: x86_reg = 203;
pub const x86_reg_X86_REG_ZMM18: x86_reg = 204;
pub const x86_reg_X86_REG_ZMM19: x86_reg = 205;
pub const x86_reg_X86_REG_ZMM20: x86_reg = 206;
pub const x86_reg_X86_REG_ZMM21: x86_reg = 207;
pub const x86_reg_X86_REG_ZMM22: x86_reg = 208;
pub const x86_reg_X86_REG_ZMM23: x86_reg = 209;
pub const x86_reg_X86_REG_ZMM24: x86_reg = 210;
pub const x86_reg_X86_REG_ZMM25: x86_reg = 211;
pub const x86_reg_X86_REG_ZMM26: x86_reg = 212;
pub const x86_reg_X86_REG_ZMM27: x86_reg = 213;
pub const x86_reg_X86_REG_ZMM28: x86_reg = 214;
pub const x86_reg_X86_REG_ZMM29: x86_reg = 215;
pub const x86_reg_X86_REG_ZMM30: x86_reg = 216;
pub const x86_reg_X86_REG_ZMM31: x86_reg = 217;
pub const x86_reg_X86_REG_R8B: x86_reg = 218;
pub const x86_reg_X86_REG_R9B: x86_reg = 219;
pub const x86_reg_X86_REG_R10B: x86_reg = 220;
pub const x86_reg_X86_REG_R11B: x86_reg = 221;
pub const x86_reg_X86_REG_R12B: x86_reg = 222;
pub const x86_reg_X86_REG_R13B: x86_reg = 223;
pub const x86_reg_X86_REG_R14B: x86_reg = 224;
pub const x86_reg_X86_REG_R15B: x86_reg = 225;
pub const x86_reg_X86_REG_R8D: x86_reg = 226;
pub const x86_reg_X86_REG_R9D: x86_reg = 227;
pub const x86_reg_X86_REG_R10D: x86_reg = 228;
pub const x86_reg_X86_REG_R11D: x86_reg = 229;
pub const x86_reg_X86_REG_R12D: x86_reg = 230;
pub const x86_reg_X86_REG_R13D: x86_reg = 231;
pub const x86_reg_X86_REG_R14D: x86_reg = 232;
pub const x86_reg_X86_REG_R15D: x86_reg = 233;
pub const x86_reg_X86_REG_R8W: x86_reg = 234;
pub const x86_reg_X86_REG_R9W: x86_reg = 235;
pub const x86_reg_X86_REG_R10W: x86_reg = 236;
pub const x86_reg_X86_REG_R11W: x86_reg = 237;
pub const x86_reg_X86_REG_R12W: x86_reg = 238;
pub const x86_reg_X86_REG_R13W: x86_reg = 239;
pub const x86_reg_X86_REG_R14W: x86_reg = 240;
pub const x86_reg_X86_REG_R15W: x86_reg = 241;
pub const x86_reg_X86_REG_BND0: x86_reg = 242;
pub const x86_reg_X86_REG_BND1: x86_reg = 243;
pub const x86_reg_X86_REG_BND2: x86_reg = 244;
pub const x86_reg_X86_REG_BND3: x86_reg = 245;
pub const x86_reg_X86_REG_ENDING: x86_reg = 246;
#[doc = " X86 registers"]
pub type x86_reg = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const x86_op_type_X86_OP_INVALID: x86_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const x86_op_type_X86_OP_REG: x86_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const x86_op_type_X86_OP_IMM: x86_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const x86_op_type_X86_OP_MEM: x86_op_type = 3;
#[doc = " Operand type for instruction's operands"]
pub type x86_op_type = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const x86_xop_cc_X86_XOP_CC_INVALID: x86_xop_cc = 0;
pub const x86_xop_cc_X86_XOP_CC_LT: x86_xop_cc = 1;
pub const x86_xop_cc_X86_XOP_CC_LE: x86_xop_cc = 2;
pub const x86_xop_cc_X86_XOP_CC_GT: x86_xop_cc = 3;
pub const x86_xop_cc_X86_XOP_CC_GE: x86_xop_cc = 4;
pub const x86_xop_cc_X86_XOP_CC_EQ: x86_xop_cc = 5;
pub const x86_xop_cc_X86_XOP_CC_NEQ: x86_xop_cc = 6;
pub const x86_xop_cc_X86_XOP_CC_FALSE: x86_xop_cc = 7;
pub const x86_xop_cc_X86_XOP_CC_TRUE: x86_xop_cc = 8;
#[doc = " XOP Code Condition type"]
pub type x86_xop_cc = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const x86_avx_bcast_X86_AVX_BCAST_INVALID: x86_avx_bcast = 0;
#[doc = "< AVX512 broadcast type {1to2}"]
pub const x86_avx_bcast_X86_AVX_BCAST_2: x86_avx_bcast = 1;
#[doc = "< AVX512 broadcast type {1to4}"]
pub const x86_avx_bcast_X86_AVX_BCAST_4: x86_avx_bcast = 2;
#[doc = "< AVX512 broadcast type {1to8}"]
pub const x86_avx_bcast_X86_AVX_BCAST_8: x86_avx_bcast = 3;
#[doc = "< AVX512 broadcast type {1to16}"]
pub const x86_avx_bcast_X86_AVX_BCAST_16: x86_avx_bcast = 4;
#[doc = " AVX broadcast type"]
pub type x86_avx_bcast = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const x86_sse_cc_X86_SSE_CC_INVALID: x86_sse_cc = 0;
pub const x86_sse_cc_X86_SSE_CC_EQ: x86_sse_cc = 1;
pub const x86_sse_cc_X86_SSE_CC_LT: x86_sse_cc = 2;
pub const x86_sse_cc_X86_SSE_CC_LE: x86_sse_cc = 3;
pub const x86_sse_cc_X86_SSE_CC_UNORD: x86_sse_cc = 4;
pub const x86_sse_cc_X86_SSE_CC_NEQ: x86_sse_cc = 5;
pub const x86_sse_cc_X86_SSE_CC_NLT: x86_sse_cc = 6;
pub const x86_sse_cc_X86_SSE_CC_NLE: x86_sse_cc = 7;
pub const x86_sse_cc_X86_SSE_CC_ORD: x86_sse_cc = 8;
#[doc = " SSE Code Condition type"]
pub type x86_sse_cc = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const x86_avx_cc_X86_AVX_CC_INVALID: x86_avx_cc = 0;
pub const x86_avx_cc_X86_AVX_CC_EQ: x86_avx_cc = 1;
pub const x86_avx_cc_X86_AVX_CC_LT: x86_avx_cc = 2;
pub const x86_avx_cc_X86_AVX_CC_LE: x86_avx_cc = 3;
pub const x86_avx_cc_X86_AVX_CC_UNORD: x86_avx_cc = 4;
pub const x86_avx_cc_X86_AVX_CC_NEQ: x86_avx_cc = 5;
pub const x86_avx_cc_X86_AVX_CC_NLT: x86_avx_cc = 6;
pub const x86_avx_cc_X86_AVX_CC_NLE: x86_avx_cc = 7;
pub const x86_avx_cc_X86_AVX_CC_ORD: x86_avx_cc = 8;
pub const x86_avx_cc_X86_AVX_CC_EQ_UQ: x86_avx_cc = 9;
pub const x86_avx_cc_X86_AVX_CC_NGE: x86_avx_cc = 10;
pub const x86_avx_cc_X86_AVX_CC_NGT: x86_avx_cc = 11;
pub const x86_avx_cc_X86_AVX_CC_FALSE: x86_avx_cc = 12;
pub const x86_avx_cc_X86_AVX_CC_NEQ_OQ: x86_avx_cc = 13;
pub const x86_avx_cc_X86_AVX_CC_GE: x86_avx_cc = 14;
pub const x86_avx_cc_X86_AVX_CC_GT: x86_avx_cc = 15;
pub const x86_avx_cc_X86_AVX_CC_TRUE: x86_avx_cc = 16;
pub const x86_avx_cc_X86_AVX_CC_EQ_OS: x86_avx_cc = 17;
pub const x86_avx_cc_X86_AVX_CC_LT_OQ: x86_avx_cc = 18;
pub const x86_avx_cc_X86_AVX_CC_LE_OQ: x86_avx_cc = 19;
pub const x86_avx_cc_X86_AVX_CC_UNORD_S: x86_avx_cc = 20;
pub const x86_avx_cc_X86_AVX_CC_NEQ_US: x86_avx_cc = 21;
pub const x86_avx_cc_X86_AVX_CC_NLT_UQ: x86_avx_cc = 22;
pub const x86_avx_cc_X86_AVX_CC_NLE_UQ: x86_avx_cc = 23;
pub const x86_avx_cc_X86_AVX_CC_ORD_S: x86_avx_cc = 24;
pub const x86_avx_cc_X86_AVX_CC_EQ_US: x86_avx_cc = 25;
pub const x86_avx_cc_X86_AVX_CC_NGE_UQ: x86_avx_cc = 26;
pub const x86_avx_cc_X86_AVX_CC_NGT_UQ: x86_avx_cc = 27;
pub const x86_avx_cc_X86_AVX_CC_FALSE_OS: x86_avx_cc = 28;
pub const x86_avx_cc_X86_AVX_CC_NEQ_OS: x86_avx_cc = 29;
pub const x86_avx_cc_X86_AVX_CC_GE_OQ: x86_avx_cc = 30;
pub const x86_avx_cc_X86_AVX_CC_GT_OQ: x86_avx_cc = 31;
pub const x86_avx_cc_X86_AVX_CC_TRUE_US: x86_avx_cc = 32;
#[doc = " AVX Code Condition type"]
pub type x86_avx_cc = ::std::os::raw::c_uint;
#[doc = "< Uninitialized."]
pub const x86_avx_rm_X86_AVX_RM_INVALID: x86_avx_rm = 0;
#[doc = "< Round to nearest"]
pub const x86_avx_rm_X86_AVX_RM_RN: x86_avx_rm = 1;
#[doc = "< Round down"]
pub const x86_avx_rm_X86_AVX_RM_RD: x86_avx_rm = 2;
#[doc = "< Round up"]
pub const x86_avx_rm_X86_AVX_RM_RU: x86_avx_rm = 3;
#[doc = "< Round toward zero"]
pub const x86_avx_rm_X86_AVX_RM_RZ: x86_avx_rm = 4;
#[doc = " AVX static rounding mode type"]
pub type x86_avx_rm = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with X86_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_op_mem {
    #[doc = "< segment register (or X86_REG_INVALID if irrelevant)"]
    pub segment: x86_reg,
    #[doc = "< base register (or X86_REG_INVALID if irrelevant)"]
    pub base: x86_reg,
    #[doc = "< index register (or X86_REG_INVALID if irrelevant)"]
    pub index: x86_reg,
    #[doc = "< scale for index register"]
    pub scale: ::std::os::raw::c_int,
    #[doc = "< displacement value"]
    pub disp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of x86_op_mem"][::std::mem::size_of::<x86_op_mem>() - 24usize];
    ["Alignment of x86_op_mem"][::std::mem::align_of::<x86_op_mem>() - 8usize];
    ["Offset of field: x86_op_mem::segment"][::std::mem::offset_of!(x86_op_mem, segment) - 0usize];
    ["Offset of field: x86_op_mem::base"][::std::mem::offset_of!(x86_op_mem, base) - 4usize];
    ["Offset of field: x86_op_mem::index"][::std::mem::offset_of!(x86_op_mem, index) - 8usize];
    ["Offset of field: x86_op_mem::scale"][::std::mem::offset_of!(x86_op_mem, scale) - 12usize];
    ["Offset of field: x86_op_mem::disp"][::std::mem::offset_of!(x86_op_mem, disp) - 16usize];
};
impl Default for x86_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86_op {
    #[doc = "< operand type"]
    pub type_: x86_op_type,
    pub __bindgen_anon_1: cs_x86_op__bindgen_ty_1,
    #[doc = " size of this operand (in bytes)."]
    pub size: u8,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
    #[doc = " AVX broadcast type, or 0 if irrelevant"]
    pub avx_bcast: x86_avx_bcast,
    #[doc = " AVX zero opmask {z}"]
    pub avx_zero_opmask: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: x86_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i64,
    #[doc = "< base/index/scale/disp value for MEM operand"]
    pub mem: x86_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_x86_op__bindgen_ty_1"][::std::mem::size_of::<cs_x86_op__bindgen_ty_1>() - 24usize];
    ["Alignment of cs_x86_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_x86_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_x86_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_x86_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_x86_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_x86_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_x86_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_x86_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_x86_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_x86_op"][::std::mem::size_of::<cs_x86_op>() - 48usize];
    ["Alignment of cs_x86_op"][::std::mem::align_of::<cs_x86_op>() - 8usize];
    ["Offset of field: cs_x86_op::type_"][::std::mem::offset_of!(cs_x86_op, type_) - 0usize];
    ["Offset of field: cs_x86_op::size"][::std::mem::offset_of!(cs_x86_op, size) - 32usize];
    ["Offset of field: cs_x86_op::access"][::std::mem::offset_of!(cs_x86_op, access) - 33usize];
    ["Offset of field: cs_x86_op::avx_bcast"]
        [::std::mem::offset_of!(cs_x86_op, avx_bcast) - 36usize];
    ["Offset of field: cs_x86_op::avx_zero_opmask"]
        [::std::mem::offset_of!(cs_x86_op, avx_zero_opmask) - 40usize];
};
impl Default for cs_x86_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cs_x86_encoding {
    #[doc = " ModR/M offset, or 0 when irrelevant"]
    pub modrm_offset: u8,
    #[doc = " Displacement offset, or 0 when irrelevant."]
    pub disp_offset: u8,
    pub disp_size: u8,
    #[doc = " Immediate offset, or 0 when irrelevant."]
    pub imm_offset: u8,
    pub imm_size: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_x86_encoding"][::std::mem::size_of::<cs_x86_encoding>() - 5usize];
    ["Alignment of cs_x86_encoding"][::std::mem::align_of::<cs_x86_encoding>() - 1usize];
    ["Offset of field: cs_x86_encoding::modrm_offset"]
        [::std::mem::offset_of!(cs_x86_encoding, modrm_offset) - 0usize];
    ["Offset of field: cs_x86_encoding::disp_offset"]
        [::std::mem::offset_of!(cs_x86_encoding, disp_offset) - 1usize];
    ["Offset of field: cs_x86_encoding::disp_size"]
        [::std::mem::offset_of!(cs_x86_encoding, disp_size) - 2usize];
    ["Offset of field: cs_x86_encoding::imm_offset"]
        [::std::mem::offset_of!(cs_x86_encoding, imm_offset) - 3usize];
    ["Offset of field: cs_x86_encoding::imm_size"]
        [::std::mem::offset_of!(cs_x86_encoding, imm_size) - 4usize];
};
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86 {
    #[doc = " Instruction prefix, which can be up to 4 bytes.\n A prefix byte gets value 0 when irrelevant.\n prefix[0] indicates REP/REPNE/LOCK prefix (See X86_PREFIX_REP/REPNE/LOCK above)\n prefix[1] indicates segment override (irrelevant for x86_64):\n See X86_PREFIX_CS/SS/DS/ES/FS/GS above.\n prefix[2] indicates operand-size override (X86_PREFIX_OPSIZE)\n prefix[3] indicates address-size override (X86_PREFIX_ADDRSIZE)"]
    pub prefix: [u8; 4usize],
    #[doc = " Instruction opcode, which can be from 1 to 4 bytes in size.\n This contains VEX opcode as well.\n An trailing opcode byte gets value 0 when irrelevant."]
    pub opcode: [u8; 4usize],
    #[doc = " REX prefix: only a non-zero value is relevant for x86_64"]
    pub rex: u8,
    #[doc = " Address size, which can be overridden with above prefix[5]."]
    pub addr_size: u8,
    #[doc = " ModR/M byte"]
    pub modrm: u8,
    #[doc = " SIB value, or 0 when irrelevant."]
    pub sib: u8,
    #[doc = " Displacement value, valid if encoding.disp_offset != 0"]
    pub disp: i64,
    #[doc = " SIB index register, or X86_REG_INVALID when irrelevant."]
    pub sib_index: x86_reg,
    #[doc = " SIB scale, only applicable if sib_index is valid."]
    pub sib_scale: i8,
    #[doc = " SIB base register, or X86_REG_INVALID when irrelevant."]
    pub sib_base: x86_reg,
    #[doc = " XOP Code Condition"]
    pub xop_cc: x86_xop_cc,
    #[doc = " SSE Code Condition"]
    pub sse_cc: x86_sse_cc,
    #[doc = " AVX Code Condition"]
    pub avx_cc: x86_avx_cc,
    #[doc = " AVX Suppress all Exception"]
    pub avx_sae: bool,
    #[doc = " AVX static rounding mode"]
    pub avx_rm: x86_avx_rm,
    pub __bindgen_anon_1: cs_x86__bindgen_ty_1,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_x86_op; 8usize],
    #[doc = "< encoding information"]
    pub encoding: cs_x86_encoding,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86__bindgen_ty_1 {
    #[doc = " EFLAGS updated by this instruction.\n This can be formed from OR combination of X86_EFLAGS_* symbols in x86.h"]
    pub eflags: u64,
    #[doc = " FPU_FLAGS updated by this instruction.\n This can be formed from OR combination of X86_FPU_FLAGS_* symbols in x86.h"]
    pub fpu_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_x86__bindgen_ty_1"][::std::mem::size_of::<cs_x86__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_x86__bindgen_ty_1"][::std::mem::align_of::<cs_x86__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_x86__bindgen_ty_1::eflags"]
        [::std::mem::offset_of!(cs_x86__bindgen_ty_1, eflags) - 0usize];
    ["Offset of field: cs_x86__bindgen_ty_1::fpu_flags"]
        [::std::mem::offset_of!(cs_x86__bindgen_ty_1, fpu_flags) - 0usize];
};
impl Default for cs_x86__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_x86"][::std::mem::size_of::<cs_x86>() - 464usize];
    ["Alignment of cs_x86"][::std::mem::align_of::<cs_x86>() - 8usize];
    ["Offset of field: cs_x86::prefix"][::std::mem::offset_of!(cs_x86, prefix) - 0usize];
    ["Offset of field: cs_x86::opcode"][::std::mem::offset_of!(cs_x86, opcode) - 4usize];
    ["Offset of field: cs_x86::rex"][::std::mem::offset_of!(cs_x86, rex) - 8usize];
    ["Offset of field: cs_x86::addr_size"][::std::mem::offset_of!(cs_x86, addr_size) - 9usize];
    ["Offset of field: cs_x86::modrm"][::std::mem::offset_of!(cs_x86, modrm) - 10usize];
    ["Offset of field: cs_x86::sib"][::std::mem::offset_of!(cs_x86, sib) - 11usize];
    ["Offset of field: cs_x86::disp"][::std::mem::offset_of!(cs_x86, disp) - 16usize];
    ["Offset of field: cs_x86::sib_index"][::std::mem::offset_of!(cs_x86, sib_index) - 24usize];
    ["Offset of field: cs_x86::sib_scale"][::std::mem::offset_of!(cs_x86, sib_scale) - 28usize];
    ["Offset of field: cs_x86::sib_base"][::std::mem::offset_of!(cs_x86, sib_base) - 32usize];
    ["Offset of field: cs_x86::xop_cc"][::std::mem::offset_of!(cs_x86, xop_cc) - 36usize];
    ["Offset of field: cs_x86::sse_cc"][::std::mem::offset_of!(cs_x86, sse_cc) - 40usize];
    ["Offset of field: cs_x86::avx_cc"][::std::mem::offset_of!(cs_x86, avx_cc) - 44usize];
    ["Offset of field: cs_x86::avx_sae"][::std::mem::offset_of!(cs_x86, avx_sae) - 48usize];
    ["Offset of field: cs_x86::avx_rm"][::std::mem::offset_of!(cs_x86, avx_rm) - 52usize];
    ["Offset of field: cs_x86::op_count"][::std::mem::offset_of!(cs_x86, op_count) - 64usize];
    ["Offset of field: cs_x86::operands"][::std::mem::offset_of!(cs_x86, operands) - 72usize];
    ["Offset of field: cs_x86::encoding"][::std::mem::offset_of!(cs_x86, encoding) - 456usize];
};
impl Default for cs_x86 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const x86_insn_X86_INS_INVALID: x86_insn = 0;
pub const x86_insn_X86_INS_AAA: x86_insn = 1;
pub const x86_insn_X86_INS_AAD: x86_insn = 2;
pub const x86_insn_X86_INS_AAM: x86_insn = 3;
pub const x86_insn_X86_INS_AAS: x86_insn = 4;
pub const x86_insn_X86_INS_FABS: x86_insn = 5;
pub const x86_insn_X86_INS_ADC: x86_insn = 6;
pub const x86_insn_X86_INS_ADCX: x86_insn = 7;
pub const x86_insn_X86_INS_ADD: x86_insn = 8;
pub const x86_insn_X86_INS_ADDPD: x86_insn = 9;
pub const x86_insn_X86_INS_ADDPS: x86_insn = 10;
pub const x86_insn_X86_INS_ADDSD: x86_insn = 11;
pub const x86_insn_X86_INS_ADDSS: x86_insn = 12;
pub const x86_insn_X86_INS_ADDSUBPD: x86_insn = 13;
pub const x86_insn_X86_INS_ADDSUBPS: x86_insn = 14;
pub const x86_insn_X86_INS_FADD: x86_insn = 15;
pub const x86_insn_X86_INS_FIADD: x86_insn = 16;
pub const x86_insn_X86_INS_ADOX: x86_insn = 17;
pub const x86_insn_X86_INS_AESDECLAST: x86_insn = 18;
pub const x86_insn_X86_INS_AESDEC: x86_insn = 19;
pub const x86_insn_X86_INS_AESENCLAST: x86_insn = 20;
pub const x86_insn_X86_INS_AESENC: x86_insn = 21;
pub const x86_insn_X86_INS_AESIMC: x86_insn = 22;
pub const x86_insn_X86_INS_AESKEYGENASSIST: x86_insn = 23;
pub const x86_insn_X86_INS_AND: x86_insn = 24;
pub const x86_insn_X86_INS_ANDN: x86_insn = 25;
pub const x86_insn_X86_INS_ANDNPD: x86_insn = 26;
pub const x86_insn_X86_INS_ANDNPS: x86_insn = 27;
pub const x86_insn_X86_INS_ANDPD: x86_insn = 28;
pub const x86_insn_X86_INS_ANDPS: x86_insn = 29;
pub const x86_insn_X86_INS_ARPL: x86_insn = 30;
pub const x86_insn_X86_INS_BEXTR: x86_insn = 31;
pub const x86_insn_X86_INS_BLCFILL: x86_insn = 32;
pub const x86_insn_X86_INS_BLCI: x86_insn = 33;
pub const x86_insn_X86_INS_BLCIC: x86_insn = 34;
pub const x86_insn_X86_INS_BLCMSK: x86_insn = 35;
pub const x86_insn_X86_INS_BLCS: x86_insn = 36;
pub const x86_insn_X86_INS_BLENDPD: x86_insn = 37;
pub const x86_insn_X86_INS_BLENDPS: x86_insn = 38;
pub const x86_insn_X86_INS_BLENDVPD: x86_insn = 39;
pub const x86_insn_X86_INS_BLENDVPS: x86_insn = 40;
pub const x86_insn_X86_INS_BLSFILL: x86_insn = 41;
pub const x86_insn_X86_INS_BLSI: x86_insn = 42;
pub const x86_insn_X86_INS_BLSIC: x86_insn = 43;
pub const x86_insn_X86_INS_BLSMSK: x86_insn = 44;
pub const x86_insn_X86_INS_BLSR: x86_insn = 45;
pub const x86_insn_X86_INS_BNDCL: x86_insn = 46;
pub const x86_insn_X86_INS_BNDCN: x86_insn = 47;
pub const x86_insn_X86_INS_BNDCU: x86_insn = 48;
pub const x86_insn_X86_INS_BNDLDX: x86_insn = 49;
pub const x86_insn_X86_INS_BNDMK: x86_insn = 50;
pub const x86_insn_X86_INS_BNDMOV: x86_insn = 51;
pub const x86_insn_X86_INS_BNDSTX: x86_insn = 52;
pub const x86_insn_X86_INS_BOUND: x86_insn = 53;
pub const x86_insn_X86_INS_BSF: x86_insn = 54;
pub const x86_insn_X86_INS_BSR: x86_insn = 55;
pub const x86_insn_X86_INS_BSWAP: x86_insn = 56;
pub const x86_insn_X86_INS_BT: x86_insn = 57;
pub const x86_insn_X86_INS_BTC: x86_insn = 58;
pub const x86_insn_X86_INS_BTR: x86_insn = 59;
pub const x86_insn_X86_INS_BTS: x86_insn = 60;
pub const x86_insn_X86_INS_BZHI: x86_insn = 61;
pub const x86_insn_X86_INS_CALL: x86_insn = 62;
pub const x86_insn_X86_INS_CBW: x86_insn = 63;
pub const x86_insn_X86_INS_CDQ: x86_insn = 64;
pub const x86_insn_X86_INS_CDQE: x86_insn = 65;
pub const x86_insn_X86_INS_FCHS: x86_insn = 66;
pub const x86_insn_X86_INS_CLAC: x86_insn = 67;
pub const x86_insn_X86_INS_CLC: x86_insn = 68;
pub const x86_insn_X86_INS_CLD: x86_insn = 69;
pub const x86_insn_X86_INS_CLDEMOTE: x86_insn = 70;
pub const x86_insn_X86_INS_CLFLUSH: x86_insn = 71;
pub const x86_insn_X86_INS_CLFLUSHOPT: x86_insn = 72;
pub const x86_insn_X86_INS_CLGI: x86_insn = 73;
pub const x86_insn_X86_INS_CLI: x86_insn = 74;
pub const x86_insn_X86_INS_CLRSSBSY: x86_insn = 75;
pub const x86_insn_X86_INS_CLTS: x86_insn = 76;
pub const x86_insn_X86_INS_CLWB: x86_insn = 77;
pub const x86_insn_X86_INS_CLZERO: x86_insn = 78;
pub const x86_insn_X86_INS_CMC: x86_insn = 79;
pub const x86_insn_X86_INS_CMOVA: x86_insn = 80;
pub const x86_insn_X86_INS_CMOVAE: x86_insn = 81;
pub const x86_insn_X86_INS_CMOVB: x86_insn = 82;
pub const x86_insn_X86_INS_CMOVBE: x86_insn = 83;
pub const x86_insn_X86_INS_FCMOVBE: x86_insn = 84;
pub const x86_insn_X86_INS_FCMOVB: x86_insn = 85;
pub const x86_insn_X86_INS_CMOVE: x86_insn = 86;
pub const x86_insn_X86_INS_FCMOVE: x86_insn = 87;
pub const x86_insn_X86_INS_CMOVG: x86_insn = 88;
pub const x86_insn_X86_INS_CMOVGE: x86_insn = 89;
pub const x86_insn_X86_INS_CMOVL: x86_insn = 90;
pub const x86_insn_X86_INS_CMOVLE: x86_insn = 91;
pub const x86_insn_X86_INS_FCMOVNBE: x86_insn = 92;
pub const x86_insn_X86_INS_FCMOVNB: x86_insn = 93;
pub const x86_insn_X86_INS_CMOVNE: x86_insn = 94;
pub const x86_insn_X86_INS_FCMOVNE: x86_insn = 95;
pub const x86_insn_X86_INS_CMOVNO: x86_insn = 96;
pub const x86_insn_X86_INS_CMOVNP: x86_insn = 97;
pub const x86_insn_X86_INS_FCMOVNU: x86_insn = 98;
pub const x86_insn_X86_INS_FCMOVNP: x86_insn = 99;
pub const x86_insn_X86_INS_CMOVNS: x86_insn = 100;
pub const x86_insn_X86_INS_CMOVO: x86_insn = 101;
pub const x86_insn_X86_INS_CMOVP: x86_insn = 102;
pub const x86_insn_X86_INS_FCMOVU: x86_insn = 103;
pub const x86_insn_X86_INS_CMOVS: x86_insn = 104;
pub const x86_insn_X86_INS_CMP: x86_insn = 105;
pub const x86_insn_X86_INS_CMPPD: x86_insn = 106;
pub const x86_insn_X86_INS_CMPPS: x86_insn = 107;
pub const x86_insn_X86_INS_CMPSB: x86_insn = 108;
pub const x86_insn_X86_INS_CMPSD: x86_insn = 109;
pub const x86_insn_X86_INS_CMPSQ: x86_insn = 110;
pub const x86_insn_X86_INS_CMPSS: x86_insn = 111;
pub const x86_insn_X86_INS_CMPSW: x86_insn = 112;
pub const x86_insn_X86_INS_CMPXCHG16B: x86_insn = 113;
pub const x86_insn_X86_INS_CMPXCHG: x86_insn = 114;
pub const x86_insn_X86_INS_CMPXCHG8B: x86_insn = 115;
pub const x86_insn_X86_INS_COMISD: x86_insn = 116;
pub const x86_insn_X86_INS_COMISS: x86_insn = 117;
pub const x86_insn_X86_INS_FCOMP: x86_insn = 118;
pub const x86_insn_X86_INS_FCOMPI: x86_insn = 119;
pub const x86_insn_X86_INS_FCOMI: x86_insn = 120;
pub const x86_insn_X86_INS_FCOM: x86_insn = 121;
pub const x86_insn_X86_INS_FCOS: x86_insn = 122;
pub const x86_insn_X86_INS_CPUID: x86_insn = 123;
pub const x86_insn_X86_INS_CQO: x86_insn = 124;
pub const x86_insn_X86_INS_CRC32: x86_insn = 125;
pub const x86_insn_X86_INS_CVTDQ2PD: x86_insn = 126;
pub const x86_insn_X86_INS_CVTDQ2PS: x86_insn = 127;
pub const x86_insn_X86_INS_CVTPD2DQ: x86_insn = 128;
pub const x86_insn_X86_INS_CVTPD2PS: x86_insn = 129;
pub const x86_insn_X86_INS_CVTPS2DQ: x86_insn = 130;
pub const x86_insn_X86_INS_CVTPS2PD: x86_insn = 131;
pub const x86_insn_X86_INS_CVTSD2SI: x86_insn = 132;
pub const x86_insn_X86_INS_CVTSD2SS: x86_insn = 133;
pub const x86_insn_X86_INS_CVTSI2SD: x86_insn = 134;
pub const x86_insn_X86_INS_CVTSI2SS: x86_insn = 135;
pub const x86_insn_X86_INS_CVTSS2SD: x86_insn = 136;
pub const x86_insn_X86_INS_CVTSS2SI: x86_insn = 137;
pub const x86_insn_X86_INS_CVTTPD2DQ: x86_insn = 138;
pub const x86_insn_X86_INS_CVTTPS2DQ: x86_insn = 139;
pub const x86_insn_X86_INS_CVTTSD2SI: x86_insn = 140;
pub const x86_insn_X86_INS_CVTTSS2SI: x86_insn = 141;
pub const x86_insn_X86_INS_CWD: x86_insn = 142;
pub const x86_insn_X86_INS_CWDE: x86_insn = 143;
pub const x86_insn_X86_INS_DAA: x86_insn = 144;
pub const x86_insn_X86_INS_DAS: x86_insn = 145;
pub const x86_insn_X86_INS_DATA16: x86_insn = 146;
pub const x86_insn_X86_INS_DEC: x86_insn = 147;
pub const x86_insn_X86_INS_DIV: x86_insn = 148;
pub const x86_insn_X86_INS_DIVPD: x86_insn = 149;
pub const x86_insn_X86_INS_DIVPS: x86_insn = 150;
pub const x86_insn_X86_INS_FDIVR: x86_insn = 151;
pub const x86_insn_X86_INS_FIDIVR: x86_insn = 152;
pub const x86_insn_X86_INS_FDIVRP: x86_insn = 153;
pub const x86_insn_X86_INS_DIVSD: x86_insn = 154;
pub const x86_insn_X86_INS_DIVSS: x86_insn = 155;
pub const x86_insn_X86_INS_FDIV: x86_insn = 156;
pub const x86_insn_X86_INS_FIDIV: x86_insn = 157;
pub const x86_insn_X86_INS_FDIVP: x86_insn = 158;
pub const x86_insn_X86_INS_DPPD: x86_insn = 159;
pub const x86_insn_X86_INS_DPPS: x86_insn = 160;
pub const x86_insn_X86_INS_ENCLS: x86_insn = 161;
pub const x86_insn_X86_INS_ENCLU: x86_insn = 162;
pub const x86_insn_X86_INS_ENCLV: x86_insn = 163;
pub const x86_insn_X86_INS_ENDBR32: x86_insn = 164;
pub const x86_insn_X86_INS_ENDBR64: x86_insn = 165;
pub const x86_insn_X86_INS_ENTER: x86_insn = 166;
pub const x86_insn_X86_INS_EXTRACTPS: x86_insn = 167;
pub const x86_insn_X86_INS_EXTRQ: x86_insn = 168;
pub const x86_insn_X86_INS_F2XM1: x86_insn = 169;
pub const x86_insn_X86_INS_LCALL: x86_insn = 170;
pub const x86_insn_X86_INS_LJMP: x86_insn = 171;
pub const x86_insn_X86_INS_JMP: x86_insn = 172;
pub const x86_insn_X86_INS_FBLD: x86_insn = 173;
pub const x86_insn_X86_INS_FBSTP: x86_insn = 174;
pub const x86_insn_X86_INS_FCOMPP: x86_insn = 175;
pub const x86_insn_X86_INS_FDECSTP: x86_insn = 176;
pub const x86_insn_X86_INS_FDISI8087_NOP: x86_insn = 177;
pub const x86_insn_X86_INS_FEMMS: x86_insn = 178;
pub const x86_insn_X86_INS_FENI8087_NOP: x86_insn = 179;
pub const x86_insn_X86_INS_FFREE: x86_insn = 180;
pub const x86_insn_X86_INS_FFREEP: x86_insn = 181;
pub const x86_insn_X86_INS_FICOM: x86_insn = 182;
pub const x86_insn_X86_INS_FICOMP: x86_insn = 183;
pub const x86_insn_X86_INS_FINCSTP: x86_insn = 184;
pub const x86_insn_X86_INS_FLDCW: x86_insn = 185;
pub const x86_insn_X86_INS_FLDENV: x86_insn = 186;
pub const x86_insn_X86_INS_FLDL2E: x86_insn = 187;
pub const x86_insn_X86_INS_FLDL2T: x86_insn = 188;
pub const x86_insn_X86_INS_FLDLG2: x86_insn = 189;
pub const x86_insn_X86_INS_FLDLN2: x86_insn = 190;
pub const x86_insn_X86_INS_FLDPI: x86_insn = 191;
pub const x86_insn_X86_INS_FNCLEX: x86_insn = 192;
pub const x86_insn_X86_INS_FNINIT: x86_insn = 193;
pub const x86_insn_X86_INS_FNOP: x86_insn = 194;
pub const x86_insn_X86_INS_FNSTCW: x86_insn = 195;
pub const x86_insn_X86_INS_FNSTSW: x86_insn = 196;
pub const x86_insn_X86_INS_FPATAN: x86_insn = 197;
pub const x86_insn_X86_INS_FSTPNCE: x86_insn = 198;
pub const x86_insn_X86_INS_FPREM: x86_insn = 199;
pub const x86_insn_X86_INS_FPREM1: x86_insn = 200;
pub const x86_insn_X86_INS_FPTAN: x86_insn = 201;
pub const x86_insn_X86_INS_FRNDINT: x86_insn = 202;
pub const x86_insn_X86_INS_FRSTOR: x86_insn = 203;
pub const x86_insn_X86_INS_FNSAVE: x86_insn = 204;
pub const x86_insn_X86_INS_FSCALE: x86_insn = 205;
pub const x86_insn_X86_INS_FSETPM: x86_insn = 206;
pub const x86_insn_X86_INS_FSINCOS: x86_insn = 207;
pub const x86_insn_X86_INS_FNSTENV: x86_insn = 208;
pub const x86_insn_X86_INS_FXAM: x86_insn = 209;
pub const x86_insn_X86_INS_FXRSTOR: x86_insn = 210;
pub const x86_insn_X86_INS_FXRSTOR64: x86_insn = 211;
pub const x86_insn_X86_INS_FXSAVE: x86_insn = 212;
pub const x86_insn_X86_INS_FXSAVE64: x86_insn = 213;
pub const x86_insn_X86_INS_FXTRACT: x86_insn = 214;
pub const x86_insn_X86_INS_FYL2X: x86_insn = 215;
pub const x86_insn_X86_INS_FYL2XP1: x86_insn = 216;
pub const x86_insn_X86_INS_GETSEC: x86_insn = 217;
pub const x86_insn_X86_INS_GF2P8AFFINEINVQB: x86_insn = 218;
pub const x86_insn_X86_INS_GF2P8AFFINEQB: x86_insn = 219;
pub const x86_insn_X86_INS_GF2P8MULB: x86_insn = 220;
pub const x86_insn_X86_INS_HADDPD: x86_insn = 221;
pub const x86_insn_X86_INS_HADDPS: x86_insn = 222;
pub const x86_insn_X86_INS_HLT: x86_insn = 223;
pub const x86_insn_X86_INS_HSUBPD: x86_insn = 224;
pub const x86_insn_X86_INS_HSUBPS: x86_insn = 225;
pub const x86_insn_X86_INS_IDIV: x86_insn = 226;
pub const x86_insn_X86_INS_FILD: x86_insn = 227;
pub const x86_insn_X86_INS_IMUL: x86_insn = 228;
pub const x86_insn_X86_INS_IN: x86_insn = 229;
pub const x86_insn_X86_INS_INC: x86_insn = 230;
pub const x86_insn_X86_INS_INCSSPD: x86_insn = 231;
pub const x86_insn_X86_INS_INCSSPQ: x86_insn = 232;
pub const x86_insn_X86_INS_INSB: x86_insn = 233;
pub const x86_insn_X86_INS_INSERTPS: x86_insn = 234;
pub const x86_insn_X86_INS_INSERTQ: x86_insn = 235;
pub const x86_insn_X86_INS_INSD: x86_insn = 236;
pub const x86_insn_X86_INS_INSW: x86_insn = 237;
pub const x86_insn_X86_INS_INT: x86_insn = 238;
pub const x86_insn_X86_INS_INT1: x86_insn = 239;
pub const x86_insn_X86_INS_INT3: x86_insn = 240;
pub const x86_insn_X86_INS_INTO: x86_insn = 241;
pub const x86_insn_X86_INS_INVD: x86_insn = 242;
pub const x86_insn_X86_INS_INVEPT: x86_insn = 243;
pub const x86_insn_X86_INS_INVLPG: x86_insn = 244;
pub const x86_insn_X86_INS_INVLPGA: x86_insn = 245;
pub const x86_insn_X86_INS_INVPCID: x86_insn = 246;
pub const x86_insn_X86_INS_INVVPID: x86_insn = 247;
pub const x86_insn_X86_INS_IRET: x86_insn = 248;
pub const x86_insn_X86_INS_IRETD: x86_insn = 249;
pub const x86_insn_X86_INS_IRETQ: x86_insn = 250;
pub const x86_insn_X86_INS_FISTTP: x86_insn = 251;
pub const x86_insn_X86_INS_FIST: x86_insn = 252;
pub const x86_insn_X86_INS_FISTP: x86_insn = 253;
pub const x86_insn_X86_INS_JAE: x86_insn = 254;
pub const x86_insn_X86_INS_JA: x86_insn = 255;
pub const x86_insn_X86_INS_JBE: x86_insn = 256;
pub const x86_insn_X86_INS_JB: x86_insn = 257;
pub const x86_insn_X86_INS_JCXZ: x86_insn = 258;
pub const x86_insn_X86_INS_JECXZ: x86_insn = 259;
pub const x86_insn_X86_INS_JE: x86_insn = 260;
pub const x86_insn_X86_INS_JGE: x86_insn = 261;
pub const x86_insn_X86_INS_JG: x86_insn = 262;
pub const x86_insn_X86_INS_JLE: x86_insn = 263;
pub const x86_insn_X86_INS_JL: x86_insn = 264;
pub const x86_insn_X86_INS_JNE: x86_insn = 265;
pub const x86_insn_X86_INS_JNO: x86_insn = 266;
pub const x86_insn_X86_INS_JNP: x86_insn = 267;
pub const x86_insn_X86_INS_JNS: x86_insn = 268;
pub const x86_insn_X86_INS_JO: x86_insn = 269;
pub const x86_insn_X86_INS_JP: x86_insn = 270;
pub const x86_insn_X86_INS_JRCXZ: x86_insn = 271;
pub const x86_insn_X86_INS_JS: x86_insn = 272;
pub const x86_insn_X86_INS_KADDB: x86_insn = 273;
pub const x86_insn_X86_INS_KADDD: x86_insn = 274;
pub const x86_insn_X86_INS_KADDQ: x86_insn = 275;
pub const x86_insn_X86_INS_KADDW: x86_insn = 276;
pub const x86_insn_X86_INS_KANDB: x86_insn = 277;
pub const x86_insn_X86_INS_KANDD: x86_insn = 278;
pub const x86_insn_X86_INS_KANDNB: x86_insn = 279;
pub const x86_insn_X86_INS_KANDND: x86_insn = 280;
pub const x86_insn_X86_INS_KANDNQ: x86_insn = 281;
pub const x86_insn_X86_INS_KANDNW: x86_insn = 282;
pub const x86_insn_X86_INS_KANDQ: x86_insn = 283;
pub const x86_insn_X86_INS_KANDW: x86_insn = 284;
pub const x86_insn_X86_INS_KMOVB: x86_insn = 285;
pub const x86_insn_X86_INS_KMOVD: x86_insn = 286;
pub const x86_insn_X86_INS_KMOVQ: x86_insn = 287;
pub const x86_insn_X86_INS_KMOVW: x86_insn = 288;
pub const x86_insn_X86_INS_KNOTB: x86_insn = 289;
pub const x86_insn_X86_INS_KNOTD: x86_insn = 290;
pub const x86_insn_X86_INS_KNOTQ: x86_insn = 291;
pub const x86_insn_X86_INS_KNOTW: x86_insn = 292;
pub const x86_insn_X86_INS_KORB: x86_insn = 293;
pub const x86_insn_X86_INS_KORD: x86_insn = 294;
pub const x86_insn_X86_INS_KORQ: x86_insn = 295;
pub const x86_insn_X86_INS_KORTESTB: x86_insn = 296;
pub const x86_insn_X86_INS_KORTESTD: x86_insn = 297;
pub const x86_insn_X86_INS_KORTESTQ: x86_insn = 298;
pub const x86_insn_X86_INS_KORTESTW: x86_insn = 299;
pub const x86_insn_X86_INS_KORW: x86_insn = 300;
pub const x86_insn_X86_INS_KSHIFTLB: x86_insn = 301;
pub const x86_insn_X86_INS_KSHIFTLD: x86_insn = 302;
pub const x86_insn_X86_INS_KSHIFTLQ: x86_insn = 303;
pub const x86_insn_X86_INS_KSHIFTLW: x86_insn = 304;
pub const x86_insn_X86_INS_KSHIFTRB: x86_insn = 305;
pub const x86_insn_X86_INS_KSHIFTRD: x86_insn = 306;
pub const x86_insn_X86_INS_KSHIFTRQ: x86_insn = 307;
pub const x86_insn_X86_INS_KSHIFTRW: x86_insn = 308;
pub const x86_insn_X86_INS_KTESTB: x86_insn = 309;
pub const x86_insn_X86_INS_KTESTD: x86_insn = 310;
pub const x86_insn_X86_INS_KTESTQ: x86_insn = 311;
pub const x86_insn_X86_INS_KTESTW: x86_insn = 312;
pub const x86_insn_X86_INS_KUNPCKBW: x86_insn = 313;
pub const x86_insn_X86_INS_KUNPCKDQ: x86_insn = 314;
pub const x86_insn_X86_INS_KUNPCKWD: x86_insn = 315;
pub const x86_insn_X86_INS_KXNORB: x86_insn = 316;
pub const x86_insn_X86_INS_KXNORD: x86_insn = 317;
pub const x86_insn_X86_INS_KXNORQ: x86_insn = 318;
pub const x86_insn_X86_INS_KXNORW: x86_insn = 319;
pub const x86_insn_X86_INS_KXORB: x86_insn = 320;
pub const x86_insn_X86_INS_KXORD: x86_insn = 321;
pub const x86_insn_X86_INS_KXORQ: x86_insn = 322;
pub const x86_insn_X86_INS_KXORW: x86_insn = 323;
pub const x86_insn_X86_INS_LAHF: x86_insn = 324;
pub const x86_insn_X86_INS_LAR: x86_insn = 325;
pub const x86_insn_X86_INS_LDDQU: x86_insn = 326;
pub const x86_insn_X86_INS_LDMXCSR: x86_insn = 327;
pub const x86_insn_X86_INS_LDS: x86_insn = 328;
pub const x86_insn_X86_INS_FLDZ: x86_insn = 329;
pub const x86_insn_X86_INS_FLD1: x86_insn = 330;
pub const x86_insn_X86_INS_FLD: x86_insn = 331;
pub const x86_insn_X86_INS_LEA: x86_insn = 332;
pub const x86_insn_X86_INS_LEAVE: x86_insn = 333;
pub const x86_insn_X86_INS_LES: x86_insn = 334;
pub const x86_insn_X86_INS_LFENCE: x86_insn = 335;
pub const x86_insn_X86_INS_LFS: x86_insn = 336;
pub const x86_insn_X86_INS_LGDT: x86_insn = 337;
pub const x86_insn_X86_INS_LGS: x86_insn = 338;
pub const x86_insn_X86_INS_LIDT: x86_insn = 339;
pub const x86_insn_X86_INS_LLDT: x86_insn = 340;
pub const x86_insn_X86_INS_LLWPCB: x86_insn = 341;
pub const x86_insn_X86_INS_LMSW: x86_insn = 342;
pub const x86_insn_X86_INS_LOCK: x86_insn = 343;
pub const x86_insn_X86_INS_LODSB: x86_insn = 344;
pub const x86_insn_X86_INS_LODSD: x86_insn = 345;
pub const x86_insn_X86_INS_LODSQ: x86_insn = 346;
pub const x86_insn_X86_INS_LODSW: x86_insn = 347;
pub const x86_insn_X86_INS_LOOP: x86_insn = 348;
pub const x86_insn_X86_INS_LOOPE: x86_insn = 349;
pub const x86_insn_X86_INS_LOOPNE: x86_insn = 350;
pub const x86_insn_X86_INS_RETF: x86_insn = 351;
pub const x86_insn_X86_INS_RETFQ: x86_insn = 352;
pub const x86_insn_X86_INS_LSL: x86_insn = 353;
pub const x86_insn_X86_INS_LSS: x86_insn = 354;
pub const x86_insn_X86_INS_LTR: x86_insn = 355;
pub const x86_insn_X86_INS_LWPINS: x86_insn = 356;
pub const x86_insn_X86_INS_LWPVAL: x86_insn = 357;
pub const x86_insn_X86_INS_LZCNT: x86_insn = 358;
pub const x86_insn_X86_INS_MASKMOVDQU: x86_insn = 359;
pub const x86_insn_X86_INS_MAXPD: x86_insn = 360;
pub const x86_insn_X86_INS_MAXPS: x86_insn = 361;
pub const x86_insn_X86_INS_MAXSD: x86_insn = 362;
pub const x86_insn_X86_INS_MAXSS: x86_insn = 363;
pub const x86_insn_X86_INS_MFENCE: x86_insn = 364;
pub const x86_insn_X86_INS_MINPD: x86_insn = 365;
pub const x86_insn_X86_INS_MINPS: x86_insn = 366;
pub const x86_insn_X86_INS_MINSD: x86_insn = 367;
pub const x86_insn_X86_INS_MINSS: x86_insn = 368;
pub const x86_insn_X86_INS_CVTPD2PI: x86_insn = 369;
pub const x86_insn_X86_INS_CVTPI2PD: x86_insn = 370;
pub const x86_insn_X86_INS_CVTPI2PS: x86_insn = 371;
pub const x86_insn_X86_INS_CVTPS2PI: x86_insn = 372;
pub const x86_insn_X86_INS_CVTTPD2PI: x86_insn = 373;
pub const x86_insn_X86_INS_CVTTPS2PI: x86_insn = 374;
pub const x86_insn_X86_INS_EMMS: x86_insn = 375;
pub const x86_insn_X86_INS_MASKMOVQ: x86_insn = 376;
pub const x86_insn_X86_INS_MOVD: x86_insn = 377;
pub const x86_insn_X86_INS_MOVQ: x86_insn = 378;
pub const x86_insn_X86_INS_MOVDQ2Q: x86_insn = 379;
pub const x86_insn_X86_INS_MOVNTQ: x86_insn = 380;
pub const x86_insn_X86_INS_MOVQ2DQ: x86_insn = 381;
pub const x86_insn_X86_INS_PABSB: x86_insn = 382;
pub const x86_insn_X86_INS_PABSD: x86_insn = 383;
pub const x86_insn_X86_INS_PABSW: x86_insn = 384;
pub const x86_insn_X86_INS_PACKSSDW: x86_insn = 385;
pub const x86_insn_X86_INS_PACKSSWB: x86_insn = 386;
pub const x86_insn_X86_INS_PACKUSWB: x86_insn = 387;
pub const x86_insn_X86_INS_PADDB: x86_insn = 388;
pub const x86_insn_X86_INS_PADDD: x86_insn = 389;
pub const x86_insn_X86_INS_PADDQ: x86_insn = 390;
pub const x86_insn_X86_INS_PADDSB: x86_insn = 391;
pub const x86_insn_X86_INS_PADDSW: x86_insn = 392;
pub const x86_insn_X86_INS_PADDUSB: x86_insn = 393;
pub const x86_insn_X86_INS_PADDUSW: x86_insn = 394;
pub const x86_insn_X86_INS_PADDW: x86_insn = 395;
pub const x86_insn_X86_INS_PALIGNR: x86_insn = 396;
pub const x86_insn_X86_INS_PANDN: x86_insn = 397;
pub const x86_insn_X86_INS_PAND: x86_insn = 398;
pub const x86_insn_X86_INS_PAVGB: x86_insn = 399;
pub const x86_insn_X86_INS_PAVGW: x86_insn = 400;
pub const x86_insn_X86_INS_PCMPEQB: x86_insn = 401;
pub const x86_insn_X86_INS_PCMPEQD: x86_insn = 402;
pub const x86_insn_X86_INS_PCMPEQW: x86_insn = 403;
pub const x86_insn_X86_INS_PCMPGTB: x86_insn = 404;
pub const x86_insn_X86_INS_PCMPGTD: x86_insn = 405;
pub const x86_insn_X86_INS_PCMPGTW: x86_insn = 406;
pub const x86_insn_X86_INS_PEXTRW: x86_insn = 407;
pub const x86_insn_X86_INS_PHADDD: x86_insn = 408;
pub const x86_insn_X86_INS_PHADDSW: x86_insn = 409;
pub const x86_insn_X86_INS_PHADDW: x86_insn = 410;
pub const x86_insn_X86_INS_PHSUBD: x86_insn = 411;
pub const x86_insn_X86_INS_PHSUBSW: x86_insn = 412;
pub const x86_insn_X86_INS_PHSUBW: x86_insn = 413;
pub const x86_insn_X86_INS_PINSRW: x86_insn = 414;
pub const x86_insn_X86_INS_PMADDUBSW: x86_insn = 415;
pub const x86_insn_X86_INS_PMADDWD: x86_insn = 416;
pub const x86_insn_X86_INS_PMAXSW: x86_insn = 417;
pub const x86_insn_X86_INS_PMAXUB: x86_insn = 418;
pub const x86_insn_X86_INS_PMINSW: x86_insn = 419;
pub const x86_insn_X86_INS_PMINUB: x86_insn = 420;
pub const x86_insn_X86_INS_PMOVMSKB: x86_insn = 421;
pub const x86_insn_X86_INS_PMULHRSW: x86_insn = 422;
pub const x86_insn_X86_INS_PMULHUW: x86_insn = 423;
pub const x86_insn_X86_INS_PMULHW: x86_insn = 424;
pub const x86_insn_X86_INS_PMULLW: x86_insn = 425;
pub const x86_insn_X86_INS_PMULUDQ: x86_insn = 426;
pub const x86_insn_X86_INS_POR: x86_insn = 427;
pub const x86_insn_X86_INS_PSADBW: x86_insn = 428;
pub const x86_insn_X86_INS_PSHUFB: x86_insn = 429;
pub const x86_insn_X86_INS_PSHUFW: x86_insn = 430;
pub const x86_insn_X86_INS_PSIGNB: x86_insn = 431;
pub const x86_insn_X86_INS_PSIGND: x86_insn = 432;
pub const x86_insn_X86_INS_PSIGNW: x86_insn = 433;
pub const x86_insn_X86_INS_PSLLD: x86_insn = 434;
pub const x86_insn_X86_INS_PSLLQ: x86_insn = 435;
pub const x86_insn_X86_INS_PSLLW: x86_insn = 436;
pub const x86_insn_X86_INS_PSRAD: x86_insn = 437;
pub const x86_insn_X86_INS_PSRAW: x86_insn = 438;
pub const x86_insn_X86_INS_PSRLD: x86_insn = 439;
pub const x86_insn_X86_INS_PSRLQ: x86_insn = 440;
pub const x86_insn_X86_INS_PSRLW: x86_insn = 441;
pub const x86_insn_X86_INS_PSUBB: x86_insn = 442;
pub const x86_insn_X86_INS_PSUBD: x86_insn = 443;
pub const x86_insn_X86_INS_PSUBQ: x86_insn = 444;
pub const x86_insn_X86_INS_PSUBSB: x86_insn = 445;
pub const x86_insn_X86_INS_PSUBSW: x86_insn = 446;
pub const x86_insn_X86_INS_PSUBUSB: x86_insn = 447;
pub const x86_insn_X86_INS_PSUBUSW: x86_insn = 448;
pub const x86_insn_X86_INS_PSUBW: x86_insn = 449;
pub const x86_insn_X86_INS_PUNPCKHBW: x86_insn = 450;
pub const x86_insn_X86_INS_PUNPCKHDQ: x86_insn = 451;
pub const x86_insn_X86_INS_PUNPCKHWD: x86_insn = 452;
pub const x86_insn_X86_INS_PUNPCKLBW: x86_insn = 453;
pub const x86_insn_X86_INS_PUNPCKLDQ: x86_insn = 454;
pub const x86_insn_X86_INS_PUNPCKLWD: x86_insn = 455;
pub const x86_insn_X86_INS_PXOR: x86_insn = 456;
pub const x86_insn_X86_INS_MONITORX: x86_insn = 457;
pub const x86_insn_X86_INS_MONITOR: x86_insn = 458;
pub const x86_insn_X86_INS_MONTMUL: x86_insn = 459;
pub const x86_insn_X86_INS_MOV: x86_insn = 460;
pub const x86_insn_X86_INS_MOVABS: x86_insn = 461;
pub const x86_insn_X86_INS_MOVAPD: x86_insn = 462;
pub const x86_insn_X86_INS_MOVAPS: x86_insn = 463;
pub const x86_insn_X86_INS_MOVBE: x86_insn = 464;
pub const x86_insn_X86_INS_MOVDDUP: x86_insn = 465;
pub const x86_insn_X86_INS_MOVDIR64B: x86_insn = 466;
pub const x86_insn_X86_INS_MOVDIRI: x86_insn = 467;
pub const x86_insn_X86_INS_MOVDQA: x86_insn = 468;
pub const x86_insn_X86_INS_MOVDQU: x86_insn = 469;
pub const x86_insn_X86_INS_MOVHLPS: x86_insn = 470;
pub const x86_insn_X86_INS_MOVHPD: x86_insn = 471;
pub const x86_insn_X86_INS_MOVHPS: x86_insn = 472;
pub const x86_insn_X86_INS_MOVLHPS: x86_insn = 473;
pub const x86_insn_X86_INS_MOVLPD: x86_insn = 474;
pub const x86_insn_X86_INS_MOVLPS: x86_insn = 475;
pub const x86_insn_X86_INS_MOVMSKPD: x86_insn = 476;
pub const x86_insn_X86_INS_MOVMSKPS: x86_insn = 477;
pub const x86_insn_X86_INS_MOVNTDQA: x86_insn = 478;
pub const x86_insn_X86_INS_MOVNTDQ: x86_insn = 479;
pub const x86_insn_X86_INS_MOVNTI: x86_insn = 480;
pub const x86_insn_X86_INS_MOVNTPD: x86_insn = 481;
pub const x86_insn_X86_INS_MOVNTPS: x86_insn = 482;
pub const x86_insn_X86_INS_MOVNTSD: x86_insn = 483;
pub const x86_insn_X86_INS_MOVNTSS: x86_insn = 484;
pub const x86_insn_X86_INS_MOVSB: x86_insn = 485;
pub const x86_insn_X86_INS_MOVSD: x86_insn = 486;
pub const x86_insn_X86_INS_MOVSHDUP: x86_insn = 487;
pub const x86_insn_X86_INS_MOVSLDUP: x86_insn = 488;
pub const x86_insn_X86_INS_MOVSQ: x86_insn = 489;
pub const x86_insn_X86_INS_MOVSS: x86_insn = 490;
pub const x86_insn_X86_INS_MOVSW: x86_insn = 491;
pub const x86_insn_X86_INS_MOVSX: x86_insn = 492;
pub const x86_insn_X86_INS_MOVSXD: x86_insn = 493;
pub const x86_insn_X86_INS_MOVUPD: x86_insn = 494;
pub const x86_insn_X86_INS_MOVUPS: x86_insn = 495;
pub const x86_insn_X86_INS_MOVZX: x86_insn = 496;
pub const x86_insn_X86_INS_MPSADBW: x86_insn = 497;
pub const x86_insn_X86_INS_MUL: x86_insn = 498;
pub const x86_insn_X86_INS_MULPD: x86_insn = 499;
pub const x86_insn_X86_INS_MULPS: x86_insn = 500;
pub const x86_insn_X86_INS_MULSD: x86_insn = 501;
pub const x86_insn_X86_INS_MULSS: x86_insn = 502;
pub const x86_insn_X86_INS_MULX: x86_insn = 503;
pub const x86_insn_X86_INS_FMUL: x86_insn = 504;
pub const x86_insn_X86_INS_FIMUL: x86_insn = 505;
pub const x86_insn_X86_INS_FMULP: x86_insn = 506;
pub const x86_insn_X86_INS_MWAITX: x86_insn = 507;
pub const x86_insn_X86_INS_MWAIT: x86_insn = 508;
pub const x86_insn_X86_INS_NEG: x86_insn = 509;
pub const x86_insn_X86_INS_NOP: x86_insn = 510;
pub const x86_insn_X86_INS_NOT: x86_insn = 511;
pub const x86_insn_X86_INS_OR: x86_insn = 512;
pub const x86_insn_X86_INS_ORPD: x86_insn = 513;
pub const x86_insn_X86_INS_ORPS: x86_insn = 514;
pub const x86_insn_X86_INS_OUT: x86_insn = 515;
pub const x86_insn_X86_INS_OUTSB: x86_insn = 516;
pub const x86_insn_X86_INS_OUTSD: x86_insn = 517;
pub const x86_insn_X86_INS_OUTSW: x86_insn = 518;
pub const x86_insn_X86_INS_PACKUSDW: x86_insn = 519;
pub const x86_insn_X86_INS_PAUSE: x86_insn = 520;
pub const x86_insn_X86_INS_PAVGUSB: x86_insn = 521;
pub const x86_insn_X86_INS_PBLENDVB: x86_insn = 522;
pub const x86_insn_X86_INS_PBLENDW: x86_insn = 523;
pub const x86_insn_X86_INS_PCLMULQDQ: x86_insn = 524;
pub const x86_insn_X86_INS_PCMPEQQ: x86_insn = 525;
pub const x86_insn_X86_INS_PCMPESTRI: x86_insn = 526;
pub const x86_insn_X86_INS_PCMPESTRM: x86_insn = 527;
pub const x86_insn_X86_INS_PCMPGTQ: x86_insn = 528;
pub const x86_insn_X86_INS_PCMPISTRI: x86_insn = 529;
pub const x86_insn_X86_INS_PCMPISTRM: x86_insn = 530;
pub const x86_insn_X86_INS_PCONFIG: x86_insn = 531;
pub const x86_insn_X86_INS_PDEP: x86_insn = 532;
pub const x86_insn_X86_INS_PEXT: x86_insn = 533;
pub const x86_insn_X86_INS_PEXTRB: x86_insn = 534;
pub const x86_insn_X86_INS_PEXTRD: x86_insn = 535;
pub const x86_insn_X86_INS_PEXTRQ: x86_insn = 536;
pub const x86_insn_X86_INS_PF2ID: x86_insn = 537;
pub const x86_insn_X86_INS_PF2IW: x86_insn = 538;
pub const x86_insn_X86_INS_PFACC: x86_insn = 539;
pub const x86_insn_X86_INS_PFADD: x86_insn = 540;
pub const x86_insn_X86_INS_PFCMPEQ: x86_insn = 541;
pub const x86_insn_X86_INS_PFCMPGE: x86_insn = 542;
pub const x86_insn_X86_INS_PFCMPGT: x86_insn = 543;
pub const x86_insn_X86_INS_PFMAX: x86_insn = 544;
pub const x86_insn_X86_INS_PFMIN: x86_insn = 545;
pub const x86_insn_X86_INS_PFMUL: x86_insn = 546;
pub const x86_insn_X86_INS_PFNACC: x86_insn = 547;
pub const x86_insn_X86_INS_PFPNACC: x86_insn = 548;
pub const x86_insn_X86_INS_PFRCPIT1: x86_insn = 549;
pub const x86_insn_X86_INS_PFRCPIT2: x86_insn = 550;
pub const x86_insn_X86_INS_PFRCP: x86_insn = 551;
pub const x86_insn_X86_INS_PFRSQIT1: x86_insn = 552;
pub const x86_insn_X86_INS_PFRSQRT: x86_insn = 553;
pub const x86_insn_X86_INS_PFSUBR: x86_insn = 554;
pub const x86_insn_X86_INS_PFSUB: x86_insn = 555;
pub const x86_insn_X86_INS_PHMINPOSUW: x86_insn = 556;
pub const x86_insn_X86_INS_PI2FD: x86_insn = 557;
pub const x86_insn_X86_INS_PI2FW: x86_insn = 558;
pub const x86_insn_X86_INS_PINSRB: x86_insn = 559;
pub const x86_insn_X86_INS_PINSRD: x86_insn = 560;
pub const x86_insn_X86_INS_PINSRQ: x86_insn = 561;
pub const x86_insn_X86_INS_PMAXSB: x86_insn = 562;
pub const x86_insn_X86_INS_PMAXSD: x86_insn = 563;
pub const x86_insn_X86_INS_PMAXUD: x86_insn = 564;
pub const x86_insn_X86_INS_PMAXUW: x86_insn = 565;
pub const x86_insn_X86_INS_PMINSB: x86_insn = 566;
pub const x86_insn_X86_INS_PMINSD: x86_insn = 567;
pub const x86_insn_X86_INS_PMINUD: x86_insn = 568;
pub const x86_insn_X86_INS_PMINUW: x86_insn = 569;
pub const x86_insn_X86_INS_PMOVSXBD: x86_insn = 570;
pub const x86_insn_X86_INS_PMOVSXBQ: x86_insn = 571;
pub const x86_insn_X86_INS_PMOVSXBW: x86_insn = 572;
pub const x86_insn_X86_INS_PMOVSXDQ: x86_insn = 573;
pub const x86_insn_X86_INS_PMOVSXWD: x86_insn = 574;
pub const x86_insn_X86_INS_PMOVSXWQ: x86_insn = 575;
pub const x86_insn_X86_INS_PMOVZXBD: x86_insn = 576;
pub const x86_insn_X86_INS_PMOVZXBQ: x86_insn = 577;
pub const x86_insn_X86_INS_PMOVZXBW: x86_insn = 578;
pub const x86_insn_X86_INS_PMOVZXDQ: x86_insn = 579;
pub const x86_insn_X86_INS_PMOVZXWD: x86_insn = 580;
pub const x86_insn_X86_INS_PMOVZXWQ: x86_insn = 581;
pub const x86_insn_X86_INS_PMULDQ: x86_insn = 582;
pub const x86_insn_X86_INS_PMULHRW: x86_insn = 583;
pub const x86_insn_X86_INS_PMULLD: x86_insn = 584;
pub const x86_insn_X86_INS_POP: x86_insn = 585;
pub const x86_insn_X86_INS_POPAW: x86_insn = 586;
pub const x86_insn_X86_INS_POPAL: x86_insn = 587;
pub const x86_insn_X86_INS_POPCNT: x86_insn = 588;
pub const x86_insn_X86_INS_POPF: x86_insn = 589;
pub const x86_insn_X86_INS_POPFD: x86_insn = 590;
pub const x86_insn_X86_INS_POPFQ: x86_insn = 591;
pub const x86_insn_X86_INS_PREFETCH: x86_insn = 592;
pub const x86_insn_X86_INS_PREFETCHNTA: x86_insn = 593;
pub const x86_insn_X86_INS_PREFETCHT0: x86_insn = 594;
pub const x86_insn_X86_INS_PREFETCHT1: x86_insn = 595;
pub const x86_insn_X86_INS_PREFETCHT2: x86_insn = 596;
pub const x86_insn_X86_INS_PREFETCHW: x86_insn = 597;
pub const x86_insn_X86_INS_PREFETCHWT1: x86_insn = 598;
pub const x86_insn_X86_INS_PSHUFD: x86_insn = 599;
pub const x86_insn_X86_INS_PSHUFHW: x86_insn = 600;
pub const x86_insn_X86_INS_PSHUFLW: x86_insn = 601;
pub const x86_insn_X86_INS_PSLLDQ: x86_insn = 602;
pub const x86_insn_X86_INS_PSRLDQ: x86_insn = 603;
pub const x86_insn_X86_INS_PSWAPD: x86_insn = 604;
pub const x86_insn_X86_INS_PTEST: x86_insn = 605;
pub const x86_insn_X86_INS_PTWRITE: x86_insn = 606;
pub const x86_insn_X86_INS_PUNPCKHQDQ: x86_insn = 607;
pub const x86_insn_X86_INS_PUNPCKLQDQ: x86_insn = 608;
pub const x86_insn_X86_INS_PUSH: x86_insn = 609;
pub const x86_insn_X86_INS_PUSHAW: x86_insn = 610;
pub const x86_insn_X86_INS_PUSHAL: x86_insn = 611;
pub const x86_insn_X86_INS_PUSHF: x86_insn = 612;
pub const x86_insn_X86_INS_PUSHFD: x86_insn = 613;
pub const x86_insn_X86_INS_PUSHFQ: x86_insn = 614;
pub const x86_insn_X86_INS_RCL: x86_insn = 615;
pub const x86_insn_X86_INS_RCPPS: x86_insn = 616;
pub const x86_insn_X86_INS_RCPSS: x86_insn = 617;
pub const x86_insn_X86_INS_RCR: x86_insn = 618;
pub const x86_insn_X86_INS_RDFSBASE: x86_insn = 619;
pub const x86_insn_X86_INS_RDGSBASE: x86_insn = 620;
pub const x86_insn_X86_INS_RDMSR: x86_insn = 621;
pub const x86_insn_X86_INS_RDPID: x86_insn = 622;
pub const x86_insn_X86_INS_RDPKRU: x86_insn = 623;
pub const x86_insn_X86_INS_RDPMC: x86_insn = 624;
pub const x86_insn_X86_INS_RDRAND: x86_insn = 625;
pub const x86_insn_X86_INS_RDSEED: x86_insn = 626;
pub const x86_insn_X86_INS_RDSSPD: x86_insn = 627;
pub const x86_insn_X86_INS_RDSSPQ: x86_insn = 628;
pub const x86_insn_X86_INS_RDTSC: x86_insn = 629;
pub const x86_insn_X86_INS_RDTSCP: x86_insn = 630;
pub const x86_insn_X86_INS_REPNE: x86_insn = 631;
pub const x86_insn_X86_INS_REP: x86_insn = 632;
pub const x86_insn_X86_INS_RET: x86_insn = 633;
pub const x86_insn_X86_INS_REX64: x86_insn = 634;
pub const x86_insn_X86_INS_ROL: x86_insn = 635;
pub const x86_insn_X86_INS_ROR: x86_insn = 636;
pub const x86_insn_X86_INS_RORX: x86_insn = 637;
pub const x86_insn_X86_INS_ROUNDPD: x86_insn = 638;
pub const x86_insn_X86_INS_ROUNDPS: x86_insn = 639;
pub const x86_insn_X86_INS_ROUNDSD: x86_insn = 640;
pub const x86_insn_X86_INS_ROUNDSS: x86_insn = 641;
pub const x86_insn_X86_INS_RSM: x86_insn = 642;
pub const x86_insn_X86_INS_RSQRTPS: x86_insn = 643;
pub const x86_insn_X86_INS_RSQRTSS: x86_insn = 644;
pub const x86_insn_X86_INS_RSTORSSP: x86_insn = 645;
pub const x86_insn_X86_INS_SAHF: x86_insn = 646;
pub const x86_insn_X86_INS_SAL: x86_insn = 647;
pub const x86_insn_X86_INS_SALC: x86_insn = 648;
pub const x86_insn_X86_INS_SAR: x86_insn = 649;
pub const x86_insn_X86_INS_SARX: x86_insn = 650;
pub const x86_insn_X86_INS_SAVEPREVSSP: x86_insn = 651;
pub const x86_insn_X86_INS_SBB: x86_insn = 652;
pub const x86_insn_X86_INS_SCASB: x86_insn = 653;
pub const x86_insn_X86_INS_SCASD: x86_insn = 654;
pub const x86_insn_X86_INS_SCASQ: x86_insn = 655;
pub const x86_insn_X86_INS_SCASW: x86_insn = 656;
pub const x86_insn_X86_INS_SETAE: x86_insn = 657;
pub const x86_insn_X86_INS_SETA: x86_insn = 658;
pub const x86_insn_X86_INS_SETBE: x86_insn = 659;
pub const x86_insn_X86_INS_SETB: x86_insn = 660;
pub const x86_insn_X86_INS_SETE: x86_insn = 661;
pub const x86_insn_X86_INS_SETGE: x86_insn = 662;
pub const x86_insn_X86_INS_SETG: x86_insn = 663;
pub const x86_insn_X86_INS_SETLE: x86_insn = 664;
pub const x86_insn_X86_INS_SETL: x86_insn = 665;
pub const x86_insn_X86_INS_SETNE: x86_insn = 666;
pub const x86_insn_X86_INS_SETNO: x86_insn = 667;
pub const x86_insn_X86_INS_SETNP: x86_insn = 668;
pub const x86_insn_X86_INS_SETNS: x86_insn = 669;
pub const x86_insn_X86_INS_SETO: x86_insn = 670;
pub const x86_insn_X86_INS_SETP: x86_insn = 671;
pub const x86_insn_X86_INS_SETSSBSY: x86_insn = 672;
pub const x86_insn_X86_INS_SETS: x86_insn = 673;
pub const x86_insn_X86_INS_SFENCE: x86_insn = 674;
pub const x86_insn_X86_INS_SGDT: x86_insn = 675;
pub const x86_insn_X86_INS_SHA1MSG1: x86_insn = 676;
pub const x86_insn_X86_INS_SHA1MSG2: x86_insn = 677;
pub const x86_insn_X86_INS_SHA1NEXTE: x86_insn = 678;
pub const x86_insn_X86_INS_SHA1RNDS4: x86_insn = 679;
pub const x86_insn_X86_INS_SHA256MSG1: x86_insn = 680;
pub const x86_insn_X86_INS_SHA256MSG2: x86_insn = 681;
pub const x86_insn_X86_INS_SHA256RNDS2: x86_insn = 682;
pub const x86_insn_X86_INS_SHL: x86_insn = 683;
pub const x86_insn_X86_INS_SHLD: x86_insn = 684;
pub const x86_insn_X86_INS_SHLX: x86_insn = 685;
pub const x86_insn_X86_INS_SHR: x86_insn = 686;
pub const x86_insn_X86_INS_SHRD: x86_insn = 687;
pub const x86_insn_X86_INS_SHRX: x86_insn = 688;
pub const x86_insn_X86_INS_SHUFPD: x86_insn = 689;
pub const x86_insn_X86_INS_SHUFPS: x86_insn = 690;
pub const x86_insn_X86_INS_SIDT: x86_insn = 691;
pub const x86_insn_X86_INS_FSIN: x86_insn = 692;
pub const x86_insn_X86_INS_SKINIT: x86_insn = 693;
pub const x86_insn_X86_INS_SLDT: x86_insn = 694;
pub const x86_insn_X86_INS_SLWPCB: x86_insn = 695;
pub const x86_insn_X86_INS_SMSW: x86_insn = 696;
pub const x86_insn_X86_INS_SQRTPD: x86_insn = 697;
pub const x86_insn_X86_INS_SQRTPS: x86_insn = 698;
pub const x86_insn_X86_INS_SQRTSD: x86_insn = 699;
pub const x86_insn_X86_INS_SQRTSS: x86_insn = 700;
pub const x86_insn_X86_INS_FSQRT: x86_insn = 701;
pub const x86_insn_X86_INS_STAC: x86_insn = 702;
pub const x86_insn_X86_INS_STC: x86_insn = 703;
pub const x86_insn_X86_INS_STD: x86_insn = 704;
pub const x86_insn_X86_INS_STGI: x86_insn = 705;
pub const x86_insn_X86_INS_STI: x86_insn = 706;
pub const x86_insn_X86_INS_STMXCSR: x86_insn = 707;
pub const x86_insn_X86_INS_STOSB: x86_insn = 708;
pub const x86_insn_X86_INS_STOSD: x86_insn = 709;
pub const x86_insn_X86_INS_STOSQ: x86_insn = 710;
pub const x86_insn_X86_INS_STOSW: x86_insn = 711;
pub const x86_insn_X86_INS_STR: x86_insn = 712;
pub const x86_insn_X86_INS_FST: x86_insn = 713;
pub const x86_insn_X86_INS_FSTP: x86_insn = 714;
pub const x86_insn_X86_INS_SUB: x86_insn = 715;
pub const x86_insn_X86_INS_SUBPD: x86_insn = 716;
pub const x86_insn_X86_INS_SUBPS: x86_insn = 717;
pub const x86_insn_X86_INS_FSUBR: x86_insn = 718;
pub const x86_insn_X86_INS_FISUBR: x86_insn = 719;
pub const x86_insn_X86_INS_FSUBRP: x86_insn = 720;
pub const x86_insn_X86_INS_SUBSD: x86_insn = 721;
pub const x86_insn_X86_INS_SUBSS: x86_insn = 722;
pub const x86_insn_X86_INS_FSUB: x86_insn = 723;
pub const x86_insn_X86_INS_FISUB: x86_insn = 724;
pub const x86_insn_X86_INS_FSUBP: x86_insn = 725;
pub const x86_insn_X86_INS_SWAPGS: x86_insn = 726;
pub const x86_insn_X86_INS_SYSCALL: x86_insn = 727;
pub const x86_insn_X86_INS_SYSENTER: x86_insn = 728;
pub const x86_insn_X86_INS_SYSEXIT: x86_insn = 729;
pub const x86_insn_X86_INS_SYSEXITQ: x86_insn = 730;
pub const x86_insn_X86_INS_SYSRET: x86_insn = 731;
pub const x86_insn_X86_INS_SYSRETQ: x86_insn = 732;
pub const x86_insn_X86_INS_T1MSKC: x86_insn = 733;
pub const x86_insn_X86_INS_TEST: x86_insn = 734;
pub const x86_insn_X86_INS_TPAUSE: x86_insn = 735;
pub const x86_insn_X86_INS_FTST: x86_insn = 736;
pub const x86_insn_X86_INS_TZCNT: x86_insn = 737;
pub const x86_insn_X86_INS_TZMSK: x86_insn = 738;
pub const x86_insn_X86_INS_UCOMISD: x86_insn = 739;
pub const x86_insn_X86_INS_UCOMISS: x86_insn = 740;
pub const x86_insn_X86_INS_FUCOMPI: x86_insn = 741;
pub const x86_insn_X86_INS_FUCOMI: x86_insn = 742;
pub const x86_insn_X86_INS_FUCOMPP: x86_insn = 743;
pub const x86_insn_X86_INS_FUCOMP: x86_insn = 744;
pub const x86_insn_X86_INS_FUCOM: x86_insn = 745;
pub const x86_insn_X86_INS_UD0: x86_insn = 746;
pub const x86_insn_X86_INS_UD1: x86_insn = 747;
pub const x86_insn_X86_INS_UD2: x86_insn = 748;
pub const x86_insn_X86_INS_UMONITOR: x86_insn = 749;
pub const x86_insn_X86_INS_UMWAIT: x86_insn = 750;
pub const x86_insn_X86_INS_UNPCKHPD: x86_insn = 751;
pub const x86_insn_X86_INS_UNPCKHPS: x86_insn = 752;
pub const x86_insn_X86_INS_UNPCKLPD: x86_insn = 753;
pub const x86_insn_X86_INS_UNPCKLPS: x86_insn = 754;
pub const x86_insn_X86_INS_V4FMADDPS: x86_insn = 755;
pub const x86_insn_X86_INS_V4FMADDSS: x86_insn = 756;
pub const x86_insn_X86_INS_V4FNMADDPS: x86_insn = 757;
pub const x86_insn_X86_INS_V4FNMADDSS: x86_insn = 758;
pub const x86_insn_X86_INS_VADDPD: x86_insn = 759;
pub const x86_insn_X86_INS_VADDPS: x86_insn = 760;
pub const x86_insn_X86_INS_VADDSD: x86_insn = 761;
pub const x86_insn_X86_INS_VADDSS: x86_insn = 762;
pub const x86_insn_X86_INS_VADDSUBPD: x86_insn = 763;
pub const x86_insn_X86_INS_VADDSUBPS: x86_insn = 764;
pub const x86_insn_X86_INS_VAESDECLAST: x86_insn = 765;
pub const x86_insn_X86_INS_VAESDEC: x86_insn = 766;
pub const x86_insn_X86_INS_VAESENCLAST: x86_insn = 767;
pub const x86_insn_X86_INS_VAESENC: x86_insn = 768;
pub const x86_insn_X86_INS_VAESIMC: x86_insn = 769;
pub const x86_insn_X86_INS_VAESKEYGENASSIST: x86_insn = 770;
pub const x86_insn_X86_INS_VALIGND: x86_insn = 771;
pub const x86_insn_X86_INS_VALIGNQ: x86_insn = 772;
pub const x86_insn_X86_INS_VANDNPD: x86_insn = 773;
pub const x86_insn_X86_INS_VANDNPS: x86_insn = 774;
pub const x86_insn_X86_INS_VANDPD: x86_insn = 775;
pub const x86_insn_X86_INS_VANDPS: x86_insn = 776;
pub const x86_insn_X86_INS_VBLENDMPD: x86_insn = 777;
pub const x86_insn_X86_INS_VBLENDMPS: x86_insn = 778;
pub const x86_insn_X86_INS_VBLENDPD: x86_insn = 779;
pub const x86_insn_X86_INS_VBLENDPS: x86_insn = 780;
pub const x86_insn_X86_INS_VBLENDVPD: x86_insn = 781;
pub const x86_insn_X86_INS_VBLENDVPS: x86_insn = 782;
pub const x86_insn_X86_INS_VBROADCASTF128: x86_insn = 783;
pub const x86_insn_X86_INS_VBROADCASTF32X2: x86_insn = 784;
pub const x86_insn_X86_INS_VBROADCASTF32X4: x86_insn = 785;
pub const x86_insn_X86_INS_VBROADCASTF32X8: x86_insn = 786;
pub const x86_insn_X86_INS_VBROADCASTF64X2: x86_insn = 787;
pub const x86_insn_X86_INS_VBROADCASTF64X4: x86_insn = 788;
pub const x86_insn_X86_INS_VBROADCASTI128: x86_insn = 789;
pub const x86_insn_X86_INS_VBROADCASTI32X2: x86_insn = 790;
pub const x86_insn_X86_INS_VBROADCASTI32X4: x86_insn = 791;
pub const x86_insn_X86_INS_VBROADCASTI32X8: x86_insn = 792;
pub const x86_insn_X86_INS_VBROADCASTI64X2: x86_insn = 793;
pub const x86_insn_X86_INS_VBROADCASTI64X4: x86_insn = 794;
pub const x86_insn_X86_INS_VBROADCASTSD: x86_insn = 795;
pub const x86_insn_X86_INS_VBROADCASTSS: x86_insn = 796;
pub const x86_insn_X86_INS_VCMP: x86_insn = 797;
pub const x86_insn_X86_INS_VCMPPD: x86_insn = 798;
pub const x86_insn_X86_INS_VCMPPS: x86_insn = 799;
pub const x86_insn_X86_INS_VCMPSD: x86_insn = 800;
pub const x86_insn_X86_INS_VCMPSS: x86_insn = 801;
pub const x86_insn_X86_INS_VCOMISD: x86_insn = 802;
pub const x86_insn_X86_INS_VCOMISS: x86_insn = 803;
pub const x86_insn_X86_INS_VCOMPRESSPD: x86_insn = 804;
pub const x86_insn_X86_INS_VCOMPRESSPS: x86_insn = 805;
pub const x86_insn_X86_INS_VCVTDQ2PD: x86_insn = 806;
pub const x86_insn_X86_INS_VCVTDQ2PS: x86_insn = 807;
pub const x86_insn_X86_INS_VCVTPD2DQ: x86_insn = 808;
pub const x86_insn_X86_INS_VCVTPD2PS: x86_insn = 809;
pub const x86_insn_X86_INS_VCVTPD2QQ: x86_insn = 810;
pub const x86_insn_X86_INS_VCVTPD2UDQ: x86_insn = 811;
pub const x86_insn_X86_INS_VCVTPD2UQQ: x86_insn = 812;
pub const x86_insn_X86_INS_VCVTPH2PS: x86_insn = 813;
pub const x86_insn_X86_INS_VCVTPS2DQ: x86_insn = 814;
pub const x86_insn_X86_INS_VCVTPS2PD: x86_insn = 815;
pub const x86_insn_X86_INS_VCVTPS2PH: x86_insn = 816;
pub const x86_insn_X86_INS_VCVTPS2QQ: x86_insn = 817;
pub const x86_insn_X86_INS_VCVTPS2UDQ: x86_insn = 818;
pub const x86_insn_X86_INS_VCVTPS2UQQ: x86_insn = 819;
pub const x86_insn_X86_INS_VCVTQQ2PD: x86_insn = 820;
pub const x86_insn_X86_INS_VCVTQQ2PS: x86_insn = 821;
pub const x86_insn_X86_INS_VCVTSD2SI: x86_insn = 822;
pub const x86_insn_X86_INS_VCVTSD2SS: x86_insn = 823;
pub const x86_insn_X86_INS_VCVTSD2USI: x86_insn = 824;
pub const x86_insn_X86_INS_VCVTSI2SD: x86_insn = 825;
pub const x86_insn_X86_INS_VCVTSI2SS: x86_insn = 826;
pub const x86_insn_X86_INS_VCVTSS2SD: x86_insn = 827;
pub const x86_insn_X86_INS_VCVTSS2SI: x86_insn = 828;
pub const x86_insn_X86_INS_VCVTSS2USI: x86_insn = 829;
pub const x86_insn_X86_INS_VCVTTPD2DQ: x86_insn = 830;
pub const x86_insn_X86_INS_VCVTTPD2QQ: x86_insn = 831;
pub const x86_insn_X86_INS_VCVTTPD2UDQ: x86_insn = 832;
pub const x86_insn_X86_INS_VCVTTPD2UQQ: x86_insn = 833;
pub const x86_insn_X86_INS_VCVTTPS2DQ: x86_insn = 834;
pub const x86_insn_X86_INS_VCVTTPS2QQ: x86_insn = 835;
pub const x86_insn_X86_INS_VCVTTPS2UDQ: x86_insn = 836;
pub const x86_insn_X86_INS_VCVTTPS2UQQ: x86_insn = 837;
pub const x86_insn_X86_INS_VCVTTSD2SI: x86_insn = 838;
pub const x86_insn_X86_INS_VCVTTSD2USI: x86_insn = 839;
pub const x86_insn_X86_INS_VCVTTSS2SI: x86_insn = 840;
pub const x86_insn_X86_INS_VCVTTSS2USI: x86_insn = 841;
pub const x86_insn_X86_INS_VCVTUDQ2PD: x86_insn = 842;
pub const x86_insn_X86_INS_VCVTUDQ2PS: x86_insn = 843;
pub const x86_insn_X86_INS_VCVTUQQ2PD: x86_insn = 844;
pub const x86_insn_X86_INS_VCVTUQQ2PS: x86_insn = 845;
pub const x86_insn_X86_INS_VCVTUSI2SD: x86_insn = 846;
pub const x86_insn_X86_INS_VCVTUSI2SS: x86_insn = 847;
pub const x86_insn_X86_INS_VDBPSADBW: x86_insn = 848;
pub const x86_insn_X86_INS_VDIVPD: x86_insn = 849;
pub const x86_insn_X86_INS_VDIVPS: x86_insn = 850;
pub const x86_insn_X86_INS_VDIVSD: x86_insn = 851;
pub const x86_insn_X86_INS_VDIVSS: x86_insn = 852;
pub const x86_insn_X86_INS_VDPPD: x86_insn = 853;
pub const x86_insn_X86_INS_VDPPS: x86_insn = 854;
pub const x86_insn_X86_INS_VERR: x86_insn = 855;
pub const x86_insn_X86_INS_VERW: x86_insn = 856;
pub const x86_insn_X86_INS_VEXP2PD: x86_insn = 857;
pub const x86_insn_X86_INS_VEXP2PS: x86_insn = 858;
pub const x86_insn_X86_INS_VEXPANDPD: x86_insn = 859;
pub const x86_insn_X86_INS_VEXPANDPS: x86_insn = 860;
pub const x86_insn_X86_INS_VEXTRACTF128: x86_insn = 861;
pub const x86_insn_X86_INS_VEXTRACTF32X4: x86_insn = 862;
pub const x86_insn_X86_INS_VEXTRACTF32X8: x86_insn = 863;
pub const x86_insn_X86_INS_VEXTRACTF64X2: x86_insn = 864;
pub const x86_insn_X86_INS_VEXTRACTF64X4: x86_insn = 865;
pub const x86_insn_X86_INS_VEXTRACTI128: x86_insn = 866;
pub const x86_insn_X86_INS_VEXTRACTI32X4: x86_insn = 867;
pub const x86_insn_X86_INS_VEXTRACTI32X8: x86_insn = 868;
pub const x86_insn_X86_INS_VEXTRACTI64X2: x86_insn = 869;
pub const x86_insn_X86_INS_VEXTRACTI64X4: x86_insn = 870;
pub const x86_insn_X86_INS_VEXTRACTPS: x86_insn = 871;
pub const x86_insn_X86_INS_VFIXUPIMMPD: x86_insn = 872;
pub const x86_insn_X86_INS_VFIXUPIMMPS: x86_insn = 873;
pub const x86_insn_X86_INS_VFIXUPIMMSD: x86_insn = 874;
pub const x86_insn_X86_INS_VFIXUPIMMSS: x86_insn = 875;
pub const x86_insn_X86_INS_VFMADD132PD: x86_insn = 876;
pub const x86_insn_X86_INS_VFMADD132PS: x86_insn = 877;
pub const x86_insn_X86_INS_VFMADD132SD: x86_insn = 878;
pub const x86_insn_X86_INS_VFMADD132SS: x86_insn = 879;
pub const x86_insn_X86_INS_VFMADD213PD: x86_insn = 880;
pub const x86_insn_X86_INS_VFMADD213PS: x86_insn = 881;
pub const x86_insn_X86_INS_VFMADD213SD: x86_insn = 882;
pub const x86_insn_X86_INS_VFMADD213SS: x86_insn = 883;
pub const x86_insn_X86_INS_VFMADD231PD: x86_insn = 884;
pub const x86_insn_X86_INS_VFMADD231PS: x86_insn = 885;
pub const x86_insn_X86_INS_VFMADD231SD: x86_insn = 886;
pub const x86_insn_X86_INS_VFMADD231SS: x86_insn = 887;
pub const x86_insn_X86_INS_VFMADDPD: x86_insn = 888;
pub const x86_insn_X86_INS_VFMADDPS: x86_insn = 889;
pub const x86_insn_X86_INS_VFMADDSD: x86_insn = 890;
pub const x86_insn_X86_INS_VFMADDSS: x86_insn = 891;
pub const x86_insn_X86_INS_VFMADDSUB132PD: x86_insn = 892;
pub const x86_insn_X86_INS_VFMADDSUB132PS: x86_insn = 893;
pub const x86_insn_X86_INS_VFMADDSUB213PD: x86_insn = 894;
pub const x86_insn_X86_INS_VFMADDSUB213PS: x86_insn = 895;
pub const x86_insn_X86_INS_VFMADDSUB231PD: x86_insn = 896;
pub const x86_insn_X86_INS_VFMADDSUB231PS: x86_insn = 897;
pub const x86_insn_X86_INS_VFMADDSUBPD: x86_insn = 898;
pub const x86_insn_X86_INS_VFMADDSUBPS: x86_insn = 899;
pub const x86_insn_X86_INS_VFMSUB132PD: x86_insn = 900;
pub const x86_insn_X86_INS_VFMSUB132PS: x86_insn = 901;
pub const x86_insn_X86_INS_VFMSUB132SD: x86_insn = 902;
pub const x86_insn_X86_INS_VFMSUB132SS: x86_insn = 903;
pub const x86_insn_X86_INS_VFMSUB213PD: x86_insn = 904;
pub const x86_insn_X86_INS_VFMSUB213PS: x86_insn = 905;
pub const x86_insn_X86_INS_VFMSUB213SD: x86_insn = 906;
pub const x86_insn_X86_INS_VFMSUB213SS: x86_insn = 907;
pub const x86_insn_X86_INS_VFMSUB231PD: x86_insn = 908;
pub const x86_insn_X86_INS_VFMSUB231PS: x86_insn = 909;
pub const x86_insn_X86_INS_VFMSUB231SD: x86_insn = 910;
pub const x86_insn_X86_INS_VFMSUB231SS: x86_insn = 911;
pub const x86_insn_X86_INS_VFMSUBADD132PD: x86_insn = 912;
pub const x86_insn_X86_INS_VFMSUBADD132PS: x86_insn = 913;
pub const x86_insn_X86_INS_VFMSUBADD213PD: x86_insn = 914;
pub const x86_insn_X86_INS_VFMSUBADD213PS: x86_insn = 915;
pub const x86_insn_X86_INS_VFMSUBADD231PD: x86_insn = 916;
pub const x86_insn_X86_INS_VFMSUBADD231PS: x86_insn = 917;
pub const x86_insn_X86_INS_VFMSUBADDPD: x86_insn = 918;
pub const x86_insn_X86_INS_VFMSUBADDPS: x86_insn = 919;
pub const x86_insn_X86_INS_VFMSUBPD: x86_insn = 920;
pub const x86_insn_X86_INS_VFMSUBPS: x86_insn = 921;
pub const x86_insn_X86_INS_VFMSUBSD: x86_insn = 922;
pub const x86_insn_X86_INS_VFMSUBSS: x86_insn = 923;
pub const x86_insn_X86_INS_VFNMADD132PD: x86_insn = 924;
pub const x86_insn_X86_INS_VFNMADD132PS: x86_insn = 925;
pub const x86_insn_X86_INS_VFNMADD132SD: x86_insn = 926;
pub const x86_insn_X86_INS_VFNMADD132SS: x86_insn = 927;
pub const x86_insn_X86_INS_VFNMADD213PD: x86_insn = 928;
pub const x86_insn_X86_INS_VFNMADD213PS: x86_insn = 929;
pub const x86_insn_X86_INS_VFNMADD213SD: x86_insn = 930;
pub const x86_insn_X86_INS_VFNMADD213SS: x86_insn = 931;
pub const x86_insn_X86_INS_VFNMADD231PD: x86_insn = 932;
pub const x86_insn_X86_INS_VFNMADD231PS: x86_insn = 933;
pub const x86_insn_X86_INS_VFNMADD231SD: x86_insn = 934;
pub const x86_insn_X86_INS_VFNMADD231SS: x86_insn = 935;
pub const x86_insn_X86_INS_VFNMADDPD: x86_insn = 936;
pub const x86_insn_X86_INS_VFNMADDPS: x86_insn = 937;
pub const x86_insn_X86_INS_VFNMADDSD: x86_insn = 938;
pub const x86_insn_X86_INS_VFNMADDSS: x86_insn = 939;
pub const x86_insn_X86_INS_VFNMSUB132PD: x86_insn = 940;
pub const x86_insn_X86_INS_VFNMSUB132PS: x86_insn = 941;
pub const x86_insn_X86_INS_VFNMSUB132SD: x86_insn = 942;
pub const x86_insn_X86_INS_VFNMSUB132SS: x86_insn = 943;
pub const x86_insn_X86_INS_VFNMSUB213PD: x86_insn = 944;
pub const x86_insn_X86_INS_VFNMSUB213PS: x86_insn = 945;
pub const x86_insn_X86_INS_VFNMSUB213SD: x86_insn = 946;
pub const x86_insn_X86_INS_VFNMSUB213SS: x86_insn = 947;
pub const x86_insn_X86_INS_VFNMSUB231PD: x86_insn = 948;
pub const x86_insn_X86_INS_VFNMSUB231PS: x86_insn = 949;
pub const x86_insn_X86_INS_VFNMSUB231SD: x86_insn = 950;
pub const x86_insn_X86_INS_VFNMSUB231SS: x86_insn = 951;
pub const x86_insn_X86_INS_VFNMSUBPD: x86_insn = 952;
pub const x86_insn_X86_INS_VFNMSUBPS: x86_insn = 953;
pub const x86_insn_X86_INS_VFNMSUBSD: x86_insn = 954;
pub const x86_insn_X86_INS_VFNMSUBSS: x86_insn = 955;
pub const x86_insn_X86_INS_VFPCLASSPD: x86_insn = 956;
pub const x86_insn_X86_INS_VFPCLASSPS: x86_insn = 957;
pub const x86_insn_X86_INS_VFPCLASSSD: x86_insn = 958;
pub const x86_insn_X86_INS_VFPCLASSSS: x86_insn = 959;
pub const x86_insn_X86_INS_VFRCZPD: x86_insn = 960;
pub const x86_insn_X86_INS_VFRCZPS: x86_insn = 961;
pub const x86_insn_X86_INS_VFRCZSD: x86_insn = 962;
pub const x86_insn_X86_INS_VFRCZSS: x86_insn = 963;
pub const x86_insn_X86_INS_VGATHERDPD: x86_insn = 964;
pub const x86_insn_X86_INS_VGATHERDPS: x86_insn = 965;
pub const x86_insn_X86_INS_VGATHERPF0DPD: x86_insn = 966;
pub const x86_insn_X86_INS_VGATHERPF0DPS: x86_insn = 967;
pub const x86_insn_X86_INS_VGATHERPF0QPD: x86_insn = 968;
pub const x86_insn_X86_INS_VGATHERPF0QPS: x86_insn = 969;
pub const x86_insn_X86_INS_VGATHERPF1DPD: x86_insn = 970;
pub const x86_insn_X86_INS_VGATHERPF1DPS: x86_insn = 971;
pub const x86_insn_X86_INS_VGATHERPF1QPD: x86_insn = 972;
pub const x86_insn_X86_INS_VGATHERPF1QPS: x86_insn = 973;
pub const x86_insn_X86_INS_VGATHERQPD: x86_insn = 974;
pub const x86_insn_X86_INS_VGATHERQPS: x86_insn = 975;
pub const x86_insn_X86_INS_VGETEXPPD: x86_insn = 976;
pub const x86_insn_X86_INS_VGETEXPPS: x86_insn = 977;
pub const x86_insn_X86_INS_VGETEXPSD: x86_insn = 978;
pub const x86_insn_X86_INS_VGETEXPSS: x86_insn = 979;
pub const x86_insn_X86_INS_VGETMANTPD: x86_insn = 980;
pub const x86_insn_X86_INS_VGETMANTPS: x86_insn = 981;
pub const x86_insn_X86_INS_VGETMANTSD: x86_insn = 982;
pub const x86_insn_X86_INS_VGETMANTSS: x86_insn = 983;
pub const x86_insn_X86_INS_VGF2P8AFFINEINVQB: x86_insn = 984;
pub const x86_insn_X86_INS_VGF2P8AFFINEQB: x86_insn = 985;
pub const x86_insn_X86_INS_VGF2P8MULB: x86_insn = 986;
pub const x86_insn_X86_INS_VHADDPD: x86_insn = 987;
pub const x86_insn_X86_INS_VHADDPS: x86_insn = 988;
pub const x86_insn_X86_INS_VHSUBPD: x86_insn = 989;
pub const x86_insn_X86_INS_VHSUBPS: x86_insn = 990;
pub const x86_insn_X86_INS_VINSERTF128: x86_insn = 991;
pub const x86_insn_X86_INS_VINSERTF32X4: x86_insn = 992;
pub const x86_insn_X86_INS_VINSERTF32X8: x86_insn = 993;
pub const x86_insn_X86_INS_VINSERTF64X2: x86_insn = 994;
pub const x86_insn_X86_INS_VINSERTF64X4: x86_insn = 995;
pub const x86_insn_X86_INS_VINSERTI128: x86_insn = 996;
pub const x86_insn_X86_INS_VINSERTI32X4: x86_insn = 997;
pub const x86_insn_X86_INS_VINSERTI32X8: x86_insn = 998;
pub const x86_insn_X86_INS_VINSERTI64X2: x86_insn = 999;
pub const x86_insn_X86_INS_VINSERTI64X4: x86_insn = 1000;
pub const x86_insn_X86_INS_VINSERTPS: x86_insn = 1001;
pub const x86_insn_X86_INS_VLDDQU: x86_insn = 1002;
pub const x86_insn_X86_INS_VLDMXCSR: x86_insn = 1003;
pub const x86_insn_X86_INS_VMASKMOVDQU: x86_insn = 1004;
pub const x86_insn_X86_INS_VMASKMOVPD: x86_insn = 1005;
pub const x86_insn_X86_INS_VMASKMOVPS: x86_insn = 1006;
pub const x86_insn_X86_INS_VMAXPD: x86_insn = 1007;
pub const x86_insn_X86_INS_VMAXPS: x86_insn = 1008;
pub const x86_insn_X86_INS_VMAXSD: x86_insn = 1009;
pub const x86_insn_X86_INS_VMAXSS: x86_insn = 1010;
pub const x86_insn_X86_INS_VMCALL: x86_insn = 1011;
pub const x86_insn_X86_INS_VMCLEAR: x86_insn = 1012;
pub const x86_insn_X86_INS_VMFUNC: x86_insn = 1013;
pub const x86_insn_X86_INS_VMINPD: x86_insn = 1014;
pub const x86_insn_X86_INS_VMINPS: x86_insn = 1015;
pub const x86_insn_X86_INS_VMINSD: x86_insn = 1016;
pub const x86_insn_X86_INS_VMINSS: x86_insn = 1017;
pub const x86_insn_X86_INS_VMLAUNCH: x86_insn = 1018;
pub const x86_insn_X86_INS_VMLOAD: x86_insn = 1019;
pub const x86_insn_X86_INS_VMMCALL: x86_insn = 1020;
pub const x86_insn_X86_INS_VMOVQ: x86_insn = 1021;
pub const x86_insn_X86_INS_VMOVAPD: x86_insn = 1022;
pub const x86_insn_X86_INS_VMOVAPS: x86_insn = 1023;
pub const x86_insn_X86_INS_VMOVDDUP: x86_insn = 1024;
pub const x86_insn_X86_INS_VMOVD: x86_insn = 1025;
pub const x86_insn_X86_INS_VMOVDQA32: x86_insn = 1026;
pub const x86_insn_X86_INS_VMOVDQA64: x86_insn = 1027;
pub const x86_insn_X86_INS_VMOVDQA: x86_insn = 1028;
pub const x86_insn_X86_INS_VMOVDQU16: x86_insn = 1029;
pub const x86_insn_X86_INS_VMOVDQU32: x86_insn = 1030;
pub const x86_insn_X86_INS_VMOVDQU64: x86_insn = 1031;
pub const x86_insn_X86_INS_VMOVDQU8: x86_insn = 1032;
pub const x86_insn_X86_INS_VMOVDQU: x86_insn = 1033;
pub const x86_insn_X86_INS_VMOVHLPS: x86_insn = 1034;
pub const x86_insn_X86_INS_VMOVHPD: x86_insn = 1035;
pub const x86_insn_X86_INS_VMOVHPS: x86_insn = 1036;
pub const x86_insn_X86_INS_VMOVLHPS: x86_insn = 1037;
pub const x86_insn_X86_INS_VMOVLPD: x86_insn = 1038;
pub const x86_insn_X86_INS_VMOVLPS: x86_insn = 1039;
pub const x86_insn_X86_INS_VMOVMSKPD: x86_insn = 1040;
pub const x86_insn_X86_INS_VMOVMSKPS: x86_insn = 1041;
pub const x86_insn_X86_INS_VMOVNTDQA: x86_insn = 1042;
pub const x86_insn_X86_INS_VMOVNTDQ: x86_insn = 1043;
pub const x86_insn_X86_INS_VMOVNTPD: x86_insn = 1044;
pub const x86_insn_X86_INS_VMOVNTPS: x86_insn = 1045;
pub const x86_insn_X86_INS_VMOVSD: x86_insn = 1046;
pub const x86_insn_X86_INS_VMOVSHDUP: x86_insn = 1047;
pub const x86_insn_X86_INS_VMOVSLDUP: x86_insn = 1048;
pub const x86_insn_X86_INS_VMOVSS: x86_insn = 1049;
pub const x86_insn_X86_INS_VMOVUPD: x86_insn = 1050;
pub const x86_insn_X86_INS_VMOVUPS: x86_insn = 1051;
pub const x86_insn_X86_INS_VMPSADBW: x86_insn = 1052;
pub const x86_insn_X86_INS_VMPTRLD: x86_insn = 1053;
pub const x86_insn_X86_INS_VMPTRST: x86_insn = 1054;
pub const x86_insn_X86_INS_VMREAD: x86_insn = 1055;
pub const x86_insn_X86_INS_VMRESUME: x86_insn = 1056;
pub const x86_insn_X86_INS_VMRUN: x86_insn = 1057;
pub const x86_insn_X86_INS_VMSAVE: x86_insn = 1058;
pub const x86_insn_X86_INS_VMULPD: x86_insn = 1059;
pub const x86_insn_X86_INS_VMULPS: x86_insn = 1060;
pub const x86_insn_X86_INS_VMULSD: x86_insn = 1061;
pub const x86_insn_X86_INS_VMULSS: x86_insn = 1062;
pub const x86_insn_X86_INS_VMWRITE: x86_insn = 1063;
pub const x86_insn_X86_INS_VMXOFF: x86_insn = 1064;
pub const x86_insn_X86_INS_VMXON: x86_insn = 1065;
pub const x86_insn_X86_INS_VORPD: x86_insn = 1066;
pub const x86_insn_X86_INS_VORPS: x86_insn = 1067;
pub const x86_insn_X86_INS_VP4DPWSSDS: x86_insn = 1068;
pub const x86_insn_X86_INS_VP4DPWSSD: x86_insn = 1069;
pub const x86_insn_X86_INS_VPABSB: x86_insn = 1070;
pub const x86_insn_X86_INS_VPABSD: x86_insn = 1071;
pub const x86_insn_X86_INS_VPABSQ: x86_insn = 1072;
pub const x86_insn_X86_INS_VPABSW: x86_insn = 1073;
pub const x86_insn_X86_INS_VPACKSSDW: x86_insn = 1074;
pub const x86_insn_X86_INS_VPACKSSWB: x86_insn = 1075;
pub const x86_insn_X86_INS_VPACKUSDW: x86_insn = 1076;
pub const x86_insn_X86_INS_VPACKUSWB: x86_insn = 1077;
pub const x86_insn_X86_INS_VPADDB: x86_insn = 1078;
pub const x86_insn_X86_INS_VPADDD: x86_insn = 1079;
pub const x86_insn_X86_INS_VPADDQ: x86_insn = 1080;
pub const x86_insn_X86_INS_VPADDSB: x86_insn = 1081;
pub const x86_insn_X86_INS_VPADDSW: x86_insn = 1082;
pub const x86_insn_X86_INS_VPADDUSB: x86_insn = 1083;
pub const x86_insn_X86_INS_VPADDUSW: x86_insn = 1084;
pub const x86_insn_X86_INS_VPADDW: x86_insn = 1085;
pub const x86_insn_X86_INS_VPALIGNR: x86_insn = 1086;
pub const x86_insn_X86_INS_VPANDD: x86_insn = 1087;
pub const x86_insn_X86_INS_VPANDND: x86_insn = 1088;
pub const x86_insn_X86_INS_VPANDNQ: x86_insn = 1089;
pub const x86_insn_X86_INS_VPANDN: x86_insn = 1090;
pub const x86_insn_X86_INS_VPANDQ: x86_insn = 1091;
pub const x86_insn_X86_INS_VPAND: x86_insn = 1092;
pub const x86_insn_X86_INS_VPAVGB: x86_insn = 1093;
pub const x86_insn_X86_INS_VPAVGW: x86_insn = 1094;
pub const x86_insn_X86_INS_VPBLENDD: x86_insn = 1095;
pub const x86_insn_X86_INS_VPBLENDMB: x86_insn = 1096;
pub const x86_insn_X86_INS_VPBLENDMD: x86_insn = 1097;
pub const x86_insn_X86_INS_VPBLENDMQ: x86_insn = 1098;
pub const x86_insn_X86_INS_VPBLENDMW: x86_insn = 1099;
pub const x86_insn_X86_INS_VPBLENDVB: x86_insn = 1100;
pub const x86_insn_X86_INS_VPBLENDW: x86_insn = 1101;
pub const x86_insn_X86_INS_VPBROADCASTB: x86_insn = 1102;
pub const x86_insn_X86_INS_VPBROADCASTD: x86_insn = 1103;
pub const x86_insn_X86_INS_VPBROADCASTMB2Q: x86_insn = 1104;
pub const x86_insn_X86_INS_VPBROADCASTMW2D: x86_insn = 1105;
pub const x86_insn_X86_INS_VPBROADCASTQ: x86_insn = 1106;
pub const x86_insn_X86_INS_VPBROADCASTW: x86_insn = 1107;
pub const x86_insn_X86_INS_VPCLMULQDQ: x86_insn = 1108;
pub const x86_insn_X86_INS_VPCMOV: x86_insn = 1109;
pub const x86_insn_X86_INS_VPCMP: x86_insn = 1110;
pub const x86_insn_X86_INS_VPCMPB: x86_insn = 1111;
pub const x86_insn_X86_INS_VPCMPD: x86_insn = 1112;
pub const x86_insn_X86_INS_VPCMPEQB: x86_insn = 1113;
pub const x86_insn_X86_INS_VPCMPEQD: x86_insn = 1114;
pub const x86_insn_X86_INS_VPCMPEQQ: x86_insn = 1115;
pub const x86_insn_X86_INS_VPCMPEQW: x86_insn = 1116;
pub const x86_insn_X86_INS_VPCMPESTRI: x86_insn = 1117;
pub const x86_insn_X86_INS_VPCMPESTRM: x86_insn = 1118;
pub const x86_insn_X86_INS_VPCMPGTB: x86_insn = 1119;
pub const x86_insn_X86_INS_VPCMPGTD: x86_insn = 1120;
pub const x86_insn_X86_INS_VPCMPGTQ: x86_insn = 1121;
pub const x86_insn_X86_INS_VPCMPGTW: x86_insn = 1122;
pub const x86_insn_X86_INS_VPCMPISTRI: x86_insn = 1123;
pub const x86_insn_X86_INS_VPCMPISTRM: x86_insn = 1124;
pub const x86_insn_X86_INS_VPCMPQ: x86_insn = 1125;
pub const x86_insn_X86_INS_VPCMPUB: x86_insn = 1126;
pub const x86_insn_X86_INS_VPCMPUD: x86_insn = 1127;
pub const x86_insn_X86_INS_VPCMPUQ: x86_insn = 1128;
pub const x86_insn_X86_INS_VPCMPUW: x86_insn = 1129;
pub const x86_insn_X86_INS_VPCMPW: x86_insn = 1130;
pub const x86_insn_X86_INS_VPCOM: x86_insn = 1131;
pub const x86_insn_X86_INS_VPCOMB: x86_insn = 1132;
pub const x86_insn_X86_INS_VPCOMD: x86_insn = 1133;
pub const x86_insn_X86_INS_VPCOMPRESSB: x86_insn = 1134;
pub const x86_insn_X86_INS_VPCOMPRESSD: x86_insn = 1135;
pub const x86_insn_X86_INS_VPCOMPRESSQ: x86_insn = 1136;
pub const x86_insn_X86_INS_VPCOMPRESSW: x86_insn = 1137;
pub const x86_insn_X86_INS_VPCOMQ: x86_insn = 1138;
pub const x86_insn_X86_INS_VPCOMUB: x86_insn = 1139;
pub const x86_insn_X86_INS_VPCOMUD: x86_insn = 1140;
pub const x86_insn_X86_INS_VPCOMUQ: x86_insn = 1141;
pub const x86_insn_X86_INS_VPCOMUW: x86_insn = 1142;
pub const x86_insn_X86_INS_VPCOMW: x86_insn = 1143;
pub const x86_insn_X86_INS_VPCONFLICTD: x86_insn = 1144;
pub const x86_insn_X86_INS_VPCONFLICTQ: x86_insn = 1145;
pub const x86_insn_X86_INS_VPDPBUSDS: x86_insn = 1146;
pub const x86_insn_X86_INS_VPDPBUSD: x86_insn = 1147;
pub const x86_insn_X86_INS_VPDPWSSDS: x86_insn = 1148;
pub const x86_insn_X86_INS_VPDPWSSD: x86_insn = 1149;
pub const x86_insn_X86_INS_VPERM2F128: x86_insn = 1150;
pub const x86_insn_X86_INS_VPERM2I128: x86_insn = 1151;
pub const x86_insn_X86_INS_VPERMB: x86_insn = 1152;
pub const x86_insn_X86_INS_VPERMD: x86_insn = 1153;
pub const x86_insn_X86_INS_VPERMI2B: x86_insn = 1154;
pub const x86_insn_X86_INS_VPERMI2D: x86_insn = 1155;
pub const x86_insn_X86_INS_VPERMI2PD: x86_insn = 1156;
pub const x86_insn_X86_INS_VPERMI2PS: x86_insn = 1157;
pub const x86_insn_X86_INS_VPERMI2Q: x86_insn = 1158;
pub const x86_insn_X86_INS_VPERMI2W: x86_insn = 1159;
pub const x86_insn_X86_INS_VPERMIL2PD: x86_insn = 1160;
pub const x86_insn_X86_INS_VPERMILPD: x86_insn = 1161;
pub const x86_insn_X86_INS_VPERMIL2PS: x86_insn = 1162;
pub const x86_insn_X86_INS_VPERMILPS: x86_insn = 1163;
pub const x86_insn_X86_INS_VPERMPD: x86_insn = 1164;
pub const x86_insn_X86_INS_VPERMPS: x86_insn = 1165;
pub const x86_insn_X86_INS_VPERMQ: x86_insn = 1166;
pub const x86_insn_X86_INS_VPERMT2B: x86_insn = 1167;
pub const x86_insn_X86_INS_VPERMT2D: x86_insn = 1168;
pub const x86_insn_X86_INS_VPERMT2PD: x86_insn = 1169;
pub const x86_insn_X86_INS_VPERMT2PS: x86_insn = 1170;
pub const x86_insn_X86_INS_VPERMT2Q: x86_insn = 1171;
pub const x86_insn_X86_INS_VPERMT2W: x86_insn = 1172;
pub const x86_insn_X86_INS_VPERMW: x86_insn = 1173;
pub const x86_insn_X86_INS_VPEXPANDB: x86_insn = 1174;
pub const x86_insn_X86_INS_VPEXPANDD: x86_insn = 1175;
pub const x86_insn_X86_INS_VPEXPANDQ: x86_insn = 1176;
pub const x86_insn_X86_INS_VPEXPANDW: x86_insn = 1177;
pub const x86_insn_X86_INS_VPEXTRB: x86_insn = 1178;
pub const x86_insn_X86_INS_VPEXTRD: x86_insn = 1179;
pub const x86_insn_X86_INS_VPEXTRQ: x86_insn = 1180;
pub const x86_insn_X86_INS_VPEXTRW: x86_insn = 1181;
pub const x86_insn_X86_INS_VPGATHERDD: x86_insn = 1182;
pub const x86_insn_X86_INS_VPGATHERDQ: x86_insn = 1183;
pub const x86_insn_X86_INS_VPGATHERQD: x86_insn = 1184;
pub const x86_insn_X86_INS_VPGATHERQQ: x86_insn = 1185;
pub const x86_insn_X86_INS_VPHADDBD: x86_insn = 1186;
pub const x86_insn_X86_INS_VPHADDBQ: x86_insn = 1187;
pub const x86_insn_X86_INS_VPHADDBW: x86_insn = 1188;
pub const x86_insn_X86_INS_VPHADDDQ: x86_insn = 1189;
pub const x86_insn_X86_INS_VPHADDD: x86_insn = 1190;
pub const x86_insn_X86_INS_VPHADDSW: x86_insn = 1191;
pub const x86_insn_X86_INS_VPHADDUBD: x86_insn = 1192;
pub const x86_insn_X86_INS_VPHADDUBQ: x86_insn = 1193;
pub const x86_insn_X86_INS_VPHADDUBW: x86_insn = 1194;
pub const x86_insn_X86_INS_VPHADDUDQ: x86_insn = 1195;
pub const x86_insn_X86_INS_VPHADDUWD: x86_insn = 1196;
pub const x86_insn_X86_INS_VPHADDUWQ: x86_insn = 1197;
pub const x86_insn_X86_INS_VPHADDWD: x86_insn = 1198;
pub const x86_insn_X86_INS_VPHADDWQ: x86_insn = 1199;
pub const x86_insn_X86_INS_VPHADDW: x86_insn = 1200;
pub const x86_insn_X86_INS_VPHMINPOSUW: x86_insn = 1201;
pub const x86_insn_X86_INS_VPHSUBBW: x86_insn = 1202;
pub const x86_insn_X86_INS_VPHSUBDQ: x86_insn = 1203;
pub const x86_insn_X86_INS_VPHSUBD: x86_insn = 1204;
pub const x86_insn_X86_INS_VPHSUBSW: x86_insn = 1205;
pub const x86_insn_X86_INS_VPHSUBWD: x86_insn = 1206;
pub const x86_insn_X86_INS_VPHSUBW: x86_insn = 1207;
pub const x86_insn_X86_INS_VPINSRB: x86_insn = 1208;
pub const x86_insn_X86_INS_VPINSRD: x86_insn = 1209;
pub const x86_insn_X86_INS_VPINSRQ: x86_insn = 1210;
pub const x86_insn_X86_INS_VPINSRW: x86_insn = 1211;
pub const x86_insn_X86_INS_VPLZCNTD: x86_insn = 1212;
pub const x86_insn_X86_INS_VPLZCNTQ: x86_insn = 1213;
pub const x86_insn_X86_INS_VPMACSDD: x86_insn = 1214;
pub const x86_insn_X86_INS_VPMACSDQH: x86_insn = 1215;
pub const x86_insn_X86_INS_VPMACSDQL: x86_insn = 1216;
pub const x86_insn_X86_INS_VPMACSSDD: x86_insn = 1217;
pub const x86_insn_X86_INS_VPMACSSDQH: x86_insn = 1218;
pub const x86_insn_X86_INS_VPMACSSDQL: x86_insn = 1219;
pub const x86_insn_X86_INS_VPMACSSWD: x86_insn = 1220;
pub const x86_insn_X86_INS_VPMACSSWW: x86_insn = 1221;
pub const x86_insn_X86_INS_VPMACSWD: x86_insn = 1222;
pub const x86_insn_X86_INS_VPMACSWW: x86_insn = 1223;
pub const x86_insn_X86_INS_VPMADCSSWD: x86_insn = 1224;
pub const x86_insn_X86_INS_VPMADCSWD: x86_insn = 1225;
pub const x86_insn_X86_INS_VPMADD52HUQ: x86_insn = 1226;
pub const x86_insn_X86_INS_VPMADD52LUQ: x86_insn = 1227;
pub const x86_insn_X86_INS_VPMADDUBSW: x86_insn = 1228;
pub const x86_insn_X86_INS_VPMADDWD: x86_insn = 1229;
pub const x86_insn_X86_INS_VPMASKMOVD: x86_insn = 1230;
pub const x86_insn_X86_INS_VPMASKMOVQ: x86_insn = 1231;
pub const x86_insn_X86_INS_VPMAXSB: x86_insn = 1232;
pub const x86_insn_X86_INS_VPMAXSD: x86_insn = 1233;
pub const x86_insn_X86_INS_VPMAXSQ: x86_insn = 1234;
pub const x86_insn_X86_INS_VPMAXSW: x86_insn = 1235;
pub const x86_insn_X86_INS_VPMAXUB: x86_insn = 1236;
pub const x86_insn_X86_INS_VPMAXUD: x86_insn = 1237;
pub const x86_insn_X86_INS_VPMAXUQ: x86_insn = 1238;
pub const x86_insn_X86_INS_VPMAXUW: x86_insn = 1239;
pub const x86_insn_X86_INS_VPMINSB: x86_insn = 1240;
pub const x86_insn_X86_INS_VPMINSD: x86_insn = 1241;
pub const x86_insn_X86_INS_VPMINSQ: x86_insn = 1242;
pub const x86_insn_X86_INS_VPMINSW: x86_insn = 1243;
pub const x86_insn_X86_INS_VPMINUB: x86_insn = 1244;
pub const x86_insn_X86_INS_VPMINUD: x86_insn = 1245;
pub const x86_insn_X86_INS_VPMINUQ: x86_insn = 1246;
pub const x86_insn_X86_INS_VPMINUW: x86_insn = 1247;
pub const x86_insn_X86_INS_VPMOVB2M: x86_insn = 1248;
pub const x86_insn_X86_INS_VPMOVD2M: x86_insn = 1249;
pub const x86_insn_X86_INS_VPMOVDB: x86_insn = 1250;
pub const x86_insn_X86_INS_VPMOVDW: x86_insn = 1251;
pub const x86_insn_X86_INS_VPMOVM2B: x86_insn = 1252;
pub const x86_insn_X86_INS_VPMOVM2D: x86_insn = 1253;
pub const x86_insn_X86_INS_VPMOVM2Q: x86_insn = 1254;
pub const x86_insn_X86_INS_VPMOVM2W: x86_insn = 1255;
pub const x86_insn_X86_INS_VPMOVMSKB: x86_insn = 1256;
pub const x86_insn_X86_INS_VPMOVQ2M: x86_insn = 1257;
pub const x86_insn_X86_INS_VPMOVQB: x86_insn = 1258;
pub const x86_insn_X86_INS_VPMOVQD: x86_insn = 1259;
pub const x86_insn_X86_INS_VPMOVQW: x86_insn = 1260;
pub const x86_insn_X86_INS_VPMOVSDB: x86_insn = 1261;
pub const x86_insn_X86_INS_VPMOVSDW: x86_insn = 1262;
pub const x86_insn_X86_INS_VPMOVSQB: x86_insn = 1263;
pub const x86_insn_X86_INS_VPMOVSQD: x86_insn = 1264;
pub const x86_insn_X86_INS_VPMOVSQW: x86_insn = 1265;
pub const x86_insn_X86_INS_VPMOVSWB: x86_insn = 1266;
pub const x86_insn_X86_INS_VPMOVSXBD: x86_insn = 1267;
pub const x86_insn_X86_INS_VPMOVSXBQ: x86_insn = 1268;
pub const x86_insn_X86_INS_VPMOVSXBW: x86_insn = 1269;
pub const x86_insn_X86_INS_VPMOVSXDQ: x86_insn = 1270;
pub const x86_insn_X86_INS_VPMOVSXWD: x86_insn = 1271;
pub const x86_insn_X86_INS_VPMOVSXWQ: x86_insn = 1272;
pub const x86_insn_X86_INS_VPMOVUSDB: x86_insn = 1273;
pub const x86_insn_X86_INS_VPMOVUSDW: x86_insn = 1274;
pub const x86_insn_X86_INS_VPMOVUSQB: x86_insn = 1275;
pub const x86_insn_X86_INS_VPMOVUSQD: x86_insn = 1276;
pub const x86_insn_X86_INS_VPMOVUSQW: x86_insn = 1277;
pub const x86_insn_X86_INS_VPMOVUSWB: x86_insn = 1278;
pub const x86_insn_X86_INS_VPMOVW2M: x86_insn = 1279;
pub const x86_insn_X86_INS_VPMOVWB: x86_insn = 1280;
pub const x86_insn_X86_INS_VPMOVZXBD: x86_insn = 1281;
pub const x86_insn_X86_INS_VPMOVZXBQ: x86_insn = 1282;
pub const x86_insn_X86_INS_VPMOVZXBW: x86_insn = 1283;
pub const x86_insn_X86_INS_VPMOVZXDQ: x86_insn = 1284;
pub const x86_insn_X86_INS_VPMOVZXWD: x86_insn = 1285;
pub const x86_insn_X86_INS_VPMOVZXWQ: x86_insn = 1286;
pub const x86_insn_X86_INS_VPMULDQ: x86_insn = 1287;
pub const x86_insn_X86_INS_VPMULHRSW: x86_insn = 1288;
pub const x86_insn_X86_INS_VPMULHUW: x86_insn = 1289;
pub const x86_insn_X86_INS_VPMULHW: x86_insn = 1290;
pub const x86_insn_X86_INS_VPMULLD: x86_insn = 1291;
pub const x86_insn_X86_INS_VPMULLQ: x86_insn = 1292;
pub const x86_insn_X86_INS_VPMULLW: x86_insn = 1293;
pub const x86_insn_X86_INS_VPMULTISHIFTQB: x86_insn = 1294;
pub const x86_insn_X86_INS_VPMULUDQ: x86_insn = 1295;
pub const x86_insn_X86_INS_VPOPCNTB: x86_insn = 1296;
pub const x86_insn_X86_INS_VPOPCNTD: x86_insn = 1297;
pub const x86_insn_X86_INS_VPOPCNTQ: x86_insn = 1298;
pub const x86_insn_X86_INS_VPOPCNTW: x86_insn = 1299;
pub const x86_insn_X86_INS_VPORD: x86_insn = 1300;
pub const x86_insn_X86_INS_VPORQ: x86_insn = 1301;
pub const x86_insn_X86_INS_VPOR: x86_insn = 1302;
pub const x86_insn_X86_INS_VPPERM: x86_insn = 1303;
pub const x86_insn_X86_INS_VPROLD: x86_insn = 1304;
pub const x86_insn_X86_INS_VPROLQ: x86_insn = 1305;
pub const x86_insn_X86_INS_VPROLVD: x86_insn = 1306;
pub const x86_insn_X86_INS_VPROLVQ: x86_insn = 1307;
pub const x86_insn_X86_INS_VPRORD: x86_insn = 1308;
pub const x86_insn_X86_INS_VPRORQ: x86_insn = 1309;
pub const x86_insn_X86_INS_VPRORVD: x86_insn = 1310;
pub const x86_insn_X86_INS_VPRORVQ: x86_insn = 1311;
pub const x86_insn_X86_INS_VPROTB: x86_insn = 1312;
pub const x86_insn_X86_INS_VPROTD: x86_insn = 1313;
pub const x86_insn_X86_INS_VPROTQ: x86_insn = 1314;
pub const x86_insn_X86_INS_VPROTW: x86_insn = 1315;
pub const x86_insn_X86_INS_VPSADBW: x86_insn = 1316;
pub const x86_insn_X86_INS_VPSCATTERDD: x86_insn = 1317;
pub const x86_insn_X86_INS_VPSCATTERDQ: x86_insn = 1318;
pub const x86_insn_X86_INS_VPSCATTERQD: x86_insn = 1319;
pub const x86_insn_X86_INS_VPSCATTERQQ: x86_insn = 1320;
pub const x86_insn_X86_INS_VPSHAB: x86_insn = 1321;
pub const x86_insn_X86_INS_VPSHAD: x86_insn = 1322;
pub const x86_insn_X86_INS_VPSHAQ: x86_insn = 1323;
pub const x86_insn_X86_INS_VPSHAW: x86_insn = 1324;
pub const x86_insn_X86_INS_VPSHLB: x86_insn = 1325;
pub const x86_insn_X86_INS_VPSHLDD: x86_insn = 1326;
pub const x86_insn_X86_INS_VPSHLDQ: x86_insn = 1327;
pub const x86_insn_X86_INS_VPSHLDVD: x86_insn = 1328;
pub const x86_insn_X86_INS_VPSHLDVQ: x86_insn = 1329;
pub const x86_insn_X86_INS_VPSHLDVW: x86_insn = 1330;
pub const x86_insn_X86_INS_VPSHLDW: x86_insn = 1331;
pub const x86_insn_X86_INS_VPSHLD: x86_insn = 1332;
pub const x86_insn_X86_INS_VPSHLQ: x86_insn = 1333;
pub const x86_insn_X86_INS_VPSHLW: x86_insn = 1334;
pub const x86_insn_X86_INS_VPSHRDD: x86_insn = 1335;
pub const x86_insn_X86_INS_VPSHRDQ: x86_insn = 1336;
pub const x86_insn_X86_INS_VPSHRDVD: x86_insn = 1337;
pub const x86_insn_X86_INS_VPSHRDVQ: x86_insn = 1338;
pub const x86_insn_X86_INS_VPSHRDVW: x86_insn = 1339;
pub const x86_insn_X86_INS_VPSHRDW: x86_insn = 1340;
pub const x86_insn_X86_INS_VPSHUFBITQMB: x86_insn = 1341;
pub const x86_insn_X86_INS_VPSHUFB: x86_insn = 1342;
pub const x86_insn_X86_INS_VPSHUFD: x86_insn = 1343;
pub const x86_insn_X86_INS_VPSHUFHW: x86_insn = 1344;
pub const x86_insn_X86_INS_VPSHUFLW: x86_insn = 1345;
pub const x86_insn_X86_INS_VPSIGNB: x86_insn = 1346;
pub const x86_insn_X86_INS_VPSIGND: x86_insn = 1347;
pub const x86_insn_X86_INS_VPSIGNW: x86_insn = 1348;
pub const x86_insn_X86_INS_VPSLLDQ: x86_insn = 1349;
pub const x86_insn_X86_INS_VPSLLD: x86_insn = 1350;
pub const x86_insn_X86_INS_VPSLLQ: x86_insn = 1351;
pub const x86_insn_X86_INS_VPSLLVD: x86_insn = 1352;
pub const x86_insn_X86_INS_VPSLLVQ: x86_insn = 1353;
pub const x86_insn_X86_INS_VPSLLVW: x86_insn = 1354;
pub const x86_insn_X86_INS_VPSLLW: x86_insn = 1355;
pub const x86_insn_X86_INS_VPSRAD: x86_insn = 1356;
pub const x86_insn_X86_INS_VPSRAQ: x86_insn = 1357;
pub const x86_insn_X86_INS_VPSRAVD: x86_insn = 1358;
pub const x86_insn_X86_INS_VPSRAVQ: x86_insn = 1359;
pub const x86_insn_X86_INS_VPSRAVW: x86_insn = 1360;
pub const x86_insn_X86_INS_VPSRAW: x86_insn = 1361;
pub const x86_insn_X86_INS_VPSRLDQ: x86_insn = 1362;
pub const x86_insn_X86_INS_VPSRLD: x86_insn = 1363;
pub const x86_insn_X86_INS_VPSRLQ: x86_insn = 1364;
pub const x86_insn_X86_INS_VPSRLVD: x86_insn = 1365;
pub const x86_insn_X86_INS_VPSRLVQ: x86_insn = 1366;
pub const x86_insn_X86_INS_VPSRLVW: x86_insn = 1367;
pub const x86_insn_X86_INS_VPSRLW: x86_insn = 1368;
pub const x86_insn_X86_INS_VPSUBB: x86_insn = 1369;
pub const x86_insn_X86_INS_VPSUBD: x86_insn = 1370;
pub const x86_insn_X86_INS_VPSUBQ: x86_insn = 1371;
pub const x86_insn_X86_INS_VPSUBSB: x86_insn = 1372;
pub const x86_insn_X86_INS_VPSUBSW: x86_insn = 1373;
pub const x86_insn_X86_INS_VPSUBUSB: x86_insn = 1374;
pub const x86_insn_X86_INS_VPSUBUSW: x86_insn = 1375;
pub const x86_insn_X86_INS_VPSUBW: x86_insn = 1376;
pub const x86_insn_X86_INS_VPTERNLOGD: x86_insn = 1377;
pub const x86_insn_X86_INS_VPTERNLOGQ: x86_insn = 1378;
pub const x86_insn_X86_INS_VPTESTMB: x86_insn = 1379;
pub const x86_insn_X86_INS_VPTESTMD: x86_insn = 1380;
pub const x86_insn_X86_INS_VPTESTMQ: x86_insn = 1381;
pub const x86_insn_X86_INS_VPTESTMW: x86_insn = 1382;
pub const x86_insn_X86_INS_VPTESTNMB: x86_insn = 1383;
pub const x86_insn_X86_INS_VPTESTNMD: x86_insn = 1384;
pub const x86_insn_X86_INS_VPTESTNMQ: x86_insn = 1385;
pub const x86_insn_X86_INS_VPTESTNMW: x86_insn = 1386;
pub const x86_insn_X86_INS_VPTEST: x86_insn = 1387;
pub const x86_insn_X86_INS_VPUNPCKHBW: x86_insn = 1388;
pub const x86_insn_X86_INS_VPUNPCKHDQ: x86_insn = 1389;
pub const x86_insn_X86_INS_VPUNPCKHQDQ: x86_insn = 1390;
pub const x86_insn_X86_INS_VPUNPCKHWD: x86_insn = 1391;
pub const x86_insn_X86_INS_VPUNPCKLBW: x86_insn = 1392;
pub const x86_insn_X86_INS_VPUNPCKLDQ: x86_insn = 1393;
pub const x86_insn_X86_INS_VPUNPCKLQDQ: x86_insn = 1394;
pub const x86_insn_X86_INS_VPUNPCKLWD: x86_insn = 1395;
pub const x86_insn_X86_INS_VPXORD: x86_insn = 1396;
pub const x86_insn_X86_INS_VPXORQ: x86_insn = 1397;
pub const x86_insn_X86_INS_VPXOR: x86_insn = 1398;
pub const x86_insn_X86_INS_VRANGEPD: x86_insn = 1399;
pub const x86_insn_X86_INS_VRANGEPS: x86_insn = 1400;
pub const x86_insn_X86_INS_VRANGESD: x86_insn = 1401;
pub const x86_insn_X86_INS_VRANGESS: x86_insn = 1402;
pub const x86_insn_X86_INS_VRCP14PD: x86_insn = 1403;
pub const x86_insn_X86_INS_VRCP14PS: x86_insn = 1404;
pub const x86_insn_X86_INS_VRCP14SD: x86_insn = 1405;
pub const x86_insn_X86_INS_VRCP14SS: x86_insn = 1406;
pub const x86_insn_X86_INS_VRCP28PD: x86_insn = 1407;
pub const x86_insn_X86_INS_VRCP28PS: x86_insn = 1408;
pub const x86_insn_X86_INS_VRCP28SD: x86_insn = 1409;
pub const x86_insn_X86_INS_VRCP28SS: x86_insn = 1410;
pub const x86_insn_X86_INS_VRCPPS: x86_insn = 1411;
pub const x86_insn_X86_INS_VRCPSS: x86_insn = 1412;
pub const x86_insn_X86_INS_VREDUCEPD: x86_insn = 1413;
pub const x86_insn_X86_INS_VREDUCEPS: x86_insn = 1414;
pub const x86_insn_X86_INS_VREDUCESD: x86_insn = 1415;
pub const x86_insn_X86_INS_VREDUCESS: x86_insn = 1416;
pub const x86_insn_X86_INS_VRNDSCALEPD: x86_insn = 1417;
pub const x86_insn_X86_INS_VRNDSCALEPS: x86_insn = 1418;
pub const x86_insn_X86_INS_VRNDSCALESD: x86_insn = 1419;
pub const x86_insn_X86_INS_VRNDSCALESS: x86_insn = 1420;
pub const x86_insn_X86_INS_VROUNDPD: x86_insn = 1421;
pub const x86_insn_X86_INS_VROUNDPS: x86_insn = 1422;
pub const x86_insn_X86_INS_VROUNDSD: x86_insn = 1423;
pub const x86_insn_X86_INS_VROUNDSS: x86_insn = 1424;
pub const x86_insn_X86_INS_VRSQRT14PD: x86_insn = 1425;
pub const x86_insn_X86_INS_VRSQRT14PS: x86_insn = 1426;
pub const x86_insn_X86_INS_VRSQRT14SD: x86_insn = 1427;
pub const x86_insn_X86_INS_VRSQRT14SS: x86_insn = 1428;
pub const x86_insn_X86_INS_VRSQRT28PD: x86_insn = 1429;
pub const x86_insn_X86_INS_VRSQRT28PS: x86_insn = 1430;
pub const x86_insn_X86_INS_VRSQRT28SD: x86_insn = 1431;
pub const x86_insn_X86_INS_VRSQRT28SS: x86_insn = 1432;
pub const x86_insn_X86_INS_VRSQRTPS: x86_insn = 1433;
pub const x86_insn_X86_INS_VRSQRTSS: x86_insn = 1434;
pub const x86_insn_X86_INS_VSCALEFPD: x86_insn = 1435;
pub const x86_insn_X86_INS_VSCALEFPS: x86_insn = 1436;
pub const x86_insn_X86_INS_VSCALEFSD: x86_insn = 1437;
pub const x86_insn_X86_INS_VSCALEFSS: x86_insn = 1438;
pub const x86_insn_X86_INS_VSCATTERDPD: x86_insn = 1439;
pub const x86_insn_X86_INS_VSCATTERDPS: x86_insn = 1440;
pub const x86_insn_X86_INS_VSCATTERPF0DPD: x86_insn = 1441;
pub const x86_insn_X86_INS_VSCATTERPF0DPS: x86_insn = 1442;
pub const x86_insn_X86_INS_VSCATTERPF0QPD: x86_insn = 1443;
pub const x86_insn_X86_INS_VSCATTERPF0QPS: x86_insn = 1444;
pub const x86_insn_X86_INS_VSCATTERPF1DPD: x86_insn = 1445;
pub const x86_insn_X86_INS_VSCATTERPF1DPS: x86_insn = 1446;
pub const x86_insn_X86_INS_VSCATTERPF1QPD: x86_insn = 1447;
pub const x86_insn_X86_INS_VSCATTERPF1QPS: x86_insn = 1448;
pub const x86_insn_X86_INS_VSCATTERQPD: x86_insn = 1449;
pub const x86_insn_X86_INS_VSCATTERQPS: x86_insn = 1450;
pub const x86_insn_X86_INS_VSHUFF32X4: x86_insn = 1451;
pub const x86_insn_X86_INS_VSHUFF64X2: x86_insn = 1452;
pub const x86_insn_X86_INS_VSHUFI32X4: x86_insn = 1453;
pub const x86_insn_X86_INS_VSHUFI64X2: x86_insn = 1454;
pub const x86_insn_X86_INS_VSHUFPD: x86_insn = 1455;
pub const x86_insn_X86_INS_VSHUFPS: x86_insn = 1456;
pub const x86_insn_X86_INS_VSQRTPD: x86_insn = 1457;
pub const x86_insn_X86_INS_VSQRTPS: x86_insn = 1458;
pub const x86_insn_X86_INS_VSQRTSD: x86_insn = 1459;
pub const x86_insn_X86_INS_VSQRTSS: x86_insn = 1460;
pub const x86_insn_X86_INS_VSTMXCSR: x86_insn = 1461;
pub const x86_insn_X86_INS_VSUBPD: x86_insn = 1462;
pub const x86_insn_X86_INS_VSUBPS: x86_insn = 1463;
pub const x86_insn_X86_INS_VSUBSD: x86_insn = 1464;
pub const x86_insn_X86_INS_VSUBSS: x86_insn = 1465;
pub const x86_insn_X86_INS_VTESTPD: x86_insn = 1466;
pub const x86_insn_X86_INS_VTESTPS: x86_insn = 1467;
pub const x86_insn_X86_INS_VUCOMISD: x86_insn = 1468;
pub const x86_insn_X86_INS_VUCOMISS: x86_insn = 1469;
pub const x86_insn_X86_INS_VUNPCKHPD: x86_insn = 1470;
pub const x86_insn_X86_INS_VUNPCKHPS: x86_insn = 1471;
pub const x86_insn_X86_INS_VUNPCKLPD: x86_insn = 1472;
pub const x86_insn_X86_INS_VUNPCKLPS: x86_insn = 1473;
pub const x86_insn_X86_INS_VXORPD: x86_insn = 1474;
pub const x86_insn_X86_INS_VXORPS: x86_insn = 1475;
pub const x86_insn_X86_INS_VZEROALL: x86_insn = 1476;
pub const x86_insn_X86_INS_VZEROUPPER: x86_insn = 1477;
pub const x86_insn_X86_INS_WAIT: x86_insn = 1478;
pub const x86_insn_X86_INS_WBINVD: x86_insn = 1479;
pub const x86_insn_X86_INS_WBNOINVD: x86_insn = 1480;
pub const x86_insn_X86_INS_WRFSBASE: x86_insn = 1481;
pub const x86_insn_X86_INS_WRGSBASE: x86_insn = 1482;
pub const x86_insn_X86_INS_WRMSR: x86_insn = 1483;
pub const x86_insn_X86_INS_WRPKRU: x86_insn = 1484;
pub const x86_insn_X86_INS_WRSSD: x86_insn = 1485;
pub const x86_insn_X86_INS_WRSSQ: x86_insn = 1486;
pub const x86_insn_X86_INS_WRUSSD: x86_insn = 1487;
pub const x86_insn_X86_INS_WRUSSQ: x86_insn = 1488;
pub const x86_insn_X86_INS_XABORT: x86_insn = 1489;
pub const x86_insn_X86_INS_XACQUIRE: x86_insn = 1490;
pub const x86_insn_X86_INS_XADD: x86_insn = 1491;
pub const x86_insn_X86_INS_XBEGIN: x86_insn = 1492;
pub const x86_insn_X86_INS_XCHG: x86_insn = 1493;
pub const x86_insn_X86_INS_FXCH: x86_insn = 1494;
pub const x86_insn_X86_INS_XCRYPTCBC: x86_insn = 1495;
pub const x86_insn_X86_INS_XCRYPTCFB: x86_insn = 1496;
pub const x86_insn_X86_INS_XCRYPTCTR: x86_insn = 1497;
pub const x86_insn_X86_INS_XCRYPTECB: x86_insn = 1498;
pub const x86_insn_X86_INS_XCRYPTOFB: x86_insn = 1499;
pub const x86_insn_X86_INS_XEND: x86_insn = 1500;
pub const x86_insn_X86_INS_XGETBV: x86_insn = 1501;
pub const x86_insn_X86_INS_XLATB: x86_insn = 1502;
pub const x86_insn_X86_INS_XOR: x86_insn = 1503;
pub const x86_insn_X86_INS_XORPD: x86_insn = 1504;
pub const x86_insn_X86_INS_XORPS: x86_insn = 1505;
pub const x86_insn_X86_INS_XRELEASE: x86_insn = 1506;
pub const x86_insn_X86_INS_XRSTOR: x86_insn = 1507;
pub const x86_insn_X86_INS_XRSTOR64: x86_insn = 1508;
pub const x86_insn_X86_INS_XRSTORS: x86_insn = 1509;
pub const x86_insn_X86_INS_XRSTORS64: x86_insn = 1510;
pub const x86_insn_X86_INS_XSAVE: x86_insn = 1511;
pub const x86_insn_X86_INS_XSAVE64: x86_insn = 1512;
pub const x86_insn_X86_INS_XSAVEC: x86_insn = 1513;
pub const x86_insn_X86_INS_XSAVEC64: x86_insn = 1514;
pub const x86_insn_X86_INS_XSAVEOPT: x86_insn = 1515;
pub const x86_insn_X86_INS_XSAVEOPT64: x86_insn = 1516;
pub const x86_insn_X86_INS_XSAVES: x86_insn = 1517;
pub const x86_insn_X86_INS_XSAVES64: x86_insn = 1518;
pub const x86_insn_X86_INS_XSETBV: x86_insn = 1519;
pub const x86_insn_X86_INS_XSHA1: x86_insn = 1520;
pub const x86_insn_X86_INS_XSHA256: x86_insn = 1521;
pub const x86_insn_X86_INS_XSTORE: x86_insn = 1522;
pub const x86_insn_X86_INS_XTEST: x86_insn = 1523;
pub const x86_insn_X86_INS_ENDING: x86_insn = 1524;
#[doc = " X86 instructions"]
pub type x86_insn = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const xcore_op_type_XCORE_OP_INVALID: xcore_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const xcore_op_type_XCORE_OP_REG: xcore_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const xcore_op_type_XCORE_OP_IMM: xcore_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const xcore_op_type_XCORE_OP_MEM: xcore_op_type = 3;
#[doc = " Operand type for instruction's operands"]
pub type xcore_op_type = ::std::os::raw::c_uint;
pub const xcore_reg_XCORE_REG_INVALID: xcore_reg = 0;
pub const xcore_reg_XCORE_REG_CP: xcore_reg = 1;
pub const xcore_reg_XCORE_REG_DP: xcore_reg = 2;
pub const xcore_reg_XCORE_REG_LR: xcore_reg = 3;
pub const xcore_reg_XCORE_REG_SP: xcore_reg = 4;
pub const xcore_reg_XCORE_REG_R0: xcore_reg = 5;
pub const xcore_reg_XCORE_REG_R1: xcore_reg = 6;
pub const xcore_reg_XCORE_REG_R2: xcore_reg = 7;
pub const xcore_reg_XCORE_REG_R3: xcore_reg = 8;
pub const xcore_reg_XCORE_REG_R4: xcore_reg = 9;
pub const xcore_reg_XCORE_REG_R5: xcore_reg = 10;
pub const xcore_reg_XCORE_REG_R6: xcore_reg = 11;
pub const xcore_reg_XCORE_REG_R7: xcore_reg = 12;
pub const xcore_reg_XCORE_REG_R8: xcore_reg = 13;
pub const xcore_reg_XCORE_REG_R9: xcore_reg = 14;
pub const xcore_reg_XCORE_REG_R10: xcore_reg = 15;
pub const xcore_reg_XCORE_REG_R11: xcore_reg = 16;
#[doc = "< pc"]
pub const xcore_reg_XCORE_REG_PC: xcore_reg = 17;
#[doc = "< save pc"]
pub const xcore_reg_XCORE_REG_SCP: xcore_reg = 18;
pub const xcore_reg_XCORE_REG_SSR: xcore_reg = 19;
pub const xcore_reg_XCORE_REG_ET: xcore_reg = 20;
pub const xcore_reg_XCORE_REG_ED: xcore_reg = 21;
pub const xcore_reg_XCORE_REG_SED: xcore_reg = 22;
pub const xcore_reg_XCORE_REG_KEP: xcore_reg = 23;
pub const xcore_reg_XCORE_REG_KSP: xcore_reg = 24;
pub const xcore_reg_XCORE_REG_ID: xcore_reg = 25;
pub const xcore_reg_XCORE_REG_ENDING: xcore_reg = 26;
#[doc = " XCore registers"]
pub type xcore_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with XCORE_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xcore_op_mem {
    #[doc = "< base register, can be safely interpreted as\n< a value of type `xcore_reg`, but it is only\n< one byte wide"]
    pub base: u8,
    #[doc = "< index register, same conditions apply here"]
    pub index: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
    #[doc = "< +1: forward, -1: backward"]
    pub direct: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcore_op_mem"][::std::mem::size_of::<xcore_op_mem>() - 12usize];
    ["Alignment of xcore_op_mem"][::std::mem::align_of::<xcore_op_mem>() - 4usize];
    ["Offset of field: xcore_op_mem::base"][::std::mem::offset_of!(xcore_op_mem, base) - 0usize];
    ["Offset of field: xcore_op_mem::index"][::std::mem::offset_of!(xcore_op_mem, index) - 1usize];
    ["Offset of field: xcore_op_mem::disp"][::std::mem::offset_of!(xcore_op_mem, disp) - 4usize];
    ["Offset of field: xcore_op_mem::direct"]
        [::std::mem::offset_of!(xcore_op_mem, direct) - 8usize];
};
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore_op {
    #[doc = "< operand type"]
    pub type_: xcore_op_type,
    pub __bindgen_anon_1: cs_xcore_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_xcore_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: xcore_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: xcore_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_xcore_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_xcore_op__bindgen_ty_1>() - 12usize];
    ["Alignment of cs_xcore_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_xcore_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_xcore_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_xcore_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_xcore_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_xcore_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_xcore_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_xcore_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_xcore_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_xcore_op"][::std::mem::size_of::<cs_xcore_op>() - 16usize];
    ["Alignment of cs_xcore_op"][::std::mem::align_of::<cs_xcore_op>() - 4usize];
    ["Offset of field: cs_xcore_op::type_"][::std::mem::offset_of!(cs_xcore_op, type_) - 0usize];
};
impl Default for cs_xcore_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore {
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_xcore_op; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_xcore"][::std::mem::size_of::<cs_xcore>() - 132usize];
    ["Alignment of cs_xcore"][::std::mem::align_of::<cs_xcore>() - 4usize];
    ["Offset of field: cs_xcore::op_count"][::std::mem::offset_of!(cs_xcore, op_count) - 0usize];
    ["Offset of field: cs_xcore::operands"][::std::mem::offset_of!(cs_xcore, operands) - 4usize];
};
impl Default for cs_xcore {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const tms320c64x_op_type_TMS320C64X_OP_INVALID: tms320c64x_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const tms320c64x_op_type_TMS320C64X_OP_REG: tms320c64x_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const tms320c64x_op_type_TMS320C64X_OP_IMM: tms320c64x_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const tms320c64x_op_type_TMS320C64X_OP_MEM: tms320c64x_op_type = 3;
#[doc = "< Register pair for double word ops"]
pub const tms320c64x_op_type_TMS320C64X_OP_REGPAIR: tms320c64x_op_type = 64;
pub type tms320c64x_op_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tms320c64x_op_mem {
    #[doc = "< base register"]
    pub base: ::std::os::raw::c_uint,
    #[doc = "< displacement/offset value"]
    pub disp: ::std::os::raw::c_uint,
    #[doc = "< unit of base and offset register"]
    pub unit: ::std::os::raw::c_uint,
    #[doc = "< offset scaled"]
    pub scaled: ::std::os::raw::c_uint,
    #[doc = "< displacement type"]
    pub disptype: ::std::os::raw::c_uint,
    #[doc = "< direction"]
    pub direction: ::std::os::raw::c_uint,
    #[doc = "< modification"]
    pub modify: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tms320c64x_op_mem"][::std::mem::size_of::<tms320c64x_op_mem>() - 28usize];
    ["Alignment of tms320c64x_op_mem"][::std::mem::align_of::<tms320c64x_op_mem>() - 4usize];
    ["Offset of field: tms320c64x_op_mem::base"]
        [::std::mem::offset_of!(tms320c64x_op_mem, base) - 0usize];
    ["Offset of field: tms320c64x_op_mem::disp"]
        [::std::mem::offset_of!(tms320c64x_op_mem, disp) - 4usize];
    ["Offset of field: tms320c64x_op_mem::unit"]
        [::std::mem::offset_of!(tms320c64x_op_mem, unit) - 8usize];
    ["Offset of field: tms320c64x_op_mem::scaled"]
        [::std::mem::offset_of!(tms320c64x_op_mem, scaled) - 12usize];
    ["Offset of field: tms320c64x_op_mem::disptype"]
        [::std::mem::offset_of!(tms320c64x_op_mem, disptype) - 16usize];
    ["Offset of field: tms320c64x_op_mem::direction"]
        [::std::mem::offset_of!(tms320c64x_op_mem, direction) - 20usize];
    ["Offset of field: tms320c64x_op_mem::modify"]
        [::std::mem::offset_of!(tms320c64x_op_mem, modify) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x_op {
    #[doc = "< operand type"]
    pub type_: tms320c64x_op_type,
    pub __bindgen_anon_1: cs_tms320c64x_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tms320c64x_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand or first register for REGPAIR operand"]
    pub reg: ::std::os::raw::c_uint,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: tms320c64x_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tms320c64x_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_tms320c64x_op__bindgen_ty_1>() - 28usize];
    ["Alignment of cs_tms320c64x_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_tms320c64x_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_tms320c64x_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_tms320c64x_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_tms320c64x_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_tms320c64x_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_tms320c64x_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_tms320c64x_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_tms320c64x_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tms320c64x_op"][::std::mem::size_of::<cs_tms320c64x_op>() - 32usize];
    ["Alignment of cs_tms320c64x_op"][::std::mem::align_of::<cs_tms320c64x_op>() - 4usize];
    ["Offset of field: cs_tms320c64x_op::type_"]
        [::std::mem::offset_of!(cs_tms320c64x_op, type_) - 0usize];
};
impl Default for cs_tms320c64x_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x {
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_tms320c64x_op; 8usize],
    pub condition: cs_tms320c64x__bindgen_ty_1,
    pub funit: cs_tms320c64x__bindgen_ty_2,
    pub parallel: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub zero: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tms320c64x__bindgen_ty_1"]
        [::std::mem::size_of::<cs_tms320c64x__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_tms320c64x__bindgen_ty_1"]
        [::std::mem::align_of::<cs_tms320c64x__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_tms320c64x__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_tms320c64x__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_tms320c64x__bindgen_ty_1::zero"]
        [::std::mem::offset_of!(cs_tms320c64x__bindgen_ty_1, zero) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_2 {
    pub unit: ::std::os::raw::c_uint,
    pub side: ::std::os::raw::c_uint,
    pub crosspath: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tms320c64x__bindgen_ty_2"]
        [::std::mem::size_of::<cs_tms320c64x__bindgen_ty_2>() - 12usize];
    ["Alignment of cs_tms320c64x__bindgen_ty_2"]
        [::std::mem::align_of::<cs_tms320c64x__bindgen_ty_2>() - 4usize];
    ["Offset of field: cs_tms320c64x__bindgen_ty_2::unit"]
        [::std::mem::offset_of!(cs_tms320c64x__bindgen_ty_2, unit) - 0usize];
    ["Offset of field: cs_tms320c64x__bindgen_ty_2::side"]
        [::std::mem::offset_of!(cs_tms320c64x__bindgen_ty_2, side) - 4usize];
    ["Offset of field: cs_tms320c64x__bindgen_ty_2::crosspath"]
        [::std::mem::offset_of!(cs_tms320c64x__bindgen_ty_2, crosspath) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tms320c64x"][::std::mem::size_of::<cs_tms320c64x>() - 284usize];
    ["Alignment of cs_tms320c64x"][::std::mem::align_of::<cs_tms320c64x>() - 4usize];
    ["Offset of field: cs_tms320c64x::op_count"]
        [::std::mem::offset_of!(cs_tms320c64x, op_count) - 0usize];
    ["Offset of field: cs_tms320c64x::operands"]
        [::std::mem::offset_of!(cs_tms320c64x, operands) - 4usize];
    ["Offset of field: cs_tms320c64x::condition"]
        [::std::mem::offset_of!(cs_tms320c64x, condition) - 260usize];
    ["Offset of field: cs_tms320c64x::funit"]
        [::std::mem::offset_of!(cs_tms320c64x, funit) - 268usize];
    ["Offset of field: cs_tms320c64x::parallel"]
        [::std::mem::offset_of!(cs_tms320c64x, parallel) - 280usize];
};
impl Default for cs_tms320c64x {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const m680x_reg_M680X_REG_INVALID: m680x_reg = 0;
#[doc = "< M6800/1/2/3/9, HD6301/9"]
pub const m680x_reg_M680X_REG_A: m680x_reg = 1;
#[doc = "< M6800/1/2/3/9, HD6301/9"]
pub const m680x_reg_M680X_REG_B: m680x_reg = 2;
#[doc = "< HD6309"]
pub const m680x_reg_M680X_REG_E: m680x_reg = 3;
#[doc = "< HD6309"]
pub const m680x_reg_M680X_REG_F: m680x_reg = 4;
#[doc = "< HD6309"]
pub const m680x_reg_M680X_REG_0: m680x_reg = 5;
#[doc = "< M6801/3/9, HD6301/9"]
pub const m680x_reg_M680X_REG_D: m680x_reg = 6;
#[doc = "< HD6309"]
pub const m680x_reg_M680X_REG_W: m680x_reg = 7;
#[doc = "< M6800/1/2/3/9, M6301/9"]
pub const m680x_reg_M680X_REG_CC: m680x_reg = 8;
#[doc = "< M6809/M6309"]
pub const m680x_reg_M680X_REG_DP: m680x_reg = 9;
#[doc = "< M6309"]
pub const m680x_reg_M680X_REG_MD: m680x_reg = 10;
#[doc = "< M6808"]
pub const m680x_reg_M680X_REG_HX: m680x_reg = 11;
#[doc = "< M6808"]
pub const m680x_reg_M680X_REG_H: m680x_reg = 12;
#[doc = "< M6800/1/2/3/9, M6301/9"]
pub const m680x_reg_M680X_REG_X: m680x_reg = 13;
#[doc = "< M6809/M6309"]
pub const m680x_reg_M680X_REG_Y: m680x_reg = 14;
#[doc = "< M6809/M6309"]
pub const m680x_reg_M680X_REG_S: m680x_reg = 15;
#[doc = "< M6809/M6309"]
pub const m680x_reg_M680X_REG_U: m680x_reg = 16;
#[doc = "< M6309"]
pub const m680x_reg_M680X_REG_V: m680x_reg = 17;
#[doc = "< M6309"]
pub const m680x_reg_M680X_REG_Q: m680x_reg = 18;
#[doc = "< M6800/1/2/3/9, M6301/9"]
pub const m680x_reg_M680X_REG_PC: m680x_reg = 19;
#[doc = "< CPU12"]
pub const m680x_reg_M680X_REG_TMP2: m680x_reg = 20;
#[doc = "< CPU12"]
pub const m680x_reg_M680X_REG_TMP3: m680x_reg = 21;
#[doc = "< <-- mark the end of the list of registers"]
pub const m680x_reg_M680X_REG_ENDING: m680x_reg = 22;
#[doc = " M680X registers and special registers"]
pub type m680x_reg = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const m680x_op_type_M680X_OP_INVALID: m680x_op_type = 0;
#[doc = "< = Register operand."]
pub const m680x_op_type_M680X_OP_REGISTER: m680x_op_type = 1;
#[doc = "< = Immediate operand."]
pub const m680x_op_type_M680X_OP_IMMEDIATE: m680x_op_type = 2;
#[doc = "< = Indexed addressing operand."]
pub const m680x_op_type_M680X_OP_INDEXED: m680x_op_type = 3;
#[doc = "< = Extended addressing operand."]
pub const m680x_op_type_M680X_OP_EXTENDED: m680x_op_type = 4;
#[doc = "< = Direct addressing operand."]
pub const m680x_op_type_M680X_OP_DIRECT: m680x_op_type = 5;
#[doc = "< = Relative addressing operand."]
pub const m680x_op_type_M680X_OP_RELATIVE: m680x_op_type = 6;
#[doc = "< = constant operand (Displayed as number only).\n< Used e.g. for a bit index or page number."]
pub const m680x_op_type_M680X_OP_CONSTANT: m680x_op_type = 7;
#[doc = " Operand type for instruction's operands"]
pub type m680x_op_type = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to indexed addressing"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_idx {
    #[doc = "< base register (or M680X_REG_INVALID if\n< irrelevant)"]
    pub base_reg: m680x_reg,
    #[doc = "< offset register (or M680X_REG_INVALID if\n< irrelevant)"]
    pub offset_reg: m680x_reg,
    #[doc = "< 5-,8- or 16-bit offset. See also offset_bits."]
    pub offset: i16,
    #[doc = "< = offset addr. if base_reg == M680X_REG_PC.\n< calculated as offset + PC"]
    pub offset_addr: u16,
    #[doc = "< offset width in bits for indexed addressing"]
    pub offset_bits: u8,
    #[doc = "< inc. or dec. value:\n<    0: no inc-/decrement\n<    1 .. 8: increment by 1 .. 8\n<    -1 .. -8: decrement by 1 .. 8\n< if flag M680X_IDX_POST_INC_DEC set it is post\n< inc-/decrement otherwise pre inc-/decrement"]
    pub inc_dec: i8,
    #[doc = "< 8-bit flags (see above)"]
    pub flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m680x_op_idx"][::std::mem::size_of::<m680x_op_idx>() - 16usize];
    ["Alignment of m680x_op_idx"][::std::mem::align_of::<m680x_op_idx>() - 4usize];
    ["Offset of field: m680x_op_idx::base_reg"]
        [::std::mem::offset_of!(m680x_op_idx, base_reg) - 0usize];
    ["Offset of field: m680x_op_idx::offset_reg"]
        [::std::mem::offset_of!(m680x_op_idx, offset_reg) - 4usize];
    ["Offset of field: m680x_op_idx::offset"]
        [::std::mem::offset_of!(m680x_op_idx, offset) - 8usize];
    ["Offset of field: m680x_op_idx::offset_addr"]
        [::std::mem::offset_of!(m680x_op_idx, offset_addr) - 10usize];
    ["Offset of field: m680x_op_idx::offset_bits"]
        [::std::mem::offset_of!(m680x_op_idx, offset_bits) - 12usize];
    ["Offset of field: m680x_op_idx::inc_dec"]
        [::std::mem::offset_of!(m680x_op_idx, inc_dec) - 13usize];
    ["Offset of field: m680x_op_idx::flags"][::std::mem::offset_of!(m680x_op_idx, flags) - 14usize];
};
impl Default for m680x_op_idx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction's memory operand referring to relative addressing (Bcc/LBcc)"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct m680x_op_rel {
    #[doc = "< The absolute address.\n< calculated as PC + offset. PC is the first\n< address after the instruction."]
    pub address: u16,
    #[doc = "< the offset/displacement value"]
    pub offset: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m680x_op_rel"][::std::mem::size_of::<m680x_op_rel>() - 4usize];
    ["Alignment of m680x_op_rel"][::std::mem::align_of::<m680x_op_rel>() - 2usize];
    ["Offset of field: m680x_op_rel::address"]
        [::std::mem::offset_of!(m680x_op_rel, address) - 0usize];
    ["Offset of field: m680x_op_rel::offset"]
        [::std::mem::offset_of!(m680x_op_rel, offset) - 2usize];
};
#[doc = " Instruction's operand referring to extended addressing"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct m680x_op_ext {
    #[doc = "< The absolute address"]
    pub address: u16,
    #[doc = "< true if extended indirect addressing"]
    pub indirect: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of m680x_op_ext"][::std::mem::size_of::<m680x_op_ext>() - 4usize];
    ["Alignment of m680x_op_ext"][::std::mem::align_of::<m680x_op_ext>() - 2usize];
    ["Offset of field: m680x_op_ext::address"]
        [::std::mem::offset_of!(m680x_op_ext, address) - 0usize];
    ["Offset of field: m680x_op_ext::indirect"]
        [::std::mem::offset_of!(m680x_op_ext, indirect) - 2usize];
};
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x_op {
    pub type_: m680x_op_type,
    pub __bindgen_anon_1: cs_m680x_op__bindgen_ty_1,
    #[doc = "< size of this operand (in bytes)"]
    pub size: u8,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET"]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m680x_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< register value for REG operand"]
    pub reg: m680x_reg,
    #[doc = "< Indexed addressing operand"]
    pub idx: m680x_op_idx,
    #[doc = "< Relative address. operand (Bcc/LBcc)"]
    pub rel: m680x_op_rel,
    #[doc = "< Extended address"]
    pub ext: m680x_op_ext,
    #[doc = "<</ Direct address (lower 8-bit)"]
    pub direct_addr: u8,
    #[doc = "< constant value (bit index, page nr.)"]
    pub const_val: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m680x_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_m680x_op__bindgen_ty_1>() - 16usize];
    ["Alignment of cs_m680x_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_m680x_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::idx"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, idx) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::rel"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, rel) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::ext"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, ext) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::direct_addr"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, direct_addr) - 0usize];
    ["Offset of field: cs_m680x_op__bindgen_ty_1::const_val"]
        [::std::mem::offset_of!(cs_m680x_op__bindgen_ty_1, const_val) - 0usize];
};
impl Default for cs_m680x_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m680x_op"][::std::mem::size_of::<cs_m680x_op>() - 24usize];
    ["Alignment of cs_m680x_op"][::std::mem::align_of::<cs_m680x_op>() - 4usize];
    ["Offset of field: cs_m680x_op::type_"][::std::mem::offset_of!(cs_m680x_op, type_) - 0usize];
    ["Offset of field: cs_m680x_op::size"][::std::mem::offset_of!(cs_m680x_op, size) - 20usize];
    ["Offset of field: cs_m680x_op::access"][::std::mem::offset_of!(cs_m680x_op, access) - 21usize];
};
impl Default for cs_m680x_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " The M680X instruction and it's operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x {
    #[doc = "< See: M680X instruction flags"]
    pub flags: u8,
    #[doc = "< number of operands for the instruction or 0"]
    pub op_count: u8,
    #[doc = "< operands for this insn."]
    pub operands: [cs_m680x_op; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_m680x"][::std::mem::size_of::<cs_m680x>() - 220usize];
    ["Alignment of cs_m680x"][::std::mem::align_of::<cs_m680x>() - 4usize];
    ["Offset of field: cs_m680x::flags"][::std::mem::offset_of!(cs_m680x, flags) - 0usize];
    ["Offset of field: cs_m680x::op_count"][::std::mem::offset_of!(cs_m680x, op_count) - 1usize];
    ["Offset of field: cs_m680x::operands"][::std::mem::offset_of!(cs_m680x, operands) - 4usize];
};
impl Default for cs_m680x {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cs_evm {
    #[doc = "< number of items popped from the stack"]
    pub pop: ::std::os::raw::c_uchar,
    #[doc = "< number of items pushed into the stack"]
    pub push: ::std::os::raw::c_uchar,
    #[doc = "< gas fee for the instruction"]
    pub fee: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_evm"][::std::mem::size_of::<cs_evm>() - 8usize];
    ["Alignment of cs_evm"][::std::mem::align_of::<cs_evm>() - 4usize];
    ["Offset of field: cs_evm::pop"][::std::mem::offset_of!(cs_evm, pop) - 0usize];
    ["Offset of field: cs_evm::push"][::std::mem::offset_of!(cs_evm, push) - 1usize];
    ["Offset of field: cs_evm::fee"][::std::mem::offset_of!(cs_evm, fee) - 4usize];
};
pub const riscv_op_type_RISCV_OP_INVALID: riscv_op_type = 0;
pub const riscv_op_type_RISCV_OP_REG: riscv_op_type = 1;
pub const riscv_op_type_RISCV_OP_IMM: riscv_op_type = 2;
pub const riscv_op_type_RISCV_OP_MEM: riscv_op_type = 3;
pub type riscv_op_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct riscv_op_mem {
    pub base: ::std::os::raw::c_uint,
    pub disp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of riscv_op_mem"][::std::mem::size_of::<riscv_op_mem>() - 16usize];
    ["Alignment of riscv_op_mem"][::std::mem::align_of::<riscv_op_mem>() - 8usize];
    ["Offset of field: riscv_op_mem::base"][::std::mem::offset_of!(riscv_op_mem, base) - 0usize];
    ["Offset of field: riscv_op_mem::disp"][::std::mem::offset_of!(riscv_op_mem, disp) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv_op {
    pub type_: riscv_op_type,
    pub __bindgen_anon_1: cs_riscv_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_riscv_op__bindgen_ty_1 {
    pub reg: ::std::os::raw::c_uint,
    pub imm: i64,
    pub mem: riscv_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_riscv_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_riscv_op__bindgen_ty_1>() - 16usize];
    ["Alignment of cs_riscv_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_riscv_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_riscv_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_riscv_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_riscv_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_riscv_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_riscv_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_riscv_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_riscv_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_riscv_op"][::std::mem::size_of::<cs_riscv_op>() - 24usize];
    ["Alignment of cs_riscv_op"][::std::mem::align_of::<cs_riscv_op>() - 8usize];
    ["Offset of field: cs_riscv_op::type_"][::std::mem::offset_of!(cs_riscv_op, type_) - 0usize];
};
impl Default for cs_riscv_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv {
    pub need_effective_addr: bool,
    pub op_count: u8,
    pub operands: [cs_riscv_op; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_riscv"][::std::mem::size_of::<cs_riscv>() - 200usize];
    ["Alignment of cs_riscv"][::std::mem::align_of::<cs_riscv>() - 8usize];
    ["Offset of field: cs_riscv::need_effective_addr"]
        [::std::mem::offset_of!(cs_riscv, need_effective_addr) - 0usize];
    ["Offset of field: cs_riscv::op_count"][::std::mem::offset_of!(cs_riscv, op_count) - 1usize];
    ["Offset of field: cs_riscv::operands"][::std::mem::offset_of!(cs_riscv, operands) - 8usize];
};
impl Default for cs_riscv {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const wasm_op_type_WASM_OP_INVALID: wasm_op_type = 0;
pub const wasm_op_type_WASM_OP_NONE: wasm_op_type = 1;
pub const wasm_op_type_WASM_OP_INT7: wasm_op_type = 2;
pub const wasm_op_type_WASM_OP_VARUINT32: wasm_op_type = 3;
pub const wasm_op_type_WASM_OP_VARUINT64: wasm_op_type = 4;
pub const wasm_op_type_WASM_OP_UINT32: wasm_op_type = 5;
pub const wasm_op_type_WASM_OP_UINT64: wasm_op_type = 6;
pub const wasm_op_type_WASM_OP_IMM: wasm_op_type = 7;
pub const wasm_op_type_WASM_OP_BRTABLE: wasm_op_type = 8;
pub type wasm_op_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cs_wasm_brtable {
    pub length: u32,
    pub address: u64,
    pub default_target: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_wasm_brtable"][::std::mem::size_of::<cs_wasm_brtable>() - 24usize];
    ["Alignment of cs_wasm_brtable"][::std::mem::align_of::<cs_wasm_brtable>() - 8usize];
    ["Offset of field: cs_wasm_brtable::length"]
        [::std::mem::offset_of!(cs_wasm_brtable, length) - 0usize];
    ["Offset of field: cs_wasm_brtable::address"]
        [::std::mem::offset_of!(cs_wasm_brtable, address) - 8usize];
    ["Offset of field: cs_wasm_brtable::default_target"]
        [::std::mem::offset_of!(cs_wasm_brtable, default_target) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm_op {
    pub type_: wasm_op_type,
    pub size: u32,
    pub __bindgen_anon_1: cs_wasm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_wasm_op__bindgen_ty_1 {
    pub int7: i8,
    pub varuint32: u32,
    pub varuint64: u64,
    pub uint32: u32,
    pub uint64: u64,
    pub immediate: [u32; 2usize],
    pub brtable: cs_wasm_brtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_wasm_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_wasm_op__bindgen_ty_1>() - 24usize];
    ["Alignment of cs_wasm_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_wasm_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::int7"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, int7) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::varuint32"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, varuint32) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::varuint64"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, varuint64) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, uint32) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::uint64"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, uint64) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::immediate"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, immediate) - 0usize];
    ["Offset of field: cs_wasm_op__bindgen_ty_1::brtable"]
        [::std::mem::offset_of!(cs_wasm_op__bindgen_ty_1, brtable) - 0usize];
};
impl Default for cs_wasm_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_wasm_op"][::std::mem::size_of::<cs_wasm_op>() - 32usize];
    ["Alignment of cs_wasm_op"][::std::mem::align_of::<cs_wasm_op>() - 8usize];
    ["Offset of field: cs_wasm_op::type_"][::std::mem::offset_of!(cs_wasm_op, type_) - 0usize];
    ["Offset of field: cs_wasm_op::size"][::std::mem::offset_of!(cs_wasm_op, size) - 4usize];
};
impl Default for cs_wasm_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm {
    pub op_count: u8,
    pub operands: [cs_wasm_op; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_wasm"][::std::mem::size_of::<cs_wasm>() - 72usize];
    ["Alignment of cs_wasm"][::std::mem::align_of::<cs_wasm>() - 8usize];
    ["Offset of field: cs_wasm::op_count"][::std::mem::offset_of!(cs_wasm, op_count) - 0usize];
    ["Offset of field: cs_wasm::operands"][::std::mem::offset_of!(cs_wasm, operands) - 8usize];
};
impl Default for cs_wasm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mos65xx_reg_MOS65XX_REG_INVALID: mos65xx_reg = 0;
#[doc = "< accumulator"]
pub const mos65xx_reg_MOS65XX_REG_ACC: mos65xx_reg = 1;
#[doc = "< X index register"]
pub const mos65xx_reg_MOS65XX_REG_X: mos65xx_reg = 2;
#[doc = "< Y index register"]
pub const mos65xx_reg_MOS65XX_REG_Y: mos65xx_reg = 3;
#[doc = "< status register"]
pub const mos65xx_reg_MOS65XX_REG_P: mos65xx_reg = 4;
#[doc = "< stack pointer register"]
pub const mos65xx_reg_MOS65XX_REG_SP: mos65xx_reg = 5;
#[doc = "< direct page register"]
pub const mos65xx_reg_MOS65XX_REG_DP: mos65xx_reg = 6;
#[doc = "< data bank register"]
pub const mos65xx_reg_MOS65XX_REG_B: mos65xx_reg = 7;
#[doc = "< program bank register"]
pub const mos65xx_reg_MOS65XX_REG_K: mos65xx_reg = 8;
pub const mos65xx_reg_MOS65XX_REG_ENDING: mos65xx_reg = 9;
#[doc = " MOS65XX registers and special registers"]
pub type mos65xx_reg = ::std::os::raw::c_uint;
#[doc = "< No address mode."]
pub const mos65xx_address_mode_MOS65XX_AM_NONE: mos65xx_address_mode = 0;
#[doc = "< implied addressing (no addressing mode)"]
pub const mos65xx_address_mode_MOS65XX_AM_IMP: mos65xx_address_mode = 1;
#[doc = "< accumulator addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ACC: mos65xx_address_mode = 2;
#[doc = "< 8/16 Bit immediate value"]
pub const mos65xx_address_mode_MOS65XX_AM_IMM: mos65xx_address_mode = 3;
#[doc = "< relative addressing used by branches"]
pub const mos65xx_address_mode_MOS65XX_AM_REL: mos65xx_address_mode = 4;
#[doc = "< interrupt addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_INT: mos65xx_address_mode = 5;
#[doc = "< memory block addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_BLOCK: mos65xx_address_mode = 6;
#[doc = "< zeropage addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP: mos65xx_address_mode = 7;
#[doc = "< indexed zeropage addressing by the X index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_X: mos65xx_address_mode = 8;
#[doc = "< indexed zeropage addressing by the Y index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_Y: mos65xx_address_mode = 9;
#[doc = "< zero page address, branch relative address"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_REL: mos65xx_address_mode = 10;
#[doc = "< indirect zeropage addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND: mos65xx_address_mode = 11;
#[doc = "< indexed zeropage indirect addressing by the X index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_X_IND: mos65xx_address_mode = 12;
#[doc = "< indirect zeropage indexed addressing by the Y index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_Y: mos65xx_address_mode = 13;
#[doc = "< zeropage indirect long addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_LONG: mos65xx_address_mode = 14;
#[doc = "< zeropage indirect long addressing indexed by Y register"]
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_LONG_Y: mos65xx_address_mode = 15;
#[doc = "< absolute addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS: mos65xx_address_mode = 16;
#[doc = "< indexed absolute addressing by the X index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_X: mos65xx_address_mode = 17;
#[doc = "< indexed absolute addressing by the Y index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_Y: mos65xx_address_mode = 18;
#[doc = "< absolute indirect addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_IND: mos65xx_address_mode = 19;
#[doc = "< indexed absolute indirect addressing by the X index register"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_X_IND: mos65xx_address_mode = 20;
#[doc = "< absolute indirect long addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_IND_LONG: mos65xx_address_mode = 21;
#[doc = "< absolute long address mode"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_LONG: mos65xx_address_mode = 22;
#[doc = "< absolute long address mode, indexed by X register"]
pub const mos65xx_address_mode_MOS65XX_AM_ABS_LONG_X: mos65xx_address_mode = 23;
#[doc = "< stack relative addressing"]
pub const mos65xx_address_mode_MOS65XX_AM_SR: mos65xx_address_mode = 24;
#[doc = "< indirect stack relative addressing indexed by the Y index register"]
pub const mos65xx_address_mode_MOS65XX_AM_SR_IND_Y: mos65xx_address_mode = 25;
#[doc = " MOS65XX Addressing Modes"]
pub type mos65xx_address_mode = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const mos65xx_op_type_MOS65XX_OP_INVALID: mos65xx_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const mos65xx_op_type_MOS65XX_OP_REG: mos65xx_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const mos65xx_op_type_MOS65XX_OP_IMM: mos65xx_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const mos65xx_op_type_MOS65XX_OP_MEM: mos65xx_op_type = 3;
#[doc = " Operand type for instruction's operands"]
pub type mos65xx_op_type = ::std::os::raw::c_uint;
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx_op {
    #[doc = "< operand type"]
    pub type_: mos65xx_op_type,
    pub __bindgen_anon_1: cs_mos65xx_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mos65xx_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: mos65xx_reg,
    #[doc = "< immediate value for IMM operand"]
    pub imm: u16,
    #[doc = "< address for MEM operand"]
    pub mem: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mos65xx_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_mos65xx_op__bindgen_ty_1>() - 4usize];
    ["Alignment of cs_mos65xx_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_mos65xx_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_mos65xx_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_mos65xx_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_mos65xx_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_mos65xx_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_mos65xx_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_mos65xx_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_mos65xx_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mos65xx_op"][::std::mem::size_of::<cs_mos65xx_op>() - 8usize];
    ["Alignment of cs_mos65xx_op"][::std::mem::align_of::<cs_mos65xx_op>() - 4usize];
    ["Offset of field: cs_mos65xx_op::type_"]
        [::std::mem::offset_of!(cs_mos65xx_op, type_) - 0usize];
};
impl Default for cs_mos65xx_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " The MOS65XX address mode and it's operands"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx {
    pub am: mos65xx_address_mode,
    pub modifies_flags: bool,
    #[doc = " Number of operands of this instruction,\n or 0 when instruction has no operand."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_mos65xx_op; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_mos65xx"][::std::mem::size_of::<cs_mos65xx>() - 32usize];
    ["Alignment of cs_mos65xx"][::std::mem::align_of::<cs_mos65xx>() - 4usize];
    ["Offset of field: cs_mos65xx::am"][::std::mem::offset_of!(cs_mos65xx, am) - 0usize];
    ["Offset of field: cs_mos65xx::modifies_flags"]
        [::std::mem::offset_of!(cs_mos65xx, modifies_flags) - 4usize];
    ["Offset of field: cs_mos65xx::op_count"]
        [::std::mem::offset_of!(cs_mos65xx, op_count) - 5usize];
    ["Offset of field: cs_mos65xx::operands"]
        [::std::mem::offset_of!(cs_mos65xx, operands) - 8usize];
};
impl Default for cs_mos65xx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const bpf_op_type_BPF_OP_INVALID: bpf_op_type = 0;
pub const bpf_op_type_BPF_OP_REG: bpf_op_type = 1;
pub const bpf_op_type_BPF_OP_IMM: bpf_op_type = 2;
pub const bpf_op_type_BPF_OP_OFF: bpf_op_type = 3;
pub const bpf_op_type_BPF_OP_MEM: bpf_op_type = 4;
#[doc = "< M[k] in cBPF"]
pub const bpf_op_type_BPF_OP_MMEM: bpf_op_type = 5;
#[doc = "< corresponds to cBPF's BPF_MSH mode"]
pub const bpf_op_type_BPF_OP_MSH: bpf_op_type = 6;
#[doc = "< cBPF's extension (not eBPF)"]
pub const bpf_op_type_BPF_OP_EXT: bpf_op_type = 7;
#[doc = " Operand type for instruction's operands"]
pub type bpf_op_type = ::std::os::raw::c_uint;
pub const bpf_reg_BPF_REG_INVALID: bpf_reg = 0;
pub const bpf_reg_BPF_REG_A: bpf_reg = 1;
pub const bpf_reg_BPF_REG_X: bpf_reg = 2;
pub const bpf_reg_BPF_REG_R0: bpf_reg = 3;
pub const bpf_reg_BPF_REG_R1: bpf_reg = 4;
pub const bpf_reg_BPF_REG_R2: bpf_reg = 5;
pub const bpf_reg_BPF_REG_R3: bpf_reg = 6;
pub const bpf_reg_BPF_REG_R4: bpf_reg = 7;
pub const bpf_reg_BPF_REG_R5: bpf_reg = 8;
pub const bpf_reg_BPF_REG_R6: bpf_reg = 9;
pub const bpf_reg_BPF_REG_R7: bpf_reg = 10;
pub const bpf_reg_BPF_REG_R8: bpf_reg = 11;
pub const bpf_reg_BPF_REG_R9: bpf_reg = 12;
pub const bpf_reg_BPF_REG_R10: bpf_reg = 13;
pub const bpf_reg_BPF_REG_ENDING: bpf_reg = 14;
#[doc = " BPF registers"]
pub type bpf_reg = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with BPF_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_op_mem {
    #[doc = "< base register"]
    pub base: bpf_reg,
    #[doc = "< offset value"]
    pub disp: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_op_mem"][::std::mem::size_of::<bpf_op_mem>() - 8usize];
    ["Alignment of bpf_op_mem"][::std::mem::align_of::<bpf_op_mem>() - 4usize];
    ["Offset of field: bpf_op_mem::base"][::std::mem::offset_of!(bpf_op_mem, base) - 0usize];
    ["Offset of field: bpf_op_mem::disp"][::std::mem::offset_of!(bpf_op_mem, disp) - 4usize];
};
impl Default for bpf_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf_op {
    pub type_: bpf_op_type,
    pub __bindgen_anon_1: cs_bpf_op__bindgen_ty_1,
    #[doc = " How is this operand accessed? (READ, WRITE or READ|WRITE)\n This field is combined of cs_ac_type.\n NOTE: this field is irrelevant if engine is compiled in DIET mode."]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_bpf_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: u8,
    #[doc = "< immediate value IMM operand"]
    pub imm: u64,
    #[doc = "< offset value, used in jump & call"]
    pub off: u32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: bpf_op_mem,
    #[doc = "< M[k] in cBPF"]
    pub mmem: u32,
    #[doc = "< corresponds to cBPF's BPF_MSH mode"]
    pub msh: u32,
    #[doc = "< cBPF's extension (not eBPF)"]
    pub ext: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_bpf_op__bindgen_ty_1"][::std::mem::size_of::<cs_bpf_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_bpf_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_bpf_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::off"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, off) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, mem) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::mmem"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, mmem) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::msh"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, msh) - 0usize];
    ["Offset of field: cs_bpf_op__bindgen_ty_1::ext"]
        [::std::mem::offset_of!(cs_bpf_op__bindgen_ty_1, ext) - 0usize];
};
impl Default for cs_bpf_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_bpf_op"][::std::mem::size_of::<cs_bpf_op>() - 24usize];
    ["Alignment of cs_bpf_op"][::std::mem::align_of::<cs_bpf_op>() - 8usize];
    ["Offset of field: cs_bpf_op::type_"][::std::mem::offset_of!(cs_bpf_op, type_) - 0usize];
    ["Offset of field: cs_bpf_op::access"][::std::mem::offset_of!(cs_bpf_op, access) - 16usize];
};
impl Default for cs_bpf_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf {
    pub op_count: u8,
    pub operands: [cs_bpf_op; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_bpf"][::std::mem::size_of::<cs_bpf>() - 104usize];
    ["Alignment of cs_bpf"][::std::mem::align_of::<cs_bpf>() - 8usize];
    ["Offset of field: cs_bpf::op_count"][::std::mem::offset_of!(cs_bpf, op_count) - 0usize];
    ["Offset of field: cs_bpf::operands"][::std::mem::offset_of!(cs_bpf, operands) - 8usize];
};
impl Default for cs_bpf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const sh_reg_SH_REG_INVALID: sh_reg = 0;
pub const sh_reg_SH_REG_R0: sh_reg = 1;
pub const sh_reg_SH_REG_R1: sh_reg = 2;
pub const sh_reg_SH_REG_R2: sh_reg = 3;
pub const sh_reg_SH_REG_R3: sh_reg = 4;
pub const sh_reg_SH_REG_R4: sh_reg = 5;
pub const sh_reg_SH_REG_R5: sh_reg = 6;
pub const sh_reg_SH_REG_R6: sh_reg = 7;
pub const sh_reg_SH_REG_R7: sh_reg = 8;
pub const sh_reg_SH_REG_R8: sh_reg = 9;
pub const sh_reg_SH_REG_R9: sh_reg = 10;
pub const sh_reg_SH_REG_R10: sh_reg = 11;
pub const sh_reg_SH_REG_R11: sh_reg = 12;
pub const sh_reg_SH_REG_R12: sh_reg = 13;
pub const sh_reg_SH_REG_R13: sh_reg = 14;
pub const sh_reg_SH_REG_R14: sh_reg = 15;
pub const sh_reg_SH_REG_R15: sh_reg = 16;
pub const sh_reg_SH_REG_R0_BANK: sh_reg = 17;
pub const sh_reg_SH_REG_R1_BANK: sh_reg = 18;
pub const sh_reg_SH_REG_R2_BANK: sh_reg = 19;
pub const sh_reg_SH_REG_R3_BANK: sh_reg = 20;
pub const sh_reg_SH_REG_R4_BANK: sh_reg = 21;
pub const sh_reg_SH_REG_R5_BANK: sh_reg = 22;
pub const sh_reg_SH_REG_R6_BANK: sh_reg = 23;
pub const sh_reg_SH_REG_R7_BANK: sh_reg = 24;
pub const sh_reg_SH_REG_FR0: sh_reg = 25;
pub const sh_reg_SH_REG_FR1: sh_reg = 26;
pub const sh_reg_SH_REG_FR2: sh_reg = 27;
pub const sh_reg_SH_REG_FR3: sh_reg = 28;
pub const sh_reg_SH_REG_FR4: sh_reg = 29;
pub const sh_reg_SH_REG_FR5: sh_reg = 30;
pub const sh_reg_SH_REG_FR6: sh_reg = 31;
pub const sh_reg_SH_REG_FR7: sh_reg = 32;
pub const sh_reg_SH_REG_FR8: sh_reg = 33;
pub const sh_reg_SH_REG_FR9: sh_reg = 34;
pub const sh_reg_SH_REG_FR10: sh_reg = 35;
pub const sh_reg_SH_REG_FR11: sh_reg = 36;
pub const sh_reg_SH_REG_FR12: sh_reg = 37;
pub const sh_reg_SH_REG_FR13: sh_reg = 38;
pub const sh_reg_SH_REG_FR14: sh_reg = 39;
pub const sh_reg_SH_REG_FR15: sh_reg = 40;
pub const sh_reg_SH_REG_DR0: sh_reg = 41;
pub const sh_reg_SH_REG_DR2: sh_reg = 42;
pub const sh_reg_SH_REG_DR4: sh_reg = 43;
pub const sh_reg_SH_REG_DR6: sh_reg = 44;
pub const sh_reg_SH_REG_DR8: sh_reg = 45;
pub const sh_reg_SH_REG_DR10: sh_reg = 46;
pub const sh_reg_SH_REG_DR12: sh_reg = 47;
pub const sh_reg_SH_REG_DR14: sh_reg = 48;
pub const sh_reg_SH_REG_XD0: sh_reg = 49;
pub const sh_reg_SH_REG_XD2: sh_reg = 50;
pub const sh_reg_SH_REG_XD4: sh_reg = 51;
pub const sh_reg_SH_REG_XD6: sh_reg = 52;
pub const sh_reg_SH_REG_XD8: sh_reg = 53;
pub const sh_reg_SH_REG_XD10: sh_reg = 54;
pub const sh_reg_SH_REG_XD12: sh_reg = 55;
pub const sh_reg_SH_REG_XD14: sh_reg = 56;
pub const sh_reg_SH_REG_XF0: sh_reg = 57;
pub const sh_reg_SH_REG_XF1: sh_reg = 58;
pub const sh_reg_SH_REG_XF2: sh_reg = 59;
pub const sh_reg_SH_REG_XF3: sh_reg = 60;
pub const sh_reg_SH_REG_XF4: sh_reg = 61;
pub const sh_reg_SH_REG_XF5: sh_reg = 62;
pub const sh_reg_SH_REG_XF6: sh_reg = 63;
pub const sh_reg_SH_REG_XF7: sh_reg = 64;
pub const sh_reg_SH_REG_XF8: sh_reg = 65;
pub const sh_reg_SH_REG_XF9: sh_reg = 66;
pub const sh_reg_SH_REG_XF10: sh_reg = 67;
pub const sh_reg_SH_REG_XF11: sh_reg = 68;
pub const sh_reg_SH_REG_XF12: sh_reg = 69;
pub const sh_reg_SH_REG_XF13: sh_reg = 70;
pub const sh_reg_SH_REG_XF14: sh_reg = 71;
pub const sh_reg_SH_REG_XF15: sh_reg = 72;
pub const sh_reg_SH_REG_FV0: sh_reg = 73;
pub const sh_reg_SH_REG_FV4: sh_reg = 74;
pub const sh_reg_SH_REG_FV8: sh_reg = 75;
pub const sh_reg_SH_REG_FV12: sh_reg = 76;
pub const sh_reg_SH_REG_XMATRX: sh_reg = 77;
pub const sh_reg_SH_REG_PC: sh_reg = 78;
pub const sh_reg_SH_REG_PR: sh_reg = 79;
pub const sh_reg_SH_REG_MACH: sh_reg = 80;
pub const sh_reg_SH_REG_MACL: sh_reg = 81;
pub const sh_reg_SH_REG_SR: sh_reg = 82;
pub const sh_reg_SH_REG_GBR: sh_reg = 83;
pub const sh_reg_SH_REG_SSR: sh_reg = 84;
pub const sh_reg_SH_REG_SPC: sh_reg = 85;
pub const sh_reg_SH_REG_SGR: sh_reg = 86;
pub const sh_reg_SH_REG_DBR: sh_reg = 87;
pub const sh_reg_SH_REG_VBR: sh_reg = 88;
pub const sh_reg_SH_REG_TBR: sh_reg = 89;
pub const sh_reg_SH_REG_RS: sh_reg = 90;
pub const sh_reg_SH_REG_RE: sh_reg = 91;
pub const sh_reg_SH_REG_MOD: sh_reg = 92;
pub const sh_reg_SH_REG_FPUL: sh_reg = 93;
pub const sh_reg_SH_REG_FPSCR: sh_reg = 94;
pub const sh_reg_SH_REG_DSP_X0: sh_reg = 95;
pub const sh_reg_SH_REG_DSP_X1: sh_reg = 96;
pub const sh_reg_SH_REG_DSP_Y0: sh_reg = 97;
pub const sh_reg_SH_REG_DSP_Y1: sh_reg = 98;
pub const sh_reg_SH_REG_DSP_A0: sh_reg = 99;
pub const sh_reg_SH_REG_DSP_A1: sh_reg = 100;
pub const sh_reg_SH_REG_DSP_A0G: sh_reg = 101;
pub const sh_reg_SH_REG_DSP_A1G: sh_reg = 102;
pub const sh_reg_SH_REG_DSP_M0: sh_reg = 103;
pub const sh_reg_SH_REG_DSP_M1: sh_reg = 104;
pub const sh_reg_SH_REG_DSP_DSR: sh_reg = 105;
pub const sh_reg_SH_REG_DSP_RSV0: sh_reg = 106;
pub const sh_reg_SH_REG_DSP_RSV1: sh_reg = 107;
pub const sh_reg_SH_REG_DSP_RSV2: sh_reg = 108;
pub const sh_reg_SH_REG_DSP_RSV3: sh_reg = 109;
pub const sh_reg_SH_REG_DSP_RSV4: sh_reg = 110;
pub const sh_reg_SH_REG_DSP_RSV5: sh_reg = 111;
pub const sh_reg_SH_REG_DSP_RSV6: sh_reg = 112;
pub const sh_reg_SH_REG_DSP_RSV7: sh_reg = 113;
pub const sh_reg_SH_REG_DSP_RSV8: sh_reg = 114;
pub const sh_reg_SH_REG_DSP_RSV9: sh_reg = 115;
pub const sh_reg_SH_REG_DSP_RSVA: sh_reg = 116;
pub const sh_reg_SH_REG_DSP_RSVB: sh_reg = 117;
pub const sh_reg_SH_REG_DSP_RSVC: sh_reg = 118;
pub const sh_reg_SH_REG_DSP_RSVD: sh_reg = 119;
pub const sh_reg_SH_REG_DSP_RSVE: sh_reg = 120;
pub const sh_reg_SH_REG_DSP_RSVF: sh_reg = 121;
pub const sh_reg_SH_REG_ENDING: sh_reg = 122;
#[doc = " SH registers and special registers"]
pub type sh_reg = ::std::os::raw::c_uint;
#[doc = "< = CS_OP_INVALID (Uninitialized)."]
pub const sh_op_type_SH_OP_INVALID: sh_op_type = 0;
#[doc = "< = CS_OP_REG (Register operand)."]
pub const sh_op_type_SH_OP_REG: sh_op_type = 1;
#[doc = "< = CS_OP_IMM (Immediate operand)."]
pub const sh_op_type_SH_OP_IMM: sh_op_type = 2;
#[doc = "< = CS_OP_MEM (Memory operand)."]
pub const sh_op_type_SH_OP_MEM: sh_op_type = 3;
pub type sh_op_type = ::std::os::raw::c_uint;
pub const sh_op_mem_type_SH_OP_MEM_INVALID: sh_op_mem_type = 0;
#[doc = " <= Invalid"]
pub const sh_op_mem_type_SH_OP_MEM_REG_IND: sh_op_mem_type = 1;
#[doc = " <= Register indirect"]
pub const sh_op_mem_type_SH_OP_MEM_REG_POST: sh_op_mem_type = 2;
#[doc = " <= Register post increment"]
pub const sh_op_mem_type_SH_OP_MEM_REG_PRE: sh_op_mem_type = 3;
#[doc = " <= Register pre decrement"]
pub const sh_op_mem_type_SH_OP_MEM_REG_DISP: sh_op_mem_type = 4;
#[doc = " <= displacement"]
pub const sh_op_mem_type_SH_OP_MEM_REG_R0: sh_op_mem_type = 5;
#[doc = " <= R0 indexed"]
pub const sh_op_mem_type_SH_OP_MEM_GBR_DISP: sh_op_mem_type = 6;
#[doc = " <= GBR based displacement"]
pub const sh_op_mem_type_SH_OP_MEM_GBR_R0: sh_op_mem_type = 7;
#[doc = " <= GBR based R0 indexed"]
pub const sh_op_mem_type_SH_OP_MEM_PCR: sh_op_mem_type = 8;
#[doc = " <= PC relative"]
pub const sh_op_mem_type_SH_OP_MEM_TBR_DISP: sh_op_mem_type = 9;
pub type sh_op_mem_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_mem {
    pub address: sh_op_mem_type,
    #[doc = " <= memory address"]
    pub reg: sh_reg,
    #[doc = " <= base register"]
    pub disp: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sh_op_mem"][::std::mem::size_of::<sh_op_mem>() - 12usize];
    ["Alignment of sh_op_mem"][::std::mem::align_of::<sh_op_mem>() - 4usize];
    ["Offset of field: sh_op_mem::address"][::std::mem::offset_of!(sh_op_mem, address) - 0usize];
    ["Offset of field: sh_op_mem::reg"][::std::mem::offset_of!(sh_op_mem, reg) - 4usize];
    ["Offset of field: sh_op_mem::disp"][::std::mem::offset_of!(sh_op_mem, disp) - 8usize];
};
impl Default for sh_op_mem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const sh_dsp_insn_SH_INS_DSP_NOP: sh_dsp_insn = 1;
pub const sh_dsp_insn_SH_INS_DSP_MOV: sh_dsp_insn = 2;
pub const sh_dsp_insn_SH_INS_DSP_PSHL: sh_dsp_insn = 3;
pub const sh_dsp_insn_SH_INS_DSP_PSHA: sh_dsp_insn = 4;
pub const sh_dsp_insn_SH_INS_DSP_PMULS: sh_dsp_insn = 5;
pub const sh_dsp_insn_SH_INS_DSP_PCLR_PMULS: sh_dsp_insn = 6;
pub const sh_dsp_insn_SH_INS_DSP_PSUB_PMULS: sh_dsp_insn = 7;
pub const sh_dsp_insn_SH_INS_DSP_PADD_PMULS: sh_dsp_insn = 8;
pub const sh_dsp_insn_SH_INS_DSP_PSUBC: sh_dsp_insn = 9;
pub const sh_dsp_insn_SH_INS_DSP_PADDC: sh_dsp_insn = 10;
pub const sh_dsp_insn_SH_INS_DSP_PCMP: sh_dsp_insn = 11;
pub const sh_dsp_insn_SH_INS_DSP_PABS: sh_dsp_insn = 12;
pub const sh_dsp_insn_SH_INS_DSP_PRND: sh_dsp_insn = 13;
pub const sh_dsp_insn_SH_INS_DSP_PSUB: sh_dsp_insn = 14;
pub const sh_dsp_insn_SH_INS_DSP_PSUBr: sh_dsp_insn = 15;
pub const sh_dsp_insn_SH_INS_DSP_PADD: sh_dsp_insn = 16;
pub const sh_dsp_insn_SH_INS_DSP_PAND: sh_dsp_insn = 17;
pub const sh_dsp_insn_SH_INS_DSP_PXOR: sh_dsp_insn = 18;
pub const sh_dsp_insn_SH_INS_DSP_POR: sh_dsp_insn = 19;
pub const sh_dsp_insn_SH_INS_DSP_PDEC: sh_dsp_insn = 20;
pub const sh_dsp_insn_SH_INS_DSP_PINC: sh_dsp_insn = 21;
pub const sh_dsp_insn_SH_INS_DSP_PCLR: sh_dsp_insn = 22;
pub const sh_dsp_insn_SH_INS_DSP_PDMSB: sh_dsp_insn = 23;
pub const sh_dsp_insn_SH_INS_DSP_PNEG: sh_dsp_insn = 24;
pub const sh_dsp_insn_SH_INS_DSP_PCOPY: sh_dsp_insn = 25;
pub const sh_dsp_insn_SH_INS_DSP_PSTS: sh_dsp_insn = 26;
pub const sh_dsp_insn_SH_INS_DSP_PLDS: sh_dsp_insn = 27;
pub const sh_dsp_insn_SH_INS_DSP_PSWAP: sh_dsp_insn = 28;
pub const sh_dsp_insn_SH_INS_DSP_PWAD: sh_dsp_insn = 29;
pub const sh_dsp_insn_SH_INS_DSP_PWSB: sh_dsp_insn = 30;
pub type sh_dsp_insn = ::std::os::raw::c_uint;
pub const sh_dsp_operand_SH_OP_DSP_INVALID: sh_dsp_operand = 0;
pub const sh_dsp_operand_SH_OP_DSP_REG_PRE: sh_dsp_operand = 1;
pub const sh_dsp_operand_SH_OP_DSP_REG_IND: sh_dsp_operand = 2;
pub const sh_dsp_operand_SH_OP_DSP_REG_POST: sh_dsp_operand = 3;
pub const sh_dsp_operand_SH_OP_DSP_REG_INDEX: sh_dsp_operand = 4;
pub const sh_dsp_operand_SH_OP_DSP_REG: sh_dsp_operand = 5;
pub const sh_dsp_operand_SH_OP_DSP_IMM: sh_dsp_operand = 6;
pub type sh_dsp_operand = ::std::os::raw::c_uint;
pub const sh_dsp_cc_SH_DSP_CC_INVALID: sh_dsp_cc = 0;
pub const sh_dsp_cc_SH_DSP_CC_NONE: sh_dsp_cc = 1;
pub const sh_dsp_cc_SH_DSP_CC_DCT: sh_dsp_cc = 2;
pub const sh_dsp_cc_SH_DSP_CC_DCF: sh_dsp_cc = 3;
pub type sh_dsp_cc = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_dsp {
    pub insn: sh_dsp_insn,
    pub operand: [sh_dsp_operand; 2usize],
    pub r: [sh_reg; 6usize],
    pub cc: sh_dsp_cc,
    pub imm: u8,
    pub size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sh_op_dsp"][::std::mem::size_of::<sh_op_dsp>() - 48usize];
    ["Alignment of sh_op_dsp"][::std::mem::align_of::<sh_op_dsp>() - 4usize];
    ["Offset of field: sh_op_dsp::insn"][::std::mem::offset_of!(sh_op_dsp, insn) - 0usize];
    ["Offset of field: sh_op_dsp::operand"][::std::mem::offset_of!(sh_op_dsp, operand) - 4usize];
    ["Offset of field: sh_op_dsp::r"][::std::mem::offset_of!(sh_op_dsp, r) - 12usize];
    ["Offset of field: sh_op_dsp::cc"][::std::mem::offset_of!(sh_op_dsp, cc) - 36usize];
    ["Offset of field: sh_op_dsp::imm"][::std::mem::offset_of!(sh_op_dsp, imm) - 40usize];
    ["Offset of field: sh_op_dsp::size"][::std::mem::offset_of!(sh_op_dsp, size) - 44usize];
};
impl Default for sh_op_dsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh_op {
    pub type_: sh_op_type,
    pub __bindgen_anon_1: cs_sh_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sh_op__bindgen_ty_1 {
    #[doc = "< immediate value for IMM operand"]
    pub imm: u64,
    #[doc = "< register value for REG operand"]
    pub reg: sh_reg,
    #[doc = "< data when operand is targeting memory"]
    pub mem: sh_op_mem,
    #[doc = "< dsp instruction"]
    pub dsp: sh_op_dsp,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sh_op__bindgen_ty_1"][::std::mem::size_of::<cs_sh_op__bindgen_ty_1>() - 48usize];
    ["Alignment of cs_sh_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_sh_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_sh_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_sh_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_sh_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_sh_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_sh_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_sh_op__bindgen_ty_1, mem) - 0usize];
    ["Offset of field: cs_sh_op__bindgen_ty_1::dsp"]
        [::std::mem::offset_of!(cs_sh_op__bindgen_ty_1, dsp) - 0usize];
};
impl Default for cs_sh_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sh_op"][::std::mem::size_of::<cs_sh_op>() - 56usize];
    ["Alignment of cs_sh_op"][::std::mem::align_of::<cs_sh_op>() - 8usize];
    ["Offset of field: cs_sh_op::type_"][::std::mem::offset_of!(cs_sh_op, type_) - 0usize];
};
impl Default for cs_sh_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const sh_insn_SH_INS_INVALID: sh_insn = 0;
pub const sh_insn_SH_INS_ADD_r: sh_insn = 1;
pub const sh_insn_SH_INS_ADD: sh_insn = 2;
pub const sh_insn_SH_INS_ADDC: sh_insn = 3;
pub const sh_insn_SH_INS_ADDV: sh_insn = 4;
pub const sh_insn_SH_INS_AND: sh_insn = 5;
pub const sh_insn_SH_INS_BAND: sh_insn = 6;
pub const sh_insn_SH_INS_BANDNOT: sh_insn = 7;
pub const sh_insn_SH_INS_BCLR: sh_insn = 8;
pub const sh_insn_SH_INS_BF: sh_insn = 9;
pub const sh_insn_SH_INS_BF_S: sh_insn = 10;
pub const sh_insn_SH_INS_BLD: sh_insn = 11;
pub const sh_insn_SH_INS_BLDNOT: sh_insn = 12;
pub const sh_insn_SH_INS_BOR: sh_insn = 13;
pub const sh_insn_SH_INS_BORNOT: sh_insn = 14;
pub const sh_insn_SH_INS_BRA: sh_insn = 15;
pub const sh_insn_SH_INS_BRAF: sh_insn = 16;
pub const sh_insn_SH_INS_BSET: sh_insn = 17;
pub const sh_insn_SH_INS_BSR: sh_insn = 18;
pub const sh_insn_SH_INS_BSRF: sh_insn = 19;
pub const sh_insn_SH_INS_BST: sh_insn = 20;
pub const sh_insn_SH_INS_BT: sh_insn = 21;
pub const sh_insn_SH_INS_BT_S: sh_insn = 22;
pub const sh_insn_SH_INS_BXOR: sh_insn = 23;
pub const sh_insn_SH_INS_CLIPS: sh_insn = 24;
pub const sh_insn_SH_INS_CLIPU: sh_insn = 25;
pub const sh_insn_SH_INS_CLRDMXY: sh_insn = 26;
pub const sh_insn_SH_INS_CLRMAC: sh_insn = 27;
pub const sh_insn_SH_INS_CLRS: sh_insn = 28;
pub const sh_insn_SH_INS_CLRT: sh_insn = 29;
pub const sh_insn_SH_INS_CMP_EQ: sh_insn = 30;
pub const sh_insn_SH_INS_CMP_GE: sh_insn = 31;
pub const sh_insn_SH_INS_CMP_GT: sh_insn = 32;
pub const sh_insn_SH_INS_CMP_HI: sh_insn = 33;
pub const sh_insn_SH_INS_CMP_HS: sh_insn = 34;
pub const sh_insn_SH_INS_CMP_PL: sh_insn = 35;
pub const sh_insn_SH_INS_CMP_PZ: sh_insn = 36;
pub const sh_insn_SH_INS_CMP_STR: sh_insn = 37;
pub const sh_insn_SH_INS_DIV0S: sh_insn = 38;
pub const sh_insn_SH_INS_DIV0U: sh_insn = 39;
pub const sh_insn_SH_INS_DIV1: sh_insn = 40;
pub const sh_insn_SH_INS_DIVS: sh_insn = 41;
pub const sh_insn_SH_INS_DIVU: sh_insn = 42;
pub const sh_insn_SH_INS_DMULS_L: sh_insn = 43;
pub const sh_insn_SH_INS_DMULU_L: sh_insn = 44;
pub const sh_insn_SH_INS_DT: sh_insn = 45;
pub const sh_insn_SH_INS_EXTS_B: sh_insn = 46;
pub const sh_insn_SH_INS_EXTS_W: sh_insn = 47;
pub const sh_insn_SH_INS_EXTU_B: sh_insn = 48;
pub const sh_insn_SH_INS_EXTU_W: sh_insn = 49;
pub const sh_insn_SH_INS_FABS: sh_insn = 50;
pub const sh_insn_SH_INS_FADD: sh_insn = 51;
pub const sh_insn_SH_INS_FCMP_EQ: sh_insn = 52;
pub const sh_insn_SH_INS_FCMP_GT: sh_insn = 53;
pub const sh_insn_SH_INS_FCNVDS: sh_insn = 54;
pub const sh_insn_SH_INS_FCNVSD: sh_insn = 55;
pub const sh_insn_SH_INS_FDIV: sh_insn = 56;
pub const sh_insn_SH_INS_FIPR: sh_insn = 57;
pub const sh_insn_SH_INS_FLDI0: sh_insn = 58;
pub const sh_insn_SH_INS_FLDI1: sh_insn = 59;
pub const sh_insn_SH_INS_FLDS: sh_insn = 60;
pub const sh_insn_SH_INS_FLOAT: sh_insn = 61;
pub const sh_insn_SH_INS_FMAC: sh_insn = 62;
pub const sh_insn_SH_INS_FMOV: sh_insn = 63;
pub const sh_insn_SH_INS_FMUL: sh_insn = 64;
pub const sh_insn_SH_INS_FNEG: sh_insn = 65;
pub const sh_insn_SH_INS_FPCHG: sh_insn = 66;
pub const sh_insn_SH_INS_FRCHG: sh_insn = 67;
pub const sh_insn_SH_INS_FSCA: sh_insn = 68;
pub const sh_insn_SH_INS_FSCHG: sh_insn = 69;
pub const sh_insn_SH_INS_FSQRT: sh_insn = 70;
pub const sh_insn_SH_INS_FSRRA: sh_insn = 71;
pub const sh_insn_SH_INS_FSTS: sh_insn = 72;
pub const sh_insn_SH_INS_FSUB: sh_insn = 73;
pub const sh_insn_SH_INS_FTRC: sh_insn = 74;
pub const sh_insn_SH_INS_FTRV: sh_insn = 75;
pub const sh_insn_SH_INS_ICBI: sh_insn = 76;
pub const sh_insn_SH_INS_JMP: sh_insn = 77;
pub const sh_insn_SH_INS_JSR: sh_insn = 78;
pub const sh_insn_SH_INS_JSR_N: sh_insn = 79;
pub const sh_insn_SH_INS_LDBANK: sh_insn = 80;
pub const sh_insn_SH_INS_LDC: sh_insn = 81;
pub const sh_insn_SH_INS_LDRC: sh_insn = 82;
pub const sh_insn_SH_INS_LDRE: sh_insn = 83;
pub const sh_insn_SH_INS_LDRS: sh_insn = 84;
pub const sh_insn_SH_INS_LDS: sh_insn = 85;
pub const sh_insn_SH_INS_LDTLB: sh_insn = 86;
pub const sh_insn_SH_INS_MAC_L: sh_insn = 87;
pub const sh_insn_SH_INS_MAC_W: sh_insn = 88;
pub const sh_insn_SH_INS_MOV: sh_insn = 89;
pub const sh_insn_SH_INS_MOVA: sh_insn = 90;
pub const sh_insn_SH_INS_MOVCA: sh_insn = 91;
pub const sh_insn_SH_INS_MOVCO: sh_insn = 92;
pub const sh_insn_SH_INS_MOVI20: sh_insn = 93;
pub const sh_insn_SH_INS_MOVI20S: sh_insn = 94;
pub const sh_insn_SH_INS_MOVLI: sh_insn = 95;
pub const sh_insn_SH_INS_MOVML: sh_insn = 96;
pub const sh_insn_SH_INS_MOVMU: sh_insn = 97;
pub const sh_insn_SH_INS_MOVRT: sh_insn = 98;
pub const sh_insn_SH_INS_MOVT: sh_insn = 99;
pub const sh_insn_SH_INS_MOVU: sh_insn = 100;
pub const sh_insn_SH_INS_MOVUA: sh_insn = 101;
pub const sh_insn_SH_INS_MUL_L: sh_insn = 102;
pub const sh_insn_SH_INS_MULR: sh_insn = 103;
pub const sh_insn_SH_INS_MULS_W: sh_insn = 104;
pub const sh_insn_SH_INS_MULU_W: sh_insn = 105;
pub const sh_insn_SH_INS_NEG: sh_insn = 106;
pub const sh_insn_SH_INS_NEGC: sh_insn = 107;
pub const sh_insn_SH_INS_NOP: sh_insn = 108;
pub const sh_insn_SH_INS_NOT: sh_insn = 109;
pub const sh_insn_SH_INS_NOTT: sh_insn = 110;
pub const sh_insn_SH_INS_OCBI: sh_insn = 111;
pub const sh_insn_SH_INS_OCBP: sh_insn = 112;
pub const sh_insn_SH_INS_OCBWB: sh_insn = 113;
pub const sh_insn_SH_INS_OR: sh_insn = 114;
pub const sh_insn_SH_INS_PREF: sh_insn = 115;
pub const sh_insn_SH_INS_PREFI: sh_insn = 116;
pub const sh_insn_SH_INS_RESBANK: sh_insn = 117;
pub const sh_insn_SH_INS_ROTCL: sh_insn = 118;
pub const sh_insn_SH_INS_ROTCR: sh_insn = 119;
pub const sh_insn_SH_INS_ROTL: sh_insn = 120;
pub const sh_insn_SH_INS_ROTR: sh_insn = 121;
pub const sh_insn_SH_INS_RTE: sh_insn = 122;
pub const sh_insn_SH_INS_RTS: sh_insn = 123;
pub const sh_insn_SH_INS_RTS_N: sh_insn = 124;
pub const sh_insn_SH_INS_RTV_N: sh_insn = 125;
pub const sh_insn_SH_INS_SETDMX: sh_insn = 126;
pub const sh_insn_SH_INS_SETDMY: sh_insn = 127;
pub const sh_insn_SH_INS_SETRC: sh_insn = 128;
pub const sh_insn_SH_INS_SETS: sh_insn = 129;
pub const sh_insn_SH_INS_SETT: sh_insn = 130;
pub const sh_insn_SH_INS_SHAD: sh_insn = 131;
pub const sh_insn_SH_INS_SHAL: sh_insn = 132;
pub const sh_insn_SH_INS_SHAR: sh_insn = 133;
pub const sh_insn_SH_INS_SHLD: sh_insn = 134;
pub const sh_insn_SH_INS_SHLL: sh_insn = 135;
pub const sh_insn_SH_INS_SHLL16: sh_insn = 136;
pub const sh_insn_SH_INS_SHLL2: sh_insn = 137;
pub const sh_insn_SH_INS_SHLL8: sh_insn = 138;
pub const sh_insn_SH_INS_SHLR: sh_insn = 139;
pub const sh_insn_SH_INS_SHLR16: sh_insn = 140;
pub const sh_insn_SH_INS_SHLR2: sh_insn = 141;
pub const sh_insn_SH_INS_SHLR8: sh_insn = 142;
pub const sh_insn_SH_INS_SLEEP: sh_insn = 143;
pub const sh_insn_SH_INS_STBANK: sh_insn = 144;
pub const sh_insn_SH_INS_STC: sh_insn = 145;
pub const sh_insn_SH_INS_STS: sh_insn = 146;
pub const sh_insn_SH_INS_SUB: sh_insn = 147;
pub const sh_insn_SH_INS_SUBC: sh_insn = 148;
pub const sh_insn_SH_INS_SUBV: sh_insn = 149;
pub const sh_insn_SH_INS_SWAP_B: sh_insn = 150;
pub const sh_insn_SH_INS_SWAP_W: sh_insn = 151;
pub const sh_insn_SH_INS_SYNCO: sh_insn = 152;
pub const sh_insn_SH_INS_TAS: sh_insn = 153;
pub const sh_insn_SH_INS_TRAPA: sh_insn = 154;
pub const sh_insn_SH_INS_TST: sh_insn = 155;
pub const sh_insn_SH_INS_XOR: sh_insn = 156;
pub const sh_insn_SH_INS_XTRCT: sh_insn = 157;
pub const sh_insn_SH_INS_DSP: sh_insn = 158;
pub const sh_insn_SH_INS_ENDING: sh_insn = 159;
#[doc = " SH instruction"]
pub type sh_insn = ::std::os::raw::c_uint;
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh {
    pub insn: sh_insn,
    pub size: u8,
    pub op_count: u8,
    pub operands: [cs_sh_op; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_sh"][::std::mem::size_of::<cs_sh>() - 176usize];
    ["Alignment of cs_sh"][::std::mem::align_of::<cs_sh>() - 8usize];
    ["Offset of field: cs_sh::insn"][::std::mem::offset_of!(cs_sh, insn) - 0usize];
    ["Offset of field: cs_sh::size"][::std::mem::offset_of!(cs_sh, size) - 4usize];
    ["Offset of field: cs_sh::op_count"][::std::mem::offset_of!(cs_sh, op_count) - 5usize];
    ["Offset of field: cs_sh::operands"][::std::mem::offset_of!(cs_sh, operands) - 8usize];
};
impl Default for cs_sh {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< CS_OP_INVALID (Uninitialized)."]
pub const tricore_op_type_TRICORE_OP_INVALID: tricore_op_type = 0;
#[doc = "< CS_OP_REG (Register operand)."]
pub const tricore_op_type_TRICORE_OP_REG: tricore_op_type = 1;
#[doc = "< CS_OP_IMM (Immediate operand)."]
pub const tricore_op_type_TRICORE_OP_IMM: tricore_op_type = 2;
#[doc = "< CS_OP_MEM (Memory operand)."]
pub const tricore_op_type_TRICORE_OP_MEM: tricore_op_type = 128;
#[doc = " Operand type for instruction's operands"]
pub type tricore_op_type = ::std::os::raw::c_uint;
#[doc = " Instruction's operand referring to memory\n This is associated with TRICORE_OP_MEM operand type above"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tricore_op_mem {
    #[doc = "< base register"]
    pub base: u8,
    #[doc = "< displacement/offset value"]
    pub disp: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tricore_op_mem"][::std::mem::size_of::<tricore_op_mem>() - 8usize];
    ["Alignment of tricore_op_mem"][::std::mem::align_of::<tricore_op_mem>() - 4usize];
    ["Offset of field: tricore_op_mem::base"]
        [::std::mem::offset_of!(tricore_op_mem, base) - 0usize];
    ["Offset of field: tricore_op_mem::disp"]
        [::std::mem::offset_of!(tricore_op_mem, disp) - 4usize];
};
#[doc = " Instruction operand"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore_op {
    #[doc = "< operand type"]
    pub type_: tricore_op_type,
    pub __bindgen_anon_1: cs_tricore_op__bindgen_ty_1,
    #[doc = "< How is this operand accessed? (READ, WRITE or READ|WRITE)"]
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tricore_op__bindgen_ty_1 {
    #[doc = "< register value for REG operand"]
    pub reg: ::std::os::raw::c_uint,
    #[doc = "< immediate value for IMM operand"]
    pub imm: i32,
    #[doc = "< base/disp value for MEM operand"]
    pub mem: tricore_op_mem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tricore_op__bindgen_ty_1"]
        [::std::mem::size_of::<cs_tricore_op__bindgen_ty_1>() - 8usize];
    ["Alignment of cs_tricore_op__bindgen_ty_1"]
        [::std::mem::align_of::<cs_tricore_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: cs_tricore_op__bindgen_ty_1::reg"]
        [::std::mem::offset_of!(cs_tricore_op__bindgen_ty_1, reg) - 0usize];
    ["Offset of field: cs_tricore_op__bindgen_ty_1::imm"]
        [::std::mem::offset_of!(cs_tricore_op__bindgen_ty_1, imm) - 0usize];
    ["Offset of field: cs_tricore_op__bindgen_ty_1::mem"]
        [::std::mem::offset_of!(cs_tricore_op__bindgen_ty_1, mem) - 0usize];
};
impl Default for cs_tricore_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tricore_op"][::std::mem::size_of::<cs_tricore_op>() - 16usize];
    ["Alignment of cs_tricore_op"][::std::mem::align_of::<cs_tricore_op>() - 4usize];
    ["Offset of field: cs_tricore_op::type_"]
        [::std::mem::offset_of!(cs_tricore_op, type_) - 0usize];
    ["Offset of field: cs_tricore_op::access"]
        [::std::mem::offset_of!(cs_tricore_op, access) - 12usize];
};
impl Default for cs_tricore_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Instruction structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore {
    #[doc = "< number of operands of this instruction."]
    pub op_count: u8,
    #[doc = "< operands for this instruction."]
    pub operands: [cs_tricore_op; 8usize],
    #[doc = "< whether the flags register is updated."]
    pub update_flags: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_tricore"][::std::mem::size_of::<cs_tricore>() - 136usize];
    ["Alignment of cs_tricore"][::std::mem::align_of::<cs_tricore>() - 4usize];
    ["Offset of field: cs_tricore::op_count"]
        [::std::mem::offset_of!(cs_tricore, op_count) - 0usize];
    ["Offset of field: cs_tricore::operands"]
        [::std::mem::offset_of!(cs_tricore, operands) - 4usize];
    ["Offset of field: cs_tricore::update_flags"]
        [::std::mem::offset_of!(cs_tricore, update_flags) - 132usize];
};
impl Default for cs_tricore {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " NOTE: All information in cs_detail is only available when CS_OPT_DETAIL = CS_OPT_ON\n Initialized as memset(., 0, offsetof(cs_detail, ARCH)+sizeof(cs_ARCH))\n by ARCH_getInstruction in arch/ARCH/ARCHDisassembler.c\n if cs_detail changes, in particular if a field is added after the union,\n then update arch/ARCH/ARCHDisassembler.c accordingly"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_detail {
    pub regs_read: [u16; 20usize],
    #[doc = "< number of implicit registers read by this insn"]
    pub regs_read_count: u8,
    pub regs_write: [u16; 20usize],
    #[doc = "< number of implicit registers modified by this insn"]
    pub regs_write_count: u8,
    #[doc = "< list of group this instruction belong to"]
    pub groups: [u8; 8usize],
    #[doc = "< number of groups this insn belongs to"]
    pub groups_count: u8,
    #[doc = "< Instruction has writeback operands."]
    pub writeback: bool,
    pub __bindgen_anon_1: cs_detail__bindgen_ty_1,
}
#[doc = " Architecture-specific instruction info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_detail__bindgen_ty_1 {
    #[doc = "< X86 architecture, including 16-bit, 32-bit & 64-bit mode"]
    pub x86: cs_x86,
    #[doc = "< ARM64 architecture (aka AArch64)"]
    pub arm64: cs_arm64,
    #[doc = "< ARM architecture (including Thumb/Thumb2)"]
    pub arm: cs_arm,
    #[doc = "< M68K architecture"]
    pub m68k: cs_m68k,
    #[doc = "< MIPS architecture"]
    pub mips: cs_mips,
    #[doc = "< PowerPC architecture"]
    pub ppc: cs_ppc,
    #[doc = "< Sparc architecture"]
    pub sparc: cs_sparc,
    #[doc = "< SystemZ architecture"]
    pub sysz: cs_sysz,
    #[doc = "< XCore architecture"]
    pub xcore: cs_xcore,
    #[doc = "< TMS320C64x architecture"]
    pub tms320c64x: cs_tms320c64x,
    #[doc = "< M680X architecture"]
    pub m680x: cs_m680x,
    #[doc = "< Ethereum architecture"]
    pub evm: cs_evm,
    #[doc = "< MOS65XX architecture (including MOS6502)"]
    pub mos65xx: cs_mos65xx,
    #[doc = "< Web Assembly architecture"]
    pub wasm: cs_wasm,
    #[doc = "< Berkeley Packet Filter architecture (including eBPF)"]
    pub bpf: cs_bpf,
    #[doc = "< RISCV architecture"]
    pub riscv: cs_riscv,
    #[doc = "< SH architecture"]
    pub sh: cs_sh,
    #[doc = "< TriCore architecture"]
    pub tricore: cs_tricore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_detail__bindgen_ty_1"]
        [::std::mem::size_of::<cs_detail__bindgen_ty_1>() - 1768usize];
    ["Alignment of cs_detail__bindgen_ty_1"]
        [::std::mem::align_of::<cs_detail__bindgen_ty_1>() - 8usize];
    ["Offset of field: cs_detail__bindgen_ty_1::x86"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, x86) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::arm64"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, arm64) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::arm"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, arm) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::m68k"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, m68k) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::mips"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, mips) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::ppc"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, ppc) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::sparc"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, sparc) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::sysz"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, sysz) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::xcore"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, xcore) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::tms320c64x"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, tms320c64x) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::m680x"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, m680x) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::evm"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, evm) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::mos65xx"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, mos65xx) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::wasm"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, wasm) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::bpf"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, bpf) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::riscv"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, riscv) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::sh"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, sh) - 0usize];
    ["Offset of field: cs_detail__bindgen_ty_1::tricore"]
        [::std::mem::offset_of!(cs_detail__bindgen_ty_1, tricore) - 0usize];
};
impl Default for cs_detail__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_detail"][::std::mem::size_of::<cs_detail>() - 1864usize];
    ["Alignment of cs_detail"][::std::mem::align_of::<cs_detail>() - 8usize];
    ["Offset of field: cs_detail::regs_read"]
        [::std::mem::offset_of!(cs_detail, regs_read) - 0usize];
    ["Offset of field: cs_detail::regs_read_count"]
        [::std::mem::offset_of!(cs_detail, regs_read_count) - 40usize];
    ["Offset of field: cs_detail::regs_write"]
        [::std::mem::offset_of!(cs_detail, regs_write) - 42usize];
    ["Offset of field: cs_detail::regs_write_count"]
        [::std::mem::offset_of!(cs_detail, regs_write_count) - 82usize];
    ["Offset of field: cs_detail::groups"][::std::mem::offset_of!(cs_detail, groups) - 83usize];
    ["Offset of field: cs_detail::groups_count"]
        [::std::mem::offset_of!(cs_detail, groups_count) - 91usize];
    ["Offset of field: cs_detail::writeback"]
        [::std::mem::offset_of!(cs_detail, writeback) - 92usize];
};
impl Default for cs_detail {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Detail information of disassembled instruction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_insn {
    #[doc = " Instruction ID (basically a numeric ID for the instruction mnemonic)\n Find the instruction id in the '[ARCH]_insn' enum in the header file\n of corresponding architecture, such as 'arm_insn' in arm.h for ARM,\n 'x86_insn' in x86.h for X86, etc...\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF\n NOTE: in Skipdata mode, \"data\" instruction has 0 for this id field."]
    pub id: ::std::os::raw::c_uint,
    #[doc = " Address (EIP) of this instruction\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub address: u64,
    #[doc = " Size of this instruction\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub size: u16,
    #[doc = " Machine bytes of this instruction, with number of bytes indicated by @size above\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub bytes: [u8; 24usize],
    #[doc = " Ascii text of instruction mnemonic\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub mnemonic: [::std::os::raw::c_char; 32usize],
    #[doc = " Ascii text of instruction operands\n This information is available even when CS_OPT_DETAIL = CS_OPT_OFF"]
    pub op_str: [::std::os::raw::c_char; 160usize],
    #[doc = " Pointer to cs_detail.\n NOTE: detail pointer is only valid when both requirements below are met:\n (1) CS_OP_DETAIL = CS_OPT_ON\n (2) Engine is not in Skipdata mode (CS_OP_SKIPDATA option set to CS_OPT_ON)\n\n NOTE 2: when in Skipdata mode, or when detail mode is OFF, even if this pointer\n     is not NULL, its content is still irrelevant."]
    pub detail: *mut cs_detail,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cs_insn"][::std::mem::size_of::<cs_insn>() - 248usize];
    ["Alignment of cs_insn"][::std::mem::align_of::<cs_insn>() - 8usize];
    ["Offset of field: cs_insn::id"][::std::mem::offset_of!(cs_insn, id) - 0usize];
    ["Offset of field: cs_insn::address"][::std::mem::offset_of!(cs_insn, address) - 8usize];
    ["Offset of field: cs_insn::size"][::std::mem::offset_of!(cs_insn, size) - 16usize];
    ["Offset of field: cs_insn::bytes"][::std::mem::offset_of!(cs_insn, bytes) - 18usize];
    ["Offset of field: cs_insn::mnemonic"][::std::mem::offset_of!(cs_insn, mnemonic) - 42usize];
    ["Offset of field: cs_insn::op_str"][::std::mem::offset_of!(cs_insn, op_str) - 74usize];
    ["Offset of field: cs_insn::detail"][::std::mem::offset_of!(cs_insn, detail) - 240usize];
};
impl Default for cs_insn {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_interceptor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInterceptor {
    _unused: [u8; 0],
}
pub type GumInterceptor = _GumInterceptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumInterceptorClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumInterceptorClass"][::std::mem::size_of::<GumInterceptorClass>() - 136usize];
    ["Alignment of GumInterceptorClass"][::std::mem::align_of::<GumInterceptorClass>() - 8usize];
    ["Offset of field: GumInterceptorClass::parent_class"]
        [::std::mem::offset_of!(GumInterceptorClass, parent_class) - 0usize];
};
impl Default for GumInterceptorClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumInterceptor_autoptr = *mut GumInterceptor;
pub type GumInterceptor_listautoptr = *mut GList;
pub type GumInterceptor_slistautoptr = *mut GSList;
pub type GumInterceptor_queueautoptr = *mut GQueue;
pub type GumInterceptorClass_autoptr = *mut GumInterceptorClass;
pub type GumInterceptorClass_listautoptr = *mut GList;
pub type GumInterceptorClass_slistautoptr = *mut GSList;
pub type GumInterceptorClass_queueautoptr = *mut GQueue;
pub type GumInvocationStack = GArray;
pub type GumInvocationState = guint;
pub type GumInterceptorLockedFunc =
    ::std::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
pub const GumAttachFlags_GUM_ATTACH_FLAGS_NONE: GumAttachFlags = 0;
pub const GumAttachFlags_GUM_ATTACH_FLAGS_UNIGNORABLE: GumAttachFlags = 1;
pub type GumAttachFlags = ::std::os::raw::c_uint;
pub const GumAttachReturn_GUM_ATTACH_OK: GumAttachReturn = 0;
pub const GumAttachReturn_GUM_ATTACH_WRONG_SIGNATURE: GumAttachReturn = -1;
pub const GumAttachReturn_GUM_ATTACH_ALREADY_ATTACHED: GumAttachReturn = -2;
pub const GumAttachReturn_GUM_ATTACH_POLICY_VIOLATION: GumAttachReturn = -3;
pub const GumAttachReturn_GUM_ATTACH_WRONG_TYPE: GumAttachReturn = -4;
pub type GumAttachReturn = ::std::os::raw::c_int;
pub const GumReplaceReturn_GUM_REPLACE_OK: GumReplaceReturn = 0;
pub const GumReplaceReturn_GUM_REPLACE_WRONG_SIGNATURE: GumReplaceReturn = -1;
pub const GumReplaceReturn_GUM_REPLACE_ALREADY_REPLACED: GumReplaceReturn = -2;
pub const GumReplaceReturn_GUM_REPLACE_POLICY_VIOLATION: GumReplaceReturn = -3;
pub const GumReplaceReturn_GUM_REPLACE_WRONG_TYPE: GumReplaceReturn = -4;
pub type GumReplaceReturn = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn gum_interceptor_obtain() -> *mut GumInterceptor;
}
unsafe extern "C" {
    pub fn gum_interceptor_attach(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        listener: *mut GumInvocationListener,
        listener_function_data: gpointer,
        flags: GumAttachFlags,
    ) -> GumAttachReturn;
}
unsafe extern "C" {
    pub fn gum_interceptor_detach(self_: *mut GumInterceptor, listener: *mut GumInvocationListener);
}
unsafe extern "C" {
    pub fn gum_interceptor_replace(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        replacement_function: gpointer,
        replacement_data: gpointer,
        original_function: *mut gpointer,
    ) -> GumReplaceReturn;
}
unsafe extern "C" {
    pub fn gum_interceptor_replace_fast(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        replacement_function: gpointer,
        original_function: *mut gpointer,
    ) -> GumReplaceReturn;
}
unsafe extern "C" {
    pub fn gum_interceptor_revert(self_: *mut GumInterceptor, function_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_interceptor_begin_transaction(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_interceptor_end_transaction(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_interceptor_flush(self_: *mut GumInterceptor) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_interceptor_get_current_invocation() -> *mut GumInvocationContext;
}
unsafe extern "C" {
    pub fn gum_interceptor_get_live_replacement_invocation(
        replacement_function: gpointer,
    ) -> *mut GumInvocationContext;
}
unsafe extern "C" {
    pub fn gum_interceptor_get_current_stack() -> *mut GumInvocationStack;
}
unsafe extern "C" {
    pub fn gum_interceptor_ignore_current_thread(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_interceptor_unignore_current_thread(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_interceptor_maybe_unignore_current_thread(self_: *mut GumInterceptor) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_interceptor_ignore_other_threads(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_interceptor_unignore_other_threads(self_: *mut GumInterceptor);
}
unsafe extern "C" {
    pub fn gum_invocation_stack_translate(
        self_: *mut GumInvocationStack,
        return_address: gpointer,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_interceptor_save(state: *mut GumInvocationState);
}
unsafe extern "C" {
    pub fn gum_interceptor_restore(state: *mut GumInvocationState);
}
unsafe extern "C" {
    pub fn gum_interceptor_with_lock_held(
        self_: *mut GumInterceptor,
        func: GumInterceptorLockedFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_interceptor_is_locked(self_: *mut GumInterceptor) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_interceptor_detect_hook_size(
        code: gconstpointer,
        capstone: csh,
        insn: *mut cs_insn,
    ) -> gsize;
}
pub type GumKernelModuleRangeDetails = _GumKernelModuleRangeDetails;
pub type GumKernelModuleDetails = _GumKernelModuleDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumKernelModuleRangeDetails {
    pub name: [gchar; 48usize],
    pub address: GumAddress,
    pub size: guint64,
    pub protection: GumPageProtection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumKernelModuleRangeDetails"]
        [::std::mem::size_of::<_GumKernelModuleRangeDetails>() - 72usize];
    ["Alignment of _GumKernelModuleRangeDetails"]
        [::std::mem::align_of::<_GumKernelModuleRangeDetails>() - 8usize];
    ["Offset of field: _GumKernelModuleRangeDetails::name"]
        [::std::mem::offset_of!(_GumKernelModuleRangeDetails, name) - 0usize];
    ["Offset of field: _GumKernelModuleRangeDetails::address"]
        [::std::mem::offset_of!(_GumKernelModuleRangeDetails, address) - 48usize];
    ["Offset of field: _GumKernelModuleRangeDetails::size"]
        [::std::mem::offset_of!(_GumKernelModuleRangeDetails, size) - 56usize];
    ["Offset of field: _GumKernelModuleRangeDetails::protection"]
        [::std::mem::offset_of!(_GumKernelModuleRangeDetails, protection) - 64usize];
};
impl Default for _GumKernelModuleRangeDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumKernelModuleDetails {
    pub name: *const gchar,
    pub range: *const GumMemoryRange,
    pub path: *const gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumKernelModuleDetails"][::std::mem::size_of::<_GumKernelModuleDetails>() - 24usize];
    ["Alignment of _GumKernelModuleDetails"]
        [::std::mem::align_of::<_GumKernelModuleDetails>() - 8usize];
    ["Offset of field: _GumKernelModuleDetails::name"]
        [::std::mem::offset_of!(_GumKernelModuleDetails, name) - 0usize];
    ["Offset of field: _GumKernelModuleDetails::range"]
        [::std::mem::offset_of!(_GumKernelModuleDetails, range) - 8usize];
    ["Offset of field: _GumKernelModuleDetails::path"]
        [::std::mem::offset_of!(_GumKernelModuleDetails, path) - 16usize];
};
impl Default for _GumKernelModuleDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumFoundKernelModuleRangeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        details: *const GumKernelModuleRangeDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundKernelModuleFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *const GumKernelModuleDetails, user_data: gpointer) -> gboolean,
>;
unsafe extern "C" {
    pub fn gum_kernel_api_is_available() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_kernel_query_page_size() -> guint;
}
unsafe extern "C" {
    pub fn gum_kernel_alloc_n_pages(n_pages: guint) -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_kernel_free_pages(mem: GumAddress);
}
unsafe extern "C" {
    pub fn gum_kernel_try_mprotect(
        address: GumAddress,
        size: gsize,
        prot: GumPageProtection,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_kernel_read(
        address: GumAddress,
        len: gsize,
        n_bytes_read: *mut gsize,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn gum_kernel_write(address: GumAddress, bytes: *const guint8, len: gsize) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_kernel_scan(
        range: *const GumMemoryRange,
        pattern: *const GumMatchPattern,
        func: GumMemoryScanMatchFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_kernel_enumerate_ranges(
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_kernel_enumerate_module_ranges(
        module_name: *const gchar,
        prot: GumPageProtection,
        func: GumFoundKernelModuleRangeFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_kernel_enumerate_modules(func: GumFoundKernelModuleFunc, user_data: gpointer);
}
unsafe extern "C" {
    pub fn gum_kernel_find_base_address() -> GumAddress;
}
unsafe extern "C" {
    pub fn gum_kernel_set_base_address(base: GumAddress);
}
unsafe extern "C" {
    pub fn gum_memset(dst: gpointer, c: gint, n: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memcpy(dst: gpointer, src: gconstpointer, n: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memmove(dst: gpointer, src: gconstpointer, n: gsize) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_memory_access_monitor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryAccessMonitor {
    _unused: [u8; 0],
}
pub type GumMemoryAccessMonitor = _GumMemoryAccessMonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumMemoryAccessMonitorClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumMemoryAccessMonitorClass"]
        [::std::mem::size_of::<GumMemoryAccessMonitorClass>() - 136usize];
    ["Alignment of GumMemoryAccessMonitorClass"]
        [::std::mem::align_of::<GumMemoryAccessMonitorClass>() - 8usize];
    ["Offset of field: GumMemoryAccessMonitorClass::parent_class"]
        [::std::mem::offset_of!(GumMemoryAccessMonitorClass, parent_class) - 0usize];
};
impl Default for GumMemoryAccessMonitorClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumMemoryAccessMonitor_autoptr = *mut GumMemoryAccessMonitor;
pub type GumMemoryAccessMonitor_listautoptr = *mut GList;
pub type GumMemoryAccessMonitor_slistautoptr = *mut GSList;
pub type GumMemoryAccessMonitor_queueautoptr = *mut GQueue;
pub type GumMemoryAccessMonitorClass_autoptr = *mut GumMemoryAccessMonitorClass;
pub type GumMemoryAccessMonitorClass_listautoptr = *mut GList;
pub type GumMemoryAccessMonitorClass_slistautoptr = *mut GSList;
pub type GumMemoryAccessMonitorClass_queueautoptr = *mut GQueue;
pub type GumMemoryAccessDetails = _GumMemoryAccessDetails;
pub type GumMemoryAccessNotify = ::std::option::Option<
    unsafe extern "C" fn(
        monitor: *mut GumMemoryAccessMonitor,
        details: *const GumMemoryAccessDetails,
        user_data: gpointer,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryAccessDetails {
    pub thread_id: GumThreadId,
    pub operation: GumMemoryOperation,
    pub from: gpointer,
    pub address: gpointer,
    pub range_index: guint,
    pub page_index: guint,
    pub pages_completed: guint,
    pub pages_total: guint,
    pub context: *mut GumCpuContext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMemoryAccessDetails"][::std::mem::size_of::<_GumMemoryAccessDetails>() - 56usize];
    ["Alignment of _GumMemoryAccessDetails"]
        [::std::mem::align_of::<_GumMemoryAccessDetails>() - 8usize];
    ["Offset of field: _GumMemoryAccessDetails::thread_id"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, thread_id) - 0usize];
    ["Offset of field: _GumMemoryAccessDetails::operation"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, operation) - 8usize];
    ["Offset of field: _GumMemoryAccessDetails::from"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, from) - 16usize];
    ["Offset of field: _GumMemoryAccessDetails::address"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, address) - 24usize];
    ["Offset of field: _GumMemoryAccessDetails::range_index"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, range_index) - 32usize];
    ["Offset of field: _GumMemoryAccessDetails::page_index"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, page_index) - 36usize];
    ["Offset of field: _GumMemoryAccessDetails::pages_completed"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, pages_completed) - 40usize];
    ["Offset of field: _GumMemoryAccessDetails::pages_total"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, pages_total) - 44usize];
    ["Offset of field: _GumMemoryAccessDetails::context"]
        [::std::mem::offset_of!(_GumMemoryAccessDetails, context) - 48usize];
};
impl Default for _GumMemoryAccessDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_memory_access_monitor_new(
        ranges: *const GumMemoryRange,
        num_ranges: guint,
        access_mask: GumPageProtection,
        auto_reset: gboolean,
        func: GumMemoryAccessNotify,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumMemoryAccessMonitor;
}
unsafe extern "C" {
    pub fn gum_memory_access_monitor_enable(
        self_: *mut GumMemoryAccessMonitor,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_access_monitor_disable(self_: *mut GumMemoryAccessMonitor);
}
unsafe extern "C" {
    pub fn gum_memory_map_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryMap {
    _unused: [u8; 0],
}
pub type GumMemoryMap = _GumMemoryMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumMemoryMapClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumMemoryMapClass"][::std::mem::size_of::<GumMemoryMapClass>() - 136usize];
    ["Alignment of GumMemoryMapClass"][::std::mem::align_of::<GumMemoryMapClass>() - 8usize];
    ["Offset of field: GumMemoryMapClass::parent_class"]
        [::std::mem::offset_of!(GumMemoryMapClass, parent_class) - 0usize];
};
impl Default for GumMemoryMapClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumMemoryMap_autoptr = *mut GumMemoryMap;
pub type GumMemoryMap_listautoptr = *mut GList;
pub type GumMemoryMap_slistautoptr = *mut GSList;
pub type GumMemoryMap_queueautoptr = *mut GQueue;
pub type GumMemoryMapClass_autoptr = *mut GumMemoryMapClass;
pub type GumMemoryMapClass_listautoptr = *mut GList;
pub type GumMemoryMapClass_slistautoptr = *mut GSList;
pub type GumMemoryMapClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_memory_map_new(prot: GumPageProtection) -> *mut GumMemoryMap;
}
unsafe extern "C" {
    pub fn gum_memory_map_contains(
        self_: *mut GumMemoryMap,
        range: *const GumMemoryRange,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_memory_map_update(self_: *mut GumMemoryMap);
}
pub type GumMetalArray = _GumMetalArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalArray {
    pub data: gpointer,
    pub length: guint,
    pub capacity: guint,
    pub element_size: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMetalArray"][::std::mem::size_of::<_GumMetalArray>() - 24usize];
    ["Alignment of _GumMetalArray"][::std::mem::align_of::<_GumMetalArray>() - 8usize];
    ["Offset of field: _GumMetalArray::data"]
        [::std::mem::offset_of!(_GumMetalArray, data) - 0usize];
    ["Offset of field: _GumMetalArray::length"]
        [::std::mem::offset_of!(_GumMetalArray, length) - 8usize];
    ["Offset of field: _GumMetalArray::capacity"]
        [::std::mem::offset_of!(_GumMetalArray, capacity) - 12usize];
    ["Offset of field: _GumMetalArray::element_size"]
        [::std::mem::offset_of!(_GumMetalArray, element_size) - 16usize];
};
impl Default for _GumMetalArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_metal_array_init(array: *mut GumMetalArray, element_size: guint);
}
unsafe extern "C" {
    pub fn gum_metal_array_free(array: *mut GumMetalArray);
}
unsafe extern "C" {
    pub fn gum_metal_array_element_at(self_: *mut GumMetalArray, index_: guint) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_metal_array_insert_at(self_: *mut GumMetalArray, index_: guint) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_metal_array_remove_at(self_: *mut GumMetalArray, index_: guint);
}
unsafe extern "C" {
    pub fn gum_metal_array_remove_all(self_: *mut GumMetalArray);
}
unsafe extern "C" {
    pub fn gum_metal_array_append(self_: *mut GumMetalArray) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_metal_array_get_extents(
        self_: *mut GumMetalArray,
        start: *mut gpointer,
        end: *mut gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_metal_array_ensure_capacity(self_: *mut GumMetalArray, capacity: guint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalHashTable {
    _unused: [u8; 0],
}
pub type GumMetalHashTable = _GumMetalHashTable;
pub type GumMetalHashTableIter = _GumMetalHashTableIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalHashTableIter {
    pub dummy1: gpointer,
    pub dummy2: gpointer,
    pub dummy3: gpointer,
    pub dummy4: ::std::os::raw::c_int,
    pub dummy5: gboolean,
    pub dummy6: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMetalHashTableIter"][::std::mem::size_of::<_GumMetalHashTableIter>() - 40usize];
    ["Alignment of _GumMetalHashTableIter"]
        [::std::mem::align_of::<_GumMetalHashTableIter>() - 8usize];
    ["Offset of field: _GumMetalHashTableIter::dummy1"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy1) - 0usize];
    ["Offset of field: _GumMetalHashTableIter::dummy2"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy2) - 8usize];
    ["Offset of field: _GumMetalHashTableIter::dummy3"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy3) - 16usize];
    ["Offset of field: _GumMetalHashTableIter::dummy4"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy4) - 24usize];
    ["Offset of field: _GumMetalHashTableIter::dummy5"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy5) - 28usize];
    ["Offset of field: _GumMetalHashTableIter::dummy6"]
        [::std::mem::offset_of!(_GumMetalHashTableIter, dummy6) - 32usize];
};
impl Default for _GumMetalHashTableIter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_new(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
    ) -> *mut GumMetalHashTable;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_new_full(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
        key_destroy_func: GDestroyNotify,
        value_destroy_func: GDestroyNotify,
    ) -> *mut GumMetalHashTable;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_destroy(hash_table: *mut GumMetalHashTable);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_insert(
        hash_table: *mut GumMetalHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_replace(
        hash_table: *mut GumMetalHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_add(hash_table: *mut GumMetalHashTable, key: gpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_remove(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_remove_all(hash_table: *mut GumMetalHashTable);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_steal(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_steal_all(hash_table: *mut GumMetalHashTable);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_lookup(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_contains(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_lookup_extended(
        hash_table: *mut GumMetalHashTable,
        lookup_key: gconstpointer,
        orig_key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_foreach(
        hash_table: *mut GumMetalHashTable,
        func: GHFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_find(
        hash_table: *mut GumMetalHashTable,
        predicate: GHRFunc,
        user_data: gpointer,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_foreach_remove(
        hash_table: *mut GumMetalHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_foreach_steal(
        hash_table: *mut GumMetalHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_size(hash_table: *mut GumMetalHashTable) -> guint;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_init(
        iter: *mut GumMetalHashTableIter,
        hash_table: *mut GumMetalHashTable,
    );
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_next(
        iter: *mut GumMetalHashTableIter,
        key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_get_hash_table(
        iter: *mut GumMetalHashTableIter,
    ) -> *mut GumMetalHashTable;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_remove(iter: *mut GumMetalHashTableIter);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_replace(iter: *mut GumMetalHashTableIter, value: gpointer);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_iter_steal(iter: *mut GumMetalHashTableIter);
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_ref(hash_table: *mut GumMetalHashTable) -> *mut GumMetalHashTable;
}
unsafe extern "C" {
    pub fn gum_metal_hash_table_unref(hash_table: *mut GumMetalHashTable);
}
unsafe extern "C" {
    pub fn gum_module_api_resolver_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleApiResolver {
    _unused: [u8; 0],
}
pub type GumModuleApiResolver = _GumModuleApiResolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumModuleApiResolverClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumModuleApiResolverClass"]
        [::std::mem::size_of::<GumModuleApiResolverClass>() - 136usize];
    ["Alignment of GumModuleApiResolverClass"]
        [::std::mem::align_of::<GumModuleApiResolverClass>() - 8usize];
    ["Offset of field: GumModuleApiResolverClass::parent_class"]
        [::std::mem::offset_of!(GumModuleApiResolverClass, parent_class) - 0usize];
};
impl Default for GumModuleApiResolverClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumModuleApiResolver_autoptr = *mut GumModuleApiResolver;
pub type GumModuleApiResolver_listautoptr = *mut GList;
pub type GumModuleApiResolver_slistautoptr = *mut GSList;
pub type GumModuleApiResolver_queueautoptr = *mut GQueue;
pub type GumModuleApiResolverClass_autoptr = *mut GumModuleApiResolverClass;
pub type GumModuleApiResolverClass_listautoptr = *mut GList;
pub type GumModuleApiResolverClass_slistautoptr = *mut GSList;
pub type GumModuleApiResolverClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_module_api_resolver_new() -> *mut GumApiResolver;
}
unsafe extern "C" {
    pub fn gum_module_map_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleMap {
    _unused: [u8; 0],
}
pub type GumModuleMap = _GumModuleMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumModuleMapClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumModuleMapClass"][::std::mem::size_of::<GumModuleMapClass>() - 136usize];
    ["Alignment of GumModuleMapClass"][::std::mem::align_of::<GumModuleMapClass>() - 8usize];
    ["Offset of field: GumModuleMapClass::parent_class"]
        [::std::mem::offset_of!(GumModuleMapClass, parent_class) - 0usize];
};
impl Default for GumModuleMapClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumModuleMap_autoptr = *mut GumModuleMap;
pub type GumModuleMap_listautoptr = *mut GList;
pub type GumModuleMap_slistautoptr = *mut GSList;
pub type GumModuleMap_queueautoptr = *mut GQueue;
pub type GumModuleMapClass_autoptr = *mut GumModuleMapClass;
pub type GumModuleMapClass_listautoptr = *mut GList;
pub type GumModuleMapClass_slistautoptr = *mut GSList;
pub type GumModuleMapClass_queueautoptr = *mut GQueue;
pub type GumModuleMapFilterFunc = ::std::option::Option<
    unsafe extern "C" fn(module: *mut GumModule, user_data: gpointer) -> gboolean,
>;
unsafe extern "C" {
    pub fn gum_module_map_new() -> *mut GumModuleMap;
}
unsafe extern "C" {
    pub fn gum_module_map_new_filtered(
        func: GumModuleMapFilterFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumModuleMap;
}
unsafe extern "C" {
    pub fn gum_module_map_find(self_: *mut GumModuleMap, address: GumAddress) -> *mut GumModule;
}
unsafe extern "C" {
    pub fn gum_module_map_update(self_: *mut GumModuleMap);
}
unsafe extern "C" {
    pub fn gum_module_map_get_values(self_: *mut GumModuleMap) -> *mut GPtrArray;
}
unsafe extern "C" {
    pub fn gum_module_registry_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleRegistry {
    _unused: [u8; 0],
}
pub type GumModuleRegistry = _GumModuleRegistry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumModuleRegistryClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumModuleRegistryClass"][::std::mem::size_of::<GumModuleRegistryClass>() - 136usize];
    ["Alignment of GumModuleRegistryClass"]
        [::std::mem::align_of::<GumModuleRegistryClass>() - 8usize];
    ["Offset of field: GumModuleRegistryClass::parent_class"]
        [::std::mem::offset_of!(GumModuleRegistryClass, parent_class) - 0usize];
};
impl Default for GumModuleRegistryClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumModuleRegistry_autoptr = *mut GumModuleRegistry;
pub type GumModuleRegistry_listautoptr = *mut GList;
pub type GumModuleRegistry_slistautoptr = *mut GSList;
pub type GumModuleRegistry_queueautoptr = *mut GQueue;
pub type GumModuleRegistryClass_autoptr = *mut GumModuleRegistryClass;
pub type GumModuleRegistryClass_listautoptr = *mut GList;
pub type GumModuleRegistryClass_slistautoptr = *mut GSList;
pub type GumModuleRegistryClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_module_registry_obtain() -> *mut GumModuleRegistry;
}
unsafe extern "C" {
    pub fn gum_module_registry_enumerate_modules(
        self_: *mut GumModuleRegistry,
        func: GumFoundModuleFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_module_registry_lock(self_: *mut GumModuleRegistry);
}
unsafe extern "C" {
    pub fn gum_module_registry_unlock(self_: *mut GumModuleRegistry);
}
unsafe extern "C" {
    pub fn gum_vsnprintf(
        str_: *mut gchar,
        size: gsize,
        format: *const gchar,
        args: *mut __va_list_tag,
    ) -> gint;
}
unsafe extern "C" {
    pub fn gum_snprintf(str_: *mut gchar, size: gsize, format: *const gchar, ...) -> gint;
}
unsafe extern "C" {
    pub fn gum_vasprintf(
        ret: *mut *mut gchar,
        format: *const gchar,
        ap: *mut __va_list_tag,
    ) -> gint;
}
unsafe extern "C" {
    pub fn gum_asprintf(ret: *mut *mut gchar, format: *const gchar, ...) -> gint;
}
pub type GumSpinlock = _GumSpinlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSpinlock {
    pub data: gpointer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumSpinlock"][::std::mem::size_of::<_GumSpinlock>() - 8usize];
    ["Alignment of _GumSpinlock"][::std::mem::align_of::<_GumSpinlock>() - 8usize];
    ["Offset of field: _GumSpinlock::data"][::std::mem::offset_of!(_GumSpinlock, data) - 0usize];
};
impl Default for _GumSpinlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_spinlock_init(spinlock: *mut GumSpinlock);
}
unsafe extern "C" {
    pub fn gum_spinlock_acquire(spinlock: *mut GumSpinlock);
}
unsafe extern "C" {
    pub fn gum_spinlock_try_acquire(spinlock: *mut GumSpinlock) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_spinlock_release(spinlock: *mut GumSpinlock);
}
pub type GumX86Writer = _GumX86Writer;
pub type GumX86Reg = guint;
pub type GumX86PtrTarget = guint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumX86Writer {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_cpu: GumCpuType,
    pub target_abi: GumAbiType,
    pub cpu_features: GumCpuFeatures,
    pub base: *mut guint8,
    pub code: *mut guint8,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumX86Writer"][::std::mem::size_of::<_GumX86Writer>() - 80usize];
    ["Alignment of _GumX86Writer"][::std::mem::align_of::<_GumX86Writer>() - 8usize];
    ["Offset of field: _GumX86Writer::ref_count"]
        [::std::mem::offset_of!(_GumX86Writer, ref_count) - 0usize];
    ["Offset of field: _GumX86Writer::flush_on_destroy"]
        [::std::mem::offset_of!(_GumX86Writer, flush_on_destroy) - 4usize];
    ["Offset of field: _GumX86Writer::target_cpu"]
        [::std::mem::offset_of!(_GumX86Writer, target_cpu) - 8usize];
    ["Offset of field: _GumX86Writer::target_abi"]
        [::std::mem::offset_of!(_GumX86Writer, target_abi) - 12usize];
    ["Offset of field: _GumX86Writer::cpu_features"]
        [::std::mem::offset_of!(_GumX86Writer, cpu_features) - 16usize];
    ["Offset of field: _GumX86Writer::base"][::std::mem::offset_of!(_GumX86Writer, base) - 24usize];
    ["Offset of field: _GumX86Writer::code"][::std::mem::offset_of!(_GumX86Writer, code) - 32usize];
    ["Offset of field: _GumX86Writer::pc"][::std::mem::offset_of!(_GumX86Writer, pc) - 40usize];
    ["Offset of field: _GumX86Writer::label_defs"]
        [::std::mem::offset_of!(_GumX86Writer, label_defs) - 48usize];
    ["Offset of field: _GumX86Writer::label_refs"]
        [::std::mem::offset_of!(_GumX86Writer, label_refs) - 56usize];
};
impl Default for _GumX86Writer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_x86_writer_new(code_address: gpointer) -> *mut GumX86Writer;
}
unsafe extern "C" {
    pub fn gum_x86_writer_ref(writer: *mut GumX86Writer) -> *mut GumX86Writer;
}
unsafe extern "C" {
    pub fn gum_x86_writer_unref(writer: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_init(writer: *mut GumX86Writer, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_clear(writer: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_reset(writer: *mut GumX86Writer, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_set_target_cpu(self_: *mut GumX86Writer, cpu_type: GumCpuType);
}
unsafe extern "C" {
    pub fn gum_x86_writer_set_target_abi(self_: *mut GumX86Writer, abi_type: GumAbiType);
}
unsafe extern "C" {
    pub fn gum_x86_writer_cur(self_: *mut GumX86Writer) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_x86_writer_offset(self_: *mut GumX86Writer) -> guint;
}
unsafe extern "C" {
    pub fn gum_x86_writer_flush(self_: *mut GumX86Writer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_get_cpu_register_for_nth_argument(
        self_: *mut GumX86Writer,
        n: guint,
    ) -> GumX86Reg;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_label(self_: *mut GumX86Writer, id: gconstpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_can_branch_directly_between(from: GumAddress, to: GumAddress)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_address_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_address_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_address_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_address_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_address(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_indirect(self_: *mut GumX86Writer, addr: GumAddress)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_indirect_label(
        self_: *mut GumX86Writer,
        label_id: gconstpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_call_near_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_leave(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_ret(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_ret_imm(self_: *mut GumX86Writer, imm_value: guint16);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_address(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_short_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_near_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_reg_offset_ptr(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jmp_near_ptr(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jcc_short(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        target: gconstpointer,
        hint: GumBranchHint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jcc_near(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        target: gconstpointer,
        hint: GumBranchHint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jcc_short_label(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        label_id: gconstpointer,
        hint: GumBranchHint,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_jcc_near_label(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        label_id: gconstpointer,
        hint: GumBranchHint,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_add_reg_imm(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_add_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_add_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_sub_reg_imm(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_sub_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_sub_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_inc_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_dec_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_inc_reg_ptr(
        self_: *mut GumX86Writer,
        target: GumX86PtrTarget,
        reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_dec_reg_ptr(
        self_: *mut GumX86Writer,
        target: GumX86PtrTarget,
        reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lock_xadd_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lock_cmpxchg_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lock_inc_imm32_ptr(
        self_: *mut GumX86Writer,
        target: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lock_dec_imm32_ptr(
        self_: *mut GumX86Writer,
        target: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_and_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_and_reg_u32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_shl_reg_u8(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_shr_reg_u8(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_xor_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_u64(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_address(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        address: GumAddress,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_ptr_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_offset_ptr_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        dst_offset: gssize,
        imm_value: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_offset_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        dst_offset: gssize,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg_offset_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
        src_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_base_index_scale_offset_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        base_reg: GumX86Reg,
        index_reg: GumX86Reg,
        scale: guint8,
        offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_near_ptr_reg(
        self_: *mut GumX86Writer,
        dst_address: GumAddress,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_fs_u32_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: guint32,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_fs_u32_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_fs_reg_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_fs_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_gs_u32_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: guint32,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_gs_u32_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_gs_reg_ptr_reg(
        self_: *mut GumX86Writer,
        gs_offset: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_mov_reg_gs_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        gs_offset: GumX86Reg,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_movq_xmm0_esp_offset_ptr(self_: *mut GumX86Writer, offset: gint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_movq_eax_offset_ptr_xmm0(self_: *mut GumX86Writer, offset: gint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_movdqu_xmm0_esp_offset_ptr(self_: *mut GumX86Writer, offset: gint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_movdqu_eax_offset_ptr_xmm0(self_: *mut GumX86Writer, offset: gint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lea_reg_reg_offset(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
        src_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_xchg_reg_reg_ptr(
        self_: *mut GumX86Writer,
        left_reg: GumX86Reg,
        right_reg: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_push_u32(self_: *mut GumX86Writer, imm_value: guint32);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_push_near_ptr(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_push_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_pop_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_push_imm_ptr(self_: *mut GumX86Writer, imm_ptr: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_pushax(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_popax(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_pushfx(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_popfx(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_sahf(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lahf(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_test_reg_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_test_reg_u32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_i32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_offset_ptr_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        offset: gssize,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cmp_imm_ptr_imm_u32(
        self_: *mut GumX86Writer,
        imm_ptr: gconstpointer,
        imm_value: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_clc(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_stc(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cld(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_std(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_cpuid(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_lfence(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_rdtsc(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_pause(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_nop(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_breakpoint(self_: *mut GumX86Writer);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_padding(self_: *mut GumX86Writer, n: guint);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_nop_padding(self_: *mut GumX86Writer, n: guint);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_fxsave_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_fxrstor_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_u8(self_: *mut GumX86Writer, value: guint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_s8(self_: *mut GumX86Writer, value: gint8);
}
unsafe extern "C" {
    pub fn gum_x86_writer_put_bytes(self_: *mut GumX86Writer, data: *const guint8, n: guint);
}
pub type GumArmWriter = _GumArmWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumArmWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_os: GumOS,
    pub cpu_features: GumCpuFeatures,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArmWriter"][::std::mem::size_of::<_GumArmWriter>() - 104usize];
    ["Alignment of _GumArmWriter"][::std::mem::align_of::<_GumArmWriter>() - 8usize];
    ["Offset of field: _GumArmWriter::ref_count"]
        [::std::mem::offset_of!(_GumArmWriter, ref_count) - 0usize];
    ["Offset of field: _GumArmWriter::flush_on_destroy"]
        [::std::mem::offset_of!(_GumArmWriter, flush_on_destroy) - 4usize];
    ["Offset of field: _GumArmWriter::target_os"]
        [::std::mem::offset_of!(_GumArmWriter, target_os) - 8usize];
    ["Offset of field: _GumArmWriter::cpu_features"]
        [::std::mem::offset_of!(_GumArmWriter, cpu_features) - 12usize];
    ["Offset of field: _GumArmWriter::base"][::std::mem::offset_of!(_GumArmWriter, base) - 16usize];
    ["Offset of field: _GumArmWriter::code"][::std::mem::offset_of!(_GumArmWriter, code) - 24usize];
    ["Offset of field: _GumArmWriter::pc"][::std::mem::offset_of!(_GumArmWriter, pc) - 32usize];
    ["Offset of field: _GumArmWriter::label_defs"]
        [::std::mem::offset_of!(_GumArmWriter, label_defs) - 40usize];
    ["Offset of field: _GumArmWriter::label_refs"]
        [::std::mem::offset_of!(_GumArmWriter, label_refs) - 48usize];
    ["Offset of field: _GumArmWriter::literal_refs"]
        [::std::mem::offset_of!(_GumArmWriter, literal_refs) - 72usize];
    ["Offset of field: _GumArmWriter::earliest_literal_insn"]
        [::std::mem::offset_of!(_GumArmWriter, earliest_literal_insn) - 96usize];
};
impl Default for _GumArmWriter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_arm_writer_new(code_address: gpointer) -> *mut GumArmWriter;
}
unsafe extern "C" {
    pub fn gum_arm_writer_ref(writer: *mut GumArmWriter) -> *mut GumArmWriter;
}
unsafe extern "C" {
    pub fn gum_arm_writer_unref(writer: *mut GumArmWriter);
}
unsafe extern "C" {
    pub fn gum_arm_writer_init(writer: *mut GumArmWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_arm_writer_clear(writer: *mut GumArmWriter);
}
unsafe extern "C" {
    pub fn gum_arm_writer_reset(writer: *mut GumArmWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_arm_writer_set_target_os(self_: *mut GumArmWriter, os: GumOS);
}
unsafe extern "C" {
    pub fn gum_arm_writer_cur(self_: *mut GumArmWriter) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_arm_writer_offset(self_: *mut GumArmWriter) -> guint;
}
unsafe extern "C" {
    pub fn gum_arm_writer_skip(self_: *mut GumArmWriter, n_bytes: guint);
}
unsafe extern "C" {
    pub fn gum_arm_writer_flush(self_: *mut GumArmWriter) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_label(self_: *mut GumArmWriter, id: gconstpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_call_address_with_arguments(
        self_: *mut GumArmWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_call_address_with_arguments_array(
        self_: *mut GumArmWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_call_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_call_reg_with_arguments(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_call_reg_with_arguments_array(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_branch_address(self_: *mut GumArmWriter, address: GumAddress);
}
unsafe extern "C" {
    pub fn gum_arm_writer_can_branch_directly_between(
        self_: *mut GumArmWriter,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_b_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_b_cond_imm(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        target: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_b_label(self_: *mut GumArmWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_b_cond_label(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_bl_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_blx_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_bl_label(self_: *mut GumArmWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_bx_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_bl_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_blx_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ret(self_: *mut GumArmWriter);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_push_regs(self_: *mut GumArmWriter, n: guint, ...);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_pop_regs(self_: *mut GumArmWriter, n: guint, ...);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_vpush_range(
        self_: *mut GumArmWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_vpop_range(
        self_: *mut GumArmWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_address(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_u32(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        val: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_reg_offset(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldr_cond_reg_reg_offset(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldmia_reg_mask(self_: *mut GumArmWriter, reg: arm_reg, mask: guint16);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ldmia_reg_mask_wb(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        mask: guint16,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_str_reg_reg(
        self_: *mut GumArmWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_str_reg_reg_offset(
        self_: *mut GumArmWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_str_cond_reg_reg_offset(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_mov_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_mov_reg_reg_shift(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        shift: arm_shifter,
        shift_value: guint16,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_mov_reg_cpsr(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_mov_cpsr_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_add_reg_u16(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint16);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_add_reg_u32(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint32);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_reg_shift(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
        shift: arm_shifter,
        shift_value: guint16,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_sub_reg_u16(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint16);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_sub_reg_u32(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint32);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_sub_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_sub_reg_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_rsb_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_ands_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_cmp_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        imm_val: guint32,
    );
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_nop(self_: *mut GumArmWriter);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_breakpoint(self_: *mut GumArmWriter);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_brk_imm(self_: *mut GumArmWriter, imm: guint16);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_instruction(self_: *mut GumArmWriter, insn: guint32);
}
unsafe extern "C" {
    pub fn gum_arm_writer_put_bytes(
        self_: *mut GumArmWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
pub type GumThumbWriter = _GumThumbWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumThumbWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_os: GumOS,
    pub base: *mut guint16,
    pub code: *mut guint16,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumThumbWriter"][::std::mem::size_of::<_GumThumbWriter>() - 104usize];
    ["Alignment of _GumThumbWriter"][::std::mem::align_of::<_GumThumbWriter>() - 8usize];
    ["Offset of field: _GumThumbWriter::ref_count"]
        [::std::mem::offset_of!(_GumThumbWriter, ref_count) - 0usize];
    ["Offset of field: _GumThumbWriter::flush_on_destroy"]
        [::std::mem::offset_of!(_GumThumbWriter, flush_on_destroy) - 4usize];
    ["Offset of field: _GumThumbWriter::target_os"]
        [::std::mem::offset_of!(_GumThumbWriter, target_os) - 8usize];
    ["Offset of field: _GumThumbWriter::base"]
        [::std::mem::offset_of!(_GumThumbWriter, base) - 16usize];
    ["Offset of field: _GumThumbWriter::code"]
        [::std::mem::offset_of!(_GumThumbWriter, code) - 24usize];
    ["Offset of field: _GumThumbWriter::pc"][::std::mem::offset_of!(_GumThumbWriter, pc) - 32usize];
    ["Offset of field: _GumThumbWriter::label_defs"]
        [::std::mem::offset_of!(_GumThumbWriter, label_defs) - 40usize];
    ["Offset of field: _GumThumbWriter::label_refs"]
        [::std::mem::offset_of!(_GumThumbWriter, label_refs) - 48usize];
    ["Offset of field: _GumThumbWriter::literal_refs"]
        [::std::mem::offset_of!(_GumThumbWriter, literal_refs) - 72usize];
    ["Offset of field: _GumThumbWriter::earliest_literal_insn"]
        [::std::mem::offset_of!(_GumThumbWriter, earliest_literal_insn) - 96usize];
};
impl Default for _GumThumbWriter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_thumb_writer_new(code_address: gpointer) -> *mut GumThumbWriter;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_ref(writer: *mut GumThumbWriter) -> *mut GumThumbWriter;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_unref(writer: *mut GumThumbWriter);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_init(writer: *mut GumThumbWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_clear(writer: *mut GumThumbWriter);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_reset(writer: *mut GumThumbWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_set_target_os(self_: *mut GumThumbWriter, os: GumOS);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_cur(self_: *mut GumThumbWriter) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_offset(self_: *mut GumThumbWriter) -> guint;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_skip(self_: *mut GumThumbWriter, n_bytes: guint);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_flush(self_: *mut GumThumbWriter) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_label(self_: *mut GumThumbWriter, id: gconstpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_commit_label(self_: *mut GumThumbWriter, id: gconstpointer)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_call_address_with_arguments(
        self_: *mut GumThumbWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_call_address_with_arguments_array(
        self_: *mut GumThumbWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_call_reg_with_arguments(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_call_reg_with_arguments_array(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_branch_address(self_: *mut GumThumbWriter, address: GumAddress);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_can_branch_directly_between(
        self_: *mut GumThumbWriter,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_b_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_b_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_b_label_wide(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bx_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bl_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bl_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_blx_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_blx_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_cmp_reg_imm(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        imm_value: guint8,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_beq_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bne_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_b_cond_label(
        self_: *mut GumThumbWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_b_cond_label_wide(
        self_: *mut GumThumbWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_cbz_reg_label(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_cbnz_reg_label(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_push_regs(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        first_reg: arm_reg,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_push_regs_array(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        regs: *const arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_pop_regs(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        first_reg: arm_reg,
        ...
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_pop_regs_array(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        regs: *const arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_vpush_range(
        self_: *mut GumThumbWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_vpop_range(
        self_: *mut GumThumbWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_address(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_u32(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        val: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_reg_offset(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldrb_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldrh_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_vldr_reg_reg_offset(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_ldmia_reg_mask(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        mask: guint16,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_str_reg_reg(
        self_: *mut GumThumbWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_str_reg_reg_offset(
        self_: *mut GumThumbWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_u8(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: guint8,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_cpsr(self_: *mut GumThumbWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_mov_cpsr_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_add_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_reg: arm_reg,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_and_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_or_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_lsl_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_lsls_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_lsrs_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_mrs_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_sysreg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_msr_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_sysreg,
        src_reg: arm_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_nop(self_: *mut GumThumbWriter);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bkpt_imm(self_: *mut GumThumbWriter, imm: guint8);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_breakpoint(self_: *mut GumThumbWriter);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_instruction(self_: *mut GumThumbWriter, insn: guint16);
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_instruction_wide(
        self_: *mut GumThumbWriter,
        upper: guint16,
        lower: guint16,
    );
}
unsafe extern "C" {
    pub fn gum_thumb_writer_put_bytes(
        self_: *mut GumThumbWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
pub type GumArm64Writer = _GumArm64Writer;
pub type GumArm64IndexMode = guint;
pub type GumArm64DataEndian = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumArm64Writer {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub data_endian: GumArm64DataEndian,
    pub target_os: GumOS,
    pub ptrauth_support: GumPtrauthSupport,
    pub sign: ::std::option::Option<unsafe extern "C" fn(value: GumAddress) -> GumAddress>,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumArm64Writer"][::std::mem::size_of::<_GumArm64Writer>() - 120usize];
    ["Alignment of _GumArm64Writer"][::std::mem::align_of::<_GumArm64Writer>() - 8usize];
    ["Offset of field: _GumArm64Writer::ref_count"]
        [::std::mem::offset_of!(_GumArm64Writer, ref_count) - 0usize];
    ["Offset of field: _GumArm64Writer::flush_on_destroy"]
        [::std::mem::offset_of!(_GumArm64Writer, flush_on_destroy) - 4usize];
    ["Offset of field: _GumArm64Writer::data_endian"]
        [::std::mem::offset_of!(_GumArm64Writer, data_endian) - 8usize];
    ["Offset of field: _GumArm64Writer::target_os"]
        [::std::mem::offset_of!(_GumArm64Writer, target_os) - 12usize];
    ["Offset of field: _GumArm64Writer::ptrauth_support"]
        [::std::mem::offset_of!(_GumArm64Writer, ptrauth_support) - 16usize];
    ["Offset of field: _GumArm64Writer::sign"]
        [::std::mem::offset_of!(_GumArm64Writer, sign) - 24usize];
    ["Offset of field: _GumArm64Writer::base"]
        [::std::mem::offset_of!(_GumArm64Writer, base) - 32usize];
    ["Offset of field: _GumArm64Writer::code"]
        [::std::mem::offset_of!(_GumArm64Writer, code) - 40usize];
    ["Offset of field: _GumArm64Writer::pc"][::std::mem::offset_of!(_GumArm64Writer, pc) - 48usize];
    ["Offset of field: _GumArm64Writer::label_defs"]
        [::std::mem::offset_of!(_GumArm64Writer, label_defs) - 56usize];
    ["Offset of field: _GumArm64Writer::label_refs"]
        [::std::mem::offset_of!(_GumArm64Writer, label_refs) - 64usize];
    ["Offset of field: _GumArm64Writer::literal_refs"]
        [::std::mem::offset_of!(_GumArm64Writer, literal_refs) - 88usize];
    ["Offset of field: _GumArm64Writer::earliest_literal_insn"]
        [::std::mem::offset_of!(_GumArm64Writer, earliest_literal_insn) - 112usize];
};
impl Default for _GumArm64Writer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_arm64_writer_new(code_address: gpointer) -> *mut GumArm64Writer;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_ref(writer: *mut GumArm64Writer) -> *mut GumArm64Writer;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_unref(writer: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_init(writer: *mut GumArm64Writer, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_clear(writer: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_reset(writer: *mut GumArm64Writer, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_cur(self_: *mut GumArm64Writer) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_offset(self_: *mut GumArm64Writer) -> guint;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_skip(self_: *mut GumArm64Writer, n_bytes: guint);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_flush(self_: *mut GumArm64Writer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_label(self_: *mut GumArm64Writer, id: gconstpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_call_address_with_arguments(
        self_: *mut GumArm64Writer,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_call_address_with_arguments_array(
        self_: *mut GumArm64Writer,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_call_reg_with_arguments(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_call_reg_with_arguments_array(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_branch_address(self_: *mut GumArm64Writer, address: GumAddress);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_can_branch_directly_between(
        self_: *mut GumArm64Writer,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_b_imm(self_: *mut GumArm64Writer, address: GumAddress) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_b_label(self_: *mut GumArm64Writer, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_b_cond_label(
        self_: *mut GumArm64Writer,
        cc: arm64_cc,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_bl_imm(self_: *mut GumArm64Writer, address: GumAddress)
    -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_bl_label(self_: *mut GumArm64Writer, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_br_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_br_reg_no_auth(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_blr_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_blr_reg_no_auth(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ret(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ret_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_cbz_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        target: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_cbnz_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        target: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_cbz_reg_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_cbnz_reg_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_tbz_reg_imm_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        target: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_tbnz_reg_imm_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        target: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_tbz_reg_imm_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_tbnz_reg_imm_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_push_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_pop_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_push_all_x_registers(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_pop_all_x_registers(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_push_all_q_registers(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_pop_all_q_registers(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_address(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u32(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        val: guint32,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u64(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        val: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u32_ptr(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        src_address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u64_ptr(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        src_address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_ref(self_: *mut GumArm64Writer, reg: arm64_reg) -> guint;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_value(
        self_: *mut GumArm64Writer,
        ref_: guint,
        value: GumAddress,
    );
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg_offset(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg_offset_mode(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldrsw_reg_reg_offset(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_adrp_reg_address(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg_offset(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
        dst_offset: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg_offset_mode(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
        dst_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ldp_reg_reg_reg_offset(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
        reg_src: arm64_reg,
        src_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_stp_reg_reg_reg_offset(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
        reg_dst: arm64_reg,
        dst_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_mov_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_mov_reg_nzcv(self_: *mut GumArm64Writer, reg: arm64_reg);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_mov_nzcv_reg(self_: *mut GumArm64Writer, reg: arm64_reg);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_uxtw_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_add_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_add_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_sub_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: gsize,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_sub_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_and_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_eor_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_ubfm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        imms: guint8,
        immr: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_lsl_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        shift: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_lsr_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        shift: guint8,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_tst_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        imm_value: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_cmp_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_xpaci_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_nop(self_: *mut GumArm64Writer);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_brk_imm(self_: *mut GumArm64Writer, imm: guint16);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_mrs(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        system_reg: guint16,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_instruction(self_: *mut GumArm64Writer, insn: guint32);
}
unsafe extern "C" {
    pub fn gum_arm64_writer_put_bytes(
        self_: *mut GumArm64Writer,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_arm64_writer_sign(self_: *mut GumArm64Writer, value: GumAddress) -> GumAddress;
}
pub type GumMipsWriter = _GumMipsWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMipsWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumMipsWriter"][::std::mem::size_of::<_GumMipsWriter>() - 64usize];
    ["Alignment of _GumMipsWriter"][::std::mem::align_of::<_GumMipsWriter>() - 8usize];
    ["Offset of field: _GumMipsWriter::ref_count"]
        [::std::mem::offset_of!(_GumMipsWriter, ref_count) - 0usize];
    ["Offset of field: _GumMipsWriter::flush_on_destroy"]
        [::std::mem::offset_of!(_GumMipsWriter, flush_on_destroy) - 4usize];
    ["Offset of field: _GumMipsWriter::base"]
        [::std::mem::offset_of!(_GumMipsWriter, base) - 8usize];
    ["Offset of field: _GumMipsWriter::code"]
        [::std::mem::offset_of!(_GumMipsWriter, code) - 16usize];
    ["Offset of field: _GumMipsWriter::pc"][::std::mem::offset_of!(_GumMipsWriter, pc) - 24usize];
    ["Offset of field: _GumMipsWriter::label_defs"]
        [::std::mem::offset_of!(_GumMipsWriter, label_defs) - 32usize];
    ["Offset of field: _GumMipsWriter::label_refs"]
        [::std::mem::offset_of!(_GumMipsWriter, label_refs) - 40usize];
};
impl Default for _GumMipsWriter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_mips_writer_new(code_address: gpointer) -> *mut GumMipsWriter;
}
unsafe extern "C" {
    pub fn gum_mips_writer_ref(writer: *mut GumMipsWriter) -> *mut GumMipsWriter;
}
unsafe extern "C" {
    pub fn gum_mips_writer_unref(writer: *mut GumMipsWriter);
}
unsafe extern "C" {
    pub fn gum_mips_writer_init(writer: *mut GumMipsWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_mips_writer_clear(writer: *mut GumMipsWriter);
}
unsafe extern "C" {
    pub fn gum_mips_writer_reset(writer: *mut GumMipsWriter, code_address: gpointer);
}
unsafe extern "C" {
    pub fn gum_mips_writer_cur(self_: *mut GumMipsWriter) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_mips_writer_offset(self_: *mut GumMipsWriter) -> guint;
}
unsafe extern "C" {
    pub fn gum_mips_writer_skip(self_: *mut GumMipsWriter, n_bytes: guint);
}
unsafe extern "C" {
    pub fn gum_mips_writer_flush(self_: *mut GumMipsWriter) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_label(self_: *mut GumMipsWriter, id: gconstpointer) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_call_address_with_arguments(
        self_: *mut GumMipsWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_call_address_with_arguments_array(
        self_: *mut GumMipsWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_call_reg_with_arguments(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        n_args: guint,
        ...
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_call_reg_with_arguments_array(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_can_branch_directly_between(
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_j_address(
        self_: *mut GumMipsWriter,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_j_address_without_nop(
        self_: *mut GumMipsWriter,
        address: GumAddress,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_j_label(self_: *mut GumMipsWriter, label_id: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_jr_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_jal_address(self_: *mut GumMipsWriter, address: guint32);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_jalr_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_b_offset(self_: *mut GumMipsWriter, offset: gint32);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_beq_reg_reg_label(
        self_: *mut GumMipsWriter,
        right_reg: mips_reg,
        left_reg: mips_reg,
        label_id: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_ret(self_: *mut GumMipsWriter);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_la_reg_address(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        address: GumAddress,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_lui_reg_imm(self_: *mut GumMipsWriter, reg: mips_reg, imm: guint);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_dsll_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        amount: guint,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_ori_reg_reg_imm(
        self_: *mut GumMipsWriter,
        rt: mips_reg,
        rs: mips_reg,
        imm: guint,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_ld_reg_reg_offset(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        src_offset: gsize,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_lw_reg_reg_offset(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        src_offset: gsize,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_sw_reg_reg_offset(
        self_: *mut GumMipsWriter,
        src_reg: mips_reg,
        dst_reg: mips_reg,
        dst_offset: gsize,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_move_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_addu_reg_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        right_reg: mips_reg,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_addi_reg_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        imm: gint32,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_addi_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        imm: gint32,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_sub_reg_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        imm: gint32,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_push_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_pop_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_mfhi_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_mflo_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_mthi_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_mtlo_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_nop(self_: *mut GumMipsWriter);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_break(self_: *mut GumMipsWriter);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_prologue_trampoline(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        address: GumAddress,
    );
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_instruction(self_: *mut GumMipsWriter, insn: guint32);
}
unsafe extern "C" {
    pub fn gum_mips_writer_put_bytes(
        self_: *mut GumMipsWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalker {
    _unused: [u8; 0],
}
pub type GumStalker = _GumStalker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumStalkerClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumStalkerClass"][::std::mem::size_of::<GumStalkerClass>() - 136usize];
    ["Alignment of GumStalkerClass"][::std::mem::align_of::<GumStalkerClass>() - 8usize];
    ["Offset of field: GumStalkerClass::parent_class"]
        [::std::mem::offset_of!(GumStalkerClass, parent_class) - 0usize];
};
impl Default for GumStalkerClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumStalker_autoptr = *mut GumStalker;
pub type GumStalker_listautoptr = *mut GList;
pub type GumStalker_slistautoptr = *mut GSList;
pub type GumStalker_queueautoptr = *mut GQueue;
pub type GumStalkerClass_autoptr = *mut GumStalkerClass;
pub type GumStalkerClass_listautoptr = *mut GList;
pub type GumStalkerClass_slistautoptr = *mut GSList;
pub type GumStalkerClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumStalkerTransformer = _GumStalkerTransformer;
pub type GumStalkerTransformerInterface = _GumStalkerTransformerInterface;
pub type GumStalkerTransformer_autoptr = *mut GumStalkerTransformer;
pub type GumStalkerTransformer_listautoptr = *mut GList;
pub type GumStalkerTransformer_slistautoptr = *mut GSList;
pub type GumStalkerTransformer_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_default_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDefaultStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumDefaultStalkerTransformer = _GumDefaultStalkerTransformer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDefaultStalkerTransformerClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumDefaultStalkerTransformerClass"]
        [::std::mem::size_of::<GumDefaultStalkerTransformerClass>() - 136usize];
    ["Alignment of GumDefaultStalkerTransformerClass"]
        [::std::mem::align_of::<GumDefaultStalkerTransformerClass>() - 8usize];
    ["Offset of field: GumDefaultStalkerTransformerClass::parent_class"]
        [::std::mem::offset_of!(GumDefaultStalkerTransformerClass, parent_class) - 0usize];
};
impl Default for GumDefaultStalkerTransformerClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumDefaultStalkerTransformer_autoptr = *mut GumDefaultStalkerTransformer;
pub type GumDefaultStalkerTransformer_listautoptr = *mut GList;
pub type GumDefaultStalkerTransformer_slistautoptr = *mut GSList;
pub type GumDefaultStalkerTransformer_queueautoptr = *mut GQueue;
pub type GumDefaultStalkerTransformerClass_autoptr = *mut GumDefaultStalkerTransformerClass;
pub type GumDefaultStalkerTransformerClass_listautoptr = *mut GList;
pub type GumDefaultStalkerTransformerClass_slistautoptr = *mut GSList;
pub type GumDefaultStalkerTransformerClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_callback_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallbackStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumCallbackStalkerTransformer = _GumCallbackStalkerTransformer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumCallbackStalkerTransformerClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumCallbackStalkerTransformerClass"]
        [::std::mem::size_of::<GumCallbackStalkerTransformerClass>() - 136usize];
    ["Alignment of GumCallbackStalkerTransformerClass"]
        [::std::mem::align_of::<GumCallbackStalkerTransformerClass>() - 8usize];
    ["Offset of field: GumCallbackStalkerTransformerClass::parent_class"]
        [::std::mem::offset_of!(GumCallbackStalkerTransformerClass, parent_class) - 0usize];
};
impl Default for GumCallbackStalkerTransformerClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumCallbackStalkerTransformer_autoptr = *mut GumCallbackStalkerTransformer;
pub type GumCallbackStalkerTransformer_listautoptr = *mut GList;
pub type GumCallbackStalkerTransformer_slistautoptr = *mut GSList;
pub type GumCallbackStalkerTransformer_queueautoptr = *mut GQueue;
pub type GumCallbackStalkerTransformerClass_autoptr = *mut GumCallbackStalkerTransformerClass;
pub type GumCallbackStalkerTransformerClass_listautoptr = *mut GList;
pub type GumCallbackStalkerTransformerClass_slistautoptr = *mut GSList;
pub type GumCallbackStalkerTransformerClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_stalker_observer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerObserver {
    _unused: [u8; 0],
}
pub type GumStalkerObserver = _GumStalkerObserver;
pub type GumStalkerObserverInterface = _GumStalkerObserverInterface;
pub type GumStalkerObserver_autoptr = *mut GumStalkerObserver;
pub type GumStalkerObserver_listautoptr = *mut GList;
pub type GumStalkerObserver_slistautoptr = *mut GSList;
pub type GumStalkerObserver_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerIterator {
    _unused: [u8; 0],
}
pub type GumStalkerIterator = _GumStalkerIterator;
pub type GumStalkerOutput = _GumStalkerOutput;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBackpatch {
    _unused: [u8; 0],
}
pub type GumBackpatch = _GumBackpatch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBackpatchInstruction {
    _unused: [u8; 0],
}
pub type GumBackpatchInstruction = _GumBackpatchInstruction;
pub type GumStalkerIncrementFunc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut GumStalkerObserver)>;
pub type GumStalkerNotifyBackpatchFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut GumStalkerObserver,
        backpatch: *const GumBackpatch,
        size: gsize,
    ),
>;
pub type GumStalkerSwitchCallbackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut GumStalkerObserver,
        from_address: gpointer,
        start_address: gpointer,
        from_insn: gpointer,
        target: *mut gpointer,
    ),
>;
pub type GumStalkerWriter = _GumStalkerWriter;
pub type GumStalkerTransformerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        iterator: *mut GumStalkerIterator,
        output: *mut GumStalkerOutput,
        user_data: gpointer,
    ),
>;
pub type GumStalkerCallout = ::std::option::Option<
    unsafe extern "C" fn(cpu_context: *mut GumCpuContext, user_data: gpointer),
>;
pub type GumProbeId = guint;
pub type GumCallDetails = _GumCallDetails;
pub type GumCallProbeCallback =
    ::std::option::Option<unsafe extern "C" fn(details: *mut GumCallDetails, user_data: gpointer)>;
pub type GumStalkerRunOnThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(cpu_context: *const GumCpuContext, user_data: gpointer),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumStalkerTransformerInterface {
    pub parent: GTypeInterface,
    pub transform_block: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumStalkerTransformer,
            iterator: *mut GumStalkerIterator,
            output: *mut GumStalkerOutput,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumStalkerTransformerInterface"]
        [::std::mem::size_of::<_GumStalkerTransformerInterface>() - 24usize];
    ["Alignment of _GumStalkerTransformerInterface"]
        [::std::mem::align_of::<_GumStalkerTransformerInterface>() - 8usize];
    ["Offset of field: _GumStalkerTransformerInterface::parent"]
        [::std::mem::offset_of!(_GumStalkerTransformerInterface, parent) - 0usize];
    ["Offset of field: _GumStalkerTransformerInterface::transform_block"]
        [::std::mem::offset_of!(_GumStalkerTransformerInterface, transform_block) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _GumStalkerObserverInterface {
    pub parent: GTypeInterface,
    pub increment_total: GumStalkerIncrementFunc,
    pub increment_call_imm: GumStalkerIncrementFunc,
    pub increment_call_reg: GumStalkerIncrementFunc,
    pub increment_call_mem: GumStalkerIncrementFunc,
    pub increment_excluded_call_reg: GumStalkerIncrementFunc,
    pub increment_ret_slow_path: GumStalkerIncrementFunc,
    pub increment_ret: GumStalkerIncrementFunc,
    pub increment_post_call_invoke: GumStalkerIncrementFunc,
    pub increment_excluded_call_imm: GumStalkerIncrementFunc,
    pub increment_jmp_imm: GumStalkerIncrementFunc,
    pub increment_jmp_reg: GumStalkerIncrementFunc,
    pub increment_jmp_mem: GumStalkerIncrementFunc,
    pub increment_jmp_cond_imm: GumStalkerIncrementFunc,
    pub increment_jmp_cond_mem: GumStalkerIncrementFunc,
    pub increment_jmp_cond_reg: GumStalkerIncrementFunc,
    pub increment_jmp_cond_jcxz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cc: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cbz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cbnz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_tbz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_tbnz: GumStalkerIncrementFunc,
    pub increment_jmp_continuation: GumStalkerIncrementFunc,
    pub increment_sysenter_slow_path: GumStalkerIncrementFunc,
    pub notify_backpatch: GumStalkerNotifyBackpatchFunc,
    pub switch_callback: GumStalkerSwitchCallbackFunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumStalkerObserverInterface"]
        [::std::mem::size_of::<_GumStalkerObserverInterface>() - 216usize];
    ["Alignment of _GumStalkerObserverInterface"]
        [::std::mem::align_of::<_GumStalkerObserverInterface>() - 8usize];
    ["Offset of field: _GumStalkerObserverInterface::parent"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, parent) - 0usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_total"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_total) - 16usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_call_imm"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_call_imm) - 24usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_call_reg"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_call_reg) - 32usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_call_mem"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_call_mem) - 40usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_excluded_call_reg"][::std::mem::offset_of!(
        _GumStalkerObserverInterface,
        increment_excluded_call_reg
    ) - 48usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_ret_slow_path"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_ret_slow_path) - 56usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_ret"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_ret) - 64usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_post_call_invoke"][::std::mem::offset_of!(
        _GumStalkerObserverInterface,
        increment_post_call_invoke
    ) - 72usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_excluded_call_imm"][::std::mem::offset_of!(
        _GumStalkerObserverInterface,
        increment_excluded_call_imm
    ) - 80usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_imm"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_imm) - 88usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_reg"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_reg) - 96usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_mem"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_mem) - 104usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_imm"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_imm) - 112usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_mem"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_mem) - 120usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_reg"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_reg) - 128usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_jcxz"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_jcxz) - 136usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_cc"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_cc) - 144usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_cbz"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_cbz) - 152usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_cbnz"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_cbnz) - 160usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_tbz"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_tbz) - 168usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_cond_tbnz"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, increment_jmp_cond_tbnz) - 176usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_jmp_continuation"][::std::mem::offset_of!(
        _GumStalkerObserverInterface,
        increment_jmp_continuation
    ) - 184usize];
    ["Offset of field: _GumStalkerObserverInterface::increment_sysenter_slow_path"][::std::mem::offset_of!(
        _GumStalkerObserverInterface,
        increment_sysenter_slow_path
    ) - 192usize];
    ["Offset of field: _GumStalkerObserverInterface::notify_backpatch"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, notify_backpatch) - 200usize];
    ["Offset of field: _GumStalkerObserverInterface::switch_callback"]
        [::std::mem::offset_of!(_GumStalkerObserverInterface, switch_callback) - 208usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumStalkerWriter {
    pub instance: gpointer,
    pub x86: *mut GumX86Writer,
    pub arm: *mut GumArmWriter,
    pub thumb: *mut GumThumbWriter,
    pub arm64: *mut GumArm64Writer,
    pub mips: *mut GumMipsWriter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumStalkerWriter"][::std::mem::size_of::<_GumStalkerWriter>() - 8usize];
    ["Alignment of _GumStalkerWriter"][::std::mem::align_of::<_GumStalkerWriter>() - 8usize];
    ["Offset of field: _GumStalkerWriter::instance"]
        [::std::mem::offset_of!(_GumStalkerWriter, instance) - 0usize];
    ["Offset of field: _GumStalkerWriter::x86"]
        [::std::mem::offset_of!(_GumStalkerWriter, x86) - 0usize];
    ["Offset of field: _GumStalkerWriter::arm"]
        [::std::mem::offset_of!(_GumStalkerWriter, arm) - 0usize];
    ["Offset of field: _GumStalkerWriter::thumb"]
        [::std::mem::offset_of!(_GumStalkerWriter, thumb) - 0usize];
    ["Offset of field: _GumStalkerWriter::arm64"]
        [::std::mem::offset_of!(_GumStalkerWriter, arm64) - 0usize];
    ["Offset of field: _GumStalkerWriter::mips"]
        [::std::mem::offset_of!(_GumStalkerWriter, mips) - 0usize];
};
impl Default for _GumStalkerWriter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumStalkerOutput {
    pub writer: GumStalkerWriter,
    pub encoding: GumInstructionEncoding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumStalkerOutput"][::std::mem::size_of::<_GumStalkerOutput>() - 16usize];
    ["Alignment of _GumStalkerOutput"][::std::mem::align_of::<_GumStalkerOutput>() - 8usize];
    ["Offset of field: _GumStalkerOutput::writer"]
        [::std::mem::offset_of!(_GumStalkerOutput, writer) - 0usize];
    ["Offset of field: _GumStalkerOutput::encoding"]
        [::std::mem::offset_of!(_GumStalkerOutput, encoding) - 8usize];
};
impl Default for _GumStalkerOutput {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallDetails {
    pub target_address: gpointer,
    pub return_address: gpointer,
    pub stack_data: gpointer,
    pub cpu_context: *mut GumCpuContext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumCallDetails"][::std::mem::size_of::<_GumCallDetails>() - 32usize];
    ["Alignment of _GumCallDetails"][::std::mem::align_of::<_GumCallDetails>() - 8usize];
    ["Offset of field: _GumCallDetails::target_address"]
        [::std::mem::offset_of!(_GumCallDetails, target_address) - 0usize];
    ["Offset of field: _GumCallDetails::return_address"]
        [::std::mem::offset_of!(_GumCallDetails, return_address) - 8usize];
    ["Offset of field: _GumCallDetails::stack_data"]
        [::std::mem::offset_of!(_GumCallDetails, stack_data) - 16usize];
    ["Offset of field: _GumCallDetails::cpu_context"]
        [::std::mem::offset_of!(_GumCallDetails, cpu_context) - 24usize];
};
impl Default for _GumCallDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_stalker_is_supported() -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_activate_experimental_unwind_support();
}
unsafe extern "C" {
    pub fn gum_stalker_new() -> *mut GumStalker;
}
unsafe extern "C" {
    pub fn gum_stalker_exclude(self_: *mut GumStalker, range: *const GumMemoryRange);
}
unsafe extern "C" {
    pub fn gum_stalker_get_trust_threshold(self_: *mut GumStalker) -> gint;
}
unsafe extern "C" {
    pub fn gum_stalker_set_trust_threshold(self_: *mut GumStalker, trust_threshold: gint);
}
unsafe extern "C" {
    pub fn gum_stalker_flush(self_: *mut GumStalker);
}
unsafe extern "C" {
    pub fn gum_stalker_stop(self_: *mut GumStalker);
}
unsafe extern "C" {
    pub fn gum_stalker_garbage_collect(self_: *mut GumStalker) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_follow_me(
        self_: *mut GumStalker,
        transformer: *mut GumStalkerTransformer,
        sink: *mut GumEventSink,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_unfollow_me(self_: *mut GumStalker);
}
unsafe extern "C" {
    pub fn gum_stalker_is_following_me(self_: *mut GumStalker) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_follow(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        transformer: *mut GumStalkerTransformer,
        sink: *mut GumEventSink,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_unfollow(self_: *mut GumStalker, thread_id: GumThreadId);
}
unsafe extern "C" {
    pub fn gum_stalker_activate(self_: *mut GumStalker, target: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_stalker_deactivate(self_: *mut GumStalker);
}
unsafe extern "C" {
    pub fn gum_stalker_set_observer(self_: *mut GumStalker, observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_prefetch(
        self_: *mut GumStalker,
        address: gconstpointer,
        recycle_count: gint,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_prefetch_backpatch(
        self_: *mut GumStalker,
        notification: *const GumBackpatch,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_recompile(self_: *mut GumStalker, address: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_stalker_backpatch_get_from(backpatch: *const GumBackpatch) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_stalker_backpatch_get_to(backpatch: *const GumBackpatch) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_stalker_invalidate(self_: *mut GumStalker, address: gconstpointer);
}
unsafe extern "C" {
    pub fn gum_stalker_invalidate_for_thread(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        address: gconstpointer,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_add_call_probe(
        self_: *mut GumStalker,
        target_address: gpointer,
        callback: GumCallProbeCallback,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> GumProbeId;
}
unsafe extern "C" {
    pub fn gum_stalker_remove_call_probe(self_: *mut GumStalker, id: GumProbeId);
}
unsafe extern "C" {
    pub fn gum_stalker_run_on_thread(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        func: GumStalkerRunOnThreadFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_run_on_thread_sync(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        func: GumStalkerRunOnThreadFunc,
        data: gpointer,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_transformer_make_default() -> *mut GumStalkerTransformer;
}
unsafe extern "C" {
    pub fn gum_stalker_transformer_make_from_callback(
        callback: GumStalkerTransformerCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumStalkerTransformer;
}
unsafe extern "C" {
    pub fn gum_stalker_transformer_transform_block(
        self_: *mut GumStalkerTransformer,
        iterator: *mut GumStalkerIterator,
        output: *mut GumStalkerOutput,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_next(
        self_: *mut GumStalkerIterator,
        insn: *mut *const cs_insn,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_keep(self_: *mut GumStalkerIterator);
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_get_memory_access(
        self_: *mut GumStalkerIterator,
    ) -> GumMemoryAccess;
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_put_callout(
        self_: *mut GumStalkerIterator,
        callout: GumStalkerCallout,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_put_chaining_return(self_: *mut GumStalkerIterator);
}
unsafe extern "C" {
    pub fn gum_stalker_iterator_get_capstone(self_: *mut GumStalkerIterator) -> csh;
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_total(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_call_imm(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_call_reg(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_call_mem(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_excluded_call_reg(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_ret_slow_path(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_ret(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_post_call_invoke(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_excluded_call_imm(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_imm(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_reg(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_mem(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_imm(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_mem(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_reg(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_jcxz(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cc(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cbz(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cbnz(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_tbz(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_tbnz(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_jmp_continuation(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_increment_sysenter_slow_path(observer: *mut GumStalkerObserver);
}
unsafe extern "C" {
    pub fn gum_stalker_observer_notify_backpatch(
        observer: *mut GumStalkerObserver,
        backpatch: *const GumBackpatch,
        size: gsize,
    );
}
unsafe extern "C" {
    pub fn gum_stalker_observer_switch_callback(
        observer: *mut GumStalkerObserver,
        from_address: gpointer,
        start_address: gpointer,
        from_insn: gpointer,
        target: *mut gpointer,
    );
}
pub type GumDebugSymbolDetails = _GumDebugSymbolDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDebugSymbolDetails {
    pub address: GumAddress,
    pub module_name: [gchar; 261usize],
    pub symbol_name: [gchar; 2049usize],
    pub file_name: [gchar; 261usize],
    pub line_number: guint,
    pub column: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GumDebugSymbolDetails"][::std::mem::size_of::<_GumDebugSymbolDetails>() - 2592usize];
    ["Alignment of _GumDebugSymbolDetails"]
        [::std::mem::align_of::<_GumDebugSymbolDetails>() - 8usize];
    ["Offset of field: _GumDebugSymbolDetails::address"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, address) - 0usize];
    ["Offset of field: _GumDebugSymbolDetails::module_name"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, module_name) - 8usize];
    ["Offset of field: _GumDebugSymbolDetails::symbol_name"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, symbol_name) - 269usize];
    ["Offset of field: _GumDebugSymbolDetails::file_name"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, file_name) - 2318usize];
    ["Offset of field: _GumDebugSymbolDetails::line_number"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, line_number) - 2580usize];
    ["Offset of field: _GumDebugSymbolDetails::column"]
        [::std::mem::offset_of!(_GumDebugSymbolDetails, column) - 2584usize];
};
impl Default for _GumDebugSymbolDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn gum_symbol_details_from_address(
        address: gpointer,
        details: *mut GumDebugSymbolDetails,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_symbol_name_from_address(address: gpointer) -> *mut gchar;
}
unsafe extern "C" {
    pub fn gum_find_function(name: *const gchar) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_find_functions_named(name: *const gchar) -> *mut GArray;
}
unsafe extern "C" {
    pub fn gum_find_functions_matching(str_: *const gchar) -> *mut GArray;
}
unsafe extern "C" {
    pub fn gum_load_symbols(path: *const gchar) -> gboolean;
}
unsafe extern "C" {
    pub fn gum_thread_registry_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumThreadRegistry {
    _unused: [u8; 0],
}
pub type GumThreadRegistry = _GumThreadRegistry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumThreadRegistryClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GumThreadRegistryClass"][::std::mem::size_of::<GumThreadRegistryClass>() - 136usize];
    ["Alignment of GumThreadRegistryClass"]
        [::std::mem::align_of::<GumThreadRegistryClass>() - 8usize];
    ["Offset of field: GumThreadRegistryClass::parent_class"]
        [::std::mem::offset_of!(GumThreadRegistryClass, parent_class) - 0usize];
};
impl Default for GumThreadRegistryClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type GumThreadRegistry_autoptr = *mut GumThreadRegistry;
pub type GumThreadRegistry_listautoptr = *mut GList;
pub type GumThreadRegistry_slistautoptr = *mut GSList;
pub type GumThreadRegistry_queueautoptr = *mut GQueue;
pub type GumThreadRegistryClass_autoptr = *mut GumThreadRegistryClass;
pub type GumThreadRegistryClass_listautoptr = *mut GList;
pub type GumThreadRegistryClass_slistautoptr = *mut GSList;
pub type GumThreadRegistryClass_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn gum_thread_registry_obtain() -> *mut GumThreadRegistry;
}
unsafe extern "C" {
    pub fn gum_thread_registry_enumerate_threads(
        self_: *mut GumThreadRegistry,
        func: GumFoundThreadFunc,
        user_data: gpointer,
    );
}
unsafe extern "C" {
    pub fn gum_thread_registry_lock(self_: *mut GumThreadRegistry);
}
unsafe extern "C" {
    pub fn gum_thread_registry_unlock(self_: *mut GumThreadRegistry);
}
pub type GumTlsKey = gsize;
unsafe extern "C" {
    pub fn gum_tls_key_new() -> GumTlsKey;
}
unsafe extern "C" {
    pub fn gum_tls_key_free(key: GumTlsKey);
}
unsafe extern "C" {
    pub fn gum_tls_key_get_value(key: GumTlsKey) -> gpointer;
}
unsafe extern "C" {
    pub fn gum_tls_key_set_value(key: GumTlsKey, value: gpointer);
}
unsafe extern "C" {
    pub fn gum_init();
}
unsafe extern "C" {
    pub fn gum_shutdown();
}
unsafe extern "C" {
    pub fn gum_deinit();
}
unsafe extern "C" {
    pub fn gum_init_embedded();
}
unsafe extern "C" {
    pub fn gum_deinit_embedded();
}
unsafe extern "C" {
    pub fn gum_prepare_to_fork();
}
unsafe extern "C" {
    pub fn gum_recover_from_fork_in_parent();
}
unsafe extern "C" {
    pub fn gum_recover_from_fork_in_child();
}
#[doc = " GUnixInputStream:\n\n Implements #GInputStream for reading from selectable unix file descriptors"]
pub type GUnixInputStream = _GUnixInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GUnixInputStreamPrivate = _GUnixInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixInputStream {
    pub parent_instance: GInputStream,
    pub priv_: *mut GUnixInputStreamPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GUnixInputStream"][::std::mem::size_of::<_GUnixInputStream>() - 40usize];
    ["Alignment of _GUnixInputStream"][::std::mem::align_of::<_GUnixInputStream>() - 8usize];
    ["Offset of field: _GUnixInputStream::parent_instance"]
        [::std::mem::offset_of!(_GUnixInputStream, parent_instance) - 0usize];
    ["Offset of field: _GUnixInputStream::priv_"]
        [::std::mem::offset_of!(_GUnixInputStream, priv_) - 32usize];
};
impl Default for _GUnixInputStream {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHelperBackend {
    _unused: [u8; 0],
}
pub type FridaLinuxHelperBackend = _FridaLinuxHelperBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHelperBackendClass {
    _unused: [u8; 0],
}
pub type FridaLinuxHelperBackendClass = _FridaLinuxHelperBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnedProcess {
    _unused: [u8; 0],
}
pub type FridaSpawnedProcess = _FridaSpawnedProcess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnedProcessClass {
    _unused: [u8; 0],
}
pub type FridaSpawnedProcessClass = _FridaSpawnedProcessClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaStdioPipes {
    _unused: [u8; 0],
}
pub type FridaStdioPipes = _FridaStdioPipes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaStdioPipesClass {
    _unused: [u8; 0],
}
pub type FridaStdioPipesClass = _FridaStdioPipesClass;
pub type FridaSeizeSession = _FridaSeizeSession;
pub type FridaSeizeSessionClass = _FridaSeizeSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaExecTransitionSession {
    _unused: [u8; 0],
}
pub type FridaExecTransitionSession = _FridaExecTransitionSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaExecTransitionSessionClass {
    _unused: [u8; 0],
}
pub type FridaExecTransitionSessionClass = _FridaExecTransitionSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPausedSyscallSession {
    _unused: [u8; 0],
}
pub type FridaPausedSyscallSession = _FridaPausedSyscallSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPausedSyscallSessionClass {
    _unused: [u8; 0],
}
pub type FridaPausedSyscallSessionClass = _FridaPausedSyscallSessionClass;
pub const FridaProcessStatus_FRIDA_PROCESS_STATUS_NORMAL: FridaProcessStatus = 0;
pub const FridaProcessStatus_FRIDA_PROCESS_STATUS_EXEC_PENDING: FridaProcessStatus = 1;
pub type FridaProcessStatus = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInjectSession {
    _unused: [u8; 0],
}
pub type FridaInjectSession = _FridaInjectSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInjectSessionClass {
    _unused: [u8; 0],
}
pub type FridaInjectSessionClass = _FridaInjectSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInjectSpec {
    _unused: [u8; 0],
}
pub type FridaInjectSpec = _FridaInjectSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInjectSpecClass {
    _unused: [u8; 0],
}
pub type FridaInjectSpecClass = _FridaInjectSpecClass;
pub const FridaAgentFeatures_FRIDA_AGENT_FEATURES_CONTROL_CHANNEL: FridaAgentFeatures = 1;
pub type FridaAgentFeatures = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCleanupSession {
    _unused: [u8; 0],
}
pub type FridaCleanupSession = _FridaCleanupSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCleanupSessionClass {
    _unused: [u8; 0],
}
pub type FridaCleanupSessionClass = _FridaCleanupSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaThreadSuspendSession {
    _unused: [u8; 0],
}
pub type FridaThreadSuspendSession = _FridaThreadSuspendSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaThreadSuspendSessionClass {
    _unused: [u8; 0],
}
pub type FridaThreadSuspendSessionClass = _FridaThreadSuspendSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBootstrapResult {
    _unused: [u8; 0],
}
pub type FridaBootstrapResult = _FridaBootstrapResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBootstrapResultClass {
    _unused: [u8; 0],
}
pub type FridaBootstrapResultClass = _FridaBootstrapResultClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteAgent {
    _unused: [u8; 0],
}
pub type FridaRemoteAgent = _FridaRemoteAgent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteAgentClass {
    _unused: [u8; 0],
}
pub type FridaRemoteAgentClass = _FridaRemoteAgentClass;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_ALLOCATION_SUCCESS:
    FridaHelperBootstrapStatus = 0;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_ALLOCATION_ERROR:
    FridaHelperBootstrapStatus = 1;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_SUCCESS:
    FridaHelperBootstrapStatus = 2;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_AUXV_NOT_FOUND:
    FridaHelperBootstrapStatus = 3;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_TOO_EARLY:
    FridaHelperBootstrapStatus = 4;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_LIBC_LOAD_ERROR:
    FridaHelperBootstrapStatus = 5;
pub const FridaHelperBootstrapStatus_FRIDA_HELPER_BOOTSTRAP_STATUS_LIBC_UNSUPPORTED:
    FridaHelperBootstrapStatus = 6;
pub type FridaHelperBootstrapStatus = ::std::os::raw::c_uint;
pub type FridaHelperBootstrapContext = _FridaHelperBootstrapContext;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_UNKNOWN: FridaHelperRtldFlavor = 0;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_NONE: FridaHelperRtldFlavor = 1;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_GLIBC: FridaHelperRtldFlavor = 2;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_UCLIBC: FridaHelperRtldFlavor = 3;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_MUSL: FridaHelperRtldFlavor = 4;
pub const FridaHelperRtldFlavor_FRIDA_HELPER_RTLD_FLAVOR_ANDROID: FridaHelperRtldFlavor = 5;
pub type FridaHelperRtldFlavor = ::std::os::raw::c_uint;
pub type FridaHelperLibcApi = _FridaHelperLibcApi;
pub type FridaHelperLoaderContext = _FridaHelperLoaderContext;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_HELLO: FridaHelperMessageType = 0;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_READY: FridaHelperMessageType = 1;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_ACK: FridaHelperMessageType = 2;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_BYE: FridaHelperMessageType = 3;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_ERROR_DLOPEN: FridaHelperMessageType = 4;
pub const FridaHelperMessageType_FRIDA_HELPER_MESSAGE_TYPE_ERROR_DLSYM: FridaHelperMessageType = 5;
pub type FridaHelperMessageType = ::std::os::raw::c_uint;
pub type FridaHelperHelloMessage = _FridaHelperHelloMessage;
pub type FridaHelperByeMessage = _FridaHelperByeMessage;
pub const FridaHelperElfDynamicAddressState_FRIDA_HELPER_ELF_DYNAMIC_ADDRESS_STATE_PRISTINE:
    FridaHelperElfDynamicAddressState = 0;
pub const FridaHelperElfDynamicAddressState_FRIDA_HELPER_ELF_DYNAMIC_ADDRESS_STATE_ADJUSTED:
    FridaHelperElfDynamicAddressState = 1;
pub type FridaHelperElfDynamicAddressState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSeizeSessionPrivate {
    _unused: [u8; 0],
}
pub type FridaSeizeSessionPrivate = _FridaSeizeSessionPrivate;
pub type FridaGPRegs = _FridaGPRegs;
pub const FridaSeizeSessionInitBehavior_FRIDA_SEIZE_SESSION_INIT_BEHAVIOR_INTERRUPT:
    FridaSeizeSessionInitBehavior = 0;
pub const FridaSeizeSessionInitBehavior_FRIDA_SEIZE_SESSION_INIT_BEHAVIOR_CONTINUE:
    FridaSeizeSessionInitBehavior = 1;
pub type FridaSeizeSessionInitBehavior = ::std::os::raw::c_uint;
pub type FridaSeizeSessionProcessVmIoFunc = ::std::option::Option<
    unsafe extern "C" fn(
        pid: guint,
        local_iov: *mut iovec,
        local_iov_length1: ::std::os::raw::c_ulong,
        remote_iov: *mut iovec,
        remote_iov_length1: ::std::os::raw::c_ulong,
        flags: gulong,
    ) -> gssize,
>;
pub type FridaFPRegs = _FridaFPRegs;
pub const FridaAttachState_FRIDA_ATTACH_STATE_ATTACHED: FridaAttachState = 0;
pub const FridaAttachState_FRIDA_ATTACH_STATE_ALREADY_ATTACHED: FridaAttachState = 1;
pub type FridaAttachState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessCodeSwapScope {
    _unused: [u8; 0],
}
pub type FridaProcessCodeSwapScope = _FridaProcessCodeSwapScope;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessCodeSwapScopeClass {
    _unused: [u8; 0],
}
pub type FridaProcessCodeSwapScopeClass = _FridaProcessCodeSwapScopeClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaThreadSuspendScope {
    _unused: [u8; 0],
}
pub type FridaThreadSuspendScope = _FridaThreadSuspendScope;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaThreadSuspendScopeClass {
    _unused: [u8; 0],
}
pub type FridaThreadSuspendScopeClass = _FridaThreadSuspendScopeClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCallBuilder {
    _unused: [u8; 0],
}
pub type FridaRemoteCallBuilder = _FridaRemoteCallBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCallBuilderClass {
    _unused: [u8; 0],
}
pub type FridaRemoteCallBuilderClass = _FridaRemoteCallBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCall {
    _unused: [u8; 0],
}
pub type FridaRemoteCall = _FridaRemoteCall;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCallClass {
    _unused: [u8; 0],
}
pub type FridaRemoteCallClass = _FridaRemoteCallClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCallResult {
    _unused: [u8; 0],
}
pub type FridaRemoteCallResult = _FridaRemoteCallResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteCallResultClass {
    _unused: [u8; 0],
}
pub type FridaRemoteCallResultClass = _FridaRemoteCallResultClass;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_RESTART: FridaLinuxSyscall = 1;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_IOCTL: FridaLinuxSyscall = 2;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_READ: FridaLinuxSyscall = 4;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_POLL_LIKE: FridaLinuxSyscall = 8;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_WAIT: FridaLinuxSyscall = 16;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_SIGWAIT: FridaLinuxSyscall = 32;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_FUTEX: FridaLinuxSyscall = 64;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_ACCEPT: FridaLinuxSyscall = 128;
pub const FridaLinuxSyscall_FRIDA_LINUX_SYSCALL_RECV: FridaLinuxSyscall = 256;
pub type FridaLinuxSyscall = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcMapsSoEntry {
    _unused: [u8; 0],
}
pub type FridaProcMapsSoEntry = _FridaProcMapsSoEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcMapsSoEntryClass {
    _unused: [u8; 0],
}
pub type FridaProcMapsSoEntryClass = _FridaProcMapsSoEntryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHelper {
    _unused: [u8; 0],
}
pub type FridaLinuxHelper = _FridaLinuxHelper;
pub type FridaLinuxHelperIface = _FridaLinuxHelperIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxRemoteHelper {
    _unused: [u8; 0],
}
pub type FridaLinuxRemoteHelper = _FridaLinuxRemoteHelper;
pub type FridaLinuxRemoteHelperIface = _FridaLinuxRemoteHelperIface;
pub type FridaPathTemplate = _FridaPathTemplate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperLibcApi {
    pub printf: *mut ::std::os::raw::c_void,
    pub sprintf: *mut ::std::os::raw::c_void,
    pub mmap: *mut ::std::os::raw::c_void,
    pub munmap: *mut ::std::os::raw::c_void,
    pub socket: *mut ::std::os::raw::c_void,
    pub socketpair: *mut ::std::os::raw::c_void,
    pub connect: *mut ::std::os::raw::c_void,
    pub recvmsg: *mut ::std::os::raw::c_void,
    pub send: *mut ::std::os::raw::c_void,
    pub fcntl: *mut ::std::os::raw::c_void,
    pub close: *mut ::std::os::raw::c_void,
    pub pthread_create: *mut ::std::os::raw::c_void,
    pub pthread_detach: *mut ::std::os::raw::c_void,
    pub dlopen: *mut ::std::os::raw::c_void,
    pub dlopen_flags: gint,
    pub dlclose: *mut ::std::os::raw::c_void,
    pub dlsym: *mut ::std::os::raw::c_void,
    pub dlerror: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHelperLibcApi"][::std::mem::size_of::<_FridaHelperLibcApi>() - 144usize];
    ["Alignment of _FridaHelperLibcApi"][::std::mem::align_of::<_FridaHelperLibcApi>() - 8usize];
    ["Offset of field: _FridaHelperLibcApi::printf"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, printf) - 0usize];
    ["Offset of field: _FridaHelperLibcApi::sprintf"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, sprintf) - 8usize];
    ["Offset of field: _FridaHelperLibcApi::mmap"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, mmap) - 16usize];
    ["Offset of field: _FridaHelperLibcApi::munmap"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, munmap) - 24usize];
    ["Offset of field: _FridaHelperLibcApi::socket"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, socket) - 32usize];
    ["Offset of field: _FridaHelperLibcApi::socketpair"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, socketpair) - 40usize];
    ["Offset of field: _FridaHelperLibcApi::connect"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, connect) - 48usize];
    ["Offset of field: _FridaHelperLibcApi::recvmsg"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, recvmsg) - 56usize];
    ["Offset of field: _FridaHelperLibcApi::send"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, send) - 64usize];
    ["Offset of field: _FridaHelperLibcApi::fcntl"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, fcntl) - 72usize];
    ["Offset of field: _FridaHelperLibcApi::close"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, close) - 80usize];
    ["Offset of field: _FridaHelperLibcApi::pthread_create"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, pthread_create) - 88usize];
    ["Offset of field: _FridaHelperLibcApi::pthread_detach"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, pthread_detach) - 96usize];
    ["Offset of field: _FridaHelperLibcApi::dlopen"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, dlopen) - 104usize];
    ["Offset of field: _FridaHelperLibcApi::dlopen_flags"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, dlopen_flags) - 112usize];
    ["Offset of field: _FridaHelperLibcApi::dlclose"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, dlclose) - 120usize];
    ["Offset of field: _FridaHelperLibcApi::dlsym"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, dlsym) - 128usize];
    ["Offset of field: _FridaHelperLibcApi::dlerror"]
        [::std::mem::offset_of!(_FridaHelperLibcApi, dlerror) - 136usize];
};
impl Default for _FridaHelperLibcApi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperBootstrapContext {
    pub allocation_base: *mut ::std::os::raw::c_void,
    pub allocation_size: gsize,
    pub page_size: gsize,
    pub fallback_ld: *const gchar,
    pub fallback_libc: *const gchar,
    pub rtld_flavor: FridaHelperRtldFlavor,
    pub rtld_base: *mut ::std::os::raw::c_void,
    pub r_brk: *mut ::std::os::raw::c_void,
    pub enable_ctrlfds: gboolean,
    pub ctrlfds: [gint; 2usize],
    pub libc: *mut FridaHelperLibcApi,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHelperBootstrapContext"]
        [::std::mem::size_of::<_FridaHelperBootstrapContext>() - 88usize];
    ["Alignment of _FridaHelperBootstrapContext"]
        [::std::mem::align_of::<_FridaHelperBootstrapContext>() - 8usize];
    ["Offset of field: _FridaHelperBootstrapContext::allocation_base"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, allocation_base) - 0usize];
    ["Offset of field: _FridaHelperBootstrapContext::allocation_size"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, allocation_size) - 8usize];
    ["Offset of field: _FridaHelperBootstrapContext::page_size"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, page_size) - 16usize];
    ["Offset of field: _FridaHelperBootstrapContext::fallback_ld"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, fallback_ld) - 24usize];
    ["Offset of field: _FridaHelperBootstrapContext::fallback_libc"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, fallback_libc) - 32usize];
    ["Offset of field: _FridaHelperBootstrapContext::rtld_flavor"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, rtld_flavor) - 40usize];
    ["Offset of field: _FridaHelperBootstrapContext::rtld_base"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, rtld_base) - 48usize];
    ["Offset of field: _FridaHelperBootstrapContext::r_brk"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, r_brk) - 56usize];
    ["Offset of field: _FridaHelperBootstrapContext::enable_ctrlfds"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, enable_ctrlfds) - 64usize];
    ["Offset of field: _FridaHelperBootstrapContext::ctrlfds"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, ctrlfds) - 68usize];
    ["Offset of field: _FridaHelperBootstrapContext::libc"]
        [::std::mem::offset_of!(_FridaHelperBootstrapContext, libc) - 80usize];
};
impl Default for _FridaHelperBootstrapContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperLoaderContext {
    pub ctrlfds: [gint; 2usize],
    pub agent_entrypoint: *const gchar,
    pub agent_data: *const gchar,
    pub fallback_address: *const gchar,
    pub libc: *mut FridaHelperLibcApi,
    pub worker: *mut ::std::os::raw::c_void,
    pub agent_handle: *mut ::std::os::raw::c_void,
    pub agent_entrypoint_impl: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHelperLoaderContext"]
        [::std::mem::size_of::<_FridaHelperLoaderContext>() - 64usize];
    ["Alignment of _FridaHelperLoaderContext"]
        [::std::mem::align_of::<_FridaHelperLoaderContext>() - 8usize];
    ["Offset of field: _FridaHelperLoaderContext::ctrlfds"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, ctrlfds) - 0usize];
    ["Offset of field: _FridaHelperLoaderContext::agent_entrypoint"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, agent_entrypoint) - 8usize];
    ["Offset of field: _FridaHelperLoaderContext::agent_data"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, agent_data) - 16usize];
    ["Offset of field: _FridaHelperLoaderContext::fallback_address"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, fallback_address) - 24usize];
    ["Offset of field: _FridaHelperLoaderContext::libc"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, libc) - 32usize];
    ["Offset of field: _FridaHelperLoaderContext::worker"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, worker) - 40usize];
    ["Offset of field: _FridaHelperLoaderContext::agent_handle"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, agent_handle) - 48usize];
    ["Offset of field: _FridaHelperLoaderContext::agent_entrypoint_impl"]
        [::std::mem::offset_of!(_FridaHelperLoaderContext, agent_entrypoint_impl) - 56usize];
};
impl Default for _FridaHelperLoaderContext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHelperHelloMessage {
    pub thread_id: guint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHelperHelloMessage"]
        [::std::mem::size_of::<_FridaHelperHelloMessage>() - 4usize];
    ["Alignment of _FridaHelperHelloMessage"]
        [::std::mem::align_of::<_FridaHelperHelloMessage>() - 4usize];
    ["Offset of field: _FridaHelperHelloMessage::thread_id"]
        [::std::mem::offset_of!(_FridaHelperHelloMessage, thread_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperByeMessage {
    pub unload_policy: FridaUnloadPolicy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHelperByeMessage"][::std::mem::size_of::<_FridaHelperByeMessage>() - 4usize];
    ["Alignment of _FridaHelperByeMessage"]
        [::std::mem::align_of::<_FridaHelperByeMessage>() - 4usize];
    ["Offset of field: _FridaHelperByeMessage::unload_policy"]
        [::std::mem::offset_of!(_FridaHelperByeMessage, unload_policy) - 0usize];
};
impl Default for _FridaHelperByeMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaGPRegs {
    pub r15: guint64,
    pub r14: guint64,
    pub r13: guint64,
    pub r12: guint64,
    pub rbp: guint64,
    pub rbx: guint64,
    pub r11: guint64,
    pub r10: guint64,
    pub r9: guint64,
    pub r8: guint64,
    pub rax: guint64,
    pub rcx: guint64,
    pub rdx: guint64,
    pub rsi: guint64,
    pub rdi: guint64,
    pub orig_rax: gint64,
    pub rip: guint64,
    pub cs: guint64,
    pub eflags: guint64,
    pub rsp: guint64,
    pub ss: guint64,
    pub fs_base: guint64,
    pub gs_base: guint64,
    pub ds: guint64,
    pub es: guint64,
    pub fs: guint64,
    pub gs: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGPRegs"][::std::mem::size_of::<_FridaGPRegs>() - 216usize];
    ["Alignment of _FridaGPRegs"][::std::mem::align_of::<_FridaGPRegs>() - 8usize];
    ["Offset of field: _FridaGPRegs::r15"][::std::mem::offset_of!(_FridaGPRegs, r15) - 0usize];
    ["Offset of field: _FridaGPRegs::r14"][::std::mem::offset_of!(_FridaGPRegs, r14) - 8usize];
    ["Offset of field: _FridaGPRegs::r13"][::std::mem::offset_of!(_FridaGPRegs, r13) - 16usize];
    ["Offset of field: _FridaGPRegs::r12"][::std::mem::offset_of!(_FridaGPRegs, r12) - 24usize];
    ["Offset of field: _FridaGPRegs::rbp"][::std::mem::offset_of!(_FridaGPRegs, rbp) - 32usize];
    ["Offset of field: _FridaGPRegs::rbx"][::std::mem::offset_of!(_FridaGPRegs, rbx) - 40usize];
    ["Offset of field: _FridaGPRegs::r11"][::std::mem::offset_of!(_FridaGPRegs, r11) - 48usize];
    ["Offset of field: _FridaGPRegs::r10"][::std::mem::offset_of!(_FridaGPRegs, r10) - 56usize];
    ["Offset of field: _FridaGPRegs::r9"][::std::mem::offset_of!(_FridaGPRegs, r9) - 64usize];
    ["Offset of field: _FridaGPRegs::r8"][::std::mem::offset_of!(_FridaGPRegs, r8) - 72usize];
    ["Offset of field: _FridaGPRegs::rax"][::std::mem::offset_of!(_FridaGPRegs, rax) - 80usize];
    ["Offset of field: _FridaGPRegs::rcx"][::std::mem::offset_of!(_FridaGPRegs, rcx) - 88usize];
    ["Offset of field: _FridaGPRegs::rdx"][::std::mem::offset_of!(_FridaGPRegs, rdx) - 96usize];
    ["Offset of field: _FridaGPRegs::rsi"][::std::mem::offset_of!(_FridaGPRegs, rsi) - 104usize];
    ["Offset of field: _FridaGPRegs::rdi"][::std::mem::offset_of!(_FridaGPRegs, rdi) - 112usize];
    ["Offset of field: _FridaGPRegs::orig_rax"]
        [::std::mem::offset_of!(_FridaGPRegs, orig_rax) - 120usize];
    ["Offset of field: _FridaGPRegs::rip"][::std::mem::offset_of!(_FridaGPRegs, rip) - 128usize];
    ["Offset of field: _FridaGPRegs::cs"][::std::mem::offset_of!(_FridaGPRegs, cs) - 136usize];
    ["Offset of field: _FridaGPRegs::eflags"]
        [::std::mem::offset_of!(_FridaGPRegs, eflags) - 144usize];
    ["Offset of field: _FridaGPRegs::rsp"][::std::mem::offset_of!(_FridaGPRegs, rsp) - 152usize];
    ["Offset of field: _FridaGPRegs::ss"][::std::mem::offset_of!(_FridaGPRegs, ss) - 160usize];
    ["Offset of field: _FridaGPRegs::fs_base"]
        [::std::mem::offset_of!(_FridaGPRegs, fs_base) - 168usize];
    ["Offset of field: _FridaGPRegs::gs_base"]
        [::std::mem::offset_of!(_FridaGPRegs, gs_base) - 176usize];
    ["Offset of field: _FridaGPRegs::ds"][::std::mem::offset_of!(_FridaGPRegs, ds) - 184usize];
    ["Offset of field: _FridaGPRegs::es"][::std::mem::offset_of!(_FridaGPRegs, es) - 192usize];
    ["Offset of field: _FridaGPRegs::fs"][::std::mem::offset_of!(_FridaGPRegs, fs) - 200usize];
    ["Offset of field: _FridaGPRegs::gs"][::std::mem::offset_of!(_FridaGPRegs, gs) - 208usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSeizeSession {
    pub parent_instance: GObject,
    pub priv_: *mut FridaSeizeSessionPrivate,
    pub saved_regs: FridaGPRegs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaSeizeSession"][::std::mem::size_of::<_FridaSeizeSession>() - 248usize];
    ["Alignment of _FridaSeizeSession"][::std::mem::align_of::<_FridaSeizeSession>() - 8usize];
    ["Offset of field: _FridaSeizeSession::parent_instance"]
        [::std::mem::offset_of!(_FridaSeizeSession, parent_instance) - 0usize];
    ["Offset of field: _FridaSeizeSession::priv_"]
        [::std::mem::offset_of!(_FridaSeizeSession, priv_) - 24usize];
    ["Offset of field: _FridaSeizeSession::saved_regs"]
        [::std::mem::offset_of!(_FridaSeizeSession, saved_regs) - 32usize];
};
impl Default for _FridaSeizeSession {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSeizeSessionClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaSeizeSessionClass"]
        [::std::mem::size_of::<_FridaSeizeSessionClass>() - 136usize];
    ["Alignment of _FridaSeizeSessionClass"]
        [::std::mem::align_of::<_FridaSeizeSessionClass>() - 8usize];
    ["Offset of field: _FridaSeizeSessionClass::parent_class"]
        [::std::mem::offset_of!(_FridaSeizeSessionClass, parent_class) - 0usize];
};
impl Default for _FridaSeizeSessionClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFPRegs {
    pub cwd: guint16,
    pub swd: guint16,
    pub ftw: guint16,
    pub fop: guint16,
    pub rip: guint64,
    pub rdp: guint64,
    pub mxcsr: guint,
    pub mxcr_mask: guint,
    pub st_space: [guint; 32usize],
    pub xmm_space: [guint; 64usize],
    pub padding: [guint; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFPRegs"][::std::mem::size_of::<_FridaFPRegs>() - 512usize];
    ["Alignment of _FridaFPRegs"][::std::mem::align_of::<_FridaFPRegs>() - 8usize];
    ["Offset of field: _FridaFPRegs::cwd"][::std::mem::offset_of!(_FridaFPRegs, cwd) - 0usize];
    ["Offset of field: _FridaFPRegs::swd"][::std::mem::offset_of!(_FridaFPRegs, swd) - 2usize];
    ["Offset of field: _FridaFPRegs::ftw"][::std::mem::offset_of!(_FridaFPRegs, ftw) - 4usize];
    ["Offset of field: _FridaFPRegs::fop"][::std::mem::offset_of!(_FridaFPRegs, fop) - 6usize];
    ["Offset of field: _FridaFPRegs::rip"][::std::mem::offset_of!(_FridaFPRegs, rip) - 8usize];
    ["Offset of field: _FridaFPRegs::rdp"][::std::mem::offset_of!(_FridaFPRegs, rdp) - 16usize];
    ["Offset of field: _FridaFPRegs::mxcsr"][::std::mem::offset_of!(_FridaFPRegs, mxcsr) - 24usize];
    ["Offset of field: _FridaFPRegs::mxcr_mask"]
        [::std::mem::offset_of!(_FridaFPRegs, mxcr_mask) - 28usize];
    ["Offset of field: _FridaFPRegs::st_space"]
        [::std::mem::offset_of!(_FridaFPRegs, st_space) - 32usize];
    ["Offset of field: _FridaFPRegs::xmm_space"]
        [::std::mem::offset_of!(_FridaFPRegs, xmm_space) - 160usize];
    ["Offset of field: _FridaFPRegs::padding"]
        [::std::mem::offset_of!(_FridaFPRegs, padding) - 416usize];
};
impl Default for _FridaFPRegs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaLinuxHelperIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            path: *const gchar,
            options: *mut FridaHostSpawnOptions,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub prepare_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub await_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub await_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub cancel_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub await_syscall: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            mask: FridaLinuxSyscall,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub await_syscall_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume_syscall: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_syscall_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub input: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub input_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub kill_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub inject_library: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            library_so: *mut GUnixInputStream,
            entrypoint: *const gchar,
            data: *const gchar,
            features: FridaAgentFeatures,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub request_control_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub request_control_channel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub demonitor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub demonitor_and_clone_injectee_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            id: guint,
            clone_id: guint,
            features: FridaAgentFeatures,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_and_clone_injectee_state_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub recreate_injectee_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            pid: guint,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub recreate_injectee_thread_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLinuxHelperIface"][::std::mem::size_of::<_FridaLinuxHelperIface>() - 256usize];
    ["Alignment of _FridaLinuxHelperIface"]
        [::std::mem::align_of::<_FridaLinuxHelperIface>() - 8usize];
    ["Offset of field: _FridaLinuxHelperIface::parent_iface"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, parent_iface) - 0usize];
    ["Offset of field: _FridaLinuxHelperIface::close"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, close) - 16usize];
    ["Offset of field: _FridaLinuxHelperIface::close_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, close_finish) - 24usize];
    ["Offset of field: _FridaLinuxHelperIface::spawn"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, spawn) - 32usize];
    ["Offset of field: _FridaLinuxHelperIface::spawn_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, spawn_finish) - 40usize];
    ["Offset of field: _FridaLinuxHelperIface::prepare_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, prepare_exec_transition) - 48usize];
    ["Offset of field: _FridaLinuxHelperIface::prepare_exec_transition_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, prepare_exec_transition_finish) - 56usize];
    ["Offset of field: _FridaLinuxHelperIface::await_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, await_exec_transition) - 64usize];
    ["Offset of field: _FridaLinuxHelperIface::await_exec_transition_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, await_exec_transition_finish) - 72usize];
    ["Offset of field: _FridaLinuxHelperIface::cancel_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, cancel_exec_transition) - 80usize];
    ["Offset of field: _FridaLinuxHelperIface::cancel_exec_transition_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, cancel_exec_transition_finish) - 88usize];
    ["Offset of field: _FridaLinuxHelperIface::await_syscall"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, await_syscall) - 96usize];
    ["Offset of field: _FridaLinuxHelperIface::await_syscall_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, await_syscall_finish) - 104usize];
    ["Offset of field: _FridaLinuxHelperIface::resume_syscall"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, resume_syscall) - 112usize];
    ["Offset of field: _FridaLinuxHelperIface::resume_syscall_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, resume_syscall_finish) - 120usize];
    ["Offset of field: _FridaLinuxHelperIface::input"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, input) - 128usize];
    ["Offset of field: _FridaLinuxHelperIface::input_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, input_finish) - 136usize];
    ["Offset of field: _FridaLinuxHelperIface::resume"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, resume) - 144usize];
    ["Offset of field: _FridaLinuxHelperIface::resume_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, resume_finish) - 152usize];
    ["Offset of field: _FridaLinuxHelperIface::kill"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, kill) - 160usize];
    ["Offset of field: _FridaLinuxHelperIface::kill_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, kill_finish) - 168usize];
    ["Offset of field: _FridaLinuxHelperIface::inject_library"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, inject_library) - 176usize];
    ["Offset of field: _FridaLinuxHelperIface::inject_library_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, inject_library_finish) - 184usize];
    ["Offset of field: _FridaLinuxHelperIface::request_control_channel"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, request_control_channel) - 192usize];
    ["Offset of field: _FridaLinuxHelperIface::request_control_channel_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, request_control_channel_finish) - 200usize];
    ["Offset of field: _FridaLinuxHelperIface::demonitor"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, demonitor) - 208usize];
    ["Offset of field: _FridaLinuxHelperIface::demonitor_finish"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, demonitor_finish) - 216usize];
    ["Offset of field: _FridaLinuxHelperIface::demonitor_and_clone_injectee_state"][::std::mem::offset_of!(
        _FridaLinuxHelperIface,
        demonitor_and_clone_injectee_state
    ) - 224usize];
    ["Offset of field: _FridaLinuxHelperIface::demonitor_and_clone_injectee_state_finish"][::std::mem::offset_of!(
        _FridaLinuxHelperIface,
        demonitor_and_clone_injectee_state_finish
    )
        - 232usize];
    ["Offset of field: _FridaLinuxHelperIface::recreate_injectee_thread"]
        [::std::mem::offset_of!(_FridaLinuxHelperIface, recreate_injectee_thread) - 240usize];
    ["Offset of field: _FridaLinuxHelperIface::recreate_injectee_thread_finish"][::std::mem::offset_of!(
        _FridaLinuxHelperIface,
        recreate_injectee_thread_finish
    ) - 248usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaLinuxRemoteHelperIface {
    pub parent_iface: GTypeInterface,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub stop_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            path: *const gchar,
            options: *mut FridaHostSpawnOptions,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub prepare_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub await_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub await_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub cancel_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub await_syscall: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            mask: FridaLinuxSyscall,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub await_syscall_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume_syscall: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_syscall_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub input: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub input_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub kill_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub inject_library: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            library_so: *mut GUnixInputStream,
            entrypoint: *const gchar,
            data: *const gchar,
            features: FridaAgentFeatures,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub request_control_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub request_control_channel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GSocket,
    >,
    pub demonitor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub demonitor_and_clone_injectee_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            id: guint,
            clone_id: guint,
            features: FridaAgentFeatures,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_and_clone_injectee_state_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub recreate_injectee_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            pid: guint,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub recreate_injectee_thread_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLinuxRemoteHelper,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLinuxRemoteHelperIface"]
        [::std::mem::size_of::<_FridaLinuxRemoteHelperIface>() - 256usize];
    ["Alignment of _FridaLinuxRemoteHelperIface"]
        [::std::mem::align_of::<_FridaLinuxRemoteHelperIface>() - 8usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::parent_iface"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, parent_iface) - 0usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::stop"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, stop) - 16usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::stop_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, stop_finish) - 24usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::spawn"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, spawn) - 32usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::spawn_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, spawn_finish) - 40usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::prepare_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, prepare_exec_transition) - 48usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::prepare_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        prepare_exec_transition_finish
    ) - 56usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::await_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, await_exec_transition) - 64usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::await_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        await_exec_transition_finish
    ) - 72usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::cancel_exec_transition"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, cancel_exec_transition) - 80usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::cancel_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        cancel_exec_transition_finish
    ) - 88usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::await_syscall"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, await_syscall) - 96usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::await_syscall_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, await_syscall_finish) - 104usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::resume_syscall"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, resume_syscall) - 112usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::resume_syscall_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, resume_syscall_finish) - 120usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::input"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, input) - 128usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::input_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, input_finish) - 136usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::resume"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, resume) - 144usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::resume_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, resume_finish) - 152usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::kill"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, kill) - 160usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::kill_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, kill_finish) - 168usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::inject_library"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, inject_library) - 176usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::inject_library_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, inject_library_finish) - 184usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::request_control_channel"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, request_control_channel) - 192usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::request_control_channel_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        request_control_channel_finish
    ) - 200usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::demonitor"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, demonitor) - 208usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::demonitor_finish"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, demonitor_finish) - 216usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::demonitor_and_clone_injectee_state"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        demonitor_and_clone_injectee_state
    )
        - 224usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::demonitor_and_clone_injectee_state_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        demonitor_and_clone_injectee_state_finish
    )
        - 232usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::recreate_injectee_thread"]
        [::std::mem::offset_of!(_FridaLinuxRemoteHelperIface, recreate_injectee_thread) - 240usize];
    ["Offset of field: _FridaLinuxRemoteHelperIface::recreate_injectee_thread_finish"][::std::mem::offset_of!(
        _FridaLinuxRemoteHelperIface,
        recreate_injectee_thread_finish
    )
        - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPathTemplate {
    pub _str: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPathTemplate"][::std::mem::size_of::<_FridaPathTemplate>() - 8usize];
    ["Alignment of _FridaPathTemplate"][::std::mem::align_of::<_FridaPathTemplate>() - 8usize];
    ["Offset of field: _FridaPathTemplate::_str"]
        [::std::mem::offset_of!(_FridaPathTemplate, _str) - 0usize];
};
impl Default for _FridaPathTemplate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn frida_linux_helper_backend_get_type() -> GType;
}
pub type FridaLinuxHelperBackend_autoptr = *mut FridaLinuxHelperBackend;
pub type FridaLinuxHelperBackend_listautoptr = *mut GList;
pub type FridaLinuxHelperBackend_slistautoptr = *mut GSList;
pub type FridaLinuxHelperBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_helper_backend_new() -> *mut FridaLinuxHelperBackend;
}
unsafe extern "C" {
    pub fn frida_linux_helper_backend_construct(object_type: GType)
    -> *mut FridaLinuxHelperBackend;
}
unsafe extern "C" {
    pub fn frida_linux_helper_backend_get_is_idle(self_: *mut FridaLinuxHelperBackend) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_arch_name_from_pid(pid: guint, error: *mut *mut GError) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_cpu_type_from_file(path: *const gchar, error: *mut *mut GError) -> GumCpuType;
}
unsafe extern "C" {
    pub fn frida_cpu_type_from_pid(pid: guint, error: *mut *mut GError) -> GumCpuType;
}
unsafe extern "C" {
    pub fn frida_spawned_process_get_type() -> GType;
}
pub type FridaSpawnedProcess_autoptr = *mut FridaSpawnedProcess;
pub type FridaSpawnedProcess_listautoptr = *mut GList;
pub type FridaSpawnedProcess_slistautoptr = *mut GSList;
pub type FridaSpawnedProcess_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_stdio_pipes_get_type() -> GType;
}
pub type FridaStdioPipes_autoptr = *mut FridaStdioPipes;
pub type FridaStdioPipes_listautoptr = *mut GList;
pub type FridaStdioPipes_slistautoptr = *mut GSList;
pub type FridaStdioPipes_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_seize_session_get_type() -> GType;
}
pub type FridaSeizeSession_autoptr = *mut FridaSeizeSession;
pub type FridaSeizeSession_listautoptr = *mut GList;
pub type FridaSeizeSession_slistautoptr = *mut GSList;
pub type FridaSeizeSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_exec_transition_session_get_type() -> GType;
}
pub type FridaExecTransitionSession_autoptr = *mut FridaExecTransitionSession;
pub type FridaExecTransitionSession_listautoptr = *mut GList;
pub type FridaExecTransitionSession_slistautoptr = *mut GSList;
pub type FridaExecTransitionSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_paused_syscall_session_get_type() -> GType;
}
pub type FridaPausedSyscallSession_autoptr = *mut FridaPausedSyscallSession;
pub type FridaPausedSyscallSession_listautoptr = *mut GList;
pub type FridaPausedSyscallSession_slistautoptr = *mut GSList;
pub type FridaPausedSyscallSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_process_status_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_inject_session_get_type() -> GType;
}
pub type FridaInjectSession_autoptr = *mut FridaInjectSession;
pub type FridaInjectSession_listautoptr = *mut GList;
pub type FridaInjectSession_slistautoptr = *mut GSList;
pub type FridaInjectSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_inject_spec_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_inject_spec_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_inject_spec(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_inject_spec(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_inject_spec(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_inject_spec(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_type() -> GType;
}
pub type FridaInjectSpec_autoptr = *mut FridaInjectSpec;
pub type FridaInjectSpec_listautoptr = *mut GList;
pub type FridaInjectSpec_slistautoptr = *mut GSList;
pub type FridaInjectSpec_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_features_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_inject_spec_new(
        library_so: *mut GFileDescriptorBased,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        id: guint,
    ) -> *mut FridaInjectSpec;
}
unsafe extern "C" {
    pub fn frida_inject_spec_construct(
        object_type: GType,
        library_so: *mut GFileDescriptorBased,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        id: guint,
    ) -> *mut FridaInjectSpec;
}
unsafe extern "C" {
    pub fn frida_inject_spec_clone(
        self_: *mut FridaInjectSpec,
        clone_id: guint,
        features: FridaAgentFeatures,
    ) -> *mut FridaInjectSpec;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_library_so(
        self_: *mut FridaInjectSpec,
    ) -> *mut GFileDescriptorBased;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_entrypoint(self_: *mut FridaInjectSpec) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_data(self_: *mut FridaInjectSpec) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_features(self_: *mut FridaInjectSpec) -> FridaAgentFeatures;
}
unsafe extern "C" {
    pub fn frida_inject_spec_get_id(self_: *mut FridaInjectSpec) -> guint;
}
unsafe extern "C" {
    pub fn frida_cleanup_session_get_type() -> GType;
}
pub type FridaCleanupSession_autoptr = *mut FridaCleanupSession;
pub type FridaCleanupSession_listautoptr = *mut GList;
pub type FridaCleanupSession_slistautoptr = *mut GSList;
pub type FridaCleanupSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_thread_suspend_session_get_type() -> GType;
}
pub type FridaThreadSuspendSession_autoptr = *mut FridaThreadSuspendSession;
pub type FridaThreadSuspendSession_listautoptr = *mut GList;
pub type FridaThreadSuspendSession_slistautoptr = *mut GSList;
pub type FridaThreadSuspendSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_bootstrap_result_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_bootstrap_result_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_bootstrap_result(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_bootstrap_result(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_bootstrap_result(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_bootstrap_result(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_bootstrap_result_get_type() -> GType;
}
pub type FridaBootstrapResult_autoptr = *mut FridaBootstrapResult;
pub type FridaBootstrapResult_listautoptr = *mut GList;
pub type FridaBootstrapResult_slistautoptr = *mut GSList;
pub type FridaBootstrapResult_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_remote_agent_get_type() -> GType;
}
pub type FridaRemoteAgent_autoptr = *mut FridaRemoteAgent;
pub type FridaRemoteAgent_listautoptr = *mut GList;
pub type FridaRemoteAgent_slistautoptr = *mut GSList;
pub type FridaRemoteAgent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_helper_bootstrap_status_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_bootstrap_context_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_rtld_flavor_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_libc_api_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_libc_api_dup(self_: *const FridaHelperLibcApi) -> *mut FridaHelperLibcApi;
}
unsafe extern "C" {
    pub fn frida_helper_libc_api_free(self_: *mut FridaHelperLibcApi);
}
unsafe extern "C" {
    pub fn frida_helper_bootstrap_context_dup(
        self_: *const FridaHelperBootstrapContext,
    ) -> *mut FridaHelperBootstrapContext;
}
unsafe extern "C" {
    pub fn frida_helper_bootstrap_context_free(self_: *mut FridaHelperBootstrapContext);
}
unsafe extern "C" {
    pub fn frida_helper_loader_context_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_loader_context_dup(
        self_: *const FridaHelperLoaderContext,
    ) -> *mut FridaHelperLoaderContext;
}
unsafe extern "C" {
    pub fn frida_helper_loader_context_free(self_: *mut FridaHelperLoaderContext);
}
unsafe extern "C" {
    pub fn frida_helper_message_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_hello_message_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_hello_message_dup(
        self_: *const FridaHelperHelloMessage,
    ) -> *mut FridaHelperHelloMessage;
}
unsafe extern "C" {
    pub fn frida_helper_hello_message_free(self_: *mut FridaHelperHelloMessage);
}
unsafe extern "C" {
    pub fn frida_helper_bye_message_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_helper_bye_message_dup(
        self_: *const FridaHelperByeMessage,
    ) -> *mut FridaHelperByeMessage;
}
unsafe extern "C" {
    pub fn frida_helper_bye_message_free(self_: *mut FridaHelperByeMessage);
}
unsafe extern "C" {
    pub fn frida_helper_elf_dynamic_address_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gp_regs_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gp_regs_dup(self_: *const FridaGPRegs) -> *mut FridaGPRegs;
}
unsafe extern "C" {
    pub fn frida_gp_regs_free(self_: *mut FridaGPRegs);
}
unsafe extern "C" {
    pub fn frida_seize_session_init_behavior_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_seize_session_close(self_: *mut FridaSeizeSession, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_seize_session_suspend(
        self_: *mut FridaSeizeSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_suspend_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_resume(self_: *mut FridaSeizeSession, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_seize_session_step(self_: *mut FridaSeizeSession, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_seize_session_resume_until_execution_reaches(
        self_: *mut FridaSeizeSession,
        target: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_resume_until_execution_reaches_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_signal(
        self_: *mut FridaSeizeSession,
        sig: ::std::os::raw::c_int,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_signal_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_signals(
        self_: *mut FridaSeizeSession,
        sigs: *mut ::std::os::raw::c_int,
        sigs_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_signals_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_next_signal(
        self_: *mut FridaSeizeSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_wait_for_next_signal_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_seize_session_get_regs(
        self_: *mut FridaSeizeSession,
        regs: *mut FridaGPRegs,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fp_regs_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fp_regs_dup(self_: *const FridaFPRegs) -> *mut FridaFPRegs;
}
unsafe extern "C" {
    pub fn frida_fp_regs_free(self_: *mut FridaFPRegs);
}
unsafe extern "C" {
    pub fn frida_seize_session_get_fpregs(
        self_: *mut FridaSeizeSession,
        regs: *mut FridaFPRegs,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_set_regs(
        self_: *mut FridaSeizeSession,
        regs: *mut FridaGPRegs,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_set_fpregs(
        self_: *mut FridaSeizeSession,
        regs: *mut FridaFPRegs,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_allocate_memory(
        self_: *mut FridaSeizeSession,
        mmap_impl: guint64,
        size: gsize,
        prot: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_allocate_memory_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_seize_session_deallocate_memory(
        self_: *mut FridaSeizeSession,
        munmap_impl: guint64,
        address: guint64,
        size: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_deallocate_memory_finish(
        self_: *mut FridaSeizeSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_read_memory(
        self_: *mut FridaSeizeSession,
        address: guint64,
        size: gsize,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn frida_seize_session_write_memory(
        self_: *mut FridaSeizeSession,
        address: guint64,
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_write_memory_string(
        self_: *mut FridaSeizeSession,
        address: guint64,
        str_: *const gchar,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_seize_session_new() -> *mut FridaSeizeSession;
}
unsafe extern "C" {
    pub fn frida_seize_session_construct(object_type: GType) -> *mut FridaSeizeSession;
}
unsafe extern "C" {
    pub fn frida_seize_session_get_pid(self_: *mut FridaSeizeSession) -> guint;
}
unsafe extern "C" {
    pub fn frida_seize_session_get_tid(self_: *mut FridaSeizeSession) -> guint;
}
unsafe extern "C" {
    pub fn frida_seize_session_get_on_init(
        self_: *mut FridaSeizeSession,
    ) -> FridaSeizeSessionInitBehavior;
}
unsafe extern "C" {
    pub fn frida_seize_session_get_saved_registers(
        self_: *mut FridaSeizeSession,
        result: *mut FridaGPRegs,
    );
}
unsafe extern "C" {
    pub fn frida_attach_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_process_code_swap_scope_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_process_code_swap_scope_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_process_code_swap_scope(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_process_code_swap_scope(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_process_code_swap_scope(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_process_code_swap_scope(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_process_code_swap_scope_get_type() -> GType;
}
pub type FridaProcessCodeSwapScope_autoptr = *mut FridaProcessCodeSwapScope;
pub type FridaProcessCodeSwapScope_listautoptr = *mut GList;
pub type FridaProcessCodeSwapScope_slistautoptr = *mut GSList;
pub type FridaProcessCodeSwapScope_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_thread_suspend_scope_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_thread_suspend_scope_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_thread_suspend_scope(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_thread_suspend_scope(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_thread_suspend_scope(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_thread_suspend_scope(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_thread_suspend_scope_get_type() -> GType;
}
pub type FridaThreadSuspendScope_autoptr = *mut FridaThreadSuspendScope;
pub type FridaThreadSuspendScope_listautoptr = *mut GList;
pub type FridaThreadSuspendScope_slistautoptr = *mut GSList;
pub type FridaThreadSuspendScope_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_remote_call_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_remote_call_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_remote_call_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_remote_call_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_remote_call_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_builder_get_type() -> GType;
}
pub type FridaRemoteCallBuilder_autoptr = *mut FridaRemoteCallBuilder;
pub type FridaRemoteCallBuilder_listautoptr = *mut GList;
pub type FridaRemoteCallBuilder_slistautoptr = *mut GSList;
pub type FridaRemoteCallBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_remote_call_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_remote_call(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_remote_call(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_remote_call(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_remote_call(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_get_type() -> GType;
}
pub type FridaRemoteCall_autoptr = *mut FridaRemoteCall;
pub type FridaRemoteCall_listautoptr = *mut GList;
pub type FridaRemoteCall_slistautoptr = *mut GSList;
pub type FridaRemoteCall_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_remote_call_result_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_result_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_remote_call_result(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_remote_call_result(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_remote_call_result(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_remote_call_result(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_remote_call_result_get_type() -> GType;
}
pub type FridaRemoteCallResult_autoptr = *mut FridaRemoteCallResult;
pub type FridaRemoteCallResult_listautoptr = *mut GList;
pub type FridaRemoteCallResult_slistautoptr = *mut GSList;
pub type FridaRemoteCallResult_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gp_regs_to_string(self_: *mut FridaGPRegs) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gp_regs_get_program_counter(self_: *mut FridaGPRegs) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gp_regs_set_program_counter(self_: *mut FridaGPRegs, value: guint64);
}
unsafe extern "C" {
    pub fn frida_gp_regs_get_stack_pointer(self_: *mut FridaGPRegs) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gp_regs_set_stack_pointer(self_: *mut FridaGPRegs, value: guint64);
}
unsafe extern "C" {
    pub fn frida_gp_regs_get_orig_syscall(self_: *mut FridaGPRegs) -> gint;
}
unsafe extern "C" {
    pub fn frida_gp_regs_set_orig_syscall(self_: *mut FridaGPRegs, value: gint);
}
unsafe extern "C" {
    pub fn frida_linux_syscall_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_proc_maps_so_entry_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_proc_maps_so_entry_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_proc_maps_so_entry(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_proc_maps_so_entry(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_proc_maps_so_entry(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_proc_maps_so_entry(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_proc_maps_so_entry_get_type() -> GType;
}
pub type FridaProcMapsSoEntry_autoptr = *mut FridaProcMapsSoEntry;
pub type FridaProcMapsSoEntry_listautoptr = *mut GList;
pub type FridaProcMapsSoEntry_slistautoptr = *mut GSList;
pub type FridaProcMapsSoEntry_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_helper_get_type() -> GType;
}
pub type FridaLinuxHelper_autoptr = *mut FridaLinuxHelper;
pub type FridaLinuxHelper_listautoptr = *mut GList;
pub type FridaLinuxHelper_slistautoptr = *mut GSList;
pub type FridaLinuxHelper_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_helper_close(
        self_: *mut FridaLinuxHelper,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_close_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_spawn(
        self_: *mut FridaLinuxHelper,
        path: *const gchar,
        options: *mut FridaHostSpawnOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_spawn_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_linux_helper_prepare_exec_transition(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_prepare_exec_transition_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_await_exec_transition(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_await_exec_transition_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_cancel_exec_transition(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_cancel_exec_transition_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_await_syscall(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        mask: FridaLinuxSyscall,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_await_syscall_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_resume_syscall(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_resume_syscall_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_input(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_input_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_resume(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_resume_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_kill(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_kill_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_inject_library(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        library_so: *mut GUnixInputStream,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_inject_library_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_request_control_channel(
        self_: *mut FridaLinuxHelper,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_request_control_channel_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_linux_helper_demonitor(
        self_: *mut FridaLinuxHelper,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_demonitor_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_demonitor_and_clone_injectee_state(
        self_: *mut FridaLinuxHelper,
        id: guint,
        clone_id: guint,
        features: FridaAgentFeatures,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_demonitor_and_clone_injectee_state_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_recreate_injectee_thread(
        self_: *mut FridaLinuxHelper,
        pid: guint,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_helper_recreate_injectee_thread_finish(
        self_: *mut FridaLinuxHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_get_type() -> GType;
}
pub type FridaLinuxRemoteHelper_autoptr = *mut FridaLinuxRemoteHelper;
pub type FridaLinuxRemoteHelper_listautoptr = *mut GList;
pub type FridaLinuxRemoteHelper_slistautoptr = *mut GSList;
pub type FridaLinuxRemoteHelper_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_remote_helper_stop(
        self_: *mut FridaLinuxRemoteHelper,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_stop_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_spawn(
        self_: *mut FridaLinuxRemoteHelper,
        path: *const gchar,
        options: *mut FridaHostSpawnOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_spawn_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_prepare_exec_transition(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_prepare_exec_transition_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_await_exec_transition(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_await_exec_transition_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_cancel_exec_transition(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_cancel_exec_transition_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_await_syscall(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        mask: FridaLinuxSyscall,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_await_syscall_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_resume_syscall(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_resume_syscall_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_input(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_input_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_resume(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_resume_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_kill(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_kill_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_inject_library(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        library_so: *mut GUnixInputStream,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_inject_library_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_request_control_channel(
        self_: *mut FridaLinuxRemoteHelper,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_request_control_channel_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocket;
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_demonitor(
        self_: *mut FridaLinuxRemoteHelper,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_demonitor_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_demonitor_and_clone_injectee_state(
        self_: *mut FridaLinuxRemoteHelper,
        id: guint,
        clone_id: guint,
        features: FridaAgentFeatures,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_demonitor_and_clone_injectee_state_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_recreate_injectee_thread(
        self_: *mut FridaLinuxRemoteHelper,
        pid: guint,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linux_remote_helper_recreate_injectee_thread_finish(
        self_: *mut FridaLinuxRemoteHelper,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_path_template_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_path_template_dup(self_: *const FridaPathTemplate) -> *mut FridaPathTemplate;
}
unsafe extern "C" {
    pub fn frida_path_template_free(self_: *mut FridaPathTemplate);
}
unsafe extern "C" {
    pub fn frida_path_template_copy(self_: *const FridaPathTemplate, dest: *mut FridaPathTemplate);
}
unsafe extern "C" {
    pub fn frida_path_template_destroy(self_: *mut FridaPathTemplate);
}
unsafe extern "C" {
    pub fn frida_path_template_init(self_: *mut FridaPathTemplate, str_: *const gchar);
}
unsafe extern "C" {
    pub fn frida_path_template_expand(
        self_: *mut FridaPathTemplate,
        arch: *const gchar,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_path_template_get_str(self_: *mut FridaPathTemplate) -> *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evp_pkey_st {
    _unused: [u8; 0],
}
pub type EVP_PKEY = evp_pkey_st;
pub const FridaRuntime_FRIDA_RUNTIME_GLIB: FridaRuntime = 0;
pub const FridaRuntime_FRIDA_RUNTIME_OTHER: FridaRuntime = 1;
pub type FridaRuntime = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDeviceManager {
    _unused: [u8; 0],
}
pub type FridaDeviceManager = _FridaDeviceManager;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDeviceManagerClass {
    _unused: [u8; 0],
}
pub type FridaDeviceManagerClass = _FridaDeviceManagerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDevice {
    _unused: [u8; 0],
}
pub type FridaDevice = _FridaDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDeviceClass {
    _unused: [u8; 0],
}
pub type FridaDeviceClass = _FridaDeviceClass;
pub const FridaDeviceType_FRIDA_DEVICE_TYPE_LOCAL: FridaDeviceType = 0;
pub const FridaDeviceType_FRIDA_DEVICE_TYPE_REMOTE: FridaDeviceType = 1;
pub const FridaDeviceType_FRIDA_DEVICE_TYPE_USB: FridaDeviceType = 2;
pub type FridaDeviceType = ::std::os::raw::c_uint;
pub type FridaDeviceManagerPredicate = ::std::option::Option<
    unsafe extern "C" fn(device: *mut FridaDevice, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDeviceList {
    _unused: [u8; 0],
}
pub type FridaDeviceList = _FridaDeviceList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDeviceListClass {
    _unused: [u8; 0],
}
pub type FridaDeviceListClass = _FridaDeviceListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteDeviceOptions {
    _unused: [u8; 0],
}
pub type FridaRemoteDeviceOptions = _FridaRemoteDeviceOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaRemoteDeviceOptionsClass {
    _unused: [u8; 0],
}
pub type FridaRemoteDeviceOptionsClass = _FridaRemoteDeviceOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplication {
    _unused: [u8; 0],
}
pub type FridaApplication = _FridaApplication;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationClass {
    _unused: [u8; 0],
}
pub type FridaApplicationClass = _FridaApplicationClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationList {
    _unused: [u8; 0],
}
pub type FridaApplicationList = _FridaApplicationList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationListClass {
    _unused: [u8; 0],
}
pub type FridaApplicationListClass = _FridaApplicationListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessMatchOptions {
    _unused: [u8; 0],
}
pub type FridaProcessMatchOptions = _FridaProcessMatchOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessMatchOptionsClass {
    _unused: [u8; 0],
}
pub type FridaProcessMatchOptionsClass = _FridaProcessMatchOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcess {
    _unused: [u8; 0],
}
pub type FridaProcess = _FridaProcess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessClass {
    _unused: [u8; 0],
}
pub type FridaProcessClass = _FridaProcessClass;
pub type FridaDeviceProcessPredicate = ::std::option::Option<
    unsafe extern "C" fn(process: *mut FridaProcess, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessList {
    _unused: [u8; 0],
}
pub type FridaProcessList = _FridaProcessList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessListClass {
    _unused: [u8; 0],
}
pub type FridaProcessListClass = _FridaProcessListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnList {
    _unused: [u8; 0],
}
pub type FridaSpawnList = _FridaSpawnList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnListClass {
    _unused: [u8; 0],
}
pub type FridaSpawnListClass = _FridaSpawnListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChildList {
    _unused: [u8; 0],
}
pub type FridaChildList = _FridaChildList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChildListClass {
    _unused: [u8; 0],
}
pub type FridaChildListClass = _FridaChildListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnOptions {
    _unused: [u8; 0],
}
pub type FridaSpawnOptions = _FridaSpawnOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnOptionsClass {
    _unused: [u8; 0],
}
pub type FridaSpawnOptionsClass = _FridaSpawnOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSession {
    _unused: [u8; 0],
}
pub type FridaSession = _FridaSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSessionClass {
    _unused: [u8; 0],
}
pub type FridaSessionClass = _FridaSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaService {
    _unused: [u8; 0],
}
pub type FridaService = _FridaService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaServiceClass {
    _unused: [u8; 0],
}
pub type FridaServiceClass = _FridaServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBus {
    _unused: [u8; 0],
}
pub type FridaBus = _FridaBus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBusClass {
    _unused: [u8; 0],
}
pub type FridaBusClass = _FridaBusClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawn {
    _unused: [u8; 0],
}
pub type FridaSpawn = _FridaSpawn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSpawnClass {
    _unused: [u8; 0],
}
pub type FridaSpawnClass = _FridaSpawnClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChild {
    _unused: [u8; 0],
}
pub type FridaChild = _FridaChild;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaChildClass {
    _unused: [u8; 0],
}
pub type FridaChildClass = _FridaChildClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCrash {
    _unused: [u8; 0],
}
pub type FridaCrash = _FridaCrash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCrashClass {
    _unused: [u8; 0],
}
pub type FridaCrashClass = _FridaCrashClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaScript {
    _unused: [u8; 0],
}
pub type FridaScript = _FridaScript;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaScriptClass {
    _unused: [u8; 0],
}
pub type FridaScriptClass = _FridaScriptClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalMembership {
    _unused: [u8; 0],
}
pub type FridaPortalMembership = _FridaPortalMembership;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalMembershipClass {
    _unused: [u8; 0],
}
pub type FridaPortalMembershipClass = _FridaPortalMembershipClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInjector {
    _unused: [u8; 0],
}
pub type FridaInjector = _FridaInjector;
pub type FridaInjectorIface = _FridaInjectorIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageManager {
    _unused: [u8; 0],
}
pub type FridaPackageManager = _FridaPackageManager;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageManagerClass {
    _unused: [u8; 0],
}
pub type FridaPackageManagerClass = _FridaPackageManagerClass;
pub type FridaPackageSearchOptions = _FridaPackageSearchOptions;
pub type FridaPackageSearchOptionsClass = _FridaPackageSearchOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageSearchResult {
    _unused: [u8; 0],
}
pub type FridaPackageSearchResult = _FridaPackageSearchResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageSearchResultClass {
    _unused: [u8; 0],
}
pub type FridaPackageSearchResultClass = _FridaPackageSearchResultClass;
pub type FridaPackageInstallOptions = _FridaPackageInstallOptions;
pub type FridaPackageInstallOptionsClass = _FridaPackageInstallOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageInstallResult {
    _unused: [u8; 0],
}
pub type FridaPackageInstallResult = _FridaPackageInstallResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageInstallResultClass {
    _unused: [u8; 0],
}
pub type FridaPackageInstallResultClass = _FridaPackageInstallResultClass;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_INITIALIZING:
    FridaPackageInstallPhase = 0;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_PREPARING_DEPENDENCIES:
    FridaPackageInstallPhase = 1;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_RESOLVING_PACKAGE:
    FridaPackageInstallPhase = 2;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_FETCHING_RESOURCE:
    FridaPackageInstallPhase = 3;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_PACKAGE_ALREADY_INSTALLED:
    FridaPackageInstallPhase = 4;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_DOWNLOADING_PACKAGE:
    FridaPackageInstallPhase = 5;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_PACKAGE_INSTALLED:
    FridaPackageInstallPhase = 6;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_RESOLVING_AND_INSTALLING_ALL:
    FridaPackageInstallPhase = 7;
pub const FridaPackageInstallPhase_FRIDA_PACKAGE_INSTALL_PHASE_COMPLETE: FridaPackageInstallPhase =
    8;
pub type FridaPackageInstallPhase = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackage {
    _unused: [u8; 0],
}
pub type FridaPackage = _FridaPackage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageClass {
    _unused: [u8; 0],
}
pub type FridaPackageClass = _FridaPackageClass;
pub const FridaPackageRole_FRIDA_PACKAGE_ROLE_RUNTIME: FridaPackageRole = 0;
pub const FridaPackageRole_FRIDA_PACKAGE_ROLE_DEVELOPMENT: FridaPackageRole = 1;
pub const FridaPackageRole_FRIDA_PACKAGE_ROLE_OPTIONAL: FridaPackageRole = 2;
pub const FridaPackageRole_FRIDA_PACKAGE_ROLE_PEER: FridaPackageRole = 3;
pub type FridaPackageRole = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageList {
    _unused: [u8; 0],
}
pub type FridaPackageList = _FridaPackageList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageListClass {
    _unused: [u8; 0],
}
pub type FridaPackageListClass = _FridaPackageListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageSearchOptionsPrivate {
    _unused: [u8; 0],
}
pub type FridaPackageSearchOptionsPrivate = _FridaPackageSearchOptionsPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageInstallOptionsPrivate {
    _unused: [u8; 0],
}
pub type FridaPackageInstallOptionsPrivate = _FridaPackageInstallOptionsPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaControlService {
    _unused: [u8; 0],
}
pub type FridaControlService = _FridaControlService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaControlServiceClass {
    _unused: [u8; 0],
}
pub type FridaControlServiceClass = _FridaControlServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaControlServiceOptions {
    _unused: [u8; 0],
}
pub type FridaControlServiceOptions = _FridaControlServiceOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaControlServiceOptionsClass {
    _unused: [u8; 0],
}
pub type FridaControlServiceOptionsClass = _FridaControlServiceOptionsClass;
pub type FridaLocalHostSessionProvider = _FridaLocalHostSessionProvider;
pub type FridaLocalHostSessionProviderClass = _FridaLocalHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPrecreatedLocalHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaPrecreatedLocalHostSessionProvider = _FridaPrecreatedLocalHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPrecreatedLocalHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaPrecreatedLocalHostSessionProviderClass =
    _FridaPrecreatedLocalHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalService {
    _unused: [u8; 0],
}
pub type FridaPortalService = _FridaPortalService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPortalServiceClass {
    _unused: [u8; 0],
}
pub type FridaPortalServiceClass = _FridaPortalServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionService {
    _unused: [u8; 0],
}
pub type FridaHostSessionService = _FridaHostSessionService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionServiceClass {
    _unused: [u8; 0],
}
pub type FridaHostSessionServiceClass = _FridaHostSessionServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaHostSessionBackend = _FridaHostSessionBackend;
pub type FridaHostSessionBackendIface = _FridaHostSessionBackendIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaHostSessionProvider = _FridaHostSessionProvider;
pub type FridaHostSessionProviderIface = _FridaHostSessionProviderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionOptions {
    _unused: [u8; 0],
}
pub type FridaHostSessionOptions = _FridaHostSessionOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostSessionOptionsClass {
    _unused: [u8; 0],
}
pub type FridaHostSessionOptionsClass = _FridaHostSessionOptionsClass;
pub const FridaHostSessionProviderKind_FRIDA_HOST_SESSION_PROVIDER_KIND_LOCAL:
    FridaHostSessionProviderKind = 0;
pub const FridaHostSessionProviderKind_FRIDA_HOST_SESSION_PROVIDER_KIND_REMOTE:
    FridaHostSessionProviderKind = 1;
pub const FridaHostSessionProviderKind_FRIDA_HOST_SESSION_PROVIDER_KIND_USB:
    FridaHostSessionProviderKind = 2;
pub type FridaHostSessionProviderKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHostChannelProvider {
    _unused: [u8; 0],
}
pub type FridaHostChannelProvider = _FridaHostChannelProvider;
pub type FridaHostChannelProviderIface = _FridaHostChannelProviderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPairable {
    _unused: [u8; 0],
}
pub type FridaPairable = _FridaPairable;
pub type FridaPairableIface = _FridaPairableIface;
pub type FridaLocalHostSessionBackend = _FridaLocalHostSessionBackend;
pub type FridaLocalHostSessionBackendClass = _FridaLocalHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionBackendPrivate {
    _unused: [u8; 0],
}
pub type FridaLocalHostSessionBackendPrivate = _FridaLocalHostSessionBackendPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionProviderPrivate {
    _unused: [u8; 0],
}
pub type FridaLocalHostSessionProviderPrivate = _FridaLocalHostSessionProviderPrivate;
pub type FridaLocalHostSession = _FridaLocalHostSession;
pub type FridaLocalHostSessionClass = _FridaLocalHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionPrivate {
    _unused: [u8; 0],
}
pub type FridaLocalHostSessionPrivate = _FridaLocalHostSessionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInstalledHelperFile {
    _unused: [u8; 0],
}
pub type FridaInstalledHelperFile = _FridaInstalledHelperFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInstalledHelperFileClass {
    _unused: [u8; 0],
}
pub type FridaInstalledHelperFileClass = _FridaInstalledHelperFileClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryHelperFile {
    _unused: [u8; 0],
}
pub type FridaTemporaryHelperFile = _FridaTemporaryHelperFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryHelperFileClass {
    _unused: [u8; 0],
}
pub type FridaTemporaryHelperFileClass = _FridaTemporaryHelperFileClass;
pub type FridaInternalAgent = _FridaInternalAgent;
pub type FridaInternalAgentClass = _FridaInternalAgentClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInternalAgentPrivate {
    _unused: [u8; 0],
}
pub type FridaInternalAgentPrivate = _FridaInternalAgentPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentContainer {
    _unused: [u8; 0],
}
pub type FridaAgentContainer = _FridaAgentContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentContainerClass {
    _unused: [u8; 0],
}
pub type FridaAgentContainerClass = _FridaAgentContainerClass;
pub type FridaGDBClient = _FridaGDBClient;
pub type FridaGDBClientClass = _FridaGDBClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBClientPrivate = _FridaGDBClientPrivate;
pub type FridaGDBClientPropertyDictionary = _FridaGDBClientPropertyDictionary;
pub type FridaGDBClientPropertyDictionaryClass = _FridaGDBClientPropertyDictionaryClass;
pub type FridaGDBException = _FridaGDBException;
pub type FridaGDBExceptionClass = _FridaGDBExceptionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBBreakpoint {
    _unused: [u8; 0],
}
pub type FridaGDBBreakpoint = _FridaGDBBreakpoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBBreakpointClass {
    _unused: [u8; 0],
}
pub type FridaGDBBreakpointClass = _FridaGDBBreakpointClass;
pub type FridaGDBClientRegister = _FridaGDBClientRegister;
pub type FridaGDBClientRegisterClass = _FridaGDBClientRegisterClass;
pub const FridaGDBClientState_FRIDA_GDB_CLIENT_STATE_STOPPED: FridaGDBClientState = 0;
pub const FridaGDBClientState_FRIDA_GDB_CLIENT_STATE_RUNNING: FridaGDBClientState = 1;
pub const FridaGDBClientState_FRIDA_GDB_CLIENT_STATE_STOPPING: FridaGDBClientState = 2;
pub const FridaGDBClientState_FRIDA_GDB_CLIENT_STATE_CLOSED: FridaGDBClientState = 3;
pub type FridaGDBClientState = ::std::os::raw::c_uint;
pub const FridaGDBClientChecksumType_FRIDA_GDB_CLIENT_CHECKSUM_TYPE_PROPER:
    FridaGDBClientChecksumType = 0;
pub const FridaGDBClientChecksumType_FRIDA_GDB_CLIENT_CHECKSUM_TYPE_ZEROED:
    FridaGDBClientChecksumType = 1;
pub type FridaGDBClientChecksumType = ::std::os::raw::c_uint;
pub const FridaGDBClientResponseAction_FRIDA_GDB_CLIENT_RESPONSE_ACTION_COMPLETE:
    FridaGDBClientResponseAction = 0;
pub const FridaGDBClientResponseAction_FRIDA_GDB_CLIENT_RESPONSE_ACTION_ABSORB:
    FridaGDBClientResponseAction = 1;
pub const FridaGDBClientResponseAction_FRIDA_GDB_CLIENT_RESPONSE_ACTION_KEEP_TRYING:
    FridaGDBClientResponseAction = 2;
pub type FridaGDBClientResponseAction = ::std::os::raw::c_uint;
pub type FridaGDBThread = _FridaGDBThread;
pub type FridaGDBThreadClass = _FridaGDBThreadClass;
pub const FridaGDBBreakpointKind_FRIDA_GDB_BREAKPOINT_KIND_SOFT: FridaGDBBreakpointKind = 0;
pub const FridaGDBBreakpointKind_FRIDA_GDB_BREAKPOINT_KIND_HARD: FridaGDBBreakpointKind = 1;
pub const FridaGDBBreakpointKind_FRIDA_GDB_BREAKPOINT_KIND_WRITE: FridaGDBBreakpointKind = 2;
pub const FridaGDBBreakpointKind_FRIDA_GDB_BREAKPOINT_KIND_READ: FridaGDBBreakpointKind = 3;
pub const FridaGDBBreakpointKind_FRIDA_GDB_BREAKPOINT_KIND_ACCESS: FridaGDBBreakpointKind = 4;
pub type FridaGDBBreakpointKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPacket {
    _unused: [u8; 0],
}
pub type FridaGDBClientPacket = _FridaGDBClientPacket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPacketClass {
    _unused: [u8; 0],
}
pub type FridaGDBClientPacketClass = _FridaGDBClientPacketClass;
pub type FridaGDBClientResponsePredicate = ::std::option::Option<
    unsafe extern "C" fn(
        packet: *mut FridaGDBClientPacket,
        user_data: gpointer,
    ) -> FridaGDBClientResponseAction,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPacketBuilder {
    _unused: [u8; 0],
}
pub type FridaGDBClientPacketBuilder = _FridaGDBClientPacketBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPacketBuilderClass {
    _unused: [u8; 0],
}
pub type FridaGDBClientPacketBuilderClass = _FridaGDBClientPacketBuilderClass;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_UNKNOWN: FridaGDBTargetArch = 0;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_IA32: FridaGDBTargetArch = 1;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_X64: FridaGDBTargetArch = 2;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_ARM: FridaGDBTargetArch = 3;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_ARM64: FridaGDBTargetArch = 4;
pub const FridaGDBTargetArch_FRIDA_GDB_TARGET_ARCH_MIPS: FridaGDBTargetArch = 5;
pub type FridaGDBTargetArch = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPropertyDictionaryPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBClientPropertyDictionaryPrivate = _FridaGDBClientPropertyDictionaryPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientRegisterPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBClientRegisterPrivate = _FridaGDBClientRegisterPrivate;
pub type FridaGDBClientTargetSpec = _FridaGDBClientTargetSpec;
pub type FridaGDBClientTargetSpecClass = _FridaGDBClientTargetSpecClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientTargetSpecPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBClientTargetSpecPrivate = _FridaGDBClientTargetSpecPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBThreadPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBThreadPrivate = _FridaGDBThreadPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBExceptionPrivate {
    _unused: [u8; 0],
}
pub type FridaGDBExceptionPrivate = _FridaGDBExceptionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationEnumerator {
    _unused: [u8; 0],
}
pub type FridaApplicationEnumerator = _FridaApplicationEnumerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaApplicationEnumeratorClass {
    _unused: [u8; 0],
}
pub type FridaApplicationEnumeratorClass = _FridaApplicationEnumeratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessEnumerator {
    _unused: [u8; 0],
}
pub type FridaProcessEnumerator = _FridaProcessEnumerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaProcessEnumeratorClass {
    _unused: [u8; 0],
}
pub type FridaProcessEnumeratorClass = _FridaProcessEnumeratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryDirectory {
    _unused: [u8; 0],
}
pub type FridaTemporaryDirectory = _FridaTemporaryDirectory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryDirectoryClass {
    _unused: [u8; 0],
}
pub type FridaTemporaryDirectoryClass = _FridaTemporaryDirectoryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryFile {
    _unused: [u8; 0],
}
pub type FridaTemporaryFile = _FridaTemporaryFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaTemporaryFileClass {
    _unused: [u8; 0],
}
pub type FridaTemporaryFileClass = _FridaTemporaryFileClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFileMonitor {
    _unused: [u8; 0],
}
pub type FridaFileMonitor = _FridaFileMonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFileMonitorClass {
    _unused: [u8; 0],
}
pub type FridaFileMonitorClass = _FridaFileMonitorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSessionBackend = _FridaLinuxHostSessionBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSessionBackendClass {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSessionBackendClass = _FridaLinuxHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSessionProvider = _FridaLinuxHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSessionProviderClass = _FridaLinuxHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSession {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSession = _FridaLinuxHostSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHostSessionClass {
    _unused: [u8; 0],
}
pub type FridaLinuxHostSessionClass = _FridaLinuxHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinjector {
    _unused: [u8; 0],
}
pub type FridaLinjector = _FridaLinjector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinjectorClass {
    _unused: [u8; 0],
}
pub type FridaLinjectorClass = _FridaLinjectorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentDescriptor {
    _unused: [u8; 0],
}
pub type FridaAgentDescriptor = _FridaAgentDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentDescriptorClass {
    _unused: [u8; 0],
}
pub type FridaAgentDescriptorClass = _FridaAgentDescriptorClass;
pub const FridaAgentMode_FRIDA_AGENT_MODE_INSTANCED: FridaAgentMode = 0;
pub const FridaAgentMode_FRIDA_AGENT_MODE_SINGLETON: FridaAgentMode = 1;
pub type FridaAgentMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentResource {
    _unused: [u8; 0],
}
pub type FridaAgentResource = _FridaAgentResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAgentResourceClass {
    _unused: [u8; 0],
}
pub type FridaAgentResourceClass = _FridaAgentResourceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHelperProcess {
    _unused: [u8; 0],
}
pub type FridaLinuxHelperProcess = _FridaLinuxHelperProcess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLinuxHelperProcessClass {
    _unused: [u8; 0],
}
pub type FridaLinuxHelperProcessClass = _FridaLinuxHelperProcessClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperFactory {
    _unused: [u8; 0],
}
pub type FridaHelperFactory = _FridaHelperFactory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperFactoryClass {
    _unused: [u8; 0],
}
pub type FridaHelperFactoryClass = _FridaHelperFactoryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperSession {
    _unused: [u8; 0],
}
pub type FridaHelperSession = _FridaHelperSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaHelperSessionClass {
    _unused: [u8; 0],
}
pub type FridaHelperSessionClass = _FridaHelperSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaResourceStore {
    _unused: [u8; 0],
}
pub type FridaResourceStore = _FridaResourceStore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaResourceStoreClass {
    _unused: [u8; 0],
}
pub type FridaResourceStoreClass = _FridaResourceStoreClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaMemoryHelperFile {
    _unused: [u8; 0],
}
pub type FridaMemoryHelperFile = _FridaMemoryHelperFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaMemoryHelperFileClass {
    _unused: [u8; 0],
}
pub type FridaMemoryHelperFileClass = _FridaMemoryHelperFileClass;
pub type FridaSuperSUProcess = _FridaSuperSUProcess;
pub type FridaSuperSUProcessClass = _FridaSuperSUProcessClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSuperSUProcessPrivate {
    _unused: [u8; 0],
}
pub type FridaSuperSUProcessPrivate = _FridaSuperSUProcessPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaFruityHostSessionBackend = _FridaFruityHostSessionBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSessionBackendClass {
    _unused: [u8; 0],
}
pub type FridaFruityHostSessionBackendClass = _FridaFruityHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaFruityHostSessionProvider = _FridaFruityHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaFruityHostSessionProviderClass = _FridaFruityHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDevice {
    _unused: [u8; 0],
}
pub type FridaFruityDevice = _FridaFruityDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceClass = _FridaFruityDeviceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSession {
    _unused: [u8; 0],
}
pub type FridaFruityHostSession = _FridaFruityHostSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityHostSessionClass {
    _unused: [u8; 0],
}
pub type FridaFruityHostSessionClass = _FridaFruityHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPlistServiceSession {
    _unused: [u8; 0],
}
pub type FridaPlistServiceSession = _FridaPlistServiceSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPlistServiceSessionClass {
    _unused: [u8; 0],
}
pub type FridaPlistServiceSessionClass = _FridaPlistServiceSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDTXServiceSession {
    _unused: [u8; 0],
}
pub type FridaDTXServiceSession = _FridaDTXServiceSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDTXServiceSessionClass {
    _unused: [u8; 0],
}
pub type FridaDTXServiceSessionClass = _FridaDTXServiceSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaXpcServiceSession {
    _unused: [u8; 0],
}
pub type FridaXpcServiceSession = _FridaXpcServiceSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaXpcServiceSessionClass {
    _unused: [u8; 0],
}
pub type FridaXpcServiceSessionClass = _FridaXpcServiceSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceMonitor {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceMonitor = _FridaFruityDeviceMonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceMonitorClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceMonitorClass = _FridaFruityDeviceMonitorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxDevice {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxDevice = _FridaFruityUsbmuxDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxDeviceClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxDeviceClass = _FridaFruityUsbmuxDeviceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnel {
    _unused: [u8; 0],
}
pub type FridaFruityTunnel = _FridaFruityTunnel;
pub type FridaFruityTunnelIface = _FridaFruityTunnelIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDiscoveryService {
    _unused: [u8; 0],
}
pub type FridaFruityDiscoveryService = _FridaFruityDiscoveryService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDiscoveryServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityDiscoveryServiceClass = _FridaFruityDiscoveryServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLockdownClient {
    _unused: [u8; 0],
}
pub type FridaFruityLockdownClient = _FridaFruityLockdownClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLockdownClientClass {
    _unused: [u8; 0],
}
pub type FridaFruityLockdownClientClass = _FridaFruityLockdownClientClass;
pub const FridaFruityOpenTcpChannelFlags_FRIDA_FRUITY_OPEN_TCP_CHANNEL_FLAGS_ALLOW_USBMUX:
    FridaFruityOpenTcpChannelFlags = 1;
pub const FridaFruityOpenTcpChannelFlags_FRIDA_FRUITY_OPEN_TCP_CHANNEL_FLAGS_ALLOW_TUNNEL:
    FridaFruityOpenTcpChannelFlags = 2;
pub const FridaFruityOpenTcpChannelFlags_FRIDA_FRUITY_OPEN_TCP_CHANNEL_FLAGS_ALLOW_ANY_TRANSPORT:
    FridaFruityOpenTcpChannelFlags = 3;
pub type FridaFruityOpenTcpChannelFlags = ::std::os::raw::c_uint;
pub type FridaFruityTcpChannel = _FridaFruityTcpChannel;
pub type FridaFruityTcpChannelClass = _FridaFruityTcpChannelClass;
pub const FridaFruityConnectionType_FRIDA_FRUITY_CONNECTION_TYPE_USB: FridaFruityConnectionType = 0;
pub const FridaFruityConnectionType_FRIDA_FRUITY_CONNECTION_TYPE_NETWORK:
    FridaFruityConnectionType = 1;
pub type FridaFruityConnectionType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTransport {
    _unused: [u8; 0],
}
pub type FridaFruityTransport = _FridaFruityTransport;
pub type FridaFruityTransportIface = _FridaFruityTransportIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTcpChannelPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityTcpChannelPrivate = _FridaFruityTcpChannelPrivate;
pub const FridaFruityTcpChannelKind_FRIDA_FRUITY_TCP_CHANNEL_KIND_USBMUX:
    FridaFruityTcpChannelKind = 0;
pub const FridaFruityTcpChannelKind_FRIDA_FRUITY_TCP_CHANNEL_KIND_TUNNEL:
    FridaFruityTcpChannelKind = 1;
pub type FridaFruityTcpChannelKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityBackend {
    _unused: [u8; 0],
}
pub type FridaFruityBackend = _FridaFruityBackend;
pub type FridaFruityBackendIface = _FridaFruityBackendIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxBackend {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxBackend = _FridaFruityUsbmuxBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxBackendClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxBackendClass = _FridaFruityUsbmuxBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxTransport {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxTransport = _FridaFruityUsbmuxTransport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxTransportClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxTransportClass = _FridaFruityUsbmuxTransportClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxTunnel {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxTunnel = _FridaFruityUsbmuxTunnel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxTunnelClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxTunnelClass = _FridaFruityUsbmuxTunnelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceBackend {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceBackend = _FridaFruityPortableCoreDeviceBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceBackendClass {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceBackendClass = _FridaFruityPortableCoreDeviceBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceUsbTransport {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceUsbTransport = _FridaFruityPortableCoreDeviceUsbTransport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceUsbTransportClass {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceUsbTransportClass =
    _FridaFruityPortableCoreDeviceUsbTransportClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableUsbTunnel {
    _unused: [u8; 0],
}
pub type FridaFruityPortableUsbTunnel = _FridaFruityPortableUsbTunnel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableUsbTunnelClass {
    _unused: [u8; 0],
}
pub type FridaFruityPortableUsbTunnelClass = _FridaFruityPortableUsbTunnelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceNetworkTransport {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceNetworkTransport =
    _FridaFruityPortableCoreDeviceNetworkTransport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableCoreDeviceNetworkTransportClass {
    _unused: [u8; 0],
}
pub type FridaFruityPortableCoreDeviceNetworkTransportClass =
    _FridaFruityPortableCoreDeviceNetworkTransportClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableNetworkTunnel {
    _unused: [u8; 0],
}
pub type FridaFruityPortableNetworkTunnel = _FridaFruityPortableNetworkTunnel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPortableNetworkTunnelClass {
    _unused: [u8; 0],
}
pub type FridaFruityPortableNetworkTunnelClass = _FridaFruityPortableNetworkTunnelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityFruitFinder {
    _unused: [u8; 0],
}
pub type FridaFruityFruitFinder = _FridaFruityFruitFinder;
pub type FridaFruityFruitFinderIface = _FridaFruityFruitFinderIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNullFruitFinder {
    _unused: [u8; 0],
}
pub type FridaFruityNullFruitFinder = _FridaFruityNullFruitFinder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNullFruitFinderClass {
    _unused: [u8; 0],
}
pub type FridaFruityNullFruitFinderClass = _FridaFruityNullFruitFinderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingBrowser {
    _unused: [u8; 0],
}
pub type FridaFruityPairingBrowser = _FridaFruityPairingBrowser;
pub type FridaFruityPairingBrowserIface = _FridaFruityPairingBrowserIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNullPairingBrowser {
    _unused: [u8; 0],
}
pub type FridaFruityNullPairingBrowser = _FridaFruityNullPairingBrowser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNullPairingBrowserClass {
    _unused: [u8; 0],
}
pub type FridaFruityNullPairingBrowserClass = _FridaFruityNullPairingBrowserClass;
pub type FridaFruityPairingServiceDetails = _FridaFruityPairingServiceDetails;
pub type FridaFruityPairingServiceDetailsClass = _FridaFruityPairingServiceDetailsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingServiceDetailsPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityPairingServiceDetailsPrivate = _FridaFruityPairingServiceDetailsPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityServiceInfo {
    _unused: [u8; 0],
}
pub type FridaFruityServiceInfo = _FridaFruityServiceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityServiceInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityServiceInfoClass = _FridaFruityServiceInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingService {
    _unused: [u8; 0],
}
pub type FridaFruityPairingService = _FridaFruityPairingService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingServiceClass = _FridaFruityPairingServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingTransport {
    _unused: [u8; 0],
}
pub type FridaFruityPairingTransport = _FridaFruityPairingTransport;
pub type FridaFruityPairingTransportIface = _FridaFruityPairingTransportIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingStore {
    _unused: [u8; 0],
}
pub type FridaFruityPairingStore = _FridaFruityPairingStore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingStoreClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingStoreClass = _FridaFruityPairingStoreClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNetworkStack {
    _unused: [u8; 0],
}
pub type FridaFruityNetworkStack = _FridaFruityNetworkStack;
pub type FridaFruityNetworkStackIface = _FridaFruityNetworkStackIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUdpSocket {
    _unused: [u8; 0],
}
pub type FridaFruityUdpSocket = _FridaFruityUdpSocket;
pub type FridaFruityUdpSocketIface = _FridaFruityUdpSocketIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnelConnection {
    _unused: [u8; 0],
}
pub type FridaFruityTunnelConnection = _FridaFruityTunnelConnection;
pub type FridaFruityTunnelConnectionIface = _FridaFruityTunnelConnectionIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceOptions {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceOptions = _FridaFruityDeviceOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceOptionsClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceOptionsClass = _FridaFruityDeviceOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfo {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfo = _FridaFruityDeviceInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfoClass = _FridaFruityDeviceInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingPeer {
    _unused: [u8; 0],
}
pub type FridaFruityPairingPeer = _FridaFruityPairingPeer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingPeerClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingPeerClass = _FridaFruityPairingPeerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcPairingTransport {
    _unused: [u8; 0],
}
pub type FridaFruityXpcPairingTransport = _FridaFruityXpcPairingTransport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcPairingTransportClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcPairingTransportClass = _FridaFruityXpcPairingTransportClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlainPairingTransport {
    _unused: [u8; 0],
}
pub type FridaFruityPlainPairingTransport = _FridaFruityPlainPairingTransport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlainPairingTransportClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlainPairingTransportClass = _FridaFruityPlainPairingTransportClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingIdentity {
    _unused: [u8; 0],
}
pub type FridaFruityPairingIdentity = _FridaFruityPairingIdentity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingIdentityClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingIdentityClass = _FridaFruityPairingIdentityClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingServiceMetadata {
    _unused: [u8; 0],
}
pub type FridaFruityPairingServiceMetadata = _FridaFruityPairingServiceMetadata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingServiceMetadataClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingServiceMetadataClass = _FridaFruityPairingServiceMetadataClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingParamsBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityPairingParamsBuilder = _FridaFruityPairingParamsBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingParamsBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingParamsBuilderClass = _FridaFruityPairingParamsBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingParamsParser {
    _unused: [u8; 0],
}
pub type FridaFruityPairingParamsParser = _FridaFruityPairingParamsParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingParamsParserClass {
    _unused: [u8; 0],
}
pub type FridaFruityPairingParamsParserClass = _FridaFruityPairingParamsParserClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnelParameters {
    _unused: [u8; 0],
}
pub type FridaFruityTunnelParameters = _FridaFruityTunnelParameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnelParametersClass {
    _unused: [u8; 0],
}
pub type FridaFruityTunnelParametersClass = _FridaFruityTunnelParametersClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTcpTunnelConnection {
    _unused: [u8; 0],
}
pub type FridaFruityTcpTunnelConnection = _FridaFruityTcpTunnelConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTcpTunnelConnectionClass {
    _unused: [u8; 0],
}
pub type FridaFruityTcpTunnelConnectionClass = _FridaFruityTcpTunnelConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnelKey {
    _unused: [u8; 0],
}
pub type FridaFruityTunnelKey = _FridaFruityTunnelKey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTunnelKeyClass {
    _unused: [u8; 0],
}
pub type FridaFruityTunnelKeyClass = _FridaFruityTunnelKeyClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityQuicTunnelConnection {
    _unused: [u8; 0],
}
pub type FridaFruityQuicTunnelConnection = _FridaFruityQuicTunnelConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityQuicTunnelConnectionClass {
    _unused: [u8; 0],
}
pub type FridaFruityQuicTunnelConnectionClass = _FridaFruityQuicTunnelConnectionClass;
pub type FridaFruityTrustedService = _FridaFruityTrustedService;
pub type FridaFruityTrustedServiceClass = _FridaFruityTrustedServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppService {
    _unused: [u8; 0],
}
pub type FridaFruityAppService = _FridaFruityAppService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityAppServiceClass = _FridaFruityAppServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppServiceApplicationInfo {
    _unused: [u8; 0],
}
pub type FridaFruityAppServiceApplicationInfo = _FridaFruityAppServiceApplicationInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppServiceApplicationInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityAppServiceApplicationInfoClass = _FridaFruityAppServiceApplicationInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppServiceProcessInfo {
    _unused: [u8; 0],
}
pub type FridaFruityAppServiceProcessInfo = _FridaFruityAppServiceProcessInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityAppServiceProcessInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityAppServiceProcessInfoClass = _FridaFruityAppServiceProcessInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTrustedServicePrivate {
    _unused: [u8; 0],
}
pub type FridaFruityTrustedServicePrivate = _FridaFruityTrustedServicePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcConnection {
    _unused: [u8; 0],
}
pub type FridaFruityXpcConnection = _FridaFruityXpcConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcConnectionClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcConnectionClass = _FridaFruityXpcConnectionClass;
pub const FridaFruityXpcConnectionState_FRIDA_FRUITY_XPC_CONNECTION_STATE_INACTIVE:
    FridaFruityXpcConnectionState = 0;
pub const FridaFruityXpcConnectionState_FRIDA_FRUITY_XPC_CONNECTION_STATE_ACTIVE:
    FridaFruityXpcConnectionState = 1;
pub const FridaFruityXpcConnectionState_FRIDA_FRUITY_XPC_CONNECTION_STATE_CLOSED:
    FridaFruityXpcConnectionState = 2;
pub type FridaFruityXpcConnectionState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPeerInfo {
    _unused: [u8; 0],
}
pub type FridaFruityPeerInfo = _FridaFruityPeerInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPeerInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityPeerInfoClass = _FridaFruityPeerInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcMessage {
    _unused: [u8; 0],
}
pub type FridaFruityXpcMessage = _FridaFruityXpcMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcMessageClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcMessageClass = _FridaFruityXpcMessageClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcMessageBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityXpcMessageBuilder = _FridaFruityXpcMessageBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcMessageBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcMessageBuilderClass = _FridaFruityXpcMessageBuilderClass;
pub const FridaFruityMessageType_FRIDA_FRUITY_MESSAGE_TYPE_HEADER: FridaFruityMessageType = 0;
pub const FridaFruityMessageType_FRIDA_FRUITY_MESSAGE_TYPE_MSG: FridaFruityMessageType = 1;
pub const FridaFruityMessageType_FRIDA_FRUITY_MESSAGE_TYPE_PING: FridaFruityMessageType = 2;
pub type FridaFruityMessageType = ::std::os::raw::c_uint;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_NONE: FridaFruityMessageFlags = 0;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_WANTS_REPLY: FridaFruityMessageFlags =
    1;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_IS_REPLY: FridaFruityMessageFlags = 2;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_HEADER_OPENS_STREAM_TX:
    FridaFruityMessageFlags = 16;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_HEADER_OPENS_STREAM_RX:
    FridaFruityMessageFlags = 32;
pub const FridaFruityMessageFlags_FRIDA_FRUITY_MESSAGE_FLAGS_HEADER_OPENS_REPLY_CHANNEL:
    FridaFruityMessageFlags = 64;
pub type FridaFruityMessageFlags = ::std::os::raw::c_uint;
pub type FridaFruityXpcObjectBuilder = _FridaFruityXpcObjectBuilder;
pub type FridaFruityXpcObjectBuilderClass = _FridaFruityXpcObjectBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcBodyBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityXpcBodyBuilder = _FridaFruityXpcBodyBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcBodyBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcBodyBuilderClass = _FridaFruityXpcBodyBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcObjectBuilderPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityXpcObjectBuilderPrivate = _FridaFruityXpcObjectBuilderPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcBodyParser {
    _unused: [u8; 0],
}
pub type FridaFruityXpcBodyParser = _FridaFruityXpcBodyParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcBodyParserClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcBodyParserClass = _FridaFruityXpcBodyParserClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcObjectParser {
    _unused: [u8; 0],
}
pub type FridaFruityXpcObjectParser = _FridaFruityXpcObjectParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcObjectParserClass {
    _unused: [u8; 0],
}
pub type FridaFruityXpcObjectParserClass = _FridaFruityXpcObjectParserClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfoService {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfoService = _FridaFruityDeviceInfoService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfoServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfoServiceClass = _FridaFruityDeviceInfoServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfoServiceProcessInfo {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfoServiceProcessInfo = _FridaFruityDeviceInfoServiceProcessInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDeviceInfoServiceProcessInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityDeviceInfoServiceProcessInfoClass =
    _FridaFruityDeviceInfoServiceProcessInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationListingService {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationListingService = _FridaFruityApplicationListingService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationListingServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationListingServiceClass = _FridaFruityApplicationListingServiceClass;
pub const FridaFruityApplicationListingServiceApplicationType_FRIDA_FRUITY_APPLICATION_LISTING_SERVICE_APPLICATION_TYPE_SYSTEM : FridaFruityApplicationListingServiceApplicationType = 1 ;
pub const FridaFruityApplicationListingServiceApplicationType_FRIDA_FRUITY_APPLICATION_LISTING_SERVICE_APPLICATION_TYPE_USER : FridaFruityApplicationListingServiceApplicationType = 2 ;
pub const FridaFruityApplicationListingServiceApplicationType_FRIDA_FRUITY_APPLICATION_LISTING_SERVICE_APPLICATION_TYPE_PLUGIN_KIT : FridaFruityApplicationListingServiceApplicationType = 3 ;
pub type FridaFruityApplicationListingServiceApplicationType = ::std::os::raw::c_uint;
pub type FridaFruityNSObject = _FridaFruityNSObject;
pub type FridaFruityNSObjectClass = _FridaFruityNSObjectClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDictionary {
    _unused: [u8; 0],
}
pub type FridaFruityNSDictionary = _FridaFruityNSDictionary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDictionaryClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSDictionaryClass = _FridaFruityNSDictionaryClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationListingServiceApplicationInfo {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationListingServiceApplicationInfo =
    _FridaFruityApplicationListingServiceApplicationInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationListingServiceApplicationInfoClass {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationListingServiceApplicationInfoClass =
    _FridaFruityApplicationListingServiceApplicationInfoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityProcessControlService {
    _unused: [u8; 0],
}
pub type FridaFruityProcessControlService = _FridaFruityProcessControlService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityProcessControlServiceClass {
    _unused: [u8; 0],
}
pub type FridaFruityProcessControlServiceClass = _FridaFruityProcessControlServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXConnection {
    _unused: [u8; 0],
}
pub type FridaFruityDTXConnection = _FridaFruityDTXConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXConnectionClass {
    _unused: [u8; 0],
}
pub type FridaFruityDTXConnectionClass = _FridaFruityDTXConnectionClass;
pub const FridaFruityDTXConnectionState_FRIDA_FRUITY_DTX_CONNECTION_STATE_OPEN:
    FridaFruityDTXConnectionState = 0;
pub const FridaFruityDTXConnectionState_FRIDA_FRUITY_DTX_CONNECTION_STATE_CLOSED:
    FridaFruityDTXConnectionState = 1;
pub type FridaFruityDTXConnectionState = ::std::os::raw::c_uint;
pub type FridaFruityDTXChannel = _FridaFruityDTXChannel;
pub type FridaFruityDTXChannelClass = _FridaFruityDTXChannelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXControlChannel {
    _unused: [u8; 0],
}
pub type FridaFruityDTXControlChannel = _FridaFruityDTXControlChannel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXControlChannelClass {
    _unused: [u8; 0],
}
pub type FridaFruityDTXControlChannelClass = _FridaFruityDTXControlChannelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXChannelPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDTXChannelPrivate = _FridaFruityDTXChannelPrivate;
pub const FridaFruityDTXChannelState_FRIDA_FRUITY_DTX_CHANNEL_STATE_OPEN:
    FridaFruityDTXChannelState = 0;
pub const FridaFruityDTXChannelState_FRIDA_FRUITY_DTX_CHANNEL_STATE_CLOSED:
    FridaFruityDTXChannelState = 1;
pub type FridaFruityDTXChannelState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXTransport {
    _unused: [u8; 0],
}
pub type FridaFruityDTXTransport = _FridaFruityDTXTransport;
pub type FridaFruityDTXTransportIface = _FridaFruityDTXTransportIface;
pub type FridaFruityDTXMessage = _FridaFruityDTXMessage;
pub const FridaFruityDTXMessageType_FRIDA_FRUITY_DTX_MESSAGE_TYPE_OK: FridaFruityDTXMessageType = 0;
pub const FridaFruityDTXMessageType_FRIDA_FRUITY_DTX_MESSAGE_TYPE_INVOKE:
    FridaFruityDTXMessageType = 2;
pub const FridaFruityDTXMessageType_FRIDA_FRUITY_DTX_MESSAGE_TYPE_RESULT:
    FridaFruityDTXMessageType = 3;
pub const FridaFruityDTXMessageType_FRIDA_FRUITY_DTX_MESSAGE_TYPE_ERROR: FridaFruityDTXMessageType =
    4;
pub const FridaFruityDTXMessageType_FRIDA_FRUITY_DTX_MESSAGE_TYPE_BARRIER:
    FridaFruityDTXMessageType = 5;
pub type FridaFruityDTXMessageType = ::std::os::raw::c_uint;
pub const FridaFruityDTXMessageTransportFlags_FRIDA_FRUITY_DTX_MESSAGE_TRANSPORT_FLAGS_NONE:
    FridaFruityDTXMessageTransportFlags = 0;
pub const FridaFruityDTXMessageTransportFlags_FRIDA_FRUITY_DTX_MESSAGE_TRANSPORT_FLAGS_EXPECTS_REPLY : FridaFruityDTXMessageTransportFlags = 1 ;
pub type FridaFruityDTXMessageTransportFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXArgumentListBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityDTXArgumentListBuilder = _FridaFruityDTXArgumentListBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXArgumentListBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityDTXArgumentListBuilderClass = _FridaFruityDTXArgumentListBuilderClass;
pub type FridaFruityDTXArgumentList = _FridaFruityDTXArgumentList;
pub type FridaFruityDTXArgumentListClass = _FridaFruityDTXArgumentListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXArgumentListPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDTXArgumentListPrivate = _FridaFruityDTXArgumentListPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPrimitiveReader {
    _unused: [u8; 0],
}
pub type FridaFruityPrimitiveReader = _FridaFruityPrimitiveReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPrimitiveReaderClass {
    _unused: [u8; 0],
}
pub type FridaFruityPrimitiveReaderClass = _FridaFruityPrimitiveReaderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPrimitiveBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityPrimitiveBuilder = _FridaFruityPrimitiveBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPrimitiveBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityPrimitiveBuilderClass = _FridaFruityPrimitiveBuilderClass;
pub type FridaFruityPlistDict = _FridaFruityPlistDict;
pub type FridaFruityPlistDictClass = _FridaFruityPlistDictClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlist {
    _unused: [u8; 0],
}
pub type FridaFruityPlist = _FridaFruityPlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistClass = _FridaFruityPlistClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistServiceClient {
    _unused: [u8; 0],
}
pub type FridaFruityPlistServiceClient = _FridaFruityPlistServiceClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistServiceClientClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistServiceClientClass = _FridaFruityPlistServiceClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInstallationProxyClient {
    _unused: [u8; 0],
}
pub type FridaFruityInstallationProxyClient = _FridaFruityInstallationProxyClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInstallationProxyClientClass {
    _unused: [u8; 0],
}
pub type FridaFruityInstallationProxyClientClass = _FridaFruityInstallationProxyClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationDetails {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationDetails = _FridaFruityApplicationDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityApplicationDetailsClass {
    _unused: [u8; 0],
}
pub type FridaFruityApplicationDetailsClass = _FridaFruityApplicationDetailsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruitySpringboardServicesClient {
    _unused: [u8; 0],
}
pub type FridaFruitySpringboardServicesClient = _FridaFruitySpringboardServicesClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruitySpringboardServicesClientClass {
    _unused: [u8; 0],
}
pub type FridaFruitySpringboardServicesClientClass = _FridaFruitySpringboardServicesClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBClient {
    _unused: [u8; 0],
}
pub type FridaLLDBClient = _FridaLLDBClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBClientClass {
    _unused: [u8; 0],
}
pub type FridaLLDBClientClass = _FridaLLDBClientClass;
pub const FridaLLDBClientCachePolicy_FRIDA_LLDB_CLIENT_CACHE_POLICY_ALLOW_CACHE:
    FridaLLDBClientCachePolicy = 0;
pub const FridaLLDBClientCachePolicy_FRIDA_LLDB_CLIENT_CACHE_POLICY_BYPASS_CACHE:
    FridaLLDBClientCachePolicy = 1;
pub type FridaLLDBClientCachePolicy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBLaunchOptions {
    _unused: [u8; 0],
}
pub type FridaLLDBLaunchOptions = _FridaLLDBLaunchOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBLaunchOptionsClass {
    _unused: [u8; 0],
}
pub type FridaLLDBLaunchOptionsClass = _FridaLLDBLaunchOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBProcess {
    _unused: [u8; 0],
}
pub type FridaLLDBProcess = _FridaLLDBProcess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBProcessClass {
    _unused: [u8; 0],
}
pub type FridaLLDBProcessClass = _FridaLLDBProcessClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThread {
    _unused: [u8; 0],
}
pub type FridaLLDBThread = _FridaLLDBThread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThreadClass {
    _unused: [u8; 0],
}
pub type FridaLLDBThreadClass = _FridaLLDBThreadClass;
pub type FridaLLDBClientFoundThreadFunc = ::std::option::Option<
    unsafe extern "C" fn(thread: *mut FridaLLDBThread, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBModule {
    _unused: [u8; 0],
}
pub type FridaLLDBModule = _FridaLLDBModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBModuleClass {
    _unused: [u8; 0],
}
pub type FridaLLDBModuleClass = _FridaLLDBModuleClass;
pub type FridaLLDBClientFoundModuleFunc = ::std::option::Option<
    unsafe extern "C" fn(module: *mut FridaLLDBModule, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBAppleDyldFields {
    _unused: [u8; 0],
}
pub type FridaLLDBAppleDyldFields = _FridaLLDBAppleDyldFields;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBAppleDyldFieldsClass {
    _unused: [u8; 0],
}
pub type FridaLLDBAppleDyldFieldsClass = _FridaLLDBAppleDyldFieldsClass;
pub const FridaLLDBASLR_FRIDA_LLDB_ASLR_AUTO: FridaLLDBASLR = 0;
pub const FridaLLDBASLR_FRIDA_LLDB_ASLR_DISABLE: FridaLLDBASLR = 1;
pub type FridaLLDBASLR = ::std::os::raw::c_uint;
pub const FridaLLDBProcessObservedState_FRIDA_LLDB_PROCESS_OBSERVED_STATE_FRESHLY_CREATED:
    FridaLLDBProcessObservedState = 0;
pub const FridaLLDBProcessObservedState_FRIDA_LLDB_PROCESS_OBSERVED_STATE_ALREADY_RUNNING:
    FridaLLDBProcessObservedState = 1;
pub type FridaLLDBProcessObservedState = ::std::os::raw::c_uint;
pub const FridaLLDBDarwinCpuArchType_FRIDA_LLDB_DARWIN_CPU_ARCH_TYPE_ABI64:
    FridaLLDBDarwinCpuArchType = 16777216;
pub const FridaLLDBDarwinCpuArchType_FRIDA_LLDB_DARWIN_CPU_ARCH_TYPE_ABI64_32:
    FridaLLDBDarwinCpuArchType = 33554432;
pub type FridaLLDBDarwinCpuArchType = ::std::os::raw::c_uint;
pub const FridaLLDBDarwinCpuType_FRIDA_LLDB_DARWIN_CPU_TYPE_X86: FridaLLDBDarwinCpuType = 7;
pub const FridaLLDBDarwinCpuType_FRIDA_LLDB_DARWIN_CPU_TYPE_X86_64: FridaLLDBDarwinCpuType =
    16777223;
pub const FridaLLDBDarwinCpuType_FRIDA_LLDB_DARWIN_CPU_TYPE_ARM: FridaLLDBDarwinCpuType = 12;
pub const FridaLLDBDarwinCpuType_FRIDA_LLDB_DARWIN_CPU_TYPE_ARM64: FridaLLDBDarwinCpuType =
    16777228;
pub const FridaLLDBDarwinCpuType_FRIDA_LLDB_DARWIN_CPU_TYPE_ARM64_32: FridaLLDBDarwinCpuType =
    33554444;
pub type FridaLLDBDarwinCpuType = ::std::os::raw::c_uint;
pub const FridaLLDBDarwinCpuSubtype_FRIDA_LLDB_DARWIN_CPU_SUBTYPE_ARM64E:
    FridaLLDBDarwinCpuSubtype = 2;
pub type FridaLLDBDarwinCpuSubtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThreadSnapshot {
    _unused: [u8; 0],
}
pub type FridaLLDBThreadSnapshot = _FridaLLDBThreadSnapshot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThreadSnapshotClass {
    _unused: [u8; 0],
}
pub type FridaLLDBThreadSnapshotClass = _FridaLLDBThreadSnapshotClass;
pub type FridaLLDBThreadStackBounds = _FridaLLDBThreadStackBounds;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThreadFrame {
    _unused: [u8; 0],
}
pub type FridaLLDBThreadFrame = _FridaLLDBThreadFrame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBThreadFrameClass {
    _unused: [u8; 0],
}
pub type FridaLLDBThreadFrameClass = _FridaLLDBThreadFrameClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBModuleSegment {
    _unused: [u8; 0],
}
pub type FridaLLDBModuleSegment = _FridaLLDBModuleSegment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBModuleSegmentClass {
    _unused: [u8; 0],
}
pub type FridaLLDBModuleSegmentClass = _FridaLLDBModuleSegmentClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBException {
    _unused: [u8; 0],
}
pub type FridaLLDBException = _FridaLLDBException;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLLDBExceptionClass {
    _unused: [u8; 0],
}
pub type FridaLLDBExceptionClass = _FridaLLDBExceptionClass;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGHUP: FridaLLDBSignal = 1;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGINT: FridaLLDBSignal = 2;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGQUIT: FridaLLDBSignal = 3;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGILL: FridaLLDBSignal = 4;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGTRAP: FridaLLDBSignal = 5;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGABRT: FridaLLDBSignal = 6;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGEMT: FridaLLDBSignal = 7;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGFPE: FridaLLDBSignal = 8;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGKILL: FridaLLDBSignal = 9;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGBUS: FridaLLDBSignal = 10;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGSEGV: FridaLLDBSignal = 11;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGSYS: FridaLLDBSignal = 12;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGPIPE: FridaLLDBSignal = 13;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGALRM: FridaLLDBSignal = 14;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGTERM: FridaLLDBSignal = 15;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGURG: FridaLLDBSignal = 16;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGSTOP: FridaLLDBSignal = 17;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGTSTP: FridaLLDBSignal = 18;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGCONT: FridaLLDBSignal = 19;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGCHLD: FridaLLDBSignal = 20;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGTTIN: FridaLLDBSignal = 21;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGTTOU: FridaLLDBSignal = 22;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGIO: FridaLLDBSignal = 23;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGXCPU: FridaLLDBSignal = 24;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGXFSZ: FridaLLDBSignal = 25;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGVTALRM: FridaLLDBSignal = 26;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGPROF: FridaLLDBSignal = 27;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGWINCH: FridaLLDBSignal = 28;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGINFO: FridaLLDBSignal = 29;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGUSR1: FridaLLDBSignal = 30;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_SIGUSR2: FridaLLDBSignal = 31;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_BAD_ACCESS: FridaLLDBSignal = 145;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_BAD_INSTRUCTION: FridaLLDBSignal = 146;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_ARITHMETIC: FridaLLDBSignal = 147;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_EMULATION: FridaLLDBSignal = 148;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_SOFTWARE: FridaLLDBSignal = 149;
pub const FridaLLDBSignal_FRIDA_LLDB_SIGNAL_TARGET_EXC_BREAKPOINT: FridaLLDBSignal = 150;
pub type FridaLLDBSignal = ::std::os::raw::c_uint;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_NONE:
    FridaLLDBMachExceptionType = 0;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_BAD_ACCESS:
    FridaLLDBMachExceptionType = 1;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_BAD_INSTRUCTION:
    FridaLLDBMachExceptionType = 2;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_ARITHMETIC:
    FridaLLDBMachExceptionType = 3;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_EMULATION:
    FridaLLDBMachExceptionType = 4;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_SOFTWARE:
    FridaLLDBMachExceptionType = 5;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_BREAKPOINT:
    FridaLLDBMachExceptionType = 6;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_SYSCALL:
    FridaLLDBMachExceptionType = 7;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_MACH_SYSCALL:
    FridaLLDBMachExceptionType = 8;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_RPC_ALERT:
    FridaLLDBMachExceptionType = 9;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_CRASH:
    FridaLLDBMachExceptionType = 10;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_RESOURCE:
    FridaLLDBMachExceptionType = 11;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_GUARD:
    FridaLLDBMachExceptionType = 12;
pub const FridaLLDBMachExceptionType_FRIDA_LLDB_MACH_EXCEPTION_TYPE_EXC_CORPSE_NOTIFY:
    FridaLLDBMachExceptionType = 13;
pub type FridaLLDBMachExceptionType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorTransaction {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorTransaction = _FridaFruityInjectorTransaction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorTransactionClass {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorTransactionClass = _FridaFruityInjectorTransactionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorGadgetDetails {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorGadgetDetails = _FridaFruityInjectorGadgetDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorGadgetDetailsClass {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorGadgetDetailsClass = _FridaFruityInjectorGadgetDetailsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorSession {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorSession = _FridaFruityInjectorSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityInjectorSessionClass {
    _unused: [u8; 0],
}
pub type FridaFruityInjectorSessionClass = _FridaFruityInjectorSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxClient {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxClient = _FridaFruityUsbmuxClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbmuxClientClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbmuxClientClass = _FridaFruityUsbmuxClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsPacketReader {
    _unused: [u8; 0],
}
pub type FridaFruityDnsPacketReader = _FridaFruityDnsPacketReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsPacketReaderClass {
    _unused: [u8; 0],
}
pub type FridaFruityDnsPacketReaderClass = _FridaFruityDnsPacketReaderClass;
pub type FridaFruityDnsResourceRecord = _FridaFruityDnsResourceRecord;
pub type FridaFruityDnsResourceRecordClass = _FridaFruityDnsResourceRecordClass;
pub type FridaFruityDnsPtrRecord = _FridaFruityDnsPtrRecord;
pub type FridaFruityDnsPtrRecordClass = _FridaFruityDnsPtrRecordClass;
pub type FridaFruityDnsTxtRecord = _FridaFruityDnsTxtRecord;
pub type FridaFruityDnsTxtRecordClass = _FridaFruityDnsTxtRecordClass;
pub type FridaFruityDnsAaaaRecord = _FridaFruityDnsAaaaRecord;
pub type FridaFruityDnsAaaaRecordClass = _FridaFruityDnsAaaaRecordClass;
pub type FridaFruityDnsSrvRecord = _FridaFruityDnsSrvRecord;
pub type FridaFruityDnsSrvRecordClass = _FridaFruityDnsSrvRecordClass;
pub type FridaFruityDnsResourceKey = _FridaFruityDnsResourceKey;
pub type FridaFruityDnsResourceKeyClass = _FridaFruityDnsResourceKeyClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsResourceRecordPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsResourceRecordPrivate = _FridaFruityDnsResourceRecordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsPtrRecordPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsPtrRecordPrivate = _FridaFruityDnsPtrRecordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsTxtRecordPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsTxtRecordPrivate = _FridaFruityDnsTxtRecordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsAaaaRecordPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsAaaaRecordPrivate = _FridaFruityDnsAaaaRecordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsSrvRecordPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsSrvRecordPrivate = _FridaFruityDnsSrvRecordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsResourceKeyPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityDnsResourceKeyPrivate = _FridaFruityDnsResourceKeyPrivate;
pub const FridaFruityDnsRecordType_FRIDA_FRUITY_DNS_RECORD_TYPE_PTR: FridaFruityDnsRecordType = 12;
pub const FridaFruityDnsRecordType_FRIDA_FRUITY_DNS_RECORD_TYPE_TXT: FridaFruityDnsRecordType = 16;
pub const FridaFruityDnsRecordType_FRIDA_FRUITY_DNS_RECORD_TYPE_AAAA: FridaFruityDnsRecordType = 28;
pub const FridaFruityDnsRecordType_FRIDA_FRUITY_DNS_RECORD_TYPE_SRV: FridaFruityDnsRecordType = 33;
pub type FridaFruityDnsRecordType = ::std::os::raw::c_uint;
pub const FridaFruityDnsRecordClass_FRIDA_FRUITY_DNS_RECORD_CLASS_IN: FridaFruityDnsRecordClass = 1;
pub type FridaFruityDnsRecordClass = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSObjectPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityNSObjectPrivate = _FridaFruityNSObjectPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSNumber {
    _unused: [u8; 0],
}
pub type FridaFruityNSNumber = _FridaFruityNSNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSNumberClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSNumberClass = _FridaFruityNSNumberClass;
pub const FridaFruityNSNumberKind_FRIDA_FRUITY_NS_NUMBER_KIND_BOOLEAN: FridaFruityNSNumberKind = 0;
pub const FridaFruityNSNumberKind_FRIDA_FRUITY_NS_NUMBER_KIND_INTEGER: FridaFruityNSNumberKind = 1;
pub const FridaFruityNSNumberKind_FRIDA_FRUITY_NS_NUMBER_KIND_FLOAT: FridaFruityNSNumberKind = 2;
pub const FridaFruityNSNumberKind_FRIDA_FRUITY_NS_NUMBER_KIND_DOUBLE: FridaFruityNSNumberKind = 3;
pub type FridaFruityNSNumberKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSString {
    _unused: [u8; 0],
}
pub type FridaFruityNSString = _FridaFruityNSString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSStringClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSStringClass = _FridaFruityNSStringClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSData {
    _unused: [u8; 0],
}
pub type FridaFruityNSData = _FridaFruityNSData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDataClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSDataClass = _FridaFruityNSDataClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDictionaryRaw {
    _unused: [u8; 0],
}
pub type FridaFruityNSDictionaryRaw = _FridaFruityNSDictionaryRaw;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDictionaryRawClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSDictionaryRawClass = _FridaFruityNSDictionaryRawClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSArray {
    _unused: [u8; 0],
}
pub type FridaFruityNSArray = _FridaFruityNSArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSArrayClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSArrayClass = _FridaFruityNSArrayClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDate {
    _unused: [u8; 0],
}
pub type FridaFruityNSDate = _FridaFruityNSDate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSDateClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSDateClass = _FridaFruityNSDateClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSError {
    _unused: [u8; 0],
}
pub type FridaFruityNSError = _FridaFruityNSError;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSErrorClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSErrorClass = _FridaFruityNSErrorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTTapMessage {
    _unused: [u8; 0],
}
pub type FridaFruityDTTapMessage = _FridaFruityDTTapMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTTapMessageClass {
    _unused: [u8; 0],
}
pub type FridaFruityDTTapMessageClass = _FridaFruityDTTapMessageClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSKeyedArchiveEncodingContext {
    _unused: [u8; 0],
}
pub type FridaFruityNSKeyedArchiveEncodingContext = _FridaFruityNSKeyedArchiveEncodingContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSKeyedArchiveEncodingContextClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSKeyedArchiveEncodingContextClass =
    _FridaFruityNSKeyedArchiveEncodingContextClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSKeyedArchiveDecodingContext {
    _unused: [u8; 0],
}
pub type FridaFruityNSKeyedArchiveDecodingContext = _FridaFruityNSKeyedArchiveDecodingContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSKeyedArchiveDecodingContextClass {
    _unused: [u8; 0],
}
pub type FridaFruityNSKeyedArchiveDecodingContextClass =
    _FridaFruityNSKeyedArchiveDecodingContextClass;
pub const FridaFruityPlistFormat_FRIDA_FRUITY_PLIST_FORMAT_AUTO: FridaFruityPlistFormat = 0;
pub const FridaFruityPlistFormat_FRIDA_FRUITY_PLIST_FORMAT_BINARY: FridaFruityPlistFormat = 1;
pub const FridaFruityPlistFormat_FRIDA_FRUITY_PLIST_FORMAT_XML: FridaFruityPlistFormat = 2;
pub type FridaFruityPlistFormat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistDictPrivate {
    _unused: [u8; 0],
}
pub type FridaFruityPlistDictPrivate = _FridaFruityPlistDictPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistArray {
    _unused: [u8; 0],
}
pub type FridaFruityPlistArray = _FridaFruityPlistArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistArrayClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistArrayClass = _FridaFruityPlistArrayClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistUid {
    _unused: [u8; 0],
}
pub type FridaFruityPlistUid = _FridaFruityPlistUid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistUidClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistUidClass = _FridaFruityPlistUidClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistNull {
    _unused: [u8; 0],
}
pub type FridaFruityPlistNull = _FridaFruityPlistNull;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistNullClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistNullClass = _FridaFruityPlistNullClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistDate {
    _unused: [u8; 0],
}
pub type FridaFruityPlistDate = _FridaFruityPlistDate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistDateClass {
    _unused: [u8; 0],
}
pub type FridaFruityPlistDateClass = _FridaFruityPlistDateClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityOpackBuilder {
    _unused: [u8; 0],
}
pub type FridaFruityOpackBuilder = _FridaFruityOpackBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityOpackBuilderClass {
    _unused: [u8; 0],
}
pub type FridaFruityOpackBuilderClass = _FridaFruityOpackBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityOpackParser {
    _unused: [u8; 0],
}
pub type FridaFruityOpackParser = _FridaFruityOpackParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityOpackParserClass {
    _unused: [u8; 0],
}
pub type FridaFruityOpackParserClass = _FridaFruityOpackParserClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruitySystemNetworkStack {
    _unused: [u8; 0],
}
pub type FridaFruitySystemNetworkStack = _FridaFruitySystemNetworkStack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruitySystemNetworkStackClass {
    _unused: [u8; 0],
}
pub type FridaFruitySystemNetworkStackClass = _FridaFruitySystemNetworkStackClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityVirtualNetworkStack {
    _unused: [u8; 0],
}
pub type FridaFruityVirtualNetworkStack = _FridaFruityVirtualNetworkStack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityVirtualNetworkStackClass {
    _unused: [u8; 0],
}
pub type FridaFruityVirtualNetworkStackClass = _FridaFruityVirtualNetworkStackClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbDevice {
    _unused: [u8; 0],
}
pub type FridaFruityUsbDevice = _FridaFruityUsbDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbDeviceClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbDeviceClass = _FridaFruityUsbDeviceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbNcmDriver {
    _unused: [u8; 0],
}
pub type FridaFruityUsbNcmDriver = _FridaFruityUsbNcmDriver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbNcmDriverClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbNcmDriverClass = _FridaFruityUsbNcmDriverClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbNcmConfig {
    _unused: [u8; 0],
}
pub type FridaFruityUsbNcmConfig = _FridaFruityUsbNcmConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityUsbNcmConfigClass {
    _unused: [u8; 0],
}
pub type FridaFruityUsbNcmConfigClass = _FridaFruityUsbNcmConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLinuxFruitFinder {
    _unused: [u8; 0],
}
pub type FridaFruityLinuxFruitFinder = _FridaFruityLinuxFruitFinder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLinuxFruitFinderClass {
    _unused: [u8; 0],
}
pub type FridaFruityLinuxFruitFinderClass = _FridaFruityLinuxFruitFinderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLinuxPairingBrowser {
    _unused: [u8; 0],
}
pub type FridaFruityLinuxPairingBrowser = _FridaFruityLinuxPairingBrowser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityLinuxPairingBrowserClass {
    _unused: [u8; 0],
}
pub type FridaFruityLinuxPairingBrowserClass = _FridaFruityLinuxPairingBrowserClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityResolvedManager {
    _unused: [u8; 0],
}
pub type FridaFruityResolvedManager = _FridaFruityResolvedManager;
pub type FridaFruityResolvedManagerIface = _FridaFruityResolvedManagerIface;
pub type FridaFruityResolvedRRItem = _FridaFruityResolvedRRItem;
pub type FridaFruityResolvedSrvItem = _FridaFruityResolvedSrvItem;
pub type FridaFruityResolvedSrvAddress = _FridaFruityResolvedSrvAddress;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_DNS: FridaFruityResolvedFlags = 1;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_LLMNR_IPV4:
    FridaFruityResolvedFlags = 2;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_LLMNR_IPV6:
    FridaFruityResolvedFlags = 4;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_MDNS_IPV4: FridaFruityResolvedFlags =
    8;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_MDNS_IPV6: FridaFruityResolvedFlags =
    16;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_CNAME: FridaFruityResolvedFlags =
    32;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_TXT: FridaFruityResolvedFlags =
    64;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_ADDRESS:
    FridaFruityResolvedFlags = 128;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_SEARCH: FridaFruityResolvedFlags =
    256;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_AUTHENTICATED:
    FridaFruityResolvedFlags = 512;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_VALIDATE:
    FridaFruityResolvedFlags = 1024;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_SYNTHESIZE:
    FridaFruityResolvedFlags = 2048;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_CACHE: FridaFruityResolvedFlags =
    4096;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_ZONE: FridaFruityResolvedFlags =
    8192;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_TRUST_ANCHOR:
    FridaFruityResolvedFlags = 16384;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_NETWORK:
    FridaFruityResolvedFlags = 32768;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_REQUIRE_PRIMARY:
    FridaFruityResolvedFlags = 65536;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_CLAMP_TTL: FridaFruityResolvedFlags =
    131072;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_CONFIDENTIAL:
    FridaFruityResolvedFlags = 262144;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_SYNTHETIC: FridaFruityResolvedFlags =
    524288;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_FROM_CACHE:
    FridaFruityResolvedFlags = 1048576;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_FROM_ZONE: FridaFruityResolvedFlags =
    2097152;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_FROM_TRUST_ANCHOR:
    FridaFruityResolvedFlags = 4194304;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_FROM_NETWORK:
    FridaFruityResolvedFlags = 8388608;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_NO_STALE: FridaFruityResolvedFlags =
    16777216;
pub const FridaFruityResolvedFlags_FRIDA_FRUITY_RESOLVED_FLAGS_RELAX_SINGLE_LABEL:
    FridaFruityResolvedFlags = 33554432;
pub type FridaFruityResolvedFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionBackend = _FridaDroidyHostSessionBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionBackendClass {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionBackendClass = _FridaDroidyHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionProvider = _FridaDroidyHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionProviderClass = _FridaDroidyHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyDeviceDetails {
    _unused: [u8; 0],
}
pub type FridaDroidyDeviceDetails = _FridaDroidyDeviceDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyDeviceDetailsClass {
    _unused: [u8; 0],
}
pub type FridaDroidyDeviceDetailsClass = _FridaDroidyDeviceDetailsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSession {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSession = _FridaDroidyHostSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionClass {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionClass = _FridaDroidyHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionHelperClient {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionHelperClient = _FridaDroidyHostSessionHelperClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyHostSessionHelperClientClass {
    _unused: [u8; 0],
}
pub type FridaDroidyHostSessionHelperClientClass = _FridaDroidyHostSessionHelperClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyDeviceTracker {
    _unused: [u8; 0],
}
pub type FridaDroidyDeviceTracker = _FridaDroidyDeviceTracker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyDeviceTrackerClass {
    _unused: [u8; 0],
}
pub type FridaDroidyDeviceTrackerClass = _FridaDroidyDeviceTrackerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyShellSession {
    _unused: [u8; 0],
}
pub type FridaDroidyShellSession = _FridaDroidyShellSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyShellSessionClass {
    _unused: [u8; 0],
}
pub type FridaDroidyShellSessionClass = _FridaDroidyShellSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyShellCommandResult {
    _unused: [u8; 0],
}
pub type FridaDroidyShellCommandResult = _FridaDroidyShellCommandResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyShellCommandResultClass {
    _unused: [u8; 0],
}
pub type FridaDroidyShellCommandResultClass = _FridaDroidyShellCommandResultClass;
pub const FridaDroidyStdioPipe_FRIDA_DROIDY_STDIO_PIPE_STDOUT: FridaDroidyStdioPipe = 0;
pub const FridaDroidyStdioPipe_FRIDA_DROIDY_STDIO_PIPE_STDERR: FridaDroidyStdioPipe = 1;
pub type FridaDroidyStdioPipe = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyFileMetadata {
    _unused: [u8; 0],
}
pub type FridaDroidyFileMetadata = _FridaDroidyFileMetadata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyFileMetadataClass {
    _unused: [u8; 0],
}
pub type FridaDroidyFileMetadataClass = _FridaDroidyFileMetadataClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyJDWPTracker {
    _unused: [u8; 0],
}
pub type FridaDroidyJDWPTracker = _FridaDroidyJDWPTracker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyJDWPTrackerClass {
    _unused: [u8; 0],
}
pub type FridaDroidyJDWPTrackerClass = _FridaDroidyJDWPTrackerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyClient {
    _unused: [u8; 0],
}
pub type FridaDroidyClient = _FridaDroidyClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyClientClass {
    _unused: [u8; 0],
}
pub type FridaDroidyClientClass = _FridaDroidyClientClass;
pub const FridaDroidyClientRequestType_FRIDA_DROIDY_CLIENT_REQUEST_TYPE_COMMAND:
    FridaDroidyClientRequestType = 0;
pub const FridaDroidyClientRequestType_FRIDA_DROIDY_CLIENT_REQUEST_TYPE_SYNC:
    FridaDroidyClientRequestType = 1;
pub const FridaDroidyClientRequestType_FRIDA_DROIDY_CLIENT_REQUEST_TYPE_DATA:
    FridaDroidyClientRequestType = 2;
pub const FridaDroidyClientRequestType_FRIDA_DROIDY_CLIENT_REQUEST_TYPE_PROTOCOL_CHANGE:
    FridaDroidyClientRequestType = 3;
pub type FridaDroidyClientRequestType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidySyncSession {
    _unused: [u8; 0],
}
pub type FridaDroidySyncSession = _FridaDroidySyncSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidySyncSessionClass {
    _unused: [u8; 0],
}
pub type FridaDroidySyncSessionClass = _FridaDroidySyncSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClient {
    _unused: [u8; 0],
}
pub type FridaJDWPClient = _FridaJDWPClient;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClientClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClientClass = _FridaJDWPClientClass;
pub const FridaJDWPClientState_FRIDA_JDWP_CLIENT_STATE_CREATED: FridaJDWPClientState = 0;
pub const FridaJDWPClientState_FRIDA_JDWP_CLIENT_STATE_READY: FridaJDWPClientState = 1;
pub const FridaJDWPClientState_FRIDA_JDWP_CLIENT_STATE_CLOSED: FridaJDWPClientState = 2;
pub type FridaJDWPClientState = ::std::os::raw::c_uint;
pub type FridaJDWPValue = _FridaJDWPValue;
pub type FridaJDWPValueClass = _FridaJDWPValueClass;
pub type FridaJDWPObject = _FridaJDWPObject;
pub type FridaJDWPObjectClass = _FridaJDWPObjectClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPString {
    _unused: [u8; 0],
}
pub type FridaJDWPString = _FridaJDWPString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPStringClass {
    _unused: [u8; 0],
}
pub type FridaJDWPStringClass = _FridaJDWPStringClass;
pub type FridaJDWPObjectID = _FridaJDWPObjectID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassInfo {
    _unused: [u8; 0],
}
pub type FridaJDWPClassInfo = _FridaJDWPClassInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassInfoClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassInfoClass = _FridaJDWPClassInfoClass;
pub type FridaJDWPReferenceTypeID = _FridaJDWPReferenceTypeID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodInfo {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodInfo = _FridaJDWPMethodInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodInfoClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodInfoClass = _FridaJDWPMethodInfoClass;
pub type FridaJDWPTaggedReferenceTypeID = _FridaJDWPTaggedReferenceTypeID;
pub const FridaJDWPTypeTag_FRIDA_JDWP_TYPE_TAG_CLASS: FridaJDWPTypeTag = 1;
pub const FridaJDWPTypeTag_FRIDA_JDWP_TYPE_TAG_INTERFACE: FridaJDWPTypeTag = 2;
pub const FridaJDWPTypeTag_FRIDA_JDWP_TYPE_TAG_ARRAY: FridaJDWPTypeTag = 3;
pub type FridaJDWPTypeTag = ::std::os::raw::c_uint;
pub type FridaJDWPThreadID = _FridaJDWPThreadID;
pub type FridaJDWPMethodID = _FridaJDWPMethodID;
pub const FridaJDWPInvokeOptions_FRIDA_JDWP_INVOKE_OPTIONS_INVOKE_SINGLE_THREADED:
    FridaJDWPInvokeOptions = 1;
pub const FridaJDWPInvokeOptions_FRIDA_JDWP_INVOKE_OPTIONS_INVOKE_NONVIRTUAL:
    FridaJDWPInvokeOptions = 2;
pub type FridaJDWPInvokeOptions = ::std::os::raw::c_uint;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_SINGLE_STEP: FridaJDWPEventKind = 1;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_BREAKPOINT: FridaJDWPEventKind = 2;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_FRAME_POP: FridaJDWPEventKind = 3;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_EXCEPTION: FridaJDWPEventKind = 4;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_USER_DEFINED: FridaJDWPEventKind = 5;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_THREAD_START: FridaJDWPEventKind = 6;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_THREAD_DEATH: FridaJDWPEventKind = 7;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_CLASS_PREPARE: FridaJDWPEventKind = 8;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_CLASS_UNLOAD: FridaJDWPEventKind = 9;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_CLASS_LOAD: FridaJDWPEventKind = 10;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_FIELD_ACCESS: FridaJDWPEventKind = 20;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_FIELD_MODIFICATION: FridaJDWPEventKind = 21;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_EXCEPTION_CATCH: FridaJDWPEventKind = 30;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_METHOD_ENTRY: FridaJDWPEventKind = 40;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_METHOD_EXIT: FridaJDWPEventKind = 41;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_METHOD_EXIT_WITH_RETURN_VALUE:
    FridaJDWPEventKind = 42;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_MONITOR_CONTENDED_ENTER: FridaJDWPEventKind = 43;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_MONITOR_CONTENDED_ENTERED: FridaJDWPEventKind =
    44;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_MONITOR_WAIT: FridaJDWPEventKind = 45;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_MONITOR_WAITED: FridaJDWPEventKind = 46;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_VM_START: FridaJDWPEventKind = 90;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_VM_DEATH: FridaJDWPEventKind = 99;
pub const FridaJDWPEventKind_FRIDA_JDWP_EVENT_KIND_VM_DISCONNECTED: FridaJDWPEventKind = 100;
pub type FridaJDWPEventKind = ::std::os::raw::c_uint;
pub const FridaJDWPSuspendPolicy_FRIDA_JDWP_SUSPEND_POLICY_NONE: FridaJDWPSuspendPolicy = 0;
pub const FridaJDWPSuspendPolicy_FRIDA_JDWP_SUSPEND_POLICY_EVENT_THREAD: FridaJDWPSuspendPolicy = 1;
pub const FridaJDWPSuspendPolicy_FRIDA_JDWP_SUSPEND_POLICY_ALL: FridaJDWPSuspendPolicy = 2;
pub type FridaJDWPSuspendPolicy = ::std::os::raw::c_uint;
pub type FridaJDWPEventModifier = _FridaJDWPEventModifier;
pub type FridaJDWPEventModifierClass = _FridaJDWPEventModifierClass;
pub type FridaJDWPEventRequestID = _FridaJDWPEventRequestID;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_BYTE: FridaJDWPValueTag = 66;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_CHAR: FridaJDWPValueTag = 67;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_DOUBLE: FridaJDWPValueTag = 68;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_FLOAT: FridaJDWPValueTag = 70;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_INT: FridaJDWPValueTag = 73;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_LONG: FridaJDWPValueTag = 74;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_OBJECT: FridaJDWPValueTag = 76;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_SHORT: FridaJDWPValueTag = 83;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_VOID: FridaJDWPValueTag = 86;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_BOOLEAN: FridaJDWPValueTag = 90;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_ARRAY: FridaJDWPValueTag = 91;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_CLASS_OBJECT: FridaJDWPValueTag = 99;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_THREAD_GROUP: FridaJDWPValueTag = 103;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_CLASS_LOADER: FridaJDWPValueTag = 108;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_STRING: FridaJDWPValueTag = 115;
pub const FridaJDWPValueTag_FRIDA_JDWP_VALUE_TAG_THREAD: FridaJDWPValueTag = 116;
pub type FridaJDWPValueTag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPValuePrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPValuePrivate = _FridaJDWPValuePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPByte {
    _unused: [u8; 0],
}
pub type FridaJDWPByte = _FridaJDWPByte;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPByteClass {
    _unused: [u8; 0],
}
pub type FridaJDWPByteClass = _FridaJDWPByteClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPChar {
    _unused: [u8; 0],
}
pub type FridaJDWPChar = _FridaJDWPChar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPCharClass {
    _unused: [u8; 0],
}
pub type FridaJDWPCharClass = _FridaJDWPCharClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPDouble {
    _unused: [u8; 0],
}
pub type FridaJDWPDouble = _FridaJDWPDouble;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPDoubleClass {
    _unused: [u8; 0],
}
pub type FridaJDWPDoubleClass = _FridaJDWPDoubleClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFloat {
    _unused: [u8; 0],
}
pub type FridaJDWPFloat = _FridaJDWPFloat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFloatClass {
    _unused: [u8; 0],
}
pub type FridaJDWPFloatClass = _FridaJDWPFloatClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPInt {
    _unused: [u8; 0],
}
pub type FridaJDWPInt = _FridaJDWPInt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPIntClass {
    _unused: [u8; 0],
}
pub type FridaJDWPIntClass = _FridaJDWPIntClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLong {
    _unused: [u8; 0],
}
pub type FridaJDWPLong = _FridaJDWPLong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLongClass {
    _unused: [u8; 0],
}
pub type FridaJDWPLongClass = _FridaJDWPLongClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPObjectPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPObjectPrivate = _FridaJDWPObjectPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPShort {
    _unused: [u8; 0],
}
pub type FridaJDWPShort = _FridaJDWPShort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPShortClass {
    _unused: [u8; 0],
}
pub type FridaJDWPShortClass = _FridaJDWPShortClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVoid {
    _unused: [u8; 0],
}
pub type FridaJDWPVoid = _FridaJDWPVoid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVoidClass {
    _unused: [u8; 0],
}
pub type FridaJDWPVoidClass = _FridaJDWPVoidClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPBoolean {
    _unused: [u8; 0],
}
pub type FridaJDWPBoolean = _FridaJDWPBoolean;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPBooleanClass {
    _unused: [u8; 0],
}
pub type FridaJDWPBooleanClass = _FridaJDWPBooleanClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPArray {
    _unused: [u8; 0],
}
pub type FridaJDWPArray = _FridaJDWPArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPArrayClass {
    _unused: [u8; 0],
}
pub type FridaJDWPArrayClass = _FridaJDWPArrayClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassObject {
    _unused: [u8; 0],
}
pub type FridaJDWPClassObject = _FridaJDWPClassObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassObjectClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassObjectClass = _FridaJDWPClassObjectClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadGroup {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadGroup = _FridaJDWPThreadGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadGroupClass {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadGroupClass = _FridaJDWPThreadGroupClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassLoader {
    _unused: [u8; 0],
}
pub type FridaJDWPClassLoader = _FridaJDWPClassLoader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassLoaderClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassLoaderClass = _FridaJDWPClassLoaderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThread {
    _unused: [u8; 0],
}
pub type FridaJDWPThread = _FridaJDWPThread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadClass {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadClass = _FridaJDWPThreadClass;
pub const FridaJDWPClassStatus_FRIDA_JDWP_CLASS_STATUS_VERIFIED: FridaJDWPClassStatus = 1;
pub const FridaJDWPClassStatus_FRIDA_JDWP_CLASS_STATUS_PREPARED: FridaJDWPClassStatus = 2;
pub const FridaJDWPClassStatus_FRIDA_JDWP_CLASS_STATUS_INITIALIZED: FridaJDWPClassStatus = 4;
pub const FridaJDWPClassStatus_FRIDA_JDWP_CLASS_STATUS_ERROR: FridaJDWPClassStatus = 8;
pub type FridaJDWPClassStatus = ::std::os::raw::c_uint;
pub type FridaJDWPTaggedObjectID = _FridaJDWPTaggedObjectID;
pub type FridaJDWPFieldID = _FridaJDWPFieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLocation {
    _unused: [u8; 0],
}
pub type FridaJDWPLocation = _FridaJDWPLocation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLocationClass {
    _unused: [u8; 0],
}
pub type FridaJDWPLocationClass = _FridaJDWPLocationClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEvents {
    _unused: [u8; 0],
}
pub type FridaJDWPEvents = _FridaJDWPEvents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventsClass {
    _unused: [u8; 0],
}
pub type FridaJDWPEventsClass = _FridaJDWPEventsClass;
pub type FridaJDWPEvent = _FridaJDWPEvent;
pub type FridaJDWPEventClass = _FridaJDWPEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPEventPrivate = _FridaJDWPEventPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPSingleStepEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPSingleStepEvent = _FridaJDWPSingleStepEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPSingleStepEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPSingleStepEventClass = _FridaJDWPSingleStepEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPBreakpointEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPBreakpointEvent = _FridaJDWPBreakpointEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPBreakpointEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPBreakpointEventClass = _FridaJDWPBreakpointEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFramePopEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPFramePopEvent = _FridaJDWPFramePopEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFramePopEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPFramePopEventClass = _FridaJDWPFramePopEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionEvent = _FridaJDWPExceptionEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionEventClass = _FridaJDWPExceptionEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPUserDefinedEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPUserDefinedEvent = _FridaJDWPUserDefinedEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPUserDefinedEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPUserDefinedEventClass = _FridaJDWPUserDefinedEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadStartEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadStartEvent = _FridaJDWPThreadStartEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadStartEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadStartEventClass = _FridaJDWPThreadStartEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadDeathEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadDeathEvent = _FridaJDWPThreadDeathEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadDeathEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadDeathEventClass = _FridaJDWPThreadDeathEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassPrepareEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPClassPrepareEvent = _FridaJDWPClassPrepareEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassPrepareEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassPrepareEventClass = _FridaJDWPClassPrepareEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassUnloadEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPClassUnloadEvent = _FridaJDWPClassUnloadEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassUnloadEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassUnloadEventClass = _FridaJDWPClassUnloadEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassLoadEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPClassLoadEvent = _FridaJDWPClassLoadEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassLoadEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassLoadEventClass = _FridaJDWPClassLoadEventClass;
pub type FridaJDWPFieldEvent = _FridaJDWPFieldEvent;
pub type FridaJDWPFieldEventClass = _FridaJDWPFieldEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldEventPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldEventPrivate = _FridaJDWPFieldEventPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldAccessEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldAccessEvent = _FridaJDWPFieldAccessEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldAccessEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldAccessEventClass = _FridaJDWPFieldAccessEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldModificationEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldModificationEvent = _FridaJDWPFieldModificationEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldModificationEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldModificationEventClass = _FridaJDWPFieldModificationEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionCatchEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionCatchEvent = _FridaJDWPExceptionCatchEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionCatchEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionCatchEventClass = _FridaJDWPExceptionCatchEventClass;
pub type FridaJDWPMethodEvent = _FridaJDWPMethodEvent;
pub type FridaJDWPMethodEventClass = _FridaJDWPMethodEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodEventPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodEventPrivate = _FridaJDWPMethodEventPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodEntryEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodEntryEvent = _FridaJDWPMethodEntryEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodEntryEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodEntryEventClass = _FridaJDWPMethodEntryEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodExitEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodExitEvent = _FridaJDWPMethodExitEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodExitEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodExitEventClass = _FridaJDWPMethodExitEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodExitWithReturnValueEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodExitWithReturnValueEvent = _FridaJDWPMethodExitWithReturnValueEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodExitWithReturnValueEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMethodExitWithReturnValueEventClass =
    _FridaJDWPMethodExitWithReturnValueEventClass;
pub type FridaJDWPMonitorEvent = _FridaJDWPMonitorEvent;
pub type FridaJDWPMonitorEventClass = _FridaJDWPMonitorEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorEventPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorEventPrivate = _FridaJDWPMonitorEventPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorContendedEnterEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorContendedEnterEvent = _FridaJDWPMonitorContendedEnterEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorContendedEnterEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorContendedEnterEventClass = _FridaJDWPMonitorContendedEnterEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorContendedEnteredEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorContendedEnteredEvent = _FridaJDWPMonitorContendedEnteredEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorContendedEnteredEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorContendedEnteredEventClass = _FridaJDWPMonitorContendedEnteredEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorWaitEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorWaitEvent = _FridaJDWPMonitorWaitEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorWaitEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorWaitEventClass = _FridaJDWPMonitorWaitEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorWaitedEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorWaitedEvent = _FridaJDWPMonitorWaitedEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorWaitedEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPMonitorWaitedEventClass = _FridaJDWPMonitorWaitedEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMStartEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPVMStartEvent = _FridaJDWPVMStartEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMStartEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPVMStartEventClass = _FridaJDWPVMStartEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMDeathEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPVMDeathEvent = _FridaJDWPVMDeathEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMDeathEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPVMDeathEventClass = _FridaJDWPVMDeathEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMDisconnectedEvent {
    _unused: [u8; 0],
}
pub type FridaJDWPVMDisconnectedEvent = _FridaJDWPVMDisconnectedEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPVMDisconnectedEventClass {
    _unused: [u8; 0],
}
pub type FridaJDWPVMDisconnectedEventClass = _FridaJDWPVMDisconnectedEventClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventModifierPrivate {
    _unused: [u8; 0],
}
pub type FridaJDWPEventModifierPrivate = _FridaJDWPEventModifierPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPPacketBuilder {
    _unused: [u8; 0],
}
pub type FridaJDWPPacketBuilder = _FridaJDWPPacketBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPPacketBuilderClass {
    _unused: [u8; 0],
}
pub type FridaJDWPPacketBuilderClass = _FridaJDWPPacketBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPCountModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPCountModifier = _FridaJDWPCountModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPCountModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPCountModifierClass = _FridaJDWPCountModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadOnlyModifier = _FridaJDWPThreadOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPThreadOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPThreadOnlyModifierClass = _FridaJDWPThreadOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPClassOnlyModifier = _FridaJDWPClassOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassOnlyModifierClass = _FridaJDWPClassOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassMatchModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPClassMatchModifier = _FridaJDWPClassMatchModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassMatchModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassMatchModifierClass = _FridaJDWPClassMatchModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassExcludeModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPClassExcludeModifier = _FridaJDWPClassExcludeModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPClassExcludeModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPClassExcludeModifierClass = _FridaJDWPClassExcludeModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLocationOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPLocationOnlyModifier = _FridaJDWPLocationOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPLocationOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPLocationOnlyModifierClass = _FridaJDWPLocationOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionOnlyModifier = _FridaJDWPExceptionOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPExceptionOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPExceptionOnlyModifierClass = _FridaJDWPExceptionOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldOnlyModifier = _FridaJDWPFieldOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPFieldOnlyModifierClass = _FridaJDWPFieldOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPStepModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPStepModifier = _FridaJDWPStepModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPStepModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPStepModifierClass = _FridaJDWPStepModifierClass;
pub const FridaJDWPStepSize_FRIDA_JDWP_STEP_SIZE_MIN: FridaJDWPStepSize = 0;
pub const FridaJDWPStepSize_FRIDA_JDWP_STEP_SIZE_LINE: FridaJDWPStepSize = 1;
pub type FridaJDWPStepSize = ::std::os::raw::c_uint;
pub const FridaJDWPStepDepth_FRIDA_JDWP_STEP_DEPTH_INTO: FridaJDWPStepDepth = 0;
pub const FridaJDWPStepDepth_FRIDA_JDWP_STEP_DEPTH_OVER: FridaJDWPStepDepth = 1;
pub const FridaJDWPStepDepth_FRIDA_JDWP_STEP_DEPTH_OUT: FridaJDWPStepDepth = 2;
pub type FridaJDWPStepDepth = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPInstanceOnlyModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPInstanceOnlyModifier = _FridaJDWPInstanceOnlyModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPInstanceOnlyModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPInstanceOnlyModifierClass = _FridaJDWPInstanceOnlyModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPSourceNameMatchModifier {
    _unused: [u8; 0],
}
pub type FridaJDWPSourceNameMatchModifier = _FridaJDWPSourceNameMatchModifier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPSourceNameMatchModifierClass {
    _unused: [u8; 0],
}
pub type FridaJDWPSourceNameMatchModifierClass = _FridaJDWPSourceNameMatchModifierClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPCommandBuilder {
    _unused: [u8; 0],
}
pub type FridaJDWPCommandBuilder = _FridaJDWPCommandBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPCommandBuilderClass {
    _unused: [u8; 0],
}
pub type FridaJDWPCommandBuilderClass = _FridaJDWPCommandBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPPacketReader {
    _unused: [u8; 0],
}
pub type FridaJDWPPacketReader = _FridaJDWPPacketReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPPacketReaderClass {
    _unused: [u8; 0],
}
pub type FridaJDWPPacketReaderClass = _FridaJDWPPacketReaderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPIDSizes {
    _unused: [u8; 0],
}
pub type FridaJDWPIDSizes = _FridaJDWPIDSizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPIDSizesClass {
    _unused: [u8; 0],
}
pub type FridaJDWPIDSizesClass = _FridaJDWPIDSizesClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyInjectorGadgetDetails {
    _unused: [u8; 0],
}
pub type FridaDroidyInjectorGadgetDetails = _FridaDroidyInjectorGadgetDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyInjectorGadgetDetailsClass {
    _unused: [u8; 0],
}
pub type FridaDroidyInjectorGadgetDetailsClass = _FridaDroidyInjectorGadgetDetailsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyInjectorSession {
    _unused: [u8; 0],
}
pub type FridaDroidyInjectorSession = _FridaDroidyInjectorSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaDroidyInjectorSessionClass {
    _unused: [u8; 0],
}
pub type FridaDroidyInjectorSessionClass = _FridaDroidyInjectorSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLElementTree {
    _unused: [u8; 0],
}
pub type FridaAXMLElementTree = _FridaAXMLElementTree;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLElementTreeClass {
    _unused: [u8; 0],
}
pub type FridaAXMLElementTreeClass = _FridaAXMLElementTreeClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLAttribute {
    _unused: [u8; 0],
}
pub type FridaAXMLAttribute = _FridaAXMLAttribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLAttributeClass {
    _unused: [u8; 0],
}
pub type FridaAXMLAttributeClass = _FridaAXMLAttributeClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLResourceValue {
    _unused: [u8; 0],
}
pub type FridaAXMLResourceValue = _FridaAXMLResourceValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLResourceValueClass {
    _unused: [u8; 0],
}
pub type FridaAXMLResourceValueClass = _FridaAXMLResourceValueClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLResourceMap {
    _unused: [u8; 0],
}
pub type FridaAXMLResourceMap = _FridaAXMLResourceMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLResourceMapClass {
    _unused: [u8; 0],
}
pub type FridaAXMLResourceMapClass = _FridaAXMLResourceMapClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLStringPool {
    _unused: [u8; 0],
}
pub type FridaAXMLStringPool = _FridaAXMLStringPool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaAXMLStringPoolClass {
    _unused: [u8; 0],
}
pub type FridaAXMLStringPoolClass = _FridaAXMLStringPoolClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSocketHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaSocketHostSessionBackend = _FridaSocketHostSessionBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSocketHostSessionBackendClass {
    _unused: [u8; 0],
}
pub type FridaSocketHostSessionBackendClass = _FridaSocketHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSocketHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaSocketHostSessionProvider = _FridaSocketHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSocketHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaSocketHostSessionProviderClass = _FridaSocketHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSessionBackend {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSessionBackend = _FridaBareboneHostSessionBackend;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSessionBackendClass {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSessionBackendClass = _FridaBareboneHostSessionBackendClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSessionProvider {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSessionProvider = _FridaBareboneHostSessionProvider;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSessionProviderClass {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSessionProviderClass = _FridaBareboneHostSessionProviderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSession {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSession = _FridaBareboneHostSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneHostSessionClass {
    _unused: [u8; 0],
}
pub type FridaBareboneHostSessionClass = _FridaBareboneHostSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneServices {
    _unused: [u8; 0],
}
pub type FridaBareboneServices = _FridaBareboneServices;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneServicesClass {
    _unused: [u8; 0],
}
pub type FridaBareboneServicesClass = _FridaBareboneServicesClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAgentSession {
    _unused: [u8; 0],
}
pub type FridaBareboneAgentSession = _FridaBareboneAgentSession;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAgentSessionClass {
    _unused: [u8; 0],
}
pub type FridaBareboneAgentSessionClass = _FridaBareboneAgentSessionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneMachine {
    _unused: [u8; 0],
}
pub type FridaBareboneMachine = _FridaBareboneMachine;
pub type FridaBareboneMachineIface = _FridaBareboneMachineIface;
pub type FridaBareboneRangeDetails = _FridaBareboneRangeDetails;
pub type FridaBareboneRangeDetailsClass = _FridaBareboneRangeDetailsClass;
pub type FridaBareboneFoundRangeFunc = ::std::option::Option<
    unsafe extern "C" fn(details: *mut FridaBareboneRangeDetails, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAllocation {
    _unused: [u8; 0],
}
pub type FridaBareboneAllocation = _FridaBareboneAllocation;
pub type FridaBareboneAllocationIface = _FridaBareboneAllocationIface;
pub type FridaBareboneMatchPattern = _FridaBareboneMatchPattern;
pub type FridaBareboneMatchPatternClass = _FridaBareboneMatchPatternClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCallFrame {
    _unused: [u8; 0],
}
pub type FridaBareboneCallFrame = _FridaBareboneCallFrame;
pub type FridaBareboneCallFrameIface = _FridaBareboneCallFrameIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAllocator {
    _unused: [u8; 0],
}
pub type FridaBareboneAllocator = _FridaBareboneAllocator;
pub type FridaBareboneAllocatorIface = _FridaBareboneAllocatorIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInlineHook {
    _unused: [u8; 0],
}
pub type FridaBareboneInlineHook = _FridaBareboneInlineHook;
pub type FridaBareboneInlineHookIface = _FridaBareboneInlineHookIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInterceptor {
    _unused: [u8; 0],
}
pub type FridaBareboneInterceptor = _FridaBareboneInterceptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInterceptorClass {
    _unused: [u8; 0],
}
pub type FridaBareboneInterceptorClass = _FridaBareboneInterceptorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneConfig {
    _unused: [u8; 0],
}
pub type FridaBareboneConfig = _FridaBareboneConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneConfigClass {
    _unused: [u8; 0],
}
pub type FridaBareboneConfigClass = _FridaBareboneConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneConnectionConfig {
    _unused: [u8; 0],
}
pub type FridaBareboneConnectionConfig = _FridaBareboneConnectionConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneConnectionConfigClass {
    _unused: [u8; 0],
}
pub type FridaBareboneConnectionConfigClass = _FridaBareboneConnectionConfigClass;
pub type FridaBareboneAllocatorConfig = _FridaBareboneAllocatorConfig;
pub type FridaBareboneAllocatorConfigClass = _FridaBareboneAllocatorConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAllocatorConfigPrivate {
    _unused: [u8; 0],
}
pub type FridaBareboneAllocatorConfigPrivate = _FridaBareboneAllocatorConfigPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneNoAllocatorConfig {
    _unused: [u8; 0],
}
pub type FridaBareboneNoAllocatorConfig = _FridaBareboneNoAllocatorConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneNoAllocatorConfigClass {
    _unused: [u8; 0],
}
pub type FridaBareboneNoAllocatorConfigClass = _FridaBareboneNoAllocatorConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBarebonePhysicalAllocatorConfig {
    _unused: [u8; 0],
}
pub type FridaBarebonePhysicalAllocatorConfig = _FridaBarebonePhysicalAllocatorConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBarebonePhysicalAllocatorConfigClass {
    _unused: [u8; 0],
}
pub type FridaBarebonePhysicalAllocatorConfigClass = _FridaBarebonePhysicalAllocatorConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneTargetFunctionsAllocatorConfig {
    _unused: [u8; 0],
}
pub type FridaBareboneTargetFunctionsAllocatorConfig = _FridaBareboneTargetFunctionsAllocatorConfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneTargetFunctionsAllocatorConfigClass {
    _unused: [u8; 0],
}
pub type FridaBareboneTargetFunctionsAllocatorConfigClass =
    _FridaBareboneTargetFunctionsAllocatorConfigClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneScript {
    _unused: [u8; 0],
}
pub type FridaBareboneScript = _FridaBareboneScript;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneScriptClass {
    _unused: [u8; 0],
}
pub type FridaBareboneScriptClass = _FridaBareboneScriptClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneRangeDetailsPrivate {
    _unused: [u8; 0],
}
pub type FridaBareboneRangeDetailsPrivate = _FridaBareboneRangeDetailsPrivate;
pub const FridaBareboneMappingType_FRIDA_BAREBONE_MAPPING_TYPE_UNKNOWN: FridaBareboneMappingType =
    0;
pub const FridaBareboneMappingType_FRIDA_BAREBONE_MAPPING_TYPE_MEMORY: FridaBareboneMappingType = 1;
pub const FridaBareboneMappingType_FRIDA_BAREBONE_MAPPING_TYPE_DEVICE: FridaBareboneMappingType = 2;
pub type FridaBareboneMappingType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneNullAllocator {
    _unused: [u8; 0],
}
pub type FridaBareboneNullAllocator = _FridaBareboneNullAllocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneNullAllocatorClass {
    _unused: [u8; 0],
}
pub type FridaBareboneNullAllocatorClass = _FridaBareboneNullAllocatorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBarebonePhysicalAllocator {
    _unused: [u8; 0],
}
pub type FridaBarebonePhysicalAllocator = _FridaBarebonePhysicalAllocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBarebonePhysicalAllocatorClass {
    _unused: [u8; 0],
}
pub type FridaBarebonePhysicalAllocatorClass = _FridaBarebonePhysicalAllocatorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneTargetFunctionsAllocator {
    _unused: [u8; 0],
}
pub type FridaBareboneTargetFunctionsAllocator = _FridaBareboneTargetFunctionsAllocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneTargetFunctionsAllocatorClass {
    _unused: [u8; 0],
}
pub type FridaBareboneTargetFunctionsAllocatorClass = _FridaBareboneTargetFunctionsAllocatorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCallback {
    _unused: [u8; 0],
}
pub type FridaBareboneCallback = _FridaBareboneCallback;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCallbackClass {
    _unused: [u8; 0],
}
pub type FridaBareboneCallbackClass = _FridaBareboneCallbackClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCallbackHandler {
    _unused: [u8; 0],
}
pub type FridaBareboneCallbackHandler = _FridaBareboneCallbackHandler;
pub type FridaBareboneCallbackHandlerIface = _FridaBareboneCallbackHandlerIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneMatchPatternPrivate {
    _unused: [u8; 0],
}
pub type FridaBareboneMatchPatternPrivate = _FridaBareboneMatchPatternPrivate;
pub type FridaBareboneMatchToken = _FridaBareboneMatchToken;
pub type FridaBareboneMatchTokenClass = _FridaBareboneMatchTokenClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneMatchTokenPrivate {
    _unused: [u8; 0],
}
pub type FridaBareboneMatchTokenPrivate = _FridaBareboneMatchTokenPrivate;
pub const FridaBareboneMatchTokenKind_FRIDA_BAREBONE_MATCH_TOKEN_KIND_EXACT:
    FridaBareboneMatchTokenKind = 0;
pub const FridaBareboneMatchTokenKind_FRIDA_BAREBONE_MATCH_TOKEN_KIND_WILDCARD:
    FridaBareboneMatchTokenKind = 1;
pub const FridaBareboneMatchTokenKind_FRIDA_BAREBONE_MATCH_TOKEN_KIND_MASK:
    FridaBareboneMatchTokenKind = 2;
pub type FridaBareboneMatchTokenKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneBreakpointInvocationListener {
    _unused: [u8; 0],
}
pub type FridaBareboneBreakpointInvocationListener = _FridaBareboneBreakpointInvocationListener;
pub type FridaBareboneBreakpointInvocationListenerIface =
    _FridaBareboneBreakpointInvocationListenerIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInvocationListener {
    _unused: [u8; 0],
}
pub type FridaBareboneInvocationListener = _FridaBareboneInvocationListener;
pub type FridaBareboneInvocationListenerIface = _FridaBareboneInvocationListenerIface;
pub const FridaBareboneInvocationListenerKind_FRIDA_BAREBONE_INVOCATION_LISTENER_KIND_CALL:
    FridaBareboneInvocationListenerKind = 0;
pub const FridaBareboneInvocationListenerKind_FRIDA_BAREBONE_INVOCATION_LISTENER_KIND_PROBE:
    FridaBareboneInvocationListenerKind = 1;
pub type FridaBareboneInvocationListenerKind = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInvocationContext {
    _unused: [u8; 0],
}
pub type FridaBareboneInvocationContext = _FridaBareboneInvocationContext;
pub type FridaBareboneInvocationContextIface = _FridaBareboneInvocationContextIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneInlineInvocationListener {
    _unused: [u8; 0],
}
pub type FridaBareboneInlineInvocationListener = _FridaBareboneInlineInvocationListener;
pub type FridaBareboneInlineInvocationListenerIface = _FridaBareboneInlineInvocationListenerIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCModule {
    _unused: [u8; 0],
}
pub type FridaBareboneCModule = _FridaBareboneCModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneCModuleClass {
    _unused: [u8; 0],
}
pub type FridaBareboneCModuleClass = _FridaBareboneCModuleClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneRustModule {
    _unused: [u8; 0],
}
pub type FridaBareboneRustModule = _FridaBareboneRustModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneRustModuleClass {
    _unused: [u8; 0],
}
pub type FridaBareboneRustModuleClass = _FridaBareboneRustModuleClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneIA32Machine {
    _unused: [u8; 0],
}
pub type FridaBareboneIA32Machine = _FridaBareboneIA32Machine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneIA32MachineClass {
    _unused: [u8; 0],
}
pub type FridaBareboneIA32MachineClass = _FridaBareboneIA32MachineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneX64Machine {
    _unused: [u8; 0],
}
pub type FridaBareboneX64Machine = _FridaBareboneX64Machine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneX64MachineClass {
    _unused: [u8; 0],
}
pub type FridaBareboneX64MachineClass = _FridaBareboneX64MachineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneArmMachine {
    _unused: [u8; 0],
}
pub type FridaBareboneArmMachine = _FridaBareboneArmMachine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneArmMachineClass {
    _unused: [u8; 0],
}
pub type FridaBareboneArmMachineClass = _FridaBareboneArmMachineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneArm64Machine {
    _unused: [u8; 0],
}
pub type FridaBareboneArm64Machine = _FridaBareboneArm64Machine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneArm64MachineClass {
    _unused: [u8; 0],
}
pub type FridaBareboneArm64MachineClass = _FridaBareboneArm64MachineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneUnknownMachine {
    _unused: [u8; 0],
}
pub type FridaBareboneUnknownMachine = _FridaBareboneUnknownMachine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneUnknownMachineClass {
    _unused: [u8; 0],
}
pub type FridaBareboneUnknownMachineClass = _FridaBareboneUnknownMachineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCompiler {
    _unused: [u8; 0],
}
pub type FridaCompiler = _FridaCompiler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCompilerClass {
    _unused: [u8; 0],
}
pub type FridaCompilerClass = _FridaCompilerClass;
pub type FridaCompilerOptions = _FridaCompilerOptions;
pub type FridaCompilerOptionsClass = _FridaCompilerOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBuildOptions {
    _unused: [u8; 0],
}
pub type FridaBuildOptions = _FridaBuildOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBuildOptionsClass {
    _unused: [u8; 0],
}
pub type FridaBuildOptionsClass = _FridaBuildOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWatchOptions {
    _unused: [u8; 0],
}
pub type FridaWatchOptions = _FridaWatchOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaWatchOptionsClass {
    _unused: [u8; 0],
}
pub type FridaWatchOptionsClass = _FridaWatchOptionsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCompilerOptionsPrivate {
    _unused: [u8; 0],
}
pub type FridaCompilerOptionsPrivate = _FridaCompilerOptionsPrivate;
pub const FridaOutputFormat_FRIDA_OUTPUT_FORMAT_UNESCAPED: FridaOutputFormat = 0;
pub const FridaOutputFormat_FRIDA_OUTPUT_FORMAT_HEX_BYTES: FridaOutputFormat = 1;
pub const FridaOutputFormat_FRIDA_OUTPUT_FORMAT_C_STRING: FridaOutputFormat = 2;
pub type FridaOutputFormat = ::std::os::raw::c_uint;
pub const FridaBundleFormat_FRIDA_BUNDLE_FORMAT_ESM: FridaBundleFormat = 0;
pub const FridaBundleFormat_FRIDA_BUNDLE_FORMAT_IIFE: FridaBundleFormat = 1;
pub type FridaBundleFormat = ::std::os::raw::c_uint;
pub const FridaTypeCheckMode_FRIDA_TYPE_CHECK_MODE_FULL: FridaTypeCheckMode = 0;
pub const FridaTypeCheckMode_FRIDA_TYPE_CHECK_MODE_NONE: FridaTypeCheckMode = 1;
pub type FridaTypeCheckMode = ::std::os::raw::c_uint;
pub const FridaSourceMaps_FRIDA_SOURCE_MAPS_INCLUDED: FridaSourceMaps = 0;
pub const FridaSourceMaps_FRIDA_SOURCE_MAPS_OMITTED: FridaSourceMaps = 1;
pub type FridaSourceMaps = ::std::os::raw::c_uint;
pub const FridaJsCompression_FRIDA_JS_COMPRESSION_NONE: FridaJsCompression = 0;
pub const FridaJsCompression_FRIDA_JS_COMPRESSION_TERSER: FridaJsCompression = 1;
pub type FridaJsCompression = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaInjectorIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub inject_library_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            pid: guint,
            path: *const gchar,
            entrypoint: *const gchar,
            data: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_file_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub inject_library_blob: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            pid: guint,
            blob: *mut GBytes,
            entrypoint: *const gchar,
            data: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub inject_library_blob_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub demonitor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub demonitor_and_clone_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub demonitor_and_clone_state_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub recreate_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            pid: guint,
            id: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub recreate_thread_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInjector,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaInjectorIface"][::std::mem::size_of::<_FridaInjectorIface>() - 112usize];
    ["Alignment of _FridaInjectorIface"][::std::mem::align_of::<_FridaInjectorIface>() - 8usize];
    ["Offset of field: _FridaInjectorIface::parent_iface"]
        [::std::mem::offset_of!(_FridaInjectorIface, parent_iface) - 0usize];
    ["Offset of field: _FridaInjectorIface::close"]
        [::std::mem::offset_of!(_FridaInjectorIface, close) - 16usize];
    ["Offset of field: _FridaInjectorIface::close_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, close_finish) - 24usize];
    ["Offset of field: _FridaInjectorIface::inject_library_file"]
        [::std::mem::offset_of!(_FridaInjectorIface, inject_library_file) - 32usize];
    ["Offset of field: _FridaInjectorIface::inject_library_file_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, inject_library_file_finish) - 40usize];
    ["Offset of field: _FridaInjectorIface::inject_library_blob"]
        [::std::mem::offset_of!(_FridaInjectorIface, inject_library_blob) - 48usize];
    ["Offset of field: _FridaInjectorIface::inject_library_blob_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, inject_library_blob_finish) - 56usize];
    ["Offset of field: _FridaInjectorIface::demonitor"]
        [::std::mem::offset_of!(_FridaInjectorIface, demonitor) - 64usize];
    ["Offset of field: _FridaInjectorIface::demonitor_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, demonitor_finish) - 72usize];
    ["Offset of field: _FridaInjectorIface::demonitor_and_clone_state"]
        [::std::mem::offset_of!(_FridaInjectorIface, demonitor_and_clone_state) - 80usize];
    ["Offset of field: _FridaInjectorIface::demonitor_and_clone_state_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, demonitor_and_clone_state_finish) - 88usize];
    ["Offset of field: _FridaInjectorIface::recreate_thread"]
        [::std::mem::offset_of!(_FridaInjectorIface, recreate_thread) - 96usize];
    ["Offset of field: _FridaInjectorIface::recreate_thread_finish"]
        [::std::mem::offset_of!(_FridaInjectorIface, recreate_thread_finish) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageSearchOptions {
    pub parent_instance: GObject,
    pub priv_: *mut FridaPackageSearchOptionsPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPackageSearchOptions"]
        [::std::mem::size_of::<_FridaPackageSearchOptions>() - 32usize];
    ["Alignment of _FridaPackageSearchOptions"]
        [::std::mem::align_of::<_FridaPackageSearchOptions>() - 8usize];
    ["Offset of field: _FridaPackageSearchOptions::parent_instance"]
        [::std::mem::offset_of!(_FridaPackageSearchOptions, parent_instance) - 0usize];
    ["Offset of field: _FridaPackageSearchOptions::priv_"]
        [::std::mem::offset_of!(_FridaPackageSearchOptions, priv_) - 24usize];
};
impl Default for _FridaPackageSearchOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageSearchOptionsClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPackageSearchOptionsClass"]
        [::std::mem::size_of::<_FridaPackageSearchOptionsClass>() - 136usize];
    ["Alignment of _FridaPackageSearchOptionsClass"]
        [::std::mem::align_of::<_FridaPackageSearchOptionsClass>() - 8usize];
    ["Offset of field: _FridaPackageSearchOptionsClass::parent_class"]
        [::std::mem::offset_of!(_FridaPackageSearchOptionsClass, parent_class) - 0usize];
};
impl Default for _FridaPackageSearchOptionsClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageInstallOptions {
    pub parent_instance: GObject,
    pub priv_: *mut FridaPackageInstallOptionsPrivate,
    pub specs: *mut GeeList,
    pub omits: *mut GeeSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPackageInstallOptions"]
        [::std::mem::size_of::<_FridaPackageInstallOptions>() - 48usize];
    ["Alignment of _FridaPackageInstallOptions"]
        [::std::mem::align_of::<_FridaPackageInstallOptions>() - 8usize];
    ["Offset of field: _FridaPackageInstallOptions::parent_instance"]
        [::std::mem::offset_of!(_FridaPackageInstallOptions, parent_instance) - 0usize];
    ["Offset of field: _FridaPackageInstallOptions::priv_"]
        [::std::mem::offset_of!(_FridaPackageInstallOptions, priv_) - 24usize];
    ["Offset of field: _FridaPackageInstallOptions::specs"]
        [::std::mem::offset_of!(_FridaPackageInstallOptions, specs) - 32usize];
    ["Offset of field: _FridaPackageInstallOptions::omits"]
        [::std::mem::offset_of!(_FridaPackageInstallOptions, omits) - 40usize];
};
impl Default for _FridaPackageInstallOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaPackageInstallOptionsClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPackageInstallOptionsClass"]
        [::std::mem::size_of::<_FridaPackageInstallOptionsClass>() - 136usize];
    ["Alignment of _FridaPackageInstallOptionsClass"]
        [::std::mem::align_of::<_FridaPackageInstallOptionsClass>() - 8usize];
    ["Offset of field: _FridaPackageInstallOptionsClass::parent_class"]
        [::std::mem::offset_of!(_FridaPackageInstallOptionsClass, parent_class) - 0usize];
};
impl Default for _FridaPackageInstallOptionsClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHostSessionBackendIface {
    pub parent_iface: GTypeInterface,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionBackend,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub start_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionBackend,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionBackend,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub stop_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionBackend,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostSessionBackendIface"]
        [::std::mem::size_of::<_FridaHostSessionBackendIface>() - 48usize];
    ["Alignment of _FridaHostSessionBackendIface"]
        [::std::mem::align_of::<_FridaHostSessionBackendIface>() - 8usize];
    ["Offset of field: _FridaHostSessionBackendIface::parent_iface"]
        [::std::mem::offset_of!(_FridaHostSessionBackendIface, parent_iface) - 0usize];
    ["Offset of field: _FridaHostSessionBackendIface::start"]
        [::std::mem::offset_of!(_FridaHostSessionBackendIface, start) - 16usize];
    ["Offset of field: _FridaHostSessionBackendIface::start_finish"]
        [::std::mem::offset_of!(_FridaHostSessionBackendIface, start_finish) - 24usize];
    ["Offset of field: _FridaHostSessionBackendIface::stop"]
        [::std::mem::offset_of!(_FridaHostSessionBackendIface, stop) - 32usize];
    ["Offset of field: _FridaHostSessionBackendIface::stop_finish"]
        [::std::mem::offset_of!(_FridaHostSessionBackendIface, stop_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHostSessionProviderIface {
    pub parent_iface: GTypeInterface,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            options: *mut FridaHostSessionOptions,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub create_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaHostSession,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            session: *mut FridaHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub destroy_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub link_agent_session: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaAgentSessionId,
            sink: *mut FridaAgentMessageSink,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub link_agent_session_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaAgentSession,
    >,
    pub unlink_agent_session: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaAgentSessionId,
        ),
    >,
    pub link_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaChannelId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub link_channel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub unlink_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaChannelId,
        ),
    >,
    pub link_service_session: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaServiceSessionId,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub link_service_session_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaServiceSession,
    >,
    pub unlink_service_session: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostSessionProvider,
            host_session: *mut FridaHostSession,
            id: *mut FridaServiceSessionId,
        ),
    >,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaHostSessionProvider) -> *const gchar,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaHostSessionProvider) -> *const gchar,
    >,
    pub get_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaHostSessionProvider) -> *mut GVariant,
    >,
    pub get_kind: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaHostSessionProvider) -> FridaHostSessionProviderKind,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostSessionProviderIface"]
        [::std::mem::size_of::<_FridaHostSessionProviderIface>() - 152usize];
    ["Alignment of _FridaHostSessionProviderIface"]
        [::std::mem::align_of::<_FridaHostSessionProviderIface>() - 8usize];
    ["Offset of field: _FridaHostSessionProviderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaHostSessionProviderIface::create"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, create) - 16usize];
    ["Offset of field: _FridaHostSessionProviderIface::create_finish"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, create_finish) - 24usize];
    ["Offset of field: _FridaHostSessionProviderIface::destroy"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, destroy) - 32usize];
    ["Offset of field: _FridaHostSessionProviderIface::destroy_finish"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, destroy_finish) - 40usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_agent_session"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, link_agent_session) - 48usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_agent_session_finish"][::std::mem::offset_of!(
        _FridaHostSessionProviderIface,
        link_agent_session_finish
    ) - 56usize];
    ["Offset of field: _FridaHostSessionProviderIface::unlink_agent_session"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, unlink_agent_session) - 64usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_channel"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, link_channel) - 72usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_channel_finish"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, link_channel_finish) - 80usize];
    ["Offset of field: _FridaHostSessionProviderIface::unlink_channel"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, unlink_channel) - 88usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_service_session"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, link_service_session) - 96usize];
    ["Offset of field: _FridaHostSessionProviderIface::link_service_session_finish"][::std::mem::offset_of!(
        _FridaHostSessionProviderIface,
        link_service_session_finish
    ) - 104usize];
    ["Offset of field: _FridaHostSessionProviderIface::unlink_service_session"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, unlink_service_session) - 112usize];
    ["Offset of field: _FridaHostSessionProviderIface::get_id"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, get_id) - 120usize];
    ["Offset of field: _FridaHostSessionProviderIface::get_name"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, get_name) - 128usize];
    ["Offset of field: _FridaHostSessionProviderIface::get_icon"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, get_icon) - 136usize];
    ["Offset of field: _FridaHostSessionProviderIface::get_kind"]
        [::std::mem::offset_of!(_FridaHostSessionProviderIface, get_kind) - 144usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaHostChannelProviderIface {
    pub parent_iface: GTypeInterface,
    pub open_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostChannelProvider,
            address: *const gchar,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_channel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaHostChannelProvider,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaHostChannelProviderIface"]
        [::std::mem::size_of::<_FridaHostChannelProviderIface>() - 32usize];
    ["Alignment of _FridaHostChannelProviderIface"]
        [::std::mem::align_of::<_FridaHostChannelProviderIface>() - 8usize];
    ["Offset of field: _FridaHostChannelProviderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaHostChannelProviderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaHostChannelProviderIface::open_channel"]
        [::std::mem::offset_of!(_FridaHostChannelProviderIface, open_channel) - 16usize];
    ["Offset of field: _FridaHostChannelProviderIface::open_channel_finish"]
        [::std::mem::offset_of!(_FridaHostChannelProviderIface, open_channel_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaPairableIface {
    pub parent_iface: GTypeInterface,
    pub unpair: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaPairable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub unpair_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaPairable,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaPairableIface"][::std::mem::size_of::<_FridaPairableIface>() - 32usize];
    ["Alignment of _FridaPairableIface"][::std::mem::align_of::<_FridaPairableIface>() - 8usize];
    ["Offset of field: _FridaPairableIface::parent_iface"]
        [::std::mem::offset_of!(_FridaPairableIface, parent_iface) - 0usize];
    ["Offset of field: _FridaPairableIface::unpair"]
        [::std::mem::offset_of!(_FridaPairableIface, unpair) - 16usize];
    ["Offset of field: _FridaPairableIface::unpair_finish"]
        [::std::mem::offset_of!(_FridaPairableIface, unpair_finish) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionBackend {
    pub parent_instance: GObject,
    pub priv_: *mut FridaLocalHostSessionBackendPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSessionBackend"]
        [::std::mem::size_of::<_FridaLocalHostSessionBackend>() - 32usize];
    ["Alignment of _FridaLocalHostSessionBackend"]
        [::std::mem::align_of::<_FridaLocalHostSessionBackend>() - 8usize];
    ["Offset of field: _FridaLocalHostSessionBackend::parent_instance"]
        [::std::mem::offset_of!(_FridaLocalHostSessionBackend, parent_instance) - 0usize];
    ["Offset of field: _FridaLocalHostSessionBackend::priv_"]
        [::std::mem::offset_of!(_FridaLocalHostSessionBackend, priv_) - 24usize];
};
impl Default for _FridaLocalHostSessionBackend {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionBackendClass {
    pub parent_class: GObjectClass,
    pub make_provider: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSessionBackend,
        ) -> *mut FridaLocalHostSessionProvider,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSessionBackendClass"]
        [::std::mem::size_of::<_FridaLocalHostSessionBackendClass>() - 144usize];
    ["Alignment of _FridaLocalHostSessionBackendClass"]
        [::std::mem::align_of::<_FridaLocalHostSessionBackendClass>() - 8usize];
    ["Offset of field: _FridaLocalHostSessionBackendClass::parent_class"]
        [::std::mem::offset_of!(_FridaLocalHostSessionBackendClass, parent_class) - 0usize];
    ["Offset of field: _FridaLocalHostSessionBackendClass::make_provider"]
        [::std::mem::offset_of!(_FridaLocalHostSessionBackendClass, make_provider) - 136usize];
};
impl Default for _FridaLocalHostSessionBackendClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionProvider {
    pub parent_instance: GObject,
    pub priv_: *mut FridaLocalHostSessionProviderPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSessionProvider"]
        [::std::mem::size_of::<_FridaLocalHostSessionProvider>() - 32usize];
    ["Alignment of _FridaLocalHostSessionProvider"]
        [::std::mem::align_of::<_FridaLocalHostSessionProvider>() - 8usize];
    ["Offset of field: _FridaLocalHostSessionProvider::parent_instance"]
        [::std::mem::offset_of!(_FridaLocalHostSessionProvider, parent_instance) - 0usize];
    ["Offset of field: _FridaLocalHostSessionProvider::priv_"]
        [::std::mem::offset_of!(_FridaLocalHostSessionProvider, priv_) - 24usize];
};
impl Default for _FridaLocalHostSessionProvider {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionProviderClass {
    pub parent_class: GObjectClass,
    pub make_host_session: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSessionProvider,
            options: *mut FridaHostSessionOptions,
            error: *mut *mut GError,
        ) -> *mut FridaLocalHostSession,
    >,
    pub load_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaLocalHostSessionProvider) -> *mut GVariant,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSessionProviderClass"]
        [::std::mem::size_of::<_FridaLocalHostSessionProviderClass>() - 152usize];
    ["Alignment of _FridaLocalHostSessionProviderClass"]
        [::std::mem::align_of::<_FridaLocalHostSessionProviderClass>() - 8usize];
    ["Offset of field: _FridaLocalHostSessionProviderClass::parent_class"]
        [::std::mem::offset_of!(_FridaLocalHostSessionProviderClass, parent_class) - 0usize];
    ["Offset of field: _FridaLocalHostSessionProviderClass::make_host_session"]
        [::std::mem::offset_of!(_FridaLocalHostSessionProviderClass, make_host_session) - 136usize];
    ["Offset of field: _FridaLocalHostSessionProviderClass::load_icon"]
        [::std::mem::offset_of!(_FridaLocalHostSessionProviderClass, load_icon) - 144usize];
};
impl Default for _FridaLocalHostSessionProviderClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSession {
    pub parent_instance: GObject,
    pub priv_: *mut FridaLocalHostSessionPrivate,
    pub injector: *mut FridaInjector,
    pub injectee_by_pid: *mut GeeHashMap,
    pub io_cancellable: *mut GCancellable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSession"][::std::mem::size_of::<_FridaLocalHostSession>() - 56usize];
    ["Alignment of _FridaLocalHostSession"]
        [::std::mem::align_of::<_FridaLocalHostSession>() - 8usize];
    ["Offset of field: _FridaLocalHostSession::parent_instance"]
        [::std::mem::offset_of!(_FridaLocalHostSession, parent_instance) - 0usize];
    ["Offset of field: _FridaLocalHostSession::priv_"]
        [::std::mem::offset_of!(_FridaLocalHostSession, priv_) - 24usize];
    ["Offset of field: _FridaLocalHostSession::injector"]
        [::std::mem::offset_of!(_FridaLocalHostSession, injector) - 32usize];
    ["Offset of field: _FridaLocalHostSession::injectee_by_pid"]
        [::std::mem::offset_of!(_FridaLocalHostSession, injectee_by_pid) - 40usize];
    ["Offset of field: _FridaLocalHostSession::io_cancellable"]
        [::std::mem::offset_of!(_FridaLocalHostSession, io_cancellable) - 48usize];
};
impl Default for _FridaLocalHostSession {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaLocalHostSessionClass {
    pub parent_class: GObjectClass,
    pub preload: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub preload_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub create_system_session_provider: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub create_system_session_provider_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            connection: *mut *mut GDBusConnection,
            error: *mut *mut GError,
        ) -> *mut FridaAgentSessionProvider,
    >,
    pub get_frontmost_application: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub get_frontmost_application_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            result: *mut FridaHostApplicationInfo,
            error: *mut *mut GError,
        ),
    >,
    pub enumerate_applications: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_applications_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostApplicationInfo,
    >,
    pub enumerate_processes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_processes_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostProcessInfo,
    >,
    pub enable_spawn_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_spawn_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub disable_spawn_gating: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub disable_spawn_gating_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub enumerate_pending_spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_pending_spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            result_length1: *mut gint,
            error: *mut *mut GError,
        ) -> *mut FridaHostSpawnInfo,
    >,
    pub spawn: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            program: *const gchar,
            options: *mut FridaHostSpawnOptions,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub spawn_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub try_handle_child: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            info: *mut FridaHostChildInfo,
        ) -> gboolean,
    >,
    pub notify_child_resumed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaLocalHostSession, pid: guint)>,
    pub notify_child_gating_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            subscriber_count: guint,
        ),
    >,
    pub prepare_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub prepare_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub await_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub await_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel_exec_transition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub cancel_exec_transition_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub process_is_alive: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaLocalHostSession, pid: guint) -> gboolean,
    >,
    pub input: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            data: *mut guint8,
            data_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub input_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub perform_resume: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub perform_resume_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub kill_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub on_uninjected:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaLocalHostSession, id: guint)>,
    pub perform_attach_to: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            options: *mut GHashTable,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub perform_attach_to_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            transport: *mut *mut GObject,
            error: *mut *mut GError,
        ) -> *mut FridaFuture,
    >,
    pub get_emulated_agent_path: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
    pub try_collect_crash: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            pid: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub try_collect_crash_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaLocalHostSession,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaCrashInfo,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLocalHostSessionClass"]
        [::std::mem::size_of::<_FridaLocalHostSessionClass>() - 472usize];
    ["Alignment of _FridaLocalHostSessionClass"]
        [::std::mem::align_of::<_FridaLocalHostSessionClass>() - 8usize];
    ["Offset of field: _FridaLocalHostSessionClass::parent_class"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, parent_class) - 0usize];
    ["Offset of field: _FridaLocalHostSessionClass::preload"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, preload) - 136usize];
    ["Offset of field: _FridaLocalHostSessionClass::preload_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, preload_finish) - 144usize];
    ["Offset of field: _FridaLocalHostSessionClass::close"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, close) - 152usize];
    ["Offset of field: _FridaLocalHostSessionClass::close_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, close_finish) - 160usize];
    ["Offset of field: _FridaLocalHostSessionClass::create_system_session_provider"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        create_system_session_provider
    ) - 168usize];
    ["Offset of field: _FridaLocalHostSessionClass::create_system_session_provider_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        create_system_session_provider_finish
    )
        - 176usize];
    ["Offset of field: _FridaLocalHostSessionClass::get_frontmost_application"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, get_frontmost_application) - 184usize];
    ["Offset of field: _FridaLocalHostSessionClass::get_frontmost_application_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        get_frontmost_application_finish
    )
        - 192usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_applications"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, enumerate_applications) - 200usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_applications_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        enumerate_applications_finish
    ) - 208usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_processes"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, enumerate_processes) - 216usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_processes_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        enumerate_processes_finish
    ) - 224usize];
    ["Offset of field: _FridaLocalHostSessionClass::enable_spawn_gating"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, enable_spawn_gating) - 232usize];
    ["Offset of field: _FridaLocalHostSessionClass::enable_spawn_gating_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        enable_spawn_gating_finish
    ) - 240usize];
    ["Offset of field: _FridaLocalHostSessionClass::disable_spawn_gating"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, disable_spawn_gating) - 248usize];
    ["Offset of field: _FridaLocalHostSessionClass::disable_spawn_gating_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        disable_spawn_gating_finish
    ) - 256usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_pending_spawn"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, enumerate_pending_spawn) - 264usize];
    ["Offset of field: _FridaLocalHostSessionClass::enumerate_pending_spawn_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        enumerate_pending_spawn_finish
    ) - 272usize];
    ["Offset of field: _FridaLocalHostSessionClass::spawn"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, spawn) - 280usize];
    ["Offset of field: _FridaLocalHostSessionClass::spawn_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, spawn_finish) - 288usize];
    ["Offset of field: _FridaLocalHostSessionClass::try_handle_child"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, try_handle_child) - 296usize];
    ["Offset of field: _FridaLocalHostSessionClass::notify_child_resumed"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, notify_child_resumed) - 304usize];
    ["Offset of field: _FridaLocalHostSessionClass::notify_child_gating_changed"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        notify_child_gating_changed
    ) - 312usize];
    ["Offset of field: _FridaLocalHostSessionClass::prepare_exec_transition"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, prepare_exec_transition) - 320usize];
    ["Offset of field: _FridaLocalHostSessionClass::prepare_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        prepare_exec_transition_finish
    ) - 328usize];
    ["Offset of field: _FridaLocalHostSessionClass::await_exec_transition"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, await_exec_transition) - 336usize];
    ["Offset of field: _FridaLocalHostSessionClass::await_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        await_exec_transition_finish
    ) - 344usize];
    ["Offset of field: _FridaLocalHostSessionClass::cancel_exec_transition"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, cancel_exec_transition) - 352usize];
    ["Offset of field: _FridaLocalHostSessionClass::cancel_exec_transition_finish"][::std::mem::offset_of!(
        _FridaLocalHostSessionClass,
        cancel_exec_transition_finish
    ) - 360usize];
    ["Offset of field: _FridaLocalHostSessionClass::process_is_alive"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, process_is_alive) - 368usize];
    ["Offset of field: _FridaLocalHostSessionClass::input"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, input) - 376usize];
    ["Offset of field: _FridaLocalHostSessionClass::input_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, input_finish) - 384usize];
    ["Offset of field: _FridaLocalHostSessionClass::perform_resume"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, perform_resume) - 392usize];
    ["Offset of field: _FridaLocalHostSessionClass::perform_resume_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, perform_resume_finish) - 400usize];
    ["Offset of field: _FridaLocalHostSessionClass::kill"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, kill) - 408usize];
    ["Offset of field: _FridaLocalHostSessionClass::kill_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, kill_finish) - 416usize];
    ["Offset of field: _FridaLocalHostSessionClass::on_uninjected"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, on_uninjected) - 424usize];
    ["Offset of field: _FridaLocalHostSessionClass::perform_attach_to"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, perform_attach_to) - 432usize];
    ["Offset of field: _FridaLocalHostSessionClass::perform_attach_to_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, perform_attach_to_finish) - 440usize];
    ["Offset of field: _FridaLocalHostSessionClass::get_emulated_agent_path"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, get_emulated_agent_path) - 448usize];
    ["Offset of field: _FridaLocalHostSessionClass::try_collect_crash"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, try_collect_crash) - 456usize];
    ["Offset of field: _FridaLocalHostSessionClass::try_collect_crash_finish"]
        [::std::mem::offset_of!(_FridaLocalHostSessionClass, try_collect_crash_finish) - 464usize];
};
impl Default for _FridaLocalHostSessionClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInternalAgent {
    pub parent_instance: GObject,
    pub priv_: *mut FridaInternalAgentPrivate,
    pub attach_options: *mut GHashTable,
    pub target_pid: guint,
    pub session_id: FridaAgentSessionId,
    pub session: *mut FridaAgentSession,
    pub script: FridaAgentScriptId,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaInternalAgent"][::std::mem::size_of::<_FridaInternalAgent>() - 72usize];
    ["Alignment of _FridaInternalAgent"][::std::mem::align_of::<_FridaInternalAgent>() - 8usize];
    ["Offset of field: _FridaInternalAgent::parent_instance"]
        [::std::mem::offset_of!(_FridaInternalAgent, parent_instance) - 0usize];
    ["Offset of field: _FridaInternalAgent::priv_"]
        [::std::mem::offset_of!(_FridaInternalAgent, priv_) - 24usize];
    ["Offset of field: _FridaInternalAgent::attach_options"]
        [::std::mem::offset_of!(_FridaInternalAgent, attach_options) - 32usize];
    ["Offset of field: _FridaInternalAgent::target_pid"]
        [::std::mem::offset_of!(_FridaInternalAgent, target_pid) - 40usize];
    ["Offset of field: _FridaInternalAgent::session_id"]
        [::std::mem::offset_of!(_FridaInternalAgent, session_id) - 48usize];
    ["Offset of field: _FridaInternalAgent::session"]
        [::std::mem::offset_of!(_FridaInternalAgent, session) - 56usize];
    ["Offset of field: _FridaInternalAgent::script"]
        [::std::mem::offset_of!(_FridaInternalAgent, script) - 64usize];
};
impl Default for _FridaInternalAgent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaInternalAgentClass {
    pub parent_class: GObjectClass,
    pub get_target_pid: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub get_target_pid_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint,
    >,
    pub load_source: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub load_source_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
    pub load_snapshot: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub load_snapshot_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            transport: *mut FridaSnapshotTransport,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub on_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            type_: *const gchar,
            event: *mut JsonArray,
        ),
    >,
    pub perform_unload: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub perform_unload_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub load_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub load_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub destroy_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub destroy_script_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaInternalAgent,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaInternalAgentClass"]
        [::std::mem::size_of::<_FridaInternalAgentClass>() - 240usize];
    ["Alignment of _FridaInternalAgentClass"]
        [::std::mem::align_of::<_FridaInternalAgentClass>() - 8usize];
    ["Offset of field: _FridaInternalAgentClass::parent_class"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, parent_class) - 0usize];
    ["Offset of field: _FridaInternalAgentClass::get_target_pid"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, get_target_pid) - 136usize];
    ["Offset of field: _FridaInternalAgentClass::get_target_pid_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, get_target_pid_finish) - 144usize];
    ["Offset of field: _FridaInternalAgentClass::load_source"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_source) - 152usize];
    ["Offset of field: _FridaInternalAgentClass::load_source_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_source_finish) - 160usize];
    ["Offset of field: _FridaInternalAgentClass::load_snapshot"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_snapshot) - 168usize];
    ["Offset of field: _FridaInternalAgentClass::load_snapshot_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_snapshot_finish) - 176usize];
    ["Offset of field: _FridaInternalAgentClass::on_event"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, on_event) - 184usize];
    ["Offset of field: _FridaInternalAgentClass::perform_unload"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, perform_unload) - 192usize];
    ["Offset of field: _FridaInternalAgentClass::perform_unload_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, perform_unload_finish) - 200usize];
    ["Offset of field: _FridaInternalAgentClass::load_script"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_script) - 208usize];
    ["Offset of field: _FridaInternalAgentClass::load_script_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, load_script_finish) - 216usize];
    ["Offset of field: _FridaInternalAgentClass::destroy_script"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, destroy_script) - 224usize];
    ["Offset of field: _FridaInternalAgentClass::destroy_script_finish"]
        [::std::mem::offset_of!(_FridaInternalAgentClass, destroy_script_finish) - 232usize];
};
impl Default for _FridaInternalAgentClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClient {
    pub parent_instance: GObject,
    pub priv_: *mut FridaGDBClientPrivate,
    pub supported_features: *mut GeeSet,
    pub registers: *mut GeeList,
    pub register_by_name: *mut GeeMap,
    pub breakpoints: *mut GeeMap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClient"][::std::mem::size_of::<_FridaGDBClient>() - 64usize];
    ["Alignment of _FridaGDBClient"][::std::mem::align_of::<_FridaGDBClient>() - 8usize];
    ["Offset of field: _FridaGDBClient::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBClient, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBClient::priv_"]
        [::std::mem::offset_of!(_FridaGDBClient, priv_) - 24usize];
    ["Offset of field: _FridaGDBClient::supported_features"]
        [::std::mem::offset_of!(_FridaGDBClient, supported_features) - 32usize];
    ["Offset of field: _FridaGDBClient::registers"]
        [::std::mem::offset_of!(_FridaGDBClient, registers) - 40usize];
    ["Offset of field: _FridaGDBClient::register_by_name"]
        [::std::mem::offset_of!(_FridaGDBClient, register_by_name) - 48usize];
    ["Offset of field: _FridaGDBClient::breakpoints"]
        [::std::mem::offset_of!(_FridaGDBClient, breakpoints) - 56usize];
};
impl Default for _FridaGDBClient {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientClass {
    pub parent_class: GObjectClass,
    pub detect_vendor_features: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub detect_vendor_features_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub enable_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_extensions_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub read_byte_array: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            address: guint64,
            size: gsize,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub read_byte_array_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub parse_stop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            signum: guint,
            properties: *mut FridaGDBClientPropertyDictionary,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub parse_stop_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaGDBClient,
            _res_: *mut GAsyncResult,
            exception: *mut *mut FridaGDBException,
            breakpoint: *mut *mut FridaGDBBreakpoint,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientClass"][::std::mem::size_of::<_FridaGDBClientClass>() - 200usize];
    ["Alignment of _FridaGDBClientClass"][::std::mem::align_of::<_FridaGDBClientClass>() - 8usize];
    ["Offset of field: _FridaGDBClientClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBClientClass, parent_class) - 0usize];
    ["Offset of field: _FridaGDBClientClass::detect_vendor_features"]
        [::std::mem::offset_of!(_FridaGDBClientClass, detect_vendor_features) - 136usize];
    ["Offset of field: _FridaGDBClientClass::detect_vendor_features_finish"]
        [::std::mem::offset_of!(_FridaGDBClientClass, detect_vendor_features_finish) - 144usize];
    ["Offset of field: _FridaGDBClientClass::enable_extensions"]
        [::std::mem::offset_of!(_FridaGDBClientClass, enable_extensions) - 152usize];
    ["Offset of field: _FridaGDBClientClass::enable_extensions_finish"]
        [::std::mem::offset_of!(_FridaGDBClientClass, enable_extensions_finish) - 160usize];
    ["Offset of field: _FridaGDBClientClass::read_byte_array"]
        [::std::mem::offset_of!(_FridaGDBClientClass, read_byte_array) - 168usize];
    ["Offset of field: _FridaGDBClientClass::read_byte_array_finish"]
        [::std::mem::offset_of!(_FridaGDBClientClass, read_byte_array_finish) - 176usize];
    ["Offset of field: _FridaGDBClientClass::parse_stop"]
        [::std::mem::offset_of!(_FridaGDBClientClass, parse_stop) - 184usize];
    ["Offset of field: _FridaGDBClientClass::parse_stop_finish"]
        [::std::mem::offset_of!(_FridaGDBClientClass, parse_stop_finish) - 192usize];
};
impl Default for _FridaGDBClientClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientPropertyDictionary {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaGDBClientPropertyDictionaryPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientPropertyDictionary"]
        [::std::mem::size_of::<_FridaGDBClientPropertyDictionary>() - 24usize];
    ["Alignment of _FridaGDBClientPropertyDictionary"]
        [::std::mem::align_of::<_FridaGDBClientPropertyDictionary>() - 8usize];
    ["Offset of field: _FridaGDBClientPropertyDictionary::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBClientPropertyDictionary, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBClientPropertyDictionary::ref_count"]
        [::std::mem::offset_of!(_FridaGDBClientPropertyDictionary, ref_count) - 8usize];
    ["Offset of field: _FridaGDBClientPropertyDictionary::priv_"]
        [::std::mem::offset_of!(_FridaGDBClientPropertyDictionary, priv_) - 16usize];
};
impl Default for _FridaGDBClientPropertyDictionary {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaGDBClientPropertyDictionaryClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaGDBClientPropertyDictionary)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientPropertyDictionaryClass"]
        [::std::mem::size_of::<_FridaGDBClientPropertyDictionaryClass>() - 16usize];
    ["Alignment of _FridaGDBClientPropertyDictionaryClass"]
        [::std::mem::align_of::<_FridaGDBClientPropertyDictionaryClass>() - 8usize];
    ["Offset of field: _FridaGDBClientPropertyDictionaryClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBClientPropertyDictionaryClass, parent_class) - 0usize];
    ["Offset of field: _FridaGDBClientPropertyDictionaryClass::finalize"]
        [::std::mem::offset_of!(_FridaGDBClientPropertyDictionaryClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientRegister {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaGDBClientRegisterPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientRegister"][::std::mem::size_of::<_FridaGDBClientRegister>() - 24usize];
    ["Alignment of _FridaGDBClientRegister"]
        [::std::mem::align_of::<_FridaGDBClientRegister>() - 8usize];
    ["Offset of field: _FridaGDBClientRegister::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBClientRegister, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBClientRegister::ref_count"]
        [::std::mem::offset_of!(_FridaGDBClientRegister, ref_count) - 8usize];
    ["Offset of field: _FridaGDBClientRegister::priv_"]
        [::std::mem::offset_of!(_FridaGDBClientRegister, priv_) - 16usize];
};
impl Default for _FridaGDBClientRegister {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaGDBClientRegisterClass {
    pub parent_class: GTypeClass,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaGDBClientRegister)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientRegisterClass"]
        [::std::mem::size_of::<_FridaGDBClientRegisterClass>() - 16usize];
    ["Alignment of _FridaGDBClientRegisterClass"]
        [::std::mem::align_of::<_FridaGDBClientRegisterClass>() - 8usize];
    ["Offset of field: _FridaGDBClientRegisterClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBClientRegisterClass, parent_class) - 0usize];
    ["Offset of field: _FridaGDBClientRegisterClass::finalize"]
        [::std::mem::offset_of!(_FridaGDBClientRegisterClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBClientTargetSpec {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaGDBClientTargetSpecPrivate,
    pub arch: FridaGDBTargetArch,
    pub registers: *mut GeeList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientTargetSpec"]
        [::std::mem::size_of::<_FridaGDBClientTargetSpec>() - 40usize];
    ["Alignment of _FridaGDBClientTargetSpec"]
        [::std::mem::align_of::<_FridaGDBClientTargetSpec>() - 8usize];
    ["Offset of field: _FridaGDBClientTargetSpec::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpec, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBClientTargetSpec::ref_count"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpec, ref_count) - 8usize];
    ["Offset of field: _FridaGDBClientTargetSpec::priv_"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpec, priv_) - 16usize];
    ["Offset of field: _FridaGDBClientTargetSpec::arch"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpec, arch) - 24usize];
    ["Offset of field: _FridaGDBClientTargetSpec::registers"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpec, registers) - 32usize];
};
impl Default for _FridaGDBClientTargetSpec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaGDBClientTargetSpecClass {
    pub parent_class: GTypeClass,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaGDBClientTargetSpec)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBClientTargetSpecClass"]
        [::std::mem::size_of::<_FridaGDBClientTargetSpecClass>() - 16usize];
    ["Alignment of _FridaGDBClientTargetSpecClass"]
        [::std::mem::align_of::<_FridaGDBClientTargetSpecClass>() - 8usize];
    ["Offset of field: _FridaGDBClientTargetSpecClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpecClass, parent_class) - 0usize];
    ["Offset of field: _FridaGDBClientTargetSpecClass::finalize"]
        [::std::mem::offset_of!(_FridaGDBClientTargetSpecClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBThread {
    pub parent_instance: GObject,
    pub priv_: *mut FridaGDBThreadPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBThread"][::std::mem::size_of::<_FridaGDBThread>() - 32usize];
    ["Alignment of _FridaGDBThread"][::std::mem::align_of::<_FridaGDBThread>() - 8usize];
    ["Offset of field: _FridaGDBThread::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBThread, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBThread::priv_"]
        [::std::mem::offset_of!(_FridaGDBThread, priv_) - 24usize];
};
impl Default for _FridaGDBThread {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBThreadClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBThreadClass"][::std::mem::size_of::<_FridaGDBThreadClass>() - 136usize];
    ["Alignment of _FridaGDBThreadClass"][::std::mem::align_of::<_FridaGDBThreadClass>() - 8usize];
    ["Offset of field: _FridaGDBThreadClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBThreadClass, parent_class) - 0usize];
};
impl Default for _FridaGDBThreadClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBException {
    pub parent_instance: GObject,
    pub priv_: *mut FridaGDBExceptionPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBException"][::std::mem::size_of::<_FridaGDBException>() - 32usize];
    ["Alignment of _FridaGDBException"][::std::mem::align_of::<_FridaGDBException>() - 8usize];
    ["Offset of field: _FridaGDBException::parent_instance"]
        [::std::mem::offset_of!(_FridaGDBException, parent_instance) - 0usize];
    ["Offset of field: _FridaGDBException::priv_"]
        [::std::mem::offset_of!(_FridaGDBException, priv_) - 24usize];
};
impl Default for _FridaGDBException {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaGDBExceptionClass {
    pub parent_class: GObjectClass,
    pub to_string:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaGDBException) -> *mut gchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaGDBExceptionClass"]
        [::std::mem::size_of::<_FridaGDBExceptionClass>() - 144usize];
    ["Alignment of _FridaGDBExceptionClass"]
        [::std::mem::align_of::<_FridaGDBExceptionClass>() - 8usize];
    ["Offset of field: _FridaGDBExceptionClass::parent_class"]
        [::std::mem::offset_of!(_FridaGDBExceptionClass, parent_class) - 0usize];
    ["Offset of field: _FridaGDBExceptionClass::to_string"]
        [::std::mem::offset_of!(_FridaGDBExceptionClass, to_string) - 136usize];
};
impl Default for _FridaGDBExceptionClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSuperSUProcess {
    pub parent_instance: GObject,
    pub priv_: *mut FridaSuperSUProcessPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaSuperSUProcess"][::std::mem::size_of::<_FridaSuperSUProcess>() - 32usize];
    ["Alignment of _FridaSuperSUProcess"][::std::mem::align_of::<_FridaSuperSUProcess>() - 8usize];
    ["Offset of field: _FridaSuperSUProcess::parent_instance"]
        [::std::mem::offset_of!(_FridaSuperSUProcess, parent_instance) - 0usize];
    ["Offset of field: _FridaSuperSUProcess::priv_"]
        [::std::mem::offset_of!(_FridaSuperSUProcess, priv_) - 24usize];
};
impl Default for _FridaSuperSUProcess {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaSuperSUProcessClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaSuperSUProcessClass"]
        [::std::mem::size_of::<_FridaSuperSUProcessClass>() - 136usize];
    ["Alignment of _FridaSuperSUProcessClass"]
        [::std::mem::align_of::<_FridaSuperSUProcessClass>() - 8usize];
    ["Offset of field: _FridaSuperSUProcessClass::parent_class"]
        [::std::mem::offset_of!(_FridaSuperSUProcessClass, parent_class) - 0usize];
};
impl Default for _FridaSuperSUProcessClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityTunnelIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnel,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnel,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub open_tcp_connection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnel,
            port: guint16,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_tcp_connection_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnel,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub get_discovery: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTunnel) -> *mut FridaFruityDiscoveryService,
    >,
    pub get_opened_at:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityTunnel) -> gint64>,
    pub get_remote_unlock_host_key:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityTunnel) -> *mut GBytes>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTunnelIface"][::std::mem::size_of::<_FridaFruityTunnelIface>() - 72usize];
    ["Alignment of _FridaFruityTunnelIface"]
        [::std::mem::align_of::<_FridaFruityTunnelIface>() - 8usize];
    ["Offset of field: _FridaFruityTunnelIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityTunnelIface::close"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, close) - 16usize];
    ["Offset of field: _FridaFruityTunnelIface::close_finish"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, close_finish) - 24usize];
    ["Offset of field: _FridaFruityTunnelIface::open_tcp_connection"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, open_tcp_connection) - 32usize];
    ["Offset of field: _FridaFruityTunnelIface::open_tcp_connection_finish"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, open_tcp_connection_finish) - 40usize];
    ["Offset of field: _FridaFruityTunnelIface::get_discovery"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, get_discovery) - 48usize];
    ["Offset of field: _FridaFruityTunnelIface::get_opened_at"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, get_opened_at) - 56usize];
    ["Offset of field: _FridaFruityTunnelIface::get_remote_unlock_host_key"]
        [::std::mem::offset_of!(_FridaFruityTunnelIface, get_remote_unlock_host_key) - 64usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityTransportIface {
    pub parent_iface: GTypeInterface,
    pub find_tunnel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTransport,
            device: *mut FridaFruityUsbmuxDevice,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub find_tunnel_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTransport,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaFruityTunnel,
    >,
    pub get_connection_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTransport) -> FridaFruityConnectionType,
    >,
    pub get_udid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTransport) -> *const gchar,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTransport) -> *const gchar,
    >,
    pub get_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTransport) -> *mut GVariant,
    >,
    pub get_usbmux_device: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTransport) -> *mut FridaFruityUsbmuxDevice,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTransportIface"]
        [::std::mem::size_of::<_FridaFruityTransportIface>() - 72usize];
    ["Alignment of _FridaFruityTransportIface"]
        [::std::mem::align_of::<_FridaFruityTransportIface>() - 8usize];
    ["Offset of field: _FridaFruityTransportIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityTransportIface::find_tunnel"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, find_tunnel) - 16usize];
    ["Offset of field: _FridaFruityTransportIface::find_tunnel_finish"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, find_tunnel_finish) - 24usize];
    ["Offset of field: _FridaFruityTransportIface::get_connection_type"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, get_connection_type) - 32usize];
    ["Offset of field: _FridaFruityTransportIface::get_udid"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, get_udid) - 40usize];
    ["Offset of field: _FridaFruityTransportIface::get_name"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, get_name) - 48usize];
    ["Offset of field: _FridaFruityTransportIface::get_icon"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, get_icon) - 56usize];
    ["Offset of field: _FridaFruityTransportIface::get_usbmux_device"]
        [::std::mem::offset_of!(_FridaFruityTransportIface, get_usbmux_device) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTcpChannel {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityTcpChannelPrivate,
    pub stream: *mut GIOStream,
    pub kind: FridaFruityTcpChannelKind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTcpChannel"][::std::mem::size_of::<_FridaFruityTcpChannel>() - 40usize];
    ["Alignment of _FridaFruityTcpChannel"]
        [::std::mem::align_of::<_FridaFruityTcpChannel>() - 8usize];
    ["Offset of field: _FridaFruityTcpChannel::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityTcpChannel, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityTcpChannel::ref_count"]
        [::std::mem::offset_of!(_FridaFruityTcpChannel, ref_count) - 8usize];
    ["Offset of field: _FridaFruityTcpChannel::priv_"]
        [::std::mem::offset_of!(_FridaFruityTcpChannel, priv_) - 16usize];
    ["Offset of field: _FridaFruityTcpChannel::stream"]
        [::std::mem::offset_of!(_FridaFruityTcpChannel, stream) - 24usize];
    ["Offset of field: _FridaFruityTcpChannel::kind"]
        [::std::mem::offset_of!(_FridaFruityTcpChannel, kind) - 32usize];
};
impl Default for _FridaFruityTcpChannel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityTcpChannelClass {
    pub parent_class: GTypeClass,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityTcpChannel)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTcpChannelClass"]
        [::std::mem::size_of::<_FridaFruityTcpChannelClass>() - 16usize];
    ["Alignment of _FridaFruityTcpChannelClass"]
        [::std::mem::align_of::<_FridaFruityTcpChannelClass>() - 8usize];
    ["Offset of field: _FridaFruityTcpChannelClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityTcpChannelClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityTcpChannelClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityTcpChannelClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityBackendIface {
    pub parent_iface: GTypeInterface,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityBackend,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub start_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityBackend,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityBackend,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub stop_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityBackend,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityBackendIface"]
        [::std::mem::size_of::<_FridaFruityBackendIface>() - 48usize];
    ["Alignment of _FridaFruityBackendIface"]
        [::std::mem::align_of::<_FridaFruityBackendIface>() - 8usize];
    ["Offset of field: _FridaFruityBackendIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityBackendIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityBackendIface::start"]
        [::std::mem::offset_of!(_FridaFruityBackendIface, start) - 16usize];
    ["Offset of field: _FridaFruityBackendIface::start_finish"]
        [::std::mem::offset_of!(_FridaFruityBackendIface, start_finish) - 24usize];
    ["Offset of field: _FridaFruityBackendIface::stop"]
        [::std::mem::offset_of!(_FridaFruityBackendIface, stop) - 32usize];
    ["Offset of field: _FridaFruityBackendIface::stop_finish"]
        [::std::mem::offset_of!(_FridaFruityBackendIface, stop_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityFruitFinderIface {
    pub parent_iface: GTypeInterface,
    pub udid_from_iface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityFruitFinder,
            ifname: *const gchar,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityFruitFinderIface"]
        [::std::mem::size_of::<_FridaFruityFruitFinderIface>() - 24usize];
    ["Alignment of _FridaFruityFruitFinderIface"]
        [::std::mem::align_of::<_FridaFruityFruitFinderIface>() - 8usize];
    ["Offset of field: _FridaFruityFruitFinderIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityFruitFinderIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityFruitFinderIface::udid_from_iface"]
        [::std::mem::offset_of!(_FridaFruityFruitFinderIface, udid_from_iface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityPairingBrowserIface {
    pub parent_iface: GTypeInterface,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingBrowser,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub start_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingBrowser,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingBrowser,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub stop_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingBrowser,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPairingBrowserIface"]
        [::std::mem::size_of::<_FridaFruityPairingBrowserIface>() - 48usize];
    ["Alignment of _FridaFruityPairingBrowserIface"]
        [::std::mem::align_of::<_FridaFruityPairingBrowserIface>() - 8usize];
    ["Offset of field: _FridaFruityPairingBrowserIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityPairingBrowserIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityPairingBrowserIface::start"]
        [::std::mem::offset_of!(_FridaFruityPairingBrowserIface, start) - 16usize];
    ["Offset of field: _FridaFruityPairingBrowserIface::start_finish"]
        [::std::mem::offset_of!(_FridaFruityPairingBrowserIface, start_finish) - 24usize];
    ["Offset of field: _FridaFruityPairingBrowserIface::stop"]
        [::std::mem::offset_of!(_FridaFruityPairingBrowserIface, stop) - 32usize];
    ["Offset of field: _FridaFruityPairingBrowserIface::stop_finish"]
        [::std::mem::offset_of!(_FridaFruityPairingBrowserIface, stop_finish) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPairingServiceDetails {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityPairingServiceDetailsPrivate,
    pub identifier: *mut gchar,
    pub auth_tag: *mut GBytes,
    pub endpoint: *mut GInetSocketAddress,
    pub interface_address: *mut GInetSocketAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPairingServiceDetails"]
        [::std::mem::size_of::<_FridaFruityPairingServiceDetails>() - 56usize];
    ["Alignment of _FridaFruityPairingServiceDetails"]
        [::std::mem::align_of::<_FridaFruityPairingServiceDetails>() - 8usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::ref_count"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, ref_count) - 8usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::priv_"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, priv_) - 16usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::identifier"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, identifier) - 24usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::auth_tag"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, auth_tag) - 32usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::endpoint"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, endpoint) - 40usize];
    ["Offset of field: _FridaFruityPairingServiceDetails::interface_address"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetails, interface_address) - 48usize];
};
impl Default for _FridaFruityPairingServiceDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityPairingServiceDetailsClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityPairingServiceDetails)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPairingServiceDetailsClass"]
        [::std::mem::size_of::<_FridaFruityPairingServiceDetailsClass>() - 16usize];
    ["Alignment of _FridaFruityPairingServiceDetailsClass"]
        [::std::mem::align_of::<_FridaFruityPairingServiceDetailsClass>() - 8usize];
    ["Offset of field: _FridaFruityPairingServiceDetailsClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetailsClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityPairingServiceDetailsClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityPairingServiceDetailsClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityPairingTransportIface {
    pub parent_iface: GTypeInterface,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingTransport,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityPairingTransport,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityPairingTransport)>,
    pub make_object_builder: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityPairingTransport) -> *mut FridaObjectBuilder,
    >,
    pub post: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityPairingTransport, message: *mut GBytes),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPairingTransportIface"]
        [::std::mem::size_of::<_FridaFruityPairingTransportIface>() - 56usize];
    ["Alignment of _FridaFruityPairingTransportIface"]
        [::std::mem::align_of::<_FridaFruityPairingTransportIface>() - 8usize];
    ["Offset of field: _FridaFruityPairingTransportIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityPairingTransportIface::open"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, open) - 16usize];
    ["Offset of field: _FridaFruityPairingTransportIface::open_finish"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, open_finish) - 24usize];
    ["Offset of field: _FridaFruityPairingTransportIface::cancel"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, cancel) - 32usize];
    ["Offset of field: _FridaFruityPairingTransportIface::make_object_builder"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, make_object_builder) - 40usize];
    ["Offset of field: _FridaFruityPairingTransportIface::post"]
        [::std::mem::offset_of!(_FridaFruityPairingTransportIface, post) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityUdpSocketIface {
    pub parent_iface: GTypeInterface,
    pub bind: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityUdpSocket,
            address: *mut GInetSocketAddress,
            error: *mut *mut GError,
        ),
    >,
    pub get_local_address: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityUdpSocket,
            error: *mut *mut GError,
        ) -> *mut GInetSocketAddress,
    >,
    pub socket_connect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityUdpSocket,
            address: *mut GInetSocketAddress,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ),
    >,
    pub get_datagram_based: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityUdpSocket) -> *mut GDatagramBased,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityUdpSocketIface"]
        [::std::mem::size_of::<_FridaFruityUdpSocketIface>() - 48usize];
    ["Alignment of _FridaFruityUdpSocketIface"]
        [::std::mem::align_of::<_FridaFruityUdpSocketIface>() - 8usize];
    ["Offset of field: _FridaFruityUdpSocketIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityUdpSocketIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityUdpSocketIface::bind"]
        [::std::mem::offset_of!(_FridaFruityUdpSocketIface, bind) - 16usize];
    ["Offset of field: _FridaFruityUdpSocketIface::get_local_address"]
        [::std::mem::offset_of!(_FridaFruityUdpSocketIface, get_local_address) - 24usize];
    ["Offset of field: _FridaFruityUdpSocketIface::socket_connect"]
        [::std::mem::offset_of!(_FridaFruityUdpSocketIface, socket_connect) - 32usize];
    ["Offset of field: _FridaFruityUdpSocketIface::get_datagram_based"]
        [::std::mem::offset_of!(_FridaFruityUdpSocketIface, get_datagram_based) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityNetworkStackIface {
    pub parent_iface: GTypeInterface,
    pub open_tcp_connection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityNetworkStack,
            address: *mut GInetSocketAddress,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub open_tcp_connection_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityNetworkStack,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub create_udp_socket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityNetworkStack,
            error: *mut *mut GError,
        ) -> *mut FridaFruityUdpSocket,
    >,
    pub get_listener_ip: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityNetworkStack) -> *mut GInetAddress,
    >,
    pub get_scope_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityNetworkStack) -> guint>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityNetworkStackIface"]
        [::std::mem::size_of::<_FridaFruityNetworkStackIface>() - 56usize];
    ["Alignment of _FridaFruityNetworkStackIface"]
        [::std::mem::align_of::<_FridaFruityNetworkStackIface>() - 8usize];
    ["Offset of field: _FridaFruityNetworkStackIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityNetworkStackIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityNetworkStackIface::open_tcp_connection"]
        [::std::mem::offset_of!(_FridaFruityNetworkStackIface, open_tcp_connection) - 16usize];
    ["Offset of field: _FridaFruityNetworkStackIface::open_tcp_connection_finish"][::std::mem::offset_of!(
        _FridaFruityNetworkStackIface,
        open_tcp_connection_finish
    ) - 24usize];
    ["Offset of field: _FridaFruityNetworkStackIface::create_udp_socket"]
        [::std::mem::offset_of!(_FridaFruityNetworkStackIface, create_udp_socket) - 32usize];
    ["Offset of field: _FridaFruityNetworkStackIface::get_listener_ip"]
        [::std::mem::offset_of!(_FridaFruityNetworkStackIface, get_listener_ip) - 40usize];
    ["Offset of field: _FridaFruityNetworkStackIface::get_scope_id"]
        [::std::mem::offset_of!(_FridaFruityNetworkStackIface, get_scope_id) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityTunnelConnectionIface {
    pub parent_iface: GTypeInterface,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnelConnection,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub close_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnelConnection,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub get_tunnel_netstack: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityTunnelConnection,
        ) -> *mut FridaFruityNetworkStack,
    >,
    pub get_remote_address: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTunnelConnection) -> *mut GInetAddress,
    >,
    pub get_remote_rsd_port: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaFruityTunnelConnection) -> guint16,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTunnelConnectionIface"]
        [::std::mem::size_of::<_FridaFruityTunnelConnectionIface>() - 56usize];
    ["Alignment of _FridaFruityTunnelConnectionIface"]
        [::std::mem::align_of::<_FridaFruityTunnelConnectionIface>() - 8usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::close"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, close) - 16usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::close_finish"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, close_finish) - 24usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::get_tunnel_netstack"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, get_tunnel_netstack) - 32usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::get_remote_address"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, get_remote_address) - 40usize];
    ["Offset of field: _FridaFruityTunnelConnectionIface::get_remote_rsd_port"]
        [::std::mem::offset_of!(_FridaFruityTunnelConnectionIface, get_remote_rsd_port) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTrustedService {
    pub parent_instance: GObject,
    pub priv_: *mut FridaFruityTrustedServicePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTrustedService"]
        [::std::mem::size_of::<_FridaFruityTrustedService>() - 32usize];
    ["Alignment of _FridaFruityTrustedService"]
        [::std::mem::align_of::<_FridaFruityTrustedService>() - 8usize];
    ["Offset of field: _FridaFruityTrustedService::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityTrustedService, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityTrustedService::priv_"]
        [::std::mem::offset_of!(_FridaFruityTrustedService, priv_) - 24usize];
};
impl Default for _FridaFruityTrustedService {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityTrustedServiceClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityTrustedServiceClass"]
        [::std::mem::size_of::<_FridaFruityTrustedServiceClass>() - 136usize];
    ["Alignment of _FridaFruityTrustedServiceClass"]
        [::std::mem::align_of::<_FridaFruityTrustedServiceClass>() - 8usize];
    ["Offset of field: _FridaFruityTrustedServiceClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityTrustedServiceClass, parent_class) - 0usize];
};
impl Default for _FridaFruityTrustedServiceClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcObjectBuilder {
    pub parent_instance: GObject,
    pub priv_: *mut FridaFruityXpcObjectBuilderPrivate,
    pub builder: *mut FridaBufferBuilder,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityXpcObjectBuilder"]
        [::std::mem::size_of::<_FridaFruityXpcObjectBuilder>() - 40usize];
    ["Alignment of _FridaFruityXpcObjectBuilder"]
        [::std::mem::align_of::<_FridaFruityXpcObjectBuilder>() - 8usize];
    ["Offset of field: _FridaFruityXpcObjectBuilder::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityXpcObjectBuilder, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityXpcObjectBuilder::priv_"]
        [::std::mem::offset_of!(_FridaFruityXpcObjectBuilder, priv_) - 24usize];
    ["Offset of field: _FridaFruityXpcObjectBuilder::builder"]
        [::std::mem::offset_of!(_FridaFruityXpcObjectBuilder, builder) - 32usize];
};
impl Default for _FridaFruityXpcObjectBuilder {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityXpcObjectBuilderClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityXpcObjectBuilderClass"]
        [::std::mem::size_of::<_FridaFruityXpcObjectBuilderClass>() - 136usize];
    ["Alignment of _FridaFruityXpcObjectBuilderClass"]
        [::std::mem::align_of::<_FridaFruityXpcObjectBuilderClass>() - 8usize];
    ["Offset of field: _FridaFruityXpcObjectBuilderClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityXpcObjectBuilderClass, parent_class) - 0usize];
};
impl Default for _FridaFruityXpcObjectBuilderClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXChannel {
    pub parent_instance: GObject,
    pub priv_: *mut FridaFruityDTXChannelPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXChannel"][::std::mem::size_of::<_FridaFruityDTXChannel>() - 32usize];
    ["Alignment of _FridaFruityDTXChannel"]
        [::std::mem::align_of::<_FridaFruityDTXChannel>() - 8usize];
    ["Offset of field: _FridaFruityDTXChannel::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDTXChannel, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDTXChannel::priv_"]
        [::std::mem::offset_of!(_FridaFruityDTXChannel, priv_) - 24usize];
};
impl Default for _FridaFruityDTXChannel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXChannelClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXChannelClass"]
        [::std::mem::size_of::<_FridaFruityDTXChannelClass>() - 136usize];
    ["Alignment of _FridaFruityDTXChannelClass"]
        [::std::mem::align_of::<_FridaFruityDTXChannelClass>() - 8usize];
    ["Offset of field: _FridaFruityDTXChannelClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDTXChannelClass, parent_class) - 0usize];
};
impl Default for _FridaFruityDTXChannelClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXMessage {
    pub type_: FridaFruityDTXMessageType,
    pub identifier: guint32,
    pub conversation_index: guint32,
    pub channel_code: gint32,
    pub transport_flags: FridaFruityDTXMessageTransportFlags,
    pub aux_data: *mut guint8,
    pub aux_data_length1: gint,
    pub payload_data: *mut guint8,
    pub payload_data_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXMessage"][::std::mem::size_of::<_FridaFruityDTXMessage>() - 56usize];
    ["Alignment of _FridaFruityDTXMessage"]
        [::std::mem::align_of::<_FridaFruityDTXMessage>() - 8usize];
    ["Offset of field: _FridaFruityDTXMessage::type_"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, type_) - 0usize];
    ["Offset of field: _FridaFruityDTXMessage::identifier"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, identifier) - 4usize];
    ["Offset of field: _FridaFruityDTXMessage::conversation_index"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, conversation_index) - 8usize];
    ["Offset of field: _FridaFruityDTXMessage::channel_code"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, channel_code) - 12usize];
    ["Offset of field: _FridaFruityDTXMessage::transport_flags"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, transport_flags) - 16usize];
    ["Offset of field: _FridaFruityDTXMessage::aux_data"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, aux_data) - 24usize];
    ["Offset of field: _FridaFruityDTXMessage::aux_data_length1"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, aux_data_length1) - 32usize];
    ["Offset of field: _FridaFruityDTXMessage::payload_data"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, payload_data) - 40usize];
    ["Offset of field: _FridaFruityDTXMessage::payload_data_length1"]
        [::std::mem::offset_of!(_FridaFruityDTXMessage, payload_data_length1) - 48usize];
};
impl Default for _FridaFruityDTXMessage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDTXTransportIface {
    pub parent_iface: GTypeInterface,
    pub send_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityDTXTransport,
            message: *mut FridaFruityDTXMessage,
            identifier: *mut guint32,
        ),
    >,
    pub remove_channel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityDTXTransport,
            channel: *mut FridaFruityDTXChannel,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXTransportIface"]
        [::std::mem::size_of::<_FridaFruityDTXTransportIface>() - 32usize];
    ["Alignment of _FridaFruityDTXTransportIface"]
        [::std::mem::align_of::<_FridaFruityDTXTransportIface>() - 8usize];
    ["Offset of field: _FridaFruityDTXTransportIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityDTXTransportIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityDTXTransportIface::send_message"]
        [::std::mem::offset_of!(_FridaFruityDTXTransportIface, send_message) - 16usize];
    ["Offset of field: _FridaFruityDTXTransportIface::remove_channel"]
        [::std::mem::offset_of!(_FridaFruityDTXTransportIface, remove_channel) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDTXArgumentList {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityDTXArgumentListPrivate,
    pub elements: *mut GValue,
    pub elements_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXArgumentList"]
        [::std::mem::size_of::<_FridaFruityDTXArgumentList>() - 40usize];
    ["Alignment of _FridaFruityDTXArgumentList"]
        [::std::mem::align_of::<_FridaFruityDTXArgumentList>() - 8usize];
    ["Offset of field: _FridaFruityDTXArgumentList::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentList, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDTXArgumentList::ref_count"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentList, ref_count) - 8usize];
    ["Offset of field: _FridaFruityDTXArgumentList::priv_"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentList, priv_) - 16usize];
    ["Offset of field: _FridaFruityDTXArgumentList::elements"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentList, elements) - 24usize];
    ["Offset of field: _FridaFruityDTXArgumentList::elements_length1"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentList, elements_length1) - 32usize];
};
impl Default for _FridaFruityDTXArgumentList {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDTXArgumentListClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityDTXArgumentList)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDTXArgumentListClass"]
        [::std::mem::size_of::<_FridaFruityDTXArgumentListClass>() - 16usize];
    ["Alignment of _FridaFruityDTXArgumentListClass"]
        [::std::mem::align_of::<_FridaFruityDTXArgumentListClass>() - 8usize];
    ["Offset of field: _FridaFruityDTXArgumentListClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentListClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityDTXArgumentListClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityDTXArgumentListClass, finalize) - 8usize];
};
pub const FridaFruityLockdownError_FRIDA_FRUITY_LOCKDOWN_ERROR_CONNECTION_CLOSED:
    FridaFruityLockdownError = 0;
pub const FridaFruityLockdownError_FRIDA_FRUITY_LOCKDOWN_ERROR_INVALID_SERVICE:
    FridaFruityLockdownError = 1;
pub const FridaFruityLockdownError_FRIDA_FRUITY_LOCKDOWN_ERROR_NOT_PAIRED:
    FridaFruityLockdownError = 2;
pub const FridaFruityLockdownError_FRIDA_FRUITY_LOCKDOWN_ERROR_UNSUPPORTED:
    FridaFruityLockdownError = 3;
pub const FridaFruityLockdownError_FRIDA_FRUITY_LOCKDOWN_ERROR_PROTOCOL: FridaFruityLockdownError =
    4;
pub type FridaFruityLockdownError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaLLDBThreadStackBounds {
    pub bottom: guint64,
    pub top: guint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaLLDBThreadStackBounds"]
        [::std::mem::size_of::<_FridaLLDBThreadStackBounds>() - 16usize];
    ["Alignment of _FridaLLDBThreadStackBounds"]
        [::std::mem::align_of::<_FridaLLDBThreadStackBounds>() - 8usize];
    ["Offset of field: _FridaLLDBThreadStackBounds::bottom"]
        [::std::mem::offset_of!(_FridaLLDBThreadStackBounds, bottom) - 0usize];
    ["Offset of field: _FridaLLDBThreadStackBounds::top"]
        [::std::mem::offset_of!(_FridaLLDBThreadStackBounds, top) - 8usize];
};
pub const FridaFruityUsbmuxError_FRIDA_FRUITY_USBMUX_ERROR_DAEMON_NOT_RUNNING:
    FridaFruityUsbmuxError = 0;
pub const FridaFruityUsbmuxError_FRIDA_FRUITY_USBMUX_ERROR_CONNECTION_REFUSED:
    FridaFruityUsbmuxError = 1;
pub const FridaFruityUsbmuxError_FRIDA_FRUITY_USBMUX_ERROR_INVALID_ARGUMENT:
    FridaFruityUsbmuxError = 2;
pub const FridaFruityUsbmuxError_FRIDA_FRUITY_USBMUX_ERROR_PROTOCOL: FridaFruityUsbmuxError = 3;
pub type FridaFruityUsbmuxError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsResourceRecord {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityDnsResourceRecordPrivate,
    pub key: *mut FridaFruityDnsResourceKey,
    pub ttl: guint32,
    pub data: *mut GBytes,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsResourceRecord"]
        [::std::mem::size_of::<_FridaFruityDnsResourceRecord>() - 48usize];
    ["Alignment of _FridaFruityDnsResourceRecord"]
        [::std::mem::align_of::<_FridaFruityDnsResourceRecord>() - 8usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::ref_count"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, ref_count) - 8usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, priv_) - 16usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::key"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, key) - 24usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::ttl"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, ttl) - 32usize];
    ["Offset of field: _FridaFruityDnsResourceRecord::data"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecord, data) - 40usize];
};
impl Default for _FridaFruityDnsResourceRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsResourceRecordClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityDnsResourceRecord)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsResourceRecordClass"]
        [::std::mem::size_of::<_FridaFruityDnsResourceRecordClass>() - 16usize];
    ["Alignment of _FridaFruityDnsResourceRecordClass"]
        [::std::mem::align_of::<_FridaFruityDnsResourceRecordClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsResourceRecordClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecordClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityDnsResourceRecordClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceRecordClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsPtrRecord {
    pub parent_instance: FridaFruityDnsResourceRecord,
    pub priv_: *mut FridaFruityDnsPtrRecordPrivate,
    pub name: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsPtrRecord"]
        [::std::mem::size_of::<_FridaFruityDnsPtrRecord>() - 64usize];
    ["Alignment of _FridaFruityDnsPtrRecord"]
        [::std::mem::align_of::<_FridaFruityDnsPtrRecord>() - 8usize];
    ["Offset of field: _FridaFruityDnsPtrRecord::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsPtrRecord, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsPtrRecord::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsPtrRecord, priv_) - 48usize];
    ["Offset of field: _FridaFruityDnsPtrRecord::name"]
        [::std::mem::offset_of!(_FridaFruityDnsPtrRecord, name) - 56usize];
};
impl Default for _FridaFruityDnsPtrRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsPtrRecordClass {
    pub parent_class: FridaFruityDnsResourceRecordClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsPtrRecordClass"]
        [::std::mem::size_of::<_FridaFruityDnsPtrRecordClass>() - 16usize];
    ["Alignment of _FridaFruityDnsPtrRecordClass"]
        [::std::mem::align_of::<_FridaFruityDnsPtrRecordClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsPtrRecordClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsPtrRecordClass, parent_class) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsTxtRecord {
    pub parent_instance: FridaFruityDnsResourceRecord,
    pub priv_: *mut FridaFruityDnsTxtRecordPrivate,
    pub entries: *mut *mut gchar,
    pub entries_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsTxtRecord"]
        [::std::mem::size_of::<_FridaFruityDnsTxtRecord>() - 72usize];
    ["Alignment of _FridaFruityDnsTxtRecord"]
        [::std::mem::align_of::<_FridaFruityDnsTxtRecord>() - 8usize];
    ["Offset of field: _FridaFruityDnsTxtRecord::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsTxtRecord, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsTxtRecord::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsTxtRecord, priv_) - 48usize];
    ["Offset of field: _FridaFruityDnsTxtRecord::entries"]
        [::std::mem::offset_of!(_FridaFruityDnsTxtRecord, entries) - 56usize];
    ["Offset of field: _FridaFruityDnsTxtRecord::entries_length1"]
        [::std::mem::offset_of!(_FridaFruityDnsTxtRecord, entries_length1) - 64usize];
};
impl Default for _FridaFruityDnsTxtRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsTxtRecordClass {
    pub parent_class: FridaFruityDnsResourceRecordClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsTxtRecordClass"]
        [::std::mem::size_of::<_FridaFruityDnsTxtRecordClass>() - 16usize];
    ["Alignment of _FridaFruityDnsTxtRecordClass"]
        [::std::mem::align_of::<_FridaFruityDnsTxtRecordClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsTxtRecordClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsTxtRecordClass, parent_class) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsAaaaRecord {
    pub parent_instance: FridaFruityDnsResourceRecord,
    pub priv_: *mut FridaFruityDnsAaaaRecordPrivate,
    pub address: *mut GInetAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsAaaaRecord"]
        [::std::mem::size_of::<_FridaFruityDnsAaaaRecord>() - 64usize];
    ["Alignment of _FridaFruityDnsAaaaRecord"]
        [::std::mem::align_of::<_FridaFruityDnsAaaaRecord>() - 8usize];
    ["Offset of field: _FridaFruityDnsAaaaRecord::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsAaaaRecord, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsAaaaRecord::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsAaaaRecord, priv_) - 48usize];
    ["Offset of field: _FridaFruityDnsAaaaRecord::address"]
        [::std::mem::offset_of!(_FridaFruityDnsAaaaRecord, address) - 56usize];
};
impl Default for _FridaFruityDnsAaaaRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsAaaaRecordClass {
    pub parent_class: FridaFruityDnsResourceRecordClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsAaaaRecordClass"]
        [::std::mem::size_of::<_FridaFruityDnsAaaaRecordClass>() - 16usize];
    ["Alignment of _FridaFruityDnsAaaaRecordClass"]
        [::std::mem::align_of::<_FridaFruityDnsAaaaRecordClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsAaaaRecordClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsAaaaRecordClass, parent_class) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsSrvRecord {
    pub parent_instance: FridaFruityDnsResourceRecord,
    pub priv_: *mut FridaFruityDnsSrvRecordPrivate,
    pub priority: guint16,
    pub weight: guint16,
    pub port: guint16,
    pub name: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsSrvRecord"]
        [::std::mem::size_of::<_FridaFruityDnsSrvRecord>() - 72usize];
    ["Alignment of _FridaFruityDnsSrvRecord"]
        [::std::mem::align_of::<_FridaFruityDnsSrvRecord>() - 8usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, priv_) - 48usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::priority"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, priority) - 56usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::weight"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, weight) - 58usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::port"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, port) - 60usize];
    ["Offset of field: _FridaFruityDnsSrvRecord::name"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecord, name) - 64usize];
};
impl Default for _FridaFruityDnsSrvRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsSrvRecordClass {
    pub parent_class: FridaFruityDnsResourceRecordClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsSrvRecordClass"]
        [::std::mem::size_of::<_FridaFruityDnsSrvRecordClass>() - 16usize];
    ["Alignment of _FridaFruityDnsSrvRecordClass"]
        [::std::mem::align_of::<_FridaFruityDnsSrvRecordClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsSrvRecordClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsSrvRecordClass, parent_class) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityDnsResourceKey {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityDnsResourceKeyPrivate,
    pub name: *mut gchar,
    pub type_: FridaFruityDnsRecordType,
    pub klass: FridaFruityDnsRecordClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsResourceKey"]
        [::std::mem::size_of::<_FridaFruityDnsResourceKey>() - 40usize];
    ["Alignment of _FridaFruityDnsResourceKey"]
        [::std::mem::align_of::<_FridaFruityDnsResourceKey>() - 8usize];
    ["Offset of field: _FridaFruityDnsResourceKey::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityDnsResourceKey::ref_count"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, ref_count) - 8usize];
    ["Offset of field: _FridaFruityDnsResourceKey::priv_"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, priv_) - 16usize];
    ["Offset of field: _FridaFruityDnsResourceKey::name"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, name) - 24usize];
    ["Offset of field: _FridaFruityDnsResourceKey::type_"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, type_) - 32usize];
    ["Offset of field: _FridaFruityDnsResourceKey::klass"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKey, klass) - 36usize];
};
impl Default for _FridaFruityDnsResourceKey {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityDnsResourceKeyClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityDnsResourceKey)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityDnsResourceKeyClass"]
        [::std::mem::size_of::<_FridaFruityDnsResourceKeyClass>() - 16usize];
    ["Alignment of _FridaFruityDnsResourceKeyClass"]
        [::std::mem::align_of::<_FridaFruityDnsResourceKeyClass>() - 8usize];
    ["Offset of field: _FridaFruityDnsResourceKeyClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKeyClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityDnsResourceKeyClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityDnsResourceKeyClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityNSObject {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaFruityNSObjectPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityNSObject"][::std::mem::size_of::<_FridaFruityNSObject>() - 24usize];
    ["Alignment of _FridaFruityNSObject"][::std::mem::align_of::<_FridaFruityNSObject>() - 8usize];
    ["Offset of field: _FridaFruityNSObject::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityNSObject, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityNSObject::ref_count"]
        [::std::mem::offset_of!(_FridaFruityNSObject, ref_count) - 8usize];
    ["Offset of field: _FridaFruityNSObject::priv_"]
        [::std::mem::offset_of!(_FridaFruityNSObject, priv_) - 16usize];
};
impl Default for _FridaFruityNSObject {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityNSObjectClass {
    pub parent_class: GTypeClass,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityNSObject)>,
    pub hash: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityNSObject) -> guint>,
    pub is_equal_to: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityNSObject,
            other: *mut FridaFruityNSObject,
        ) -> gboolean,
    >,
    pub to_string:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaFruityNSObject) -> *mut gchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityNSObjectClass"]
        [::std::mem::size_of::<_FridaFruityNSObjectClass>() - 40usize];
    ["Alignment of _FridaFruityNSObjectClass"]
        [::std::mem::align_of::<_FridaFruityNSObjectClass>() - 8usize];
    ["Offset of field: _FridaFruityNSObjectClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityNSObjectClass, parent_class) - 0usize];
    ["Offset of field: _FridaFruityNSObjectClass::finalize"]
        [::std::mem::offset_of!(_FridaFruityNSObjectClass, finalize) - 8usize];
    ["Offset of field: _FridaFruityNSObjectClass::hash"]
        [::std::mem::offset_of!(_FridaFruityNSObjectClass, hash) - 16usize];
    ["Offset of field: _FridaFruityNSObjectClass::is_equal_to"]
        [::std::mem::offset_of!(_FridaFruityNSObjectClass, is_equal_to) - 24usize];
    ["Offset of field: _FridaFruityNSObjectClass::to_string"]
        [::std::mem::offset_of!(_FridaFruityNSObjectClass, to_string) - 32usize];
};
pub const FridaFruityPlistError_FRIDA_FRUITY_PLIST_ERROR_INVALID_DATA: FridaFruityPlistError = 0;
pub const FridaFruityPlistError_FRIDA_FRUITY_PLIST_ERROR_KEY_NOT_FOUND: FridaFruityPlistError = 1;
pub const FridaFruityPlistError_FRIDA_FRUITY_PLIST_ERROR_INVALID_INDEX: FridaFruityPlistError = 2;
pub const FridaFruityPlistError_FRIDA_FRUITY_PLIST_ERROR_TYPE_MISMATCH: FridaFruityPlistError = 3;
pub type FridaFruityPlistError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistDict {
    pub parent_instance: GObject,
    pub priv_: *mut FridaFruityPlistDictPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPlistDict"][::std::mem::size_of::<_FridaFruityPlistDict>() - 32usize];
    ["Alignment of _FridaFruityPlistDict"]
        [::std::mem::align_of::<_FridaFruityPlistDict>() - 8usize];
    ["Offset of field: _FridaFruityPlistDict::parent_instance"]
        [::std::mem::offset_of!(_FridaFruityPlistDict, parent_instance) - 0usize];
    ["Offset of field: _FridaFruityPlistDict::priv_"]
        [::std::mem::offset_of!(_FridaFruityPlistDict, priv_) - 24usize];
};
impl Default for _FridaFruityPlistDict {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityPlistDictClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityPlistDictClass"]
        [::std::mem::size_of::<_FridaFruityPlistDictClass>() - 136usize];
    ["Alignment of _FridaFruityPlistDictClass"]
        [::std::mem::align_of::<_FridaFruityPlistDictClass>() - 8usize];
    ["Offset of field: _FridaFruityPlistDictClass::parent_class"]
        [::std::mem::offset_of!(_FridaFruityPlistDictClass, parent_class) - 0usize];
};
impl Default for _FridaFruityPlistDictClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const FridaFruityPlistServiceError_FRIDA_FRUITY_PLIST_SERVICE_ERROR_CONNECTION_CLOSED:
    FridaFruityPlistServiceError = 0;
pub const FridaFruityPlistServiceError_FRIDA_FRUITY_PLIST_SERVICE_ERROR_PROTOCOL:
    FridaFruityPlistServiceError = 1;
pub type FridaFruityPlistServiceError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityResolvedRRItem {
    pub ifindex: gint32,
    pub klass: guint16,
    pub type_: guint16,
    pub data: *mut guint8,
    pub data_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityResolvedRRItem"]
        [::std::mem::size_of::<_FridaFruityResolvedRRItem>() - 24usize];
    ["Alignment of _FridaFruityResolvedRRItem"]
        [::std::mem::align_of::<_FridaFruityResolvedRRItem>() - 8usize];
    ["Offset of field: _FridaFruityResolvedRRItem::ifindex"]
        [::std::mem::offset_of!(_FridaFruityResolvedRRItem, ifindex) - 0usize];
    ["Offset of field: _FridaFruityResolvedRRItem::klass"]
        [::std::mem::offset_of!(_FridaFruityResolvedRRItem, klass) - 4usize];
    ["Offset of field: _FridaFruityResolvedRRItem::type_"]
        [::std::mem::offset_of!(_FridaFruityResolvedRRItem, type_) - 6usize];
    ["Offset of field: _FridaFruityResolvedRRItem::data"]
        [::std::mem::offset_of!(_FridaFruityResolvedRRItem, data) - 8usize];
    ["Offset of field: _FridaFruityResolvedRRItem::data_length1"]
        [::std::mem::offset_of!(_FridaFruityResolvedRRItem, data_length1) - 16usize];
};
impl Default for _FridaFruityResolvedRRItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityResolvedSrvAddress {
    pub ifindex: gint32,
    pub family: gint32,
    pub ip: *mut guint8,
    pub ip_length1: gint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityResolvedSrvAddress"]
        [::std::mem::size_of::<_FridaFruityResolvedSrvAddress>() - 24usize];
    ["Alignment of _FridaFruityResolvedSrvAddress"]
        [::std::mem::align_of::<_FridaFruityResolvedSrvAddress>() - 8usize];
    ["Offset of field: _FridaFruityResolvedSrvAddress::ifindex"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvAddress, ifindex) - 0usize];
    ["Offset of field: _FridaFruityResolvedSrvAddress::family"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvAddress, family) - 4usize];
    ["Offset of field: _FridaFruityResolvedSrvAddress::ip"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvAddress, ip) - 8usize];
    ["Offset of field: _FridaFruityResolvedSrvAddress::ip_length1"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvAddress, ip_length1) - 16usize];
};
impl Default for _FridaFruityResolvedSrvAddress {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaFruityResolvedSrvItem {
    pub priority: guint16,
    pub weight: guint16,
    pub port: guint16,
    pub name: *mut gchar,
    pub addresses: *mut FridaFruityResolvedSrvAddress,
    pub addresses_length1: gint,
    pub canonical_name: *mut gchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityResolvedSrvItem"]
        [::std::mem::size_of::<_FridaFruityResolvedSrvItem>() - 40usize];
    ["Alignment of _FridaFruityResolvedSrvItem"]
        [::std::mem::align_of::<_FridaFruityResolvedSrvItem>() - 8usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::priority"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, priority) - 0usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::weight"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, weight) - 2usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::port"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, port) - 4usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::name"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, name) - 8usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::addresses"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, addresses) - 16usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::addresses_length1"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, addresses_length1) - 24usize];
    ["Offset of field: _FridaFruityResolvedSrvItem::canonical_name"]
        [::std::mem::offset_of!(_FridaFruityResolvedSrvItem, canonical_name) - 32usize];
};
impl Default for _FridaFruityResolvedSrvItem {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaFruityResolvedManagerIface {
    pub parent_iface: GTypeInterface,
    pub resolve_record: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityResolvedManager,
            ifindex: gint32,
            name: *const gchar,
            klass: guint16,
            type_: guint16,
            flags: guint64,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resolve_record_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityResolvedManager,
            _res_: *mut GAsyncResult,
            items: *mut *mut FridaFruityResolvedRRItem,
            items_length1: *mut gint,
            result_flags: *mut guint64,
            error: *mut *mut GError,
        ),
    >,
    pub resolve_service: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityResolvedManager,
            ifindex: gint32,
            name: *const gchar,
            type_: *const gchar,
            domain: *const gchar,
            family: gint32,
            flags: guint64,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub resolve_service_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaFruityResolvedManager,
            _res_: *mut GAsyncResult,
            srv_items: *mut *mut FridaFruityResolvedSrvItem,
            srv_items_length1: *mut gint,
            txt_items: *mut *mut GVariant,
            canonical_name: *mut *mut gchar,
            canonical_type: *mut *mut gchar,
            canonical_domain: *mut *mut gchar,
            result_flags: *mut guint64,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaFruityResolvedManagerIface"]
        [::std::mem::size_of::<_FridaFruityResolvedManagerIface>() - 48usize];
    ["Alignment of _FridaFruityResolvedManagerIface"]
        [::std::mem::align_of::<_FridaFruityResolvedManagerIface>() - 8usize];
    ["Offset of field: _FridaFruityResolvedManagerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaFruityResolvedManagerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaFruityResolvedManagerIface::resolve_record"]
        [::std::mem::offset_of!(_FridaFruityResolvedManagerIface, resolve_record) - 16usize];
    ["Offset of field: _FridaFruityResolvedManagerIface::resolve_record_finish"]
        [::std::mem::offset_of!(_FridaFruityResolvedManagerIface, resolve_record_finish) - 24usize];
    ["Offset of field: _FridaFruityResolvedManagerIface::resolve_service"]
        [::std::mem::offset_of!(_FridaFruityResolvedManagerIface, resolve_service) - 32usize];
    ["Offset of field: _FridaFruityResolvedManagerIface::resolve_service_finish"][::std::mem::offset_of!(
        _FridaFruityResolvedManagerIface,
        resolve_service_finish
    ) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPObjectID {
    pub _handle: gint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPObjectID"][::std::mem::size_of::<_FridaJDWPObjectID>() - 8usize];
    ["Alignment of _FridaJDWPObjectID"][::std::mem::align_of::<_FridaJDWPObjectID>() - 8usize];
    ["Offset of field: _FridaJDWPObjectID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPObjectID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPReferenceTypeID {
    pub _handle: gint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPReferenceTypeID"]
        [::std::mem::size_of::<_FridaJDWPReferenceTypeID>() - 8usize];
    ["Alignment of _FridaJDWPReferenceTypeID"]
        [::std::mem::align_of::<_FridaJDWPReferenceTypeID>() - 8usize];
    ["Offset of field: _FridaJDWPReferenceTypeID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPReferenceTypeID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPTaggedReferenceTypeID {
    pub _tag: FridaJDWPTypeTag,
    pub _id: FridaJDWPReferenceTypeID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPTaggedReferenceTypeID"]
        [::std::mem::size_of::<_FridaJDWPTaggedReferenceTypeID>() - 16usize];
    ["Alignment of _FridaJDWPTaggedReferenceTypeID"]
        [::std::mem::align_of::<_FridaJDWPTaggedReferenceTypeID>() - 8usize];
    ["Offset of field: _FridaJDWPTaggedReferenceTypeID::_tag"]
        [::std::mem::offset_of!(_FridaJDWPTaggedReferenceTypeID, _tag) - 0usize];
    ["Offset of field: _FridaJDWPTaggedReferenceTypeID::_id"]
        [::std::mem::offset_of!(_FridaJDWPTaggedReferenceTypeID, _id) - 8usize];
};
impl Default for _FridaJDWPTaggedReferenceTypeID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPThreadID {
    pub _handle: gint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPThreadID"][::std::mem::size_of::<_FridaJDWPThreadID>() - 8usize];
    ["Alignment of _FridaJDWPThreadID"][::std::mem::align_of::<_FridaJDWPThreadID>() - 8usize];
    ["Offset of field: _FridaJDWPThreadID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPThreadID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPMethodID {
    pub _handle: gint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPMethodID"][::std::mem::size_of::<_FridaJDWPMethodID>() - 8usize];
    ["Alignment of _FridaJDWPMethodID"][::std::mem::align_of::<_FridaJDWPMethodID>() - 8usize];
    ["Offset of field: _FridaJDWPMethodID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPMethodID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPEventRequestID {
    pub _handle: gint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPEventRequestID"]
        [::std::mem::size_of::<_FridaJDWPEventRequestID>() - 4usize];
    ["Alignment of _FridaJDWPEventRequestID"]
        [::std::mem::align_of::<_FridaJDWPEventRequestID>() - 4usize];
    ["Offset of field: _FridaJDWPEventRequestID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPEventRequestID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPValue {
    pub parent_instance: GObject,
    pub priv_: *mut FridaJDWPValuePrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPValue"][::std::mem::size_of::<_FridaJDWPValue>() - 32usize];
    ["Alignment of _FridaJDWPValue"][::std::mem::align_of::<_FridaJDWPValue>() - 8usize];
    ["Offset of field: _FridaJDWPValue::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPValue, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPValue::priv_"]
        [::std::mem::offset_of!(_FridaJDWPValue, priv_) - 24usize];
};
impl Default for _FridaJDWPValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPValueClass {
    pub parent_class: GObjectClass,
    pub to_string:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaJDWPValue) -> *mut gchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPValueClass"][::std::mem::size_of::<_FridaJDWPValueClass>() - 144usize];
    ["Alignment of _FridaJDWPValueClass"][::std::mem::align_of::<_FridaJDWPValueClass>() - 8usize];
    ["Offset of field: _FridaJDWPValueClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPValueClass, parent_class) - 0usize];
    ["Offset of field: _FridaJDWPValueClass::to_string"]
        [::std::mem::offset_of!(_FridaJDWPValueClass, to_string) - 136usize];
};
impl Default for _FridaJDWPValueClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPObject {
    pub parent_instance: FridaJDWPValue,
    pub priv_: *mut FridaJDWPObjectPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPObject"][::std::mem::size_of::<_FridaJDWPObject>() - 40usize];
    ["Alignment of _FridaJDWPObject"][::std::mem::align_of::<_FridaJDWPObject>() - 8usize];
    ["Offset of field: _FridaJDWPObject::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPObject, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPObject::priv_"]
        [::std::mem::offset_of!(_FridaJDWPObject, priv_) - 32usize];
};
impl Default for _FridaJDWPObject {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPObjectClass {
    pub parent_class: FridaJDWPValueClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPObjectClass"][::std::mem::size_of::<_FridaJDWPObjectClass>() - 144usize];
    ["Alignment of _FridaJDWPObjectClass"]
        [::std::mem::align_of::<_FridaJDWPObjectClass>() - 8usize];
    ["Offset of field: _FridaJDWPObjectClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPObjectClass, parent_class) - 0usize];
};
impl Default for _FridaJDWPObjectClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPTaggedObjectID {
    pub _tag: FridaJDWPTypeTag,
    pub _id: FridaJDWPObjectID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPTaggedObjectID"]
        [::std::mem::size_of::<_FridaJDWPTaggedObjectID>() - 16usize];
    ["Alignment of _FridaJDWPTaggedObjectID"]
        [::std::mem::align_of::<_FridaJDWPTaggedObjectID>() - 8usize];
    ["Offset of field: _FridaJDWPTaggedObjectID::_tag"]
        [::std::mem::offset_of!(_FridaJDWPTaggedObjectID, _tag) - 0usize];
    ["Offset of field: _FridaJDWPTaggedObjectID::_id"]
        [::std::mem::offset_of!(_FridaJDWPTaggedObjectID, _id) - 8usize];
};
impl Default for _FridaJDWPTaggedObjectID {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaJDWPFieldID {
    pub _handle: gint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPFieldID"][::std::mem::size_of::<_FridaJDWPFieldID>() - 8usize];
    ["Alignment of _FridaJDWPFieldID"][::std::mem::align_of::<_FridaJDWPFieldID>() - 8usize];
    ["Offset of field: _FridaJDWPFieldID::_handle"]
        [::std::mem::offset_of!(_FridaJDWPFieldID, _handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEvent {
    pub parent_instance: GObject,
    pub priv_: *mut FridaJDWPEventPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPEvent"][::std::mem::size_of::<_FridaJDWPEvent>() - 32usize];
    ["Alignment of _FridaJDWPEvent"][::std::mem::align_of::<_FridaJDWPEvent>() - 8usize];
    ["Offset of field: _FridaJDWPEvent::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPEvent, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPEvent::priv_"]
        [::std::mem::offset_of!(_FridaJDWPEvent, priv_) - 24usize];
};
impl Default for _FridaJDWPEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventClass {
    pub parent_class: GObjectClass,
    pub to_string:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaJDWPEvent) -> *mut gchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPEventClass"][::std::mem::size_of::<_FridaJDWPEventClass>() - 144usize];
    ["Alignment of _FridaJDWPEventClass"][::std::mem::align_of::<_FridaJDWPEventClass>() - 8usize];
    ["Offset of field: _FridaJDWPEventClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPEventClass, parent_class) - 0usize];
    ["Offset of field: _FridaJDWPEventClass::to_string"]
        [::std::mem::offset_of!(_FridaJDWPEventClass, to_string) - 136usize];
};
impl Default for _FridaJDWPEventClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldEvent {
    pub parent_instance: FridaJDWPEvent,
    pub priv_: *mut FridaJDWPFieldEventPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPFieldEvent"][::std::mem::size_of::<_FridaJDWPFieldEvent>() - 40usize];
    ["Alignment of _FridaJDWPFieldEvent"][::std::mem::align_of::<_FridaJDWPFieldEvent>() - 8usize];
    ["Offset of field: _FridaJDWPFieldEvent::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPFieldEvent, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPFieldEvent::priv_"]
        [::std::mem::offset_of!(_FridaJDWPFieldEvent, priv_) - 32usize];
};
impl Default for _FridaJDWPFieldEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPFieldEventClass {
    pub parent_class: FridaJDWPEventClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPFieldEventClass"]
        [::std::mem::size_of::<_FridaJDWPFieldEventClass>() - 144usize];
    ["Alignment of _FridaJDWPFieldEventClass"]
        [::std::mem::align_of::<_FridaJDWPFieldEventClass>() - 8usize];
    ["Offset of field: _FridaJDWPFieldEventClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPFieldEventClass, parent_class) - 0usize];
};
impl Default for _FridaJDWPFieldEventClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodEvent {
    pub parent_instance: FridaJDWPEvent,
    pub priv_: *mut FridaJDWPMethodEventPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPMethodEvent"][::std::mem::size_of::<_FridaJDWPMethodEvent>() - 40usize];
    ["Alignment of _FridaJDWPMethodEvent"]
        [::std::mem::align_of::<_FridaJDWPMethodEvent>() - 8usize];
    ["Offset of field: _FridaJDWPMethodEvent::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPMethodEvent, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPMethodEvent::priv_"]
        [::std::mem::offset_of!(_FridaJDWPMethodEvent, priv_) - 32usize];
};
impl Default for _FridaJDWPMethodEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMethodEventClass {
    pub parent_class: FridaJDWPEventClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPMethodEventClass"]
        [::std::mem::size_of::<_FridaJDWPMethodEventClass>() - 144usize];
    ["Alignment of _FridaJDWPMethodEventClass"]
        [::std::mem::align_of::<_FridaJDWPMethodEventClass>() - 8usize];
    ["Offset of field: _FridaJDWPMethodEventClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPMethodEventClass, parent_class) - 0usize];
};
impl Default for _FridaJDWPMethodEventClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorEvent {
    pub parent_instance: FridaJDWPEvent,
    pub priv_: *mut FridaJDWPMonitorEventPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPMonitorEvent"][::std::mem::size_of::<_FridaJDWPMonitorEvent>() - 40usize];
    ["Alignment of _FridaJDWPMonitorEvent"]
        [::std::mem::align_of::<_FridaJDWPMonitorEvent>() - 8usize];
    ["Offset of field: _FridaJDWPMonitorEvent::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPMonitorEvent, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPMonitorEvent::priv_"]
        [::std::mem::offset_of!(_FridaJDWPMonitorEvent, priv_) - 32usize];
};
impl Default for _FridaJDWPMonitorEvent {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPMonitorEventClass {
    pub parent_class: FridaJDWPEventClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPMonitorEventClass"]
        [::std::mem::size_of::<_FridaJDWPMonitorEventClass>() - 144usize];
    ["Alignment of _FridaJDWPMonitorEventClass"]
        [::std::mem::align_of::<_FridaJDWPMonitorEventClass>() - 8usize];
    ["Offset of field: _FridaJDWPMonitorEventClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPMonitorEventClass, parent_class) - 0usize];
};
impl Default for _FridaJDWPMonitorEventClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventModifier {
    pub parent_instance: GObject,
    pub priv_: *mut FridaJDWPEventModifierPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPEventModifier"][::std::mem::size_of::<_FridaJDWPEventModifier>() - 32usize];
    ["Alignment of _FridaJDWPEventModifier"]
        [::std::mem::align_of::<_FridaJDWPEventModifier>() - 8usize];
    ["Offset of field: _FridaJDWPEventModifier::parent_instance"]
        [::std::mem::offset_of!(_FridaJDWPEventModifier, parent_instance) - 0usize];
    ["Offset of field: _FridaJDWPEventModifier::priv_"]
        [::std::mem::offset_of!(_FridaJDWPEventModifier, priv_) - 24usize];
};
impl Default for _FridaJDWPEventModifier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaJDWPEventModifierClass {
    pub parent_class: GObjectClass,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaJDWPEventModifier,
            builder: *mut FridaJDWPPacketBuilder,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaJDWPEventModifierClass"]
        [::std::mem::size_of::<_FridaJDWPEventModifierClass>() - 144usize];
    ["Alignment of _FridaJDWPEventModifierClass"]
        [::std::mem::align_of::<_FridaJDWPEventModifierClass>() - 8usize];
    ["Offset of field: _FridaJDWPEventModifierClass::parent_class"]
        [::std::mem::offset_of!(_FridaJDWPEventModifierClass, parent_class) - 0usize];
    ["Offset of field: _FridaJDWPEventModifierClass::serialize"]
        [::std::mem::offset_of!(_FridaJDWPEventModifierClass, serialize) - 136usize];
};
impl Default for _FridaJDWPEventModifierClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneAllocationIface {
    pub parent_iface: GTypeInterface,
    pub deallocate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneAllocation,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub deallocate_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneAllocation,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub get_virtual_address:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneAllocation) -> guint64>,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneAllocation) -> gsize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneAllocationIface"]
        [::std::mem::size_of::<_FridaBareboneAllocationIface>() - 48usize];
    ["Alignment of _FridaBareboneAllocationIface"]
        [::std::mem::align_of::<_FridaBareboneAllocationIface>() - 8usize];
    ["Offset of field: _FridaBareboneAllocationIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneAllocationIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneAllocationIface::deallocate"]
        [::std::mem::offset_of!(_FridaBareboneAllocationIface, deallocate) - 16usize];
    ["Offset of field: _FridaBareboneAllocationIface::deallocate_finish"]
        [::std::mem::offset_of!(_FridaBareboneAllocationIface, deallocate_finish) - 24usize];
    ["Offset of field: _FridaBareboneAllocationIface::get_virtual_address"]
        [::std::mem::offset_of!(_FridaBareboneAllocationIface, get_virtual_address) - 32usize];
    ["Offset of field: _FridaBareboneAllocationIface::get_size"]
        [::std::mem::offset_of!(_FridaBareboneAllocationIface, get_size) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneCallFrameIface {
    pub parent_iface: GTypeInterface,
    pub get_nth_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame, n: guint) -> guint64,
    >,
    pub replace_nth_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame, n: guint, val: guint64),
    >,
    pub get_return_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame) -> guint64>,
    pub replace_return_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame, retval: guint64),
    >,
    pub force_return:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame)>,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneCallFrame,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub commit_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneCallFrame,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub get_return_address:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame) -> guint64>,
    pub get_registers: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneCallFrame) -> *mut GeeMap,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneCallFrameIface"]
        [::std::mem::size_of::<_FridaBareboneCallFrameIface>() - 88usize];
    ["Alignment of _FridaBareboneCallFrameIface"]
        [::std::mem::align_of::<_FridaBareboneCallFrameIface>() - 8usize];
    ["Offset of field: _FridaBareboneCallFrameIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneCallFrameIface::get_nth_argument"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, get_nth_argument) - 16usize];
    ["Offset of field: _FridaBareboneCallFrameIface::replace_nth_argument"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, replace_nth_argument) - 24usize];
    ["Offset of field: _FridaBareboneCallFrameIface::get_return_value"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, get_return_value) - 32usize];
    ["Offset of field: _FridaBareboneCallFrameIface::replace_return_value"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, replace_return_value) - 40usize];
    ["Offset of field: _FridaBareboneCallFrameIface::force_return"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, force_return) - 48usize];
    ["Offset of field: _FridaBareboneCallFrameIface::commit"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, commit) - 56usize];
    ["Offset of field: _FridaBareboneCallFrameIface::commit_finish"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, commit_finish) - 64usize];
    ["Offset of field: _FridaBareboneCallFrameIface::get_return_address"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, get_return_address) - 72usize];
    ["Offset of field: _FridaBareboneCallFrameIface::get_registers"]
        [::std::mem::offset_of!(_FridaBareboneCallFrameIface, get_registers) - 80usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneAllocatorIface {
    pub parent_iface: GTypeInterface,
    pub allocate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneAllocator,
            size: gsize,
            alignment: gsize,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub allocate_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneAllocator,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaBareboneAllocation,
    >,
    pub get_page_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneAllocator) -> gsize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneAllocatorIface"]
        [::std::mem::size_of::<_FridaBareboneAllocatorIface>() - 40usize];
    ["Alignment of _FridaBareboneAllocatorIface"]
        [::std::mem::align_of::<_FridaBareboneAllocatorIface>() - 8usize];
    ["Offset of field: _FridaBareboneAllocatorIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneAllocatorIface::allocate"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorIface, allocate) - 16usize];
    ["Offset of field: _FridaBareboneAllocatorIface::allocate_finish"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorIface, allocate_finish) - 24usize];
    ["Offset of field: _FridaBareboneAllocatorIface::get_page_size"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorIface, get_page_size) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneInlineHookIface {
    pub parent_iface: GTypeInterface,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub destroy_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub enable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enable_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub disable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub disable_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInlineHook,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneInlineHookIface"]
        [::std::mem::size_of::<_FridaBareboneInlineHookIface>() - 64usize];
    ["Alignment of _FridaBareboneInlineHookIface"]
        [::std::mem::align_of::<_FridaBareboneInlineHookIface>() - 8usize];
    ["Offset of field: _FridaBareboneInlineHookIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneInlineHookIface::destroy"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, destroy) - 16usize];
    ["Offset of field: _FridaBareboneInlineHookIface::destroy_finish"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, destroy_finish) - 24usize];
    ["Offset of field: _FridaBareboneInlineHookIface::enable"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, enable) - 32usize];
    ["Offset of field: _FridaBareboneInlineHookIface::enable_finish"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, enable_finish) - 40usize];
    ["Offset of field: _FridaBareboneInlineHookIface::disable"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, disable) - 48usize];
    ["Offset of field: _FridaBareboneInlineHookIface::disable_finish"]
        [::std::mem::offset_of!(_FridaBareboneInlineHookIface, disable_finish) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneMachineIface {
    pub parent_iface: GTypeInterface,
    pub query_page_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub query_page_size_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gsize,
    >,
    pub enumerate_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            prot: GumPageProtection,
            func: FridaBareboneFoundRangeFunc,
            func_target: gpointer,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub enumerate_ranges_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub allocate_pages: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            physical_address: guint64,
            num_pages: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub allocate_pages_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaBareboneAllocation,
    >,
    pub protect_pages: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            virtual_address: guint64,
            size: gsize,
            prot: GumPageProtection,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub protect_pages_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ),
    >,
    pub scan_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            ranges: *mut GeeList,
            pattern: *mut FridaBareboneMatchPattern,
            max_matches: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub scan_ranges_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GeeList,
    >,
    pub apply_relocation: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            r: *mut GumElfRelocationDetails,
            base_va: guint64,
            relocated: *mut FridaBuffer,
            error: *mut *mut GError,
        ),
    >,
    pub invoke: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            impl_: guint64,
            args: *mut guint64,
            args_length1: gint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub invoke_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint64,
    >,
    pub load_call_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            thread: *mut FridaGDBThread,
            arity: guint,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub load_call_frame_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaBareboneCallFrame,
    >,
    pub address_from_funcptr: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine, ptr: guint64) -> guint64,
    >,
    pub breakpoint_size_from_funcptr: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine, ptr: guint64) -> gsize,
    >,
    pub create_inline_hook: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            target: guint64,
            handler: guint64,
            allocator: *mut FridaBareboneAllocator,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub create_inline_hook_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneMachine,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut FridaBareboneInlineHook,
    >,
    pub get_gdb: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine) -> *mut FridaGDBClient,
    >,
    pub set_gdb: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine, value: *mut FridaGDBClient),
    >,
    pub get_llvm_target: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine) -> *const gchar,
    >,
    pub get_llvm_code_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneMachine) -> *const gchar,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneMachineIface"]
        [::std::mem::size_of::<_FridaBareboneMachineIface>() - 200usize];
    ["Alignment of _FridaBareboneMachineIface"]
        [::std::mem::align_of::<_FridaBareboneMachineIface>() - 8usize];
    ["Offset of field: _FridaBareboneMachineIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneMachineIface::query_page_size"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, query_page_size) - 16usize];
    ["Offset of field: _FridaBareboneMachineIface::query_page_size_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, query_page_size_finish) - 24usize];
    ["Offset of field: _FridaBareboneMachineIface::enumerate_ranges"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, enumerate_ranges) - 32usize];
    ["Offset of field: _FridaBareboneMachineIface::enumerate_ranges_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, enumerate_ranges_finish) - 40usize];
    ["Offset of field: _FridaBareboneMachineIface::allocate_pages"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, allocate_pages) - 48usize];
    ["Offset of field: _FridaBareboneMachineIface::allocate_pages_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, allocate_pages_finish) - 56usize];
    ["Offset of field: _FridaBareboneMachineIface::protect_pages"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, protect_pages) - 64usize];
    ["Offset of field: _FridaBareboneMachineIface::protect_pages_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, protect_pages_finish) - 72usize];
    ["Offset of field: _FridaBareboneMachineIface::scan_ranges"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, scan_ranges) - 80usize];
    ["Offset of field: _FridaBareboneMachineIface::scan_ranges_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, scan_ranges_finish) - 88usize];
    ["Offset of field: _FridaBareboneMachineIface::apply_relocation"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, apply_relocation) - 96usize];
    ["Offset of field: _FridaBareboneMachineIface::invoke"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, invoke) - 104usize];
    ["Offset of field: _FridaBareboneMachineIface::invoke_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, invoke_finish) - 112usize];
    ["Offset of field: _FridaBareboneMachineIface::load_call_frame"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, load_call_frame) - 120usize];
    ["Offset of field: _FridaBareboneMachineIface::load_call_frame_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, load_call_frame_finish) - 128usize];
    ["Offset of field: _FridaBareboneMachineIface::address_from_funcptr"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, address_from_funcptr) - 136usize];
    ["Offset of field: _FridaBareboneMachineIface::breakpoint_size_from_funcptr"][::std::mem::offset_of!(
        _FridaBareboneMachineIface,
        breakpoint_size_from_funcptr
    ) - 144usize];
    ["Offset of field: _FridaBareboneMachineIface::create_inline_hook"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, create_inline_hook) - 152usize];
    ["Offset of field: _FridaBareboneMachineIface::create_inline_hook_finish"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, create_inline_hook_finish) - 160usize];
    ["Offset of field: _FridaBareboneMachineIface::get_gdb"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, get_gdb) - 168usize];
    ["Offset of field: _FridaBareboneMachineIface::set_gdb"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, set_gdb) - 176usize];
    ["Offset of field: _FridaBareboneMachineIface::get_llvm_target"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, get_llvm_target) - 184usize];
    ["Offset of field: _FridaBareboneMachineIface::get_llvm_code_model"]
        [::std::mem::offset_of!(_FridaBareboneMachineIface, get_llvm_code_model) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAllocatorConfig {
    pub parent_instance: GObject,
    pub priv_: *mut FridaBareboneAllocatorConfigPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneAllocatorConfig"]
        [::std::mem::size_of::<_FridaBareboneAllocatorConfig>() - 32usize];
    ["Alignment of _FridaBareboneAllocatorConfig"]
        [::std::mem::align_of::<_FridaBareboneAllocatorConfig>() - 8usize];
    ["Offset of field: _FridaBareboneAllocatorConfig::parent_instance"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorConfig, parent_instance) - 0usize];
    ["Offset of field: _FridaBareboneAllocatorConfig::priv_"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorConfig, priv_) - 24usize];
};
impl Default for _FridaBareboneAllocatorConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneAllocatorConfigClass {
    pub parent_class: GObjectClass,
    pub get_is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneAllocatorConfig) -> gboolean,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneAllocatorConfigClass"]
        [::std::mem::size_of::<_FridaBareboneAllocatorConfigClass>() - 144usize];
    ["Alignment of _FridaBareboneAllocatorConfigClass"]
        [::std::mem::align_of::<_FridaBareboneAllocatorConfigClass>() - 8usize];
    ["Offset of field: _FridaBareboneAllocatorConfigClass::parent_class"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorConfigClass, parent_class) - 0usize];
    ["Offset of field: _FridaBareboneAllocatorConfigClass::get_is_valid"]
        [::std::mem::offset_of!(_FridaBareboneAllocatorConfigClass, get_is_valid) - 136usize];
};
impl Default for _FridaBareboneAllocatorConfigClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneRangeDetails {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaBareboneRangeDetailsPrivate,
    pub base_va: guint64,
    pub base_pa: guint64,
    pub size: guint64,
    pub protection: GumPageProtection,
    pub type_: FridaBareboneMappingType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneRangeDetails"]
        [::std::mem::size_of::<_FridaBareboneRangeDetails>() - 56usize];
    ["Alignment of _FridaBareboneRangeDetails"]
        [::std::mem::align_of::<_FridaBareboneRangeDetails>() - 8usize];
    ["Offset of field: _FridaBareboneRangeDetails::parent_instance"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, parent_instance) - 0usize];
    ["Offset of field: _FridaBareboneRangeDetails::ref_count"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, ref_count) - 8usize];
    ["Offset of field: _FridaBareboneRangeDetails::priv_"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, priv_) - 16usize];
    ["Offset of field: _FridaBareboneRangeDetails::base_va"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, base_va) - 24usize];
    ["Offset of field: _FridaBareboneRangeDetails::base_pa"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, base_pa) - 32usize];
    ["Offset of field: _FridaBareboneRangeDetails::size"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, size) - 40usize];
    ["Offset of field: _FridaBareboneRangeDetails::protection"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, protection) - 48usize];
    ["Offset of field: _FridaBareboneRangeDetails::type_"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetails, type_) - 52usize];
};
impl Default for _FridaBareboneRangeDetails {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneRangeDetailsClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneRangeDetails)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneRangeDetailsClass"]
        [::std::mem::size_of::<_FridaBareboneRangeDetailsClass>() - 16usize];
    ["Alignment of _FridaBareboneRangeDetailsClass"]
        [::std::mem::align_of::<_FridaBareboneRangeDetailsClass>() - 8usize];
    ["Offset of field: _FridaBareboneRangeDetailsClass::parent_class"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetailsClass, parent_class) - 0usize];
    ["Offset of field: _FridaBareboneRangeDetailsClass::finalize"]
        [::std::mem::offset_of!(_FridaBareboneRangeDetailsClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneCallbackHandlerIface {
    pub parent_iface: GTypeInterface,
    pub handle_invocation: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneCallbackHandler,
            args: *mut guint64,
            args_length1: gint,
            frame: *mut FridaBareboneCallFrame,
            cancellable: *mut GCancellable,
            _callback_: GAsyncReadyCallback,
            _user_data_: gpointer,
        ),
    >,
    pub handle_invocation_finish: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneCallbackHandler,
            _res_: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> guint64,
    >,
    pub get_arity: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneCallbackHandler) -> guint,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneCallbackHandlerIface"]
        [::std::mem::size_of::<_FridaBareboneCallbackHandlerIface>() - 40usize];
    ["Alignment of _FridaBareboneCallbackHandlerIface"]
        [::std::mem::align_of::<_FridaBareboneCallbackHandlerIface>() - 8usize];
    ["Offset of field: _FridaBareboneCallbackHandlerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneCallbackHandlerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneCallbackHandlerIface::handle_invocation"]
        [::std::mem::offset_of!(_FridaBareboneCallbackHandlerIface, handle_invocation) - 16usize];
    ["Offset of field: _FridaBareboneCallbackHandlerIface::handle_invocation_finish"][::std::mem::offset_of!(
        _FridaBareboneCallbackHandlerIface,
        handle_invocation_finish
    ) - 24usize];
    ["Offset of field: _FridaBareboneCallbackHandlerIface::get_arity"]
        [::std::mem::offset_of!(_FridaBareboneCallbackHandlerIface, get_arity) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneMatchPattern {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaBareboneMatchPatternPrivate,
    pub size: gsize,
    pub tokens: *mut GeeList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneMatchPattern"]
        [::std::mem::size_of::<_FridaBareboneMatchPattern>() - 40usize];
    ["Alignment of _FridaBareboneMatchPattern"]
        [::std::mem::align_of::<_FridaBareboneMatchPattern>() - 8usize];
    ["Offset of field: _FridaBareboneMatchPattern::parent_instance"]
        [::std::mem::offset_of!(_FridaBareboneMatchPattern, parent_instance) - 0usize];
    ["Offset of field: _FridaBareboneMatchPattern::ref_count"]
        [::std::mem::offset_of!(_FridaBareboneMatchPattern, ref_count) - 8usize];
    ["Offset of field: _FridaBareboneMatchPattern::priv_"]
        [::std::mem::offset_of!(_FridaBareboneMatchPattern, priv_) - 16usize];
    ["Offset of field: _FridaBareboneMatchPattern::size"]
        [::std::mem::offset_of!(_FridaBareboneMatchPattern, size) - 24usize];
    ["Offset of field: _FridaBareboneMatchPattern::tokens"]
        [::std::mem::offset_of!(_FridaBareboneMatchPattern, tokens) - 32usize];
};
impl Default for _FridaBareboneMatchPattern {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneMatchPatternClass {
    pub parent_class: GTypeClass,
    pub finalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneMatchPattern)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneMatchPatternClass"]
        [::std::mem::size_of::<_FridaBareboneMatchPatternClass>() - 16usize];
    ["Alignment of _FridaBareboneMatchPatternClass"]
        [::std::mem::align_of::<_FridaBareboneMatchPatternClass>() - 8usize];
    ["Offset of field: _FridaBareboneMatchPatternClass::parent_class"]
        [::std::mem::offset_of!(_FridaBareboneMatchPatternClass, parent_class) - 0usize];
    ["Offset of field: _FridaBareboneMatchPatternClass::finalize"]
        [::std::mem::offset_of!(_FridaBareboneMatchPatternClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaBareboneMatchToken {
    pub parent_instance: GTypeInstance,
    pub ref_count: ::std::os::raw::c_int,
    pub priv_: *mut FridaBareboneMatchTokenPrivate,
    pub kind: FridaBareboneMatchTokenKind,
    pub values: *mut GByteArray,
    pub masks: *mut GByteArray,
    pub size: gsize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneMatchToken"]
        [::std::mem::size_of::<_FridaBareboneMatchToken>() - 56usize];
    ["Alignment of _FridaBareboneMatchToken"]
        [::std::mem::align_of::<_FridaBareboneMatchToken>() - 8usize];
    ["Offset of field: _FridaBareboneMatchToken::parent_instance"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, parent_instance) - 0usize];
    ["Offset of field: _FridaBareboneMatchToken::ref_count"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, ref_count) - 8usize];
    ["Offset of field: _FridaBareboneMatchToken::priv_"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, priv_) - 16usize];
    ["Offset of field: _FridaBareboneMatchToken::kind"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, kind) - 24usize];
    ["Offset of field: _FridaBareboneMatchToken::values"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, values) - 32usize];
    ["Offset of field: _FridaBareboneMatchToken::masks"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, masks) - 40usize];
    ["Offset of field: _FridaBareboneMatchToken::size"]
        [::std::mem::offset_of!(_FridaBareboneMatchToken, size) - 48usize];
};
impl Default for _FridaBareboneMatchToken {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneMatchTokenClass {
    pub parent_class: GTypeClass,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(self_: *mut FridaBareboneMatchToken)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneMatchTokenClass"]
        [::std::mem::size_of::<_FridaBareboneMatchTokenClass>() - 16usize];
    ["Alignment of _FridaBareboneMatchTokenClass"]
        [::std::mem::align_of::<_FridaBareboneMatchTokenClass>() - 8usize];
    ["Offset of field: _FridaBareboneMatchTokenClass::parent_class"]
        [::std::mem::offset_of!(_FridaBareboneMatchTokenClass, parent_class) - 0usize];
    ["Offset of field: _FridaBareboneMatchTokenClass::finalize"]
        [::std::mem::offset_of!(_FridaBareboneMatchTokenClass, finalize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneInvocationListenerIface {
    pub parent_iface: GTypeInterface,
    pub get_kind: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneInvocationListener,
        ) -> FridaBareboneInvocationListenerKind,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneInvocationListenerIface"]
        [::std::mem::size_of::<_FridaBareboneInvocationListenerIface>() - 24usize];
    ["Alignment of _FridaBareboneInvocationListenerIface"]
        [::std::mem::align_of::<_FridaBareboneInvocationListenerIface>() - 8usize];
    ["Offset of field: _FridaBareboneInvocationListenerIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneInvocationListenerIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneInvocationListenerIface::get_kind"]
        [::std::mem::offset_of!(_FridaBareboneInvocationListenerIface, get_kind) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneInvocationContextIface {
    pub parent_iface: GTypeInterface,
    pub get_nth_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext, n: guint) -> guint64,
    >,
    pub replace_nth_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext, n: guint, val: guint64),
    >,
    pub get_return_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> guint64,
    >,
    pub replace_return_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext, retval: guint64),
    >,
    pub get_return_address: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> guint64,
    >,
    pub get_thread_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> *const gchar,
    >,
    pub get_depth: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> guint,
    >,
    pub get_registers: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> *mut GeeMap,
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInvocationContext) -> *mut GeeMap,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneInvocationContextIface"]
        [::std::mem::size_of::<_FridaBareboneInvocationContextIface>() - 88usize];
    ["Alignment of _FridaBareboneInvocationContextIface"]
        [::std::mem::align_of::<_FridaBareboneInvocationContextIface>() - 8usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::parent_iface"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, parent_iface) - 0usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_nth_argument"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_nth_argument) - 16usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::replace_nth_argument"][::std::mem::offset_of!(
        _FridaBareboneInvocationContextIface,
        replace_nth_argument
    ) - 24usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_return_value"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_return_value) - 32usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::replace_return_value"][::std::mem::offset_of!(
        _FridaBareboneInvocationContextIface,
        replace_return_value
    ) - 40usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_return_address"][::std::mem::offset_of!(
        _FridaBareboneInvocationContextIface,
        get_return_address
    ) - 48usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_thread_id"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_thread_id) - 56usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_depth"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_depth) - 64usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_registers"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_registers) - 72usize];
    ["Offset of field: _FridaBareboneInvocationContextIface::get_user_data"]
        [::std::mem::offset_of!(_FridaBareboneInvocationContextIface, get_user_data) - 80usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneBreakpointInvocationListenerIface {
    pub parent_iface: GTypeInterface,
    pub on_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneBreakpointInvocationListener,
            context: *mut FridaBareboneInvocationContext,
        ),
    >,
    pub on_leave: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut FridaBareboneBreakpointInvocationListener,
            context: *mut FridaBareboneInvocationContext,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneBreakpointInvocationListenerIface"]
        [::std::mem::size_of::<_FridaBareboneBreakpointInvocationListenerIface>() - 32usize];
    ["Alignment of _FridaBareboneBreakpointInvocationListenerIface"]
        [::std::mem::align_of::<_FridaBareboneBreakpointInvocationListenerIface>() - 8usize];
    ["Offset of field: _FridaBareboneBreakpointInvocationListenerIface::parent_iface"][::std::mem::offset_of!(
        _FridaBareboneBreakpointInvocationListenerIface,
        parent_iface
    ) - 0usize];
    ["Offset of field: _FridaBareboneBreakpointInvocationListenerIface::on_enter"][::std::mem::offset_of!(
        _FridaBareboneBreakpointInvocationListenerIface,
        on_enter
    ) - 16usize];
    ["Offset of field: _FridaBareboneBreakpointInvocationListenerIface::on_leave"][::std::mem::offset_of!(
        _FridaBareboneBreakpointInvocationListenerIface,
        on_leave
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FridaBareboneInlineInvocationListenerIface {
    pub parent_iface: GTypeInterface,
    pub get_on_enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInlineInvocationListener) -> guint64,
    >,
    pub get_on_leave: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FridaBareboneInlineInvocationListener) -> guint64,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaBareboneInlineInvocationListenerIface"]
        [::std::mem::size_of::<_FridaBareboneInlineInvocationListenerIface>() - 32usize];
    ["Alignment of _FridaBareboneInlineInvocationListenerIface"]
        [::std::mem::align_of::<_FridaBareboneInlineInvocationListenerIface>() - 8usize];
    ["Offset of field: _FridaBareboneInlineInvocationListenerIface::parent_iface"][::std::mem::offset_of!(
        _FridaBareboneInlineInvocationListenerIface,
        parent_iface
    ) - 0usize];
    ["Offset of field: _FridaBareboneInlineInvocationListenerIface::get_on_enter"][::std::mem::offset_of!(
        _FridaBareboneInlineInvocationListenerIface,
        get_on_enter
    ) - 16usize];
    ["Offset of field: _FridaBareboneInlineInvocationListenerIface::get_on_leave"][::std::mem::offset_of!(
        _FridaBareboneInlineInvocationListenerIface,
        get_on_leave
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCompilerOptions {
    pub parent_instance: GObject,
    pub priv_: *mut FridaCompilerOptionsPrivate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaCompilerOptions"][::std::mem::size_of::<_FridaCompilerOptions>() - 32usize];
    ["Alignment of _FridaCompilerOptions"]
        [::std::mem::align_of::<_FridaCompilerOptions>() - 8usize];
    ["Offset of field: _FridaCompilerOptions::parent_instance"]
        [::std::mem::offset_of!(_FridaCompilerOptions, parent_instance) - 0usize];
    ["Offset of field: _FridaCompilerOptions::priv_"]
        [::std::mem::offset_of!(_FridaCompilerOptions, priv_) - 24usize];
};
impl Default for _FridaCompilerOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FridaCompilerOptionsClass {
    pub parent_class: GObjectClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FridaCompilerOptionsClass"]
        [::std::mem::size_of::<_FridaCompilerOptionsClass>() - 136usize];
    ["Alignment of _FridaCompilerOptionsClass"]
        [::std::mem::align_of::<_FridaCompilerOptionsClass>() - 8usize];
    ["Offset of field: _FridaCompilerOptionsClass::parent_class"]
        [::std::mem::offset_of!(_FridaCompilerOptionsClass, parent_class) - 0usize];
};
impl Default for _FridaCompilerOptionsClass {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn frida_init();
}
unsafe extern "C" {
    pub fn frida_runtime_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_init_with_runtime(runtime: FridaRuntime);
}
unsafe extern "C" {
    pub fn frida_shutdown();
}
unsafe extern "C" {
    pub fn frida_deinit();
}
unsafe extern "C" {
    pub fn frida_get_main_context() -> *mut GMainContext;
}
unsafe extern "C" {
    pub fn frida_unref(obj: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn frida_version(major: *mut guint, minor: *mut guint, micro: *mut guint, nano: *mut guint);
}
unsafe extern "C" {
    pub fn frida_version_string() -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_runtime_from_nick(nick: *const gchar, error: *mut *mut GError) -> FridaRuntime;
}
unsafe extern "C" {
    pub fn frida_runtime_to_nick(self_: FridaRuntime) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_type() -> GType;
}
pub type FridaDeviceManager_autoptr = *mut FridaDeviceManager;
pub type FridaDeviceManager_listautoptr = *mut GList;
pub type FridaDeviceManager_slistautoptr = *mut GSList;
pub type FridaDeviceManager_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_manager_new() -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_construct(object_type: GType) -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_new_with_nonlocal_backends_only() -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_construct_with_nonlocal_backends_only(
        object_type: GType,
    ) -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_new_with_socket_backend_only() -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_construct_with_socket_backend_only(
        object_type: GType,
    ) -> *mut FridaDeviceManager;
}
unsafe extern "C" {
    pub fn frida_device_manager_close(
        self_: *mut FridaDeviceManager,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_close_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_close_sync(
        self_: *mut FridaDeviceManager,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_id(
        self_: *mut FridaDeviceManager,
        id: *const gchar,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_get_type() -> GType;
}
pub type FridaDevice_autoptr = *mut FridaDevice;
pub type FridaDevice_listautoptr = *mut GList;
pub type FridaDevice_slistautoptr = *mut GSList;
pub type FridaDevice_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_id_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_id_sync(
        self_: *mut FridaDeviceManager,
        id: *const gchar,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_type(
        self_: *mut FridaDeviceManager,
        type_: FridaDeviceType,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_type_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_by_type_sync(
        self_: *mut FridaDeviceManager,
        type_: FridaDeviceType,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device(
        self_: *mut FridaDeviceManager,
        predicate: FridaDeviceManagerPredicate,
        predicate_target: gpointer,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_get_device_sync(
        self_: *mut FridaDeviceManager,
        predicate: FridaDeviceManagerPredicate,
        predicate_target: gpointer,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_id(
        self_: *mut FridaDeviceManager,
        id: *const gchar,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_id_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_id_sync(
        self_: *mut FridaDeviceManager,
        id: *const gchar,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_type(
        self_: *mut FridaDeviceManager,
        type_: FridaDeviceType,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_type_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_by_type_sync(
        self_: *mut FridaDeviceManager,
        type_: FridaDeviceType,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device(
        self_: *mut FridaDeviceManager,
        predicate: FridaDeviceManagerPredicate,
        predicate_target: gpointer,
        timeout: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_find_device_sync(
        self_: *mut FridaDeviceManager,
        predicate: FridaDeviceManagerPredicate,
        predicate_target: gpointer,
        timeout: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_enumerate_devices(
        self_: *mut FridaDeviceManager,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_list_get_type() -> GType;
}
pub type FridaDeviceList_autoptr = *mut FridaDeviceList;
pub type FridaDeviceList_listautoptr = *mut GList;
pub type FridaDeviceList_slistautoptr = *mut GSList;
pub type FridaDeviceList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_manager_enumerate_devices_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDeviceList;
}
unsafe extern "C" {
    pub fn frida_device_manager_enumerate_devices_sync(
        self_: *mut FridaDeviceManager,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDeviceList;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_get_type() -> GType;
}
pub type FridaRemoteDeviceOptions_autoptr = *mut FridaRemoteDeviceOptions;
pub type FridaRemoteDeviceOptions_listautoptr = *mut GList;
pub type FridaRemoteDeviceOptions_slistautoptr = *mut GSList;
pub type FridaRemoteDeviceOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_manager_add_remote_device(
        self_: *mut FridaDeviceManager,
        address: *const gchar,
        options: *mut FridaRemoteDeviceOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_add_remote_device_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_add_remote_device_sync(
        self_: *mut FridaDeviceManager,
        address: *const gchar,
        options: *mut FridaRemoteDeviceOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_manager_remove_remote_device(
        self_: *mut FridaDeviceManager,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_remove_remote_device_finish(
        self_: *mut FridaDeviceManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_manager_remove_remote_device_sync(
        self_: *mut FridaDeviceManager,
        address: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_list_size(self_: *mut FridaDeviceList) -> gint;
}
unsafe extern "C" {
    pub fn frida_device_list_get(self_: *mut FridaDeviceList, index: gint) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_device_is_lost(self_: *mut FridaDevice) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_device_query_system_parameters(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_query_system_parameters_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_device_query_system_parameters_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_device_get_frontmost_application(
        self_: *mut FridaDevice,
        options: *mut FridaFrontmostQueryOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_application_get_type() -> GType;
}
pub type FridaApplication_autoptr = *mut FridaApplication;
pub type FridaApplication_listautoptr = *mut GList;
pub type FridaApplication_slistautoptr = *mut GSList;
pub type FridaApplication_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_get_frontmost_application_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaApplication;
}
unsafe extern "C" {
    pub fn frida_device_get_frontmost_application_sync(
        self_: *mut FridaDevice,
        options: *mut FridaFrontmostQueryOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaApplication;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_applications(
        self_: *mut FridaDevice,
        options: *mut FridaApplicationQueryOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_application_list_get_type() -> GType;
}
pub type FridaApplicationList_autoptr = *mut FridaApplicationList;
pub type FridaApplicationList_listautoptr = *mut GList;
pub type FridaApplicationList_slistautoptr = *mut GSList;
pub type FridaApplicationList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_enumerate_applications_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaApplicationList;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_applications_sync(
        self_: *mut FridaDevice,
        options: *mut FridaApplicationQueryOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaApplicationList;
}
unsafe extern "C" {
    pub fn frida_process_match_options_get_type() -> GType;
}
pub type FridaProcessMatchOptions_autoptr = *mut FridaProcessMatchOptions;
pub type FridaProcessMatchOptions_listautoptr = *mut GList;
pub type FridaProcessMatchOptions_slistautoptr = *mut GSList;
pub type FridaProcessMatchOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_get_process_by_pid(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_process_get_type() -> GType;
}
pub type FridaProcess_autoptr = *mut FridaProcess;
pub type FridaProcess_listautoptr = *mut GList;
pub type FridaProcess_slistautoptr = *mut GSList;
pub type FridaProcess_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_get_process_by_pid_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_get_process_by_pid_sync(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_get_process_by_name(
        self_: *mut FridaDevice,
        name: *const gchar,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_get_process_by_name_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_get_process_by_name_sync(
        self_: *mut FridaDevice,
        name: *const gchar,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_get_process(
        self_: *mut FridaDevice,
        predicate: FridaDeviceProcessPredicate,
        predicate_target: gpointer,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_get_process_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_get_process_sync(
        self_: *mut FridaDevice,
        predicate: FridaDeviceProcessPredicate,
        predicate_target: gpointer,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_pid(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_pid_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_pid_sync(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_name(
        self_: *mut FridaDevice,
        name: *const gchar,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_name_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process_by_name_sync(
        self_: *mut FridaDevice,
        name: *const gchar,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process(
        self_: *mut FridaDevice,
        predicate: FridaDeviceProcessPredicate,
        predicate_target: gpointer,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_find_process_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_find_process_sync(
        self_: *mut FridaDevice,
        predicate: FridaDeviceProcessPredicate,
        predicate_target: gpointer,
        options: *mut FridaProcessMatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_processes(
        self_: *mut FridaDevice,
        options: *mut FridaProcessQueryOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_process_list_get_type() -> GType;
}
pub type FridaProcessList_autoptr = *mut FridaProcessList;
pub type FridaProcessList_listautoptr = *mut GList;
pub type FridaProcessList_slistautoptr = *mut GSList;
pub type FridaProcessList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_enumerate_processes_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaProcessList;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_processes_sync(
        self_: *mut FridaDevice,
        options: *mut FridaProcessQueryOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaProcessList;
}
unsafe extern "C" {
    pub fn frida_device_enable_spawn_gating(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_enable_spawn_gating_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_enable_spawn_gating_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_disable_spawn_gating(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_disable_spawn_gating_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_disable_spawn_gating_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_spawn(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_spawn_list_get_type() -> GType;
}
pub type FridaSpawnList_autoptr = *mut FridaSpawnList;
pub type FridaSpawnList_listautoptr = *mut GList;
pub type FridaSpawnList_slistautoptr = *mut GSList;
pub type FridaSpawnList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_spawn_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaSpawnList;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_spawn_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaSpawnList;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_children(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_child_list_get_type() -> GType;
}
pub type FridaChildList_autoptr = *mut FridaChildList;
pub type FridaChildList_listautoptr = *mut GList;
pub type FridaChildList_slistautoptr = *mut GSList;
pub type FridaChildList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_children_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaChildList;
}
unsafe extern "C" {
    pub fn frida_device_enumerate_pending_children_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaChildList;
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_type() -> GType;
}
pub type FridaSpawnOptions_autoptr = *mut FridaSpawnOptions;
pub type FridaSpawnOptions_listautoptr = *mut GList;
pub type FridaSpawnOptions_slistautoptr = *mut GSList;
pub type FridaSpawnOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_spawn(
        self_: *mut FridaDevice,
        program: *const gchar,
        options: *mut FridaSpawnOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_spawn_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_spawn_sync(
        self_: *mut FridaDevice,
        program: *const gchar,
        options: *mut FridaSpawnOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_input(
        self_: *mut FridaDevice,
        pid: guint,
        data: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_input_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_input_sync(
        self_: *mut FridaDevice,
        pid: guint,
        data: *mut GBytes,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_resume(
        self_: *mut FridaDevice,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_resume_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_resume_sync(
        self_: *mut FridaDevice,
        pid: guint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_kill(
        self_: *mut FridaDevice,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_kill_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_kill_sync(
        self_: *mut FridaDevice,
        pid: guint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_attach(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaSessionOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_get_type() -> GType;
}
pub type FridaSession_autoptr = *mut FridaSession;
pub type FridaSession_listautoptr = *mut GList;
pub type FridaSession_slistautoptr = *mut GSList;
pub type FridaSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_attach_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaSession;
}
unsafe extern "C" {
    pub fn frida_device_attach_sync(
        self_: *mut FridaDevice,
        pid: guint,
        options: *mut FridaSessionOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaSession;
}
unsafe extern "C" {
    pub fn frida_device_inject_library_file(
        self_: *mut FridaDevice,
        pid: guint,
        path: *const gchar,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_inject_library_file_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_inject_library_file_sync(
        self_: *mut FridaDevice,
        pid: guint,
        path: *const gchar,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_inject_library_blob(
        self_: *mut FridaDevice,
        pid: guint,
        blob: *mut GBytes,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_inject_library_blob_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_inject_library_blob_sync(
        self_: *mut FridaDevice,
        pid: guint,
        blob: *mut GBytes,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_device_open_channel(
        self_: *mut FridaDevice,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_open_channel_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_device_open_channel_sync(
        self_: *mut FridaDevice,
        address: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_device_open_service(
        self_: *mut FridaDevice,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_get_type() -> GType;
}
pub type FridaService_autoptr = *mut FridaService;
pub type FridaService_listautoptr = *mut GList;
pub type FridaService_slistautoptr = *mut GSList;
pub type FridaService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_open_service_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaService;
}
unsafe extern "C" {
    pub fn frida_device_open_service_sync(
        self_: *mut FridaDevice,
        address: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaService;
}
unsafe extern "C" {
    pub fn frida_device_unpair(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_device_unpair_finish(
        self_: *mut FridaDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_unpair_sync(
        self_: *mut FridaDevice,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_device_get_id(self_: *mut FridaDevice) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_device_get_name(self_: *mut FridaDevice) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_device_get_icon(self_: *mut FridaDevice) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_device_get_dtype(self_: *mut FridaDevice) -> FridaDeviceType;
}
unsafe extern "C" {
    pub fn frida_bus_get_type() -> GType;
}
pub type FridaBus_autoptr = *mut FridaBus;
pub type FridaBus_listautoptr = *mut GList;
pub type FridaBus_slistautoptr = *mut GSList;
pub type FridaBus_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_device_get_bus(self_: *mut FridaDevice) -> *mut FridaBus;
}
unsafe extern "C" {
    pub fn frida_device_type_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaDeviceType;
}
unsafe extern "C" {
    pub fn frida_device_type_to_nick(self_: FridaDeviceType) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_new() -> *mut FridaRemoteDeviceOptions;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_construct(
        object_type: GType,
    ) -> *mut FridaRemoteDeviceOptions;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_get_certificate(
        self_: *mut FridaRemoteDeviceOptions,
    ) -> *mut GTlsCertificate;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_set_certificate(
        self_: *mut FridaRemoteDeviceOptions,
        value: *mut GTlsCertificate,
    );
}
unsafe extern "C" {
    pub fn frida_remote_device_options_get_origin(
        self_: *mut FridaRemoteDeviceOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_set_origin(
        self_: *mut FridaRemoteDeviceOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_remote_device_options_get_token(
        self_: *mut FridaRemoteDeviceOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_set_token(
        self_: *mut FridaRemoteDeviceOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_remote_device_options_get_keepalive_interval(
        self_: *mut FridaRemoteDeviceOptions,
    ) -> gint;
}
unsafe extern "C" {
    pub fn frida_remote_device_options_set_keepalive_interval(
        self_: *mut FridaRemoteDeviceOptions,
        value: gint,
    );
}
unsafe extern "C" {
    pub fn frida_application_list_size(self_: *mut FridaApplicationList) -> gint;
}
unsafe extern "C" {
    pub fn frida_application_list_get(
        self_: *mut FridaApplicationList,
        index: gint,
    ) -> *mut FridaApplication;
}
unsafe extern "C" {
    pub fn frida_application_get_identifier(self_: *mut FridaApplication) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_application_get_name(self_: *mut FridaApplication) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_application_get_pid(self_: *mut FridaApplication) -> guint;
}
unsafe extern "C" {
    pub fn frida_application_get_parameters(self_: *mut FridaApplication) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_process_list_size(self_: *mut FridaProcessList) -> gint;
}
unsafe extern "C" {
    pub fn frida_process_list_get(self_: *mut FridaProcessList, index: gint) -> *mut FridaProcess;
}
unsafe extern "C" {
    pub fn frida_process_get_pid(self_: *mut FridaProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_process_get_name(self_: *mut FridaProcess) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_process_get_parameters(self_: *mut FridaProcess) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_process_match_options_new() -> *mut FridaProcessMatchOptions;
}
unsafe extern "C" {
    pub fn frida_process_match_options_construct(
        object_type: GType,
    ) -> *mut FridaProcessMatchOptions;
}
unsafe extern "C" {
    pub fn frida_process_match_options_get_timeout(self_: *mut FridaProcessMatchOptions) -> gint;
}
unsafe extern "C" {
    pub fn frida_process_match_options_set_timeout(
        self_: *mut FridaProcessMatchOptions,
        value: gint,
    );
}
unsafe extern "C" {
    pub fn frida_process_match_options_get_scope(
        self_: *mut FridaProcessMatchOptions,
    ) -> FridaScope;
}
unsafe extern "C" {
    pub fn frida_process_match_options_set_scope(
        self_: *mut FridaProcessMatchOptions,
        value: FridaScope,
    );
}
unsafe extern "C" {
    pub fn frida_spawn_options_new() -> *mut FridaSpawnOptions;
}
unsafe extern "C" {
    pub fn frida_spawn_options_construct(object_type: GType) -> *mut FridaSpawnOptions;
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_argv(
        self_: *mut FridaSpawnOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_argv(
        self_: *mut FridaSpawnOptions,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_envp(
        self_: *mut FridaSpawnOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_envp(
        self_: *mut FridaSpawnOptions,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_env(
        self_: *mut FridaSpawnOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_env(
        self_: *mut FridaSpawnOptions,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_cwd(self_: *mut FridaSpawnOptions) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_cwd(self_: *mut FridaSpawnOptions, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_stdio(self_: *mut FridaSpawnOptions) -> FridaStdio;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_stdio(self_: *mut FridaSpawnOptions, value: FridaStdio);
}
unsafe extern "C" {
    pub fn frida_spawn_options_get_aux(self_: *mut FridaSpawnOptions) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_spawn_options_set_aux(self_: *mut FridaSpawnOptions, value: *mut GHashTable);
}
unsafe extern "C" {
    pub fn frida_spawn_list_size(self_: *mut FridaSpawnList) -> gint;
}
unsafe extern "C" {
    pub fn frida_spawn_get_type() -> GType;
}
pub type FridaSpawn_autoptr = *mut FridaSpawn;
pub type FridaSpawn_listautoptr = *mut GList;
pub type FridaSpawn_slistautoptr = *mut GSList;
pub type FridaSpawn_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_spawn_list_get(self_: *mut FridaSpawnList, index: gint) -> *mut FridaSpawn;
}
unsafe extern "C" {
    pub fn frida_spawn_get_pid(self_: *mut FridaSpawn) -> guint;
}
unsafe extern "C" {
    pub fn frida_spawn_get_identifier(self_: *mut FridaSpawn) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_child_list_size(self_: *mut FridaChildList) -> gint;
}
unsafe extern "C" {
    pub fn frida_child_get_type() -> GType;
}
pub type FridaChild_autoptr = *mut FridaChild;
pub type FridaChild_listautoptr = *mut GList;
pub type FridaChild_slistautoptr = *mut GSList;
pub type FridaChild_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_child_list_get(self_: *mut FridaChildList, index: gint) -> *mut FridaChild;
}
unsafe extern "C" {
    pub fn frida_child_get_pid(self_: *mut FridaChild) -> guint;
}
unsafe extern "C" {
    pub fn frida_child_get_parent_pid(self_: *mut FridaChild) -> guint;
}
unsafe extern "C" {
    pub fn frida_child_get_origin(self_: *mut FridaChild) -> FridaChildOrigin;
}
unsafe extern "C" {
    pub fn frida_child_get_identifier(self_: *mut FridaChild) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_child_get_path(self_: *mut FridaChild) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_child_get_argv(
        self_: *mut FridaChild,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_child_get_envp(
        self_: *mut FridaChild,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_crash_get_type() -> GType;
}
pub type FridaCrash_autoptr = *mut FridaCrash;
pub type FridaCrash_listautoptr = *mut GList;
pub type FridaCrash_slistautoptr = *mut GSList;
pub type FridaCrash_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_crash_get_pid(self_: *mut FridaCrash) -> guint;
}
unsafe extern "C" {
    pub fn frida_crash_get_process_name(self_: *mut FridaCrash) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_crash_get_summary(self_: *mut FridaCrash) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_crash_get_report(self_: *mut FridaCrash) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_crash_get_parameters(self_: *mut FridaCrash) -> *mut GHashTable;
}
unsafe extern "C" {
    pub fn frida_bus_is_detached(self_: *mut FridaBus) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_bus_attach(
        self_: *mut FridaBus,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_bus_attach_finish(
        self_: *mut FridaBus,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_bus_attach_sync(
        self_: *mut FridaBus,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_bus_post(self_: *mut FridaBus, json: *const gchar, data: *mut GBytes);
}
unsafe extern "C" {
    pub fn frida_service_is_closed(self_: *mut FridaService) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_service_activate(
        self_: *mut FridaService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_activate_finish(
        self_: *mut FridaService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_activate_sync(
        self_: *mut FridaService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_cancel(
        self_: *mut FridaService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_cancel_finish(
        self_: *mut FridaService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_cancel_sync(
        self_: *mut FridaService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_service_request(
        self_: *mut FridaService,
        parameters: *mut GVariant,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_service_request_finish(
        self_: *mut FridaService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_service_request_sync(
        self_: *mut FridaService,
        parameters: *mut GVariant,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_session_is_detached(self_: *mut FridaSession) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_session_detach(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_detach_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_detach_sync(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_resume(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_resume_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_resume_sync(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_enable_child_gating(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_enable_child_gating_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_enable_child_gating_sync(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_disable_child_gating(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_disable_child_gating_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_disable_child_gating_sync(
        self_: *mut FridaSession,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_create_script(
        self_: *mut FridaSession,
        source: *const gchar,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_get_type() -> GType;
}
pub type FridaScript_autoptr = *mut FridaScript;
pub type FridaScript_listautoptr = *mut GList;
pub type FridaScript_slistautoptr = *mut GSList;
pub type FridaScript_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_session_create_script_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaScript;
}
unsafe extern "C" {
    pub fn frida_session_create_script_sync(
        self_: *mut FridaSession,
        source: *const gchar,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaScript;
}
unsafe extern "C" {
    pub fn frida_session_create_script_from_bytes(
        self_: *mut FridaSession,
        bytes: *mut GBytes,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_create_script_from_bytes_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaScript;
}
unsafe extern "C" {
    pub fn frida_session_create_script_from_bytes_sync(
        self_: *mut FridaSession,
        bytes: *mut GBytes,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaScript;
}
unsafe extern "C" {
    pub fn frida_session_compile_script(
        self_: *mut FridaSession,
        source: *const gchar,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_compile_script_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_session_compile_script_sync(
        self_: *mut FridaSession,
        source: *const gchar,
        options: *mut FridaScriptOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_session_snapshot_script(
        self_: *mut FridaSession,
        embed_script: *const gchar,
        options: *mut FridaSnapshotOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_snapshot_script_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_session_snapshot_script_sync(
        self_: *mut FridaSession,
        embed_script: *const gchar,
        options: *mut FridaSnapshotOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_session_setup_peer_connection(
        self_: *mut FridaSession,
        options: *mut FridaPeerOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_session_setup_peer_connection_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_setup_peer_connection_sync(
        self_: *mut FridaSession,
        options: *mut FridaPeerOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_session_join_portal(
        self_: *mut FridaSession,
        address: *const gchar,
        options: *mut FridaPortalOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_portal_membership_get_type() -> GType;
}
pub type FridaPortalMembership_autoptr = *mut FridaPortalMembership;
pub type FridaPortalMembership_listautoptr = *mut GList;
pub type FridaPortalMembership_slistautoptr = *mut GSList;
pub type FridaPortalMembership_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_session_join_portal_finish(
        self_: *mut FridaSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaPortalMembership;
}
unsafe extern "C" {
    pub fn frida_session_join_portal_sync(
        self_: *mut FridaSession,
        address: *const gchar,
        options: *mut FridaPortalOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaPortalMembership;
}
unsafe extern "C" {
    pub fn frida_session_get_pid(self_: *mut FridaSession) -> guint;
}
unsafe extern "C" {
    pub fn frida_session_get_persist_timeout(self_: *mut FridaSession) -> guint;
}
unsafe extern "C" {
    pub fn frida_script_is_destroyed(self_: *mut FridaScript) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_script_load(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_load_finish(
        self_: *mut FridaScript,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_load_sync(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_unload(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_unload_finish(
        self_: *mut FridaScript,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_unload_sync(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_eternalize(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_eternalize_finish(
        self_: *mut FridaScript,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_eternalize_sync(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_post(self_: *mut FridaScript, json: *const gchar, data: *mut GBytes);
}
unsafe extern "C" {
    pub fn frida_script_enable_debugger(
        self_: *mut FridaScript,
        port: guint16,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_enable_debugger_finish(
        self_: *mut FridaScript,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_enable_debugger_sync(
        self_: *mut FridaScript,
        port: guint16,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_disable_debugger(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_script_disable_debugger_finish(
        self_: *mut FridaScript,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_script_disable_debugger_sync(
        self_: *mut FridaScript,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_membership_terminate(
        self_: *mut FridaPortalMembership,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_portal_membership_terminate_finish(
        self_: *mut FridaPortalMembership,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_membership_terminate_sync(
        self_: *mut FridaPortalMembership,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_get_type() -> GType;
}
pub type FridaInjector_autoptr = *mut FridaInjector;
pub type FridaInjector_listautoptr = *mut GList;
pub type FridaInjector_slistautoptr = *mut GSList;
pub type FridaInjector_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_injector_new() -> *mut FridaInjector;
}
unsafe extern "C" {
    pub fn frida_injector_new_inprocess() -> *mut FridaInjector;
}
unsafe extern "C" {
    pub fn frida_injector_close(
        self_: *mut FridaInjector,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_close_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_close_sync(
        self_: *mut FridaInjector,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_file(
        self_: *mut FridaInjector,
        pid: guint,
        path: *const gchar,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_file_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_file_sync(
        self_: *mut FridaInjector,
        pid: guint,
        path: *const gchar,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_blob(
        self_: *mut FridaInjector,
        pid: guint,
        blob: *mut GBytes,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_blob_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_inject_library_blob_sync(
        self_: *mut FridaInjector,
        pid: guint,
        blob: *mut GBytes,
        entrypoint: *const gchar,
        data: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_demonitor(
        self_: *mut FridaInjector,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_demonitor_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_demonitor_sync(
        self_: *mut FridaInjector,
        id: guint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_demonitor_and_clone_state(
        self_: *mut FridaInjector,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_demonitor_and_clone_state_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_demonitor_and_clone_state_sync(
        self_: *mut FridaInjector,
        id: guint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_injector_recreate_thread(
        self_: *mut FridaInjector,
        pid: guint,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_injector_recreate_thread_finish(
        self_: *mut FridaInjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_injector_recreate_thread_sync(
        self_: *mut FridaInjector,
        pid: guint,
        id: guint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_on_pending_garbage(data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn frida_package_manager_get_type() -> GType;
}
pub type FridaPackageManager_autoptr = *mut FridaPackageManager;
pub type FridaPackageManager_listautoptr = *mut GList;
pub type FridaPackageManager_slistautoptr = *mut GSList;
pub type FridaPackageManager_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_manager_new() -> *mut FridaPackageManager;
}
unsafe extern "C" {
    pub fn frida_package_manager_construct(object_type: GType) -> *mut FridaPackageManager;
}
unsafe extern "C" {
    pub fn frida_package_search_options_get_type() -> GType;
}
pub type FridaPackageSearchOptions_autoptr = *mut FridaPackageSearchOptions;
pub type FridaPackageSearchOptions_listautoptr = *mut GList;
pub type FridaPackageSearchOptions_slistautoptr = *mut GSList;
pub type FridaPackageSearchOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_manager_search(
        self_: *mut FridaPackageManager,
        query: *const gchar,
        options: *mut FridaPackageSearchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_package_search_result_get_type() -> GType;
}
pub type FridaPackageSearchResult_autoptr = *mut FridaPackageSearchResult;
pub type FridaPackageSearchResult_listautoptr = *mut GList;
pub type FridaPackageSearchResult_slistautoptr = *mut GSList;
pub type FridaPackageSearchResult_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_manager_search_finish(
        self_: *mut FridaPackageManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaPackageSearchResult;
}
unsafe extern "C" {
    pub fn frida_package_manager_search_sync(
        self_: *mut FridaPackageManager,
        query: *const gchar,
        options: *mut FridaPackageSearchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaPackageSearchResult;
}
unsafe extern "C" {
    pub fn frida_package_install_options_get_type() -> GType;
}
pub type FridaPackageInstallOptions_autoptr = *mut FridaPackageInstallOptions;
pub type FridaPackageInstallOptions_listautoptr = *mut GList;
pub type FridaPackageInstallOptions_slistautoptr = *mut GSList;
pub type FridaPackageInstallOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_manager_install(
        self_: *mut FridaPackageManager,
        options: *mut FridaPackageInstallOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_package_install_result_get_type() -> GType;
}
pub type FridaPackageInstallResult_autoptr = *mut FridaPackageInstallResult;
pub type FridaPackageInstallResult_listautoptr = *mut GList;
pub type FridaPackageInstallResult_slistautoptr = *mut GSList;
pub type FridaPackageInstallResult_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_manager_install_finish(
        self_: *mut FridaPackageManager,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaPackageInstallResult;
}
unsafe extern "C" {
    pub fn frida_package_manager_install_sync(
        self_: *mut FridaPackageManager,
        options: *mut FridaPackageInstallOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut FridaPackageInstallResult;
}
unsafe extern "C" {
    pub fn frida_package_manager_get_registry(self_: *mut FridaPackageManager) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_manager_set_registry(self_: *mut FridaPackageManager, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_package_install_phase_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_package_get_type() -> GType;
}
pub type FridaPackage_autoptr = *mut FridaPackage;
pub type FridaPackage_listautoptr = *mut GList;
pub type FridaPackage_slistautoptr = *mut GSList;
pub type FridaPackage_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_get_name(self_: *mut FridaPackage) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_get_version(self_: *mut FridaPackage) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_get_description(self_: *mut FridaPackage) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_get_url(self_: *mut FridaPackage) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_role_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_package_list_get_type() -> GType;
}
pub type FridaPackageList_autoptr = *mut FridaPackageList;
pub type FridaPackageList_listautoptr = *mut GList;
pub type FridaPackageList_slistautoptr = *mut GSList;
pub type FridaPackageList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_package_list_size(self_: *mut FridaPackageList) -> gint;
}
unsafe extern "C" {
    pub fn frida_package_list_get(self_: *mut FridaPackageList, index: gint) -> *mut FridaPackage;
}
unsafe extern "C" {
    pub fn frida_package_search_options_new() -> *mut FridaPackageSearchOptions;
}
unsafe extern "C" {
    pub fn frida_package_search_options_construct(
        object_type: GType,
    ) -> *mut FridaPackageSearchOptions;
}
unsafe extern "C" {
    pub fn frida_package_search_options_get_offset(self_: *mut FridaPackageSearchOptions) -> guint;
}
unsafe extern "C" {
    pub fn frida_package_search_options_set_offset(
        self_: *mut FridaPackageSearchOptions,
        value: guint,
    );
}
unsafe extern "C" {
    pub fn frida_package_search_options_get_limit(self_: *mut FridaPackageSearchOptions) -> guint;
}
unsafe extern "C" {
    pub fn frida_package_search_options_set_limit(
        self_: *mut FridaPackageSearchOptions,
        value: guint,
    );
}
unsafe extern "C" {
    pub fn frida_package_search_result_get_packages(
        self_: *mut FridaPackageSearchResult,
    ) -> *mut FridaPackageList;
}
unsafe extern "C" {
    pub fn frida_package_search_result_get_total(self_: *mut FridaPackageSearchResult) -> guint;
}
unsafe extern "C" {
    pub fn frida_package_install_options_clear_specs(self_: *mut FridaPackageInstallOptions);
}
unsafe extern "C" {
    pub fn frida_package_install_options_add_spec(
        self_: *mut FridaPackageInstallOptions,
        spec: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_package_install_options_clear_omits(self_: *mut FridaPackageInstallOptions);
}
unsafe extern "C" {
    pub fn frida_package_install_options_add_omit(
        self_: *mut FridaPackageInstallOptions,
        role: FridaPackageRole,
    );
}
unsafe extern "C" {
    pub fn frida_package_install_options_new() -> *mut FridaPackageInstallOptions;
}
unsafe extern "C" {
    pub fn frida_package_install_options_construct(
        object_type: GType,
    ) -> *mut FridaPackageInstallOptions;
}
unsafe extern "C" {
    pub fn frida_package_install_options_get_project_root(
        self_: *mut FridaPackageInstallOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_package_install_options_set_project_root(
        self_: *mut FridaPackageInstallOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_package_install_options_get_role(
        self_: *mut FridaPackageInstallOptions,
    ) -> FridaPackageRole;
}
unsafe extern "C" {
    pub fn frida_package_install_options_set_role(
        self_: *mut FridaPackageInstallOptions,
        value: FridaPackageRole,
    );
}
unsafe extern "C" {
    pub fn frida_package_install_result_get_packages(
        self_: *mut FridaPackageInstallResult,
    ) -> *mut FridaPackageList;
}
unsafe extern "C" {
    pub fn frida_control_service_get_type() -> GType;
}
pub type FridaControlService_autoptr = *mut FridaControlService;
pub type FridaControlService_listautoptr = *mut GList;
pub type FridaControlService_slistautoptr = *mut GSList;
pub type FridaControlService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_control_service_options_get_type() -> GType;
}
pub type FridaControlServiceOptions_autoptr = *mut FridaControlServiceOptions;
pub type FridaControlServiceOptions_listautoptr = *mut GList;
pub type FridaControlServiceOptions_slistautoptr = *mut GSList;
pub type FridaControlServiceOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_control_service_new(
        endpoint_params: *mut FridaEndpointParameters,
        options: *mut FridaControlServiceOptions,
        error: *mut *mut GError,
    ) -> *mut FridaControlService;
}
unsafe extern "C" {
    pub fn frida_control_service_construct(
        object_type: GType,
        endpoint_params: *mut FridaEndpointParameters,
        options: *mut FridaControlServiceOptions,
        error: *mut *mut GError,
    ) -> *mut FridaControlService;
}
unsafe extern "C" {
    pub fn frida_control_service_new_with_device(
        device: *mut FridaDevice,
        endpoint_params: *mut FridaEndpointParameters,
        options: *mut FridaControlServiceOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_new_with_device_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaControlService;
}
unsafe extern "C" {
    pub fn frida_control_service_construct_with_device(
        object_type: GType,
        device: *mut FridaDevice,
        endpoint_params: *mut FridaEndpointParameters,
        options: *mut FridaControlServiceOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_construct_with_device_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaControlService;
}
unsafe extern "C" {
    pub fn frida_control_service_start(
        self_: *mut FridaControlService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_start_finish(
        self_: *mut FridaControlService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_start_sync(
        self_: *mut FridaControlService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_stop(
        self_: *mut FridaControlService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_stop_finish(
        self_: *mut FridaControlService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_stop_sync(
        self_: *mut FridaControlService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_get_endpoint_params(
        self_: *mut FridaControlService,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_control_service_get_options(
        self_: *mut FridaControlService,
    ) -> *mut FridaControlServiceOptions;
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_get_type() -> GType;
}
pub type FridaLocalHostSessionProvider_autoptr = *mut FridaLocalHostSessionProvider;
pub type FridaLocalHostSessionProvider_listautoptr = *mut GList;
pub type FridaLocalHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaLocalHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_precreated_local_host_session_provider_get_type() -> GType;
}
pub type FridaPrecreatedLocalHostSessionProvider_autoptr =
    *mut FridaPrecreatedLocalHostSessionProvider;
pub type FridaPrecreatedLocalHostSessionProvider_listautoptr = *mut GList;
pub type FridaPrecreatedLocalHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaPrecreatedLocalHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_control_service_options_new() -> *mut FridaControlServiceOptions;
}
unsafe extern "C" {
    pub fn frida_control_service_options_construct(
        object_type: GType,
    ) -> *mut FridaControlServiceOptions;
}
unsafe extern "C" {
    pub fn frida_control_service_options_get_sysroot(
        self_: *mut FridaControlServiceOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_control_service_options_set_sysroot(
        self_: *mut FridaControlServiceOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_options_get_enable_preload(
        self_: *mut FridaControlServiceOptions,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_control_service_options_set_enable_preload(
        self_: *mut FridaControlServiceOptions,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_control_service_options_get_report_crashes(
        self_: *mut FridaControlServiceOptions,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_control_service_options_set_report_crashes(
        self_: *mut FridaControlServiceOptions,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_get_type() -> GType;
}
pub type FridaPortalService_autoptr = *mut FridaPortalService;
pub type FridaPortalService_listautoptr = *mut GList;
pub type FridaPortalService_slistautoptr = *mut GSList;
pub type FridaPortalService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_portal_service_new(
        cluster_params: *mut FridaEndpointParameters,
        control_params: *mut FridaEndpointParameters,
    ) -> *mut FridaPortalService;
}
unsafe extern "C" {
    pub fn frida_portal_service_construct(
        object_type: GType,
        cluster_params: *mut FridaEndpointParameters,
        control_params: *mut FridaEndpointParameters,
    ) -> *mut FridaPortalService;
}
unsafe extern "C" {
    pub fn frida_portal_service_start(
        self_: *mut FridaPortalService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_start_finish(
        self_: *mut FridaPortalService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_start_sync(
        self_: *mut FridaPortalService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_stop(
        self_: *mut FridaPortalService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_stop_finish(
        self_: *mut FridaPortalService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_stop_sync(
        self_: *mut FridaPortalService,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_kick(self_: *mut FridaPortalService, connection_id: guint);
}
unsafe extern "C" {
    pub fn frida_portal_service_post(
        self_: *mut FridaPortalService,
        connection_id: guint,
        json: *const gchar,
        data: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_narrowcast(
        self_: *mut FridaPortalService,
        tag: *const gchar,
        json: *const gchar,
        data: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_broadcast(
        self_: *mut FridaPortalService,
        json: *const gchar,
        data: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_enumerate_tags(
        self_: *mut FridaPortalService,
        connection_id: guint,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_portal_service_tag(
        self_: *mut FridaPortalService,
        connection_id: guint,
        tag: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_untag(
        self_: *mut FridaPortalService,
        connection_id: guint,
        tag: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_portal_service_get_device(self_: *mut FridaPortalService) -> *mut FridaDevice;
}
unsafe extern "C" {
    pub fn frida_portal_service_get_cluster_params(
        self_: *mut FridaPortalService,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_portal_service_get_control_params(
        self_: *mut FridaPortalService,
    ) -> *mut FridaEndpointParameters;
}
unsafe extern "C" {
    pub fn frida_host_session_service_get_type() -> GType;
}
pub type FridaHostSessionService_autoptr = *mut FridaHostSessionService;
pub type FridaHostSessionService_listautoptr = *mut GList;
pub type FridaHostSessionService_slistautoptr = *mut GSList;
pub type FridaHostSessionService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_session_service_new_with_default_backends() -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_construct_with_default_backends(
        object_type: GType,
    ) -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_new_with_local_backend_only() -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_construct_with_local_backend_only(
        object_type: GType,
    ) -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_new_with_nonlocal_backends_only()
    -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_construct_with_nonlocal_backends_only(
        object_type: GType,
    ) -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_new_with_socket_backend_only() -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_construct_with_socket_backend_only(
        object_type: GType,
    ) -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_start(
        self_: *mut FridaHostSessionService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_service_start_finish(
        self_: *mut FridaHostSessionService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_service_stop(
        self_: *mut FridaHostSessionService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_service_stop_finish(
        self_: *mut FridaHostSessionService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_backend_get_type() -> GType;
}
pub type FridaHostSessionBackend_autoptr = *mut FridaHostSessionBackend;
pub type FridaHostSessionBackend_listautoptr = *mut GList;
pub type FridaHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_session_service_add_backend(
        self_: *mut FridaHostSessionService,
        backend: *mut FridaHostSessionBackend,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_service_remove_backend(
        self_: *mut FridaHostSessionService,
        backend: *mut FridaHostSessionBackend,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_service_new() -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_service_construct(object_type: GType)
    -> *mut FridaHostSessionService;
}
unsafe extern "C" {
    pub fn frida_host_session_options_get_type() -> GType;
}
pub type FridaHostSessionOptions_autoptr = *mut FridaHostSessionOptions;
pub type FridaHostSessionOptions_listautoptr = *mut GList;
pub type FridaHostSessionOptions_slistautoptr = *mut GSList;
pub type FridaHostSessionOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_session_provider_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_get_type() -> GType;
}
pub type FridaHostSessionProvider_autoptr = *mut FridaHostSessionProvider;
pub type FridaHostSessionProvider_listautoptr = *mut GList;
pub type FridaHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_session_provider_create(
        self_: *mut FridaHostSessionProvider,
        options: *mut FridaHostSessionOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_create_finish(
        self_: *mut FridaHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaHostSession;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_destroy(
        self_: *mut FridaHostSessionProvider,
        session: *mut FridaHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_destroy_finish(
        self_: *mut FridaHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_agent_session(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaAgentSessionId,
        sink: *mut FridaAgentMessageSink,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_agent_session_finish(
        self_: *mut FridaHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_unlink_agent_session(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_channel(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaChannelId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_channel_finish(
        self_: *mut FridaHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_unlink_channel(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaChannelId,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_service_session(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaServiceSessionId,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_link_service_session_finish(
        self_: *mut FridaHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaServiceSession;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_unlink_service_session(
        self_: *mut FridaHostSessionProvider,
        host_session: *mut FridaHostSession,
        id: *mut FridaServiceSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_provider_get_id(self_: *mut FridaHostSessionProvider)
    -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_get_name(
        self_: *mut FridaHostSessionProvider,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_get_icon(
        self_: *mut FridaHostSessionProvider,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_host_session_provider_get_kind(
        self_: *mut FridaHostSessionProvider,
    ) -> FridaHostSessionProviderKind;
}
unsafe extern "C" {
    pub fn frida_host_session_options_new() -> *mut FridaHostSessionOptions;
}
unsafe extern "C" {
    pub fn frida_host_session_options_construct(object_type: GType)
    -> *mut FridaHostSessionOptions;
}
unsafe extern "C" {
    pub fn frida_host_session_options_get_map(self_: *mut FridaHostSessionOptions) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_host_session_options_set_map(
        self_: *mut FridaHostSessionOptions,
        value: *mut GeeMap,
    );
}
unsafe extern "C" {
    pub fn frida_host_channel_provider_get_type() -> GType;
}
pub type FridaHostChannelProvider_autoptr = *mut FridaHostChannelProvider;
pub type FridaHostChannelProvider_listautoptr = *mut GList;
pub type FridaHostChannelProvider_slistautoptr = *mut GSList;
pub type FridaHostChannelProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_host_channel_provider_open_channel(
        self_: *mut FridaHostChannelProvider,
        address: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_channel_provider_open_channel_finish(
        self_: *mut FridaHostChannelProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_pairable_get_type() -> GType;
}
pub type FridaPairable_autoptr = *mut FridaPairable;
pub type FridaPairable_listautoptr = *mut GList;
pub type FridaPairable_slistautoptr = *mut GSList;
pub type FridaPairable_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_pairable_unpair(
        self_: *mut FridaPairable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_pairable_unpair_finish(
        self_: *mut FridaPairable,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_backend_start(
        self_: *mut FridaHostSessionBackend,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_backend_start_finish(
        self_: *mut FridaHostSessionBackend,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_backend_stop(
        self_: *mut FridaHostSessionBackend,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_host_session_backend_stop_finish(
        self_: *mut FridaHostSessionBackend,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_backend_get_type() -> GType;
}
pub type FridaLocalHostSessionBackend_autoptr = *mut FridaLocalHostSessionBackend;
pub type FridaLocalHostSessionBackend_listautoptr = *mut GList;
pub type FridaLocalHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaLocalHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_local_host_session_backend_make_provider(
        self_: *mut FridaLocalHostSessionBackend,
    ) -> *mut FridaLocalHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_local_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaLocalHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_local_host_session_get_type() -> GType;
}
pub type FridaLocalHostSession_autoptr = *mut FridaLocalHostSession;
pub type FridaLocalHostSession_listautoptr = *mut GList;
pub type FridaLocalHostSession_slistautoptr = *mut GSList;
pub type FridaLocalHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_local_host_session_provider_make_host_session(
        self_: *mut FridaLocalHostSessionProvider,
        options: *mut FridaHostSessionOptions,
        error: *mut *mut GError,
    ) -> *mut FridaLocalHostSession;
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_take_host_session(
        self_: *mut FridaLocalHostSessionProvider,
        session: *mut FridaLocalHostSession,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_load_icon(
        self_: *mut FridaLocalHostSessionProvider,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_close(
        self_: *mut FridaLocalHostSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_close_finish(
        self_: *mut FridaLocalHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_provider_construct(
        object_type: GType,
    ) -> *mut FridaLocalHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_local_host_session_preload(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_preload_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_close(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_close_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_create_system_session_provider(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_create_system_session_provider_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        connection: *mut *mut GDBusConnection,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSessionProvider;
}
unsafe extern "C" {
    pub fn frida_local_host_session_get_frontmost_application(
        self_: *mut FridaLocalHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_get_frontmost_application_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        result: *mut FridaHostApplicationInfo,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_applications(
        self_: *mut FridaLocalHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_applications_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_processes(
        self_: *mut FridaLocalHostSession,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_processes_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostProcessInfo;
}
unsafe extern "C" {
    pub fn frida_local_host_session_enable_spawn_gating(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enable_spawn_gating_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_disable_spawn_gating(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_disable_spawn_gating_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_pending_spawn(
        self_: *mut FridaLocalHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_enumerate_pending_spawn_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
        error: *mut *mut GError,
    ) -> *mut FridaHostSpawnInfo;
}
unsafe extern "C" {
    pub fn frida_local_host_session_spawn(
        self_: *mut FridaLocalHostSession,
        program: *const gchar,
        options: *mut FridaHostSpawnOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_spawn_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_local_host_session_try_handle_child(
        self_: *mut FridaLocalHostSession,
        info: *mut FridaHostChildInfo,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_local_host_session_notify_child_resumed(
        self_: *mut FridaLocalHostSession,
        pid: guint,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_notify_child_gating_changed(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        subscriber_count: guint,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_prepare_exec_transition(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_prepare_exec_transition_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_await_exec_transition(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_await_exec_transition_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_cancel_exec_transition(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_cancel_exec_transition_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_process_is_alive(
        self_: *mut FridaLocalHostSession,
        pid: guint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_local_host_session_input(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        data: *mut guint8,
        data_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_input_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_perform_resume(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_perform_resume_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_still_attached_to(
        self_: *mut FridaLocalHostSession,
        pid: guint,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_local_host_session_kill(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_kill_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_on_uninjected(self_: *mut FridaLocalHostSession, id: guint);
}
unsafe extern "C" {
    pub fn frida_local_host_session_perform_attach_to(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        options: *mut GHashTable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_perform_attach_to_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        transport: *mut *mut GObject,
        error: *mut *mut GError,
    ) -> *mut FridaFuture;
}
unsafe extern "C" {
    pub fn frida_local_host_session_get_emulated_agent_path(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_local_host_session_make_agent_parameters(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        remote_address: *const gchar,
        options: *mut GHashTable,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_local_host_session_link_agent_session(
        self_: *mut FridaLocalHostSession,
        id: *mut FridaAgentSessionId,
        sink: *mut FridaAgentMessageSink,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_link_agent_session_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_local_host_session_unlink_agent_session(
        self_: *mut FridaLocalHostSession,
        id: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_can_pass_file_descriptors_to_agent_session(
        self_: *mut FridaLocalHostSession,
        id: *mut FridaAgentSessionId,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_local_host_session_obtain_session_provider(
        self_: *mut FridaLocalHostSession,
        id: *mut FridaAgentSessionId,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSessionProvider;
}
unsafe extern "C" {
    pub fn frida_local_host_session_try_collect_crash(
        self_: *mut FridaLocalHostSession,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_local_host_session_try_collect_crash_finish(
        self_: *mut FridaLocalHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaCrashInfo;
}
unsafe extern "C" {
    pub fn frida_local_host_session_construct(object_type: GType) -> *mut FridaLocalHostSession;
}
unsafe extern "C" {
    pub fn frida_installed_helper_file_get_type() -> GType;
}
pub type FridaInstalledHelperFile_autoptr = *mut FridaInstalledHelperFile;
pub type FridaInstalledHelperFile_listautoptr = *mut GList;
pub type FridaInstalledHelperFile_slistautoptr = *mut GSList;
pub type FridaInstalledHelperFile_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_temporary_helper_file_get_type() -> GType;
}
pub type FridaTemporaryHelperFile_autoptr = *mut FridaTemporaryHelperFile;
pub type FridaTemporaryHelperFile_listautoptr = *mut GList;
pub type FridaTemporaryHelperFile_slistautoptr = *mut GSList;
pub type FridaTemporaryHelperFile_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_internal_agent_get_type() -> GType;
}
pub type FridaInternalAgent_autoptr = *mut FridaInternalAgent;
pub type FridaInternalAgent_listautoptr = *mut GList;
pub type FridaInternalAgent_slistautoptr = *mut GSList;
pub type FridaInternalAgent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_internal_agent_close(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_close_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_get_target_pid(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_get_target_pid_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_source(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_source_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_snapshot(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_snapshot_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        transport: *mut FridaSnapshotTransport,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_internal_agent_on_event(
        self_: *mut FridaInternalAgent,
        type_: *const gchar,
        event: *mut JsonArray,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_call(
        self_: *mut FridaInternalAgent,
        method: *const gchar,
        args: *mut *mut JsonNode,
        args_length1: gint,
        data: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_call_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut JsonNode;
}
unsafe extern "C" {
    pub fn frida_internal_agent_post(
        self_: *mut FridaInternalAgent,
        message: *mut JsonNode,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_post_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_ensure_loaded(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_ensure_loaded_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_perform_unload(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_perform_unload_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_script(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_load_script_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_destroy_script(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_destroy_script_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_wait_for_unload(
        self_: *mut FridaInternalAgent,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_wait_for_unload_finish(
        self_: *mut FridaInternalAgent,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_internal_agent_construct(object_type: GType) -> *mut FridaInternalAgent;
}
unsafe extern "C" {
    pub fn frida_internal_agent_get_host_session(
        self_: *mut FridaInternalAgent,
    ) -> *mut FridaLocalHostSession;
}
unsafe extern "C" {
    pub fn frida_internal_agent_get_script_runtime(
        self_: *mut FridaInternalAgent,
    ) -> FridaScriptRuntime;
}
unsafe extern "C" {
    pub fn frida_agent_container_get_type() -> GType;
}
pub type FridaAgentContainer_autoptr = *mut FridaAgentContainer;
pub type FridaAgentContainer_listautoptr = *mut GList;
pub type FridaAgentContainer_slistautoptr = *mut GSList;
pub type FridaAgentContainer_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_container_create(
        agent_filename: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_container_create_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentContainer;
}
unsafe extern "C" {
    pub fn frida_agent_container_destroy(
        self_: *mut FridaAgentContainer,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_agent_container_destroy_finish(
        self_: *mut FridaAgentContainer,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_container_new() -> *mut FridaAgentContainer;
}
unsafe extern "C" {
    pub fn frida_agent_container_construct(object_type: GType) -> *mut FridaAgentContainer;
}
unsafe extern "C" {
    pub fn frida_agent_container_get_connection(
        self_: *mut FridaAgentContainer,
    ) -> *mut GDBusConnection;
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_type() -> GType;
}
pub type FridaGDBClient_autoptr = *mut FridaGDBClient;
pub type FridaGDBClient_listautoptr = *mut GList;
pub type FridaGDBClient_slistautoptr = *mut GSList;
pub type FridaGDBClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_param_spec_property_dictionary(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_set_property_dictionary(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_take_property_dictionary(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_get_property_dictionary(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_type() -> GType;
}
pub type FridaGDBClientPropertyDictionary_autoptr = *mut FridaGDBClientPropertyDictionary;
pub type FridaGDBClientPropertyDictionary_listautoptr = *mut GList;
pub type FridaGDBClientPropertyDictionary_slistautoptr = *mut GSList;
pub type FridaGDBClientPropertyDictionary_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_exception_get_type() -> GType;
}
pub type FridaGDBException_autoptr = *mut FridaGDBException;
pub type FridaGDBException_listautoptr = *mut GList;
pub type FridaGDBException_slistautoptr = *mut GSList;
pub type FridaGDBException_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_get_type() -> GType;
}
pub type FridaGDBBreakpoint_autoptr = *mut FridaGDBBreakpoint;
pub type FridaGDBBreakpoint_listautoptr = *mut GList;
pub type FridaGDBBreakpoint_slistautoptr = *mut GSList;
pub type FridaGDBBreakpoint_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_register_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_param_spec_register(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_set_register(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_take_register(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_get_register(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_get_type() -> GType;
}
pub type FridaGDBClientRegister_autoptr = *mut FridaGDBClientRegister;
pub type FridaGDBClientRegister_listautoptr = *mut GList;
pub type FridaGDBClientRegister_slistautoptr = *mut GSList;
pub type FridaGDBClientRegister_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gdb_client_state_to_nick(self_: FridaGDBClientState) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_checksum_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gdb_client_response_action_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gdb_client_open(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBClient;
}
unsafe extern "C" {
    pub fn frida_gdb_client_detect_vendor_features(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_detect_vendor_features_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_enable_extensions(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_enable_extensions_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_close(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_close_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_continue(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_continue_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_get_type() -> GType;
}
pub type FridaGDBThread_autoptr = *mut FridaGDBThread;
pub type FridaGDBThread_listautoptr = *mut GList;
pub type FridaGDBThread_slistautoptr = *mut GSList;
pub type FridaGDBThread_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_continue_specific_threads(
        self_: *mut FridaGDBClient,
        threads: *mut GeeIterable,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_continue_specific_threads_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_continue_until_exception(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_continue_until_exception_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBException;
}
unsafe extern "C" {
    pub fn frida_gdb_client_stop(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_stop_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_detach(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_detach_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_restart(self_: *mut FridaGDBClient, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_gdb_client_kill(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_kill_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_byte_array(
        self_: *mut FridaGDBClient,
        address: guint64,
        size: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_byte_array_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_byte_array(
        self_: *mut FridaGDBClient,
        address: guint64,
        bytes: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_byte_array_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_pointer(
        self_: *mut FridaGDBClient,
        address: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_pointer_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_pointer(
        self_: *mut FridaGDBClient,
        address: guint64,
        val: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_pointer_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_bool(
        self_: *mut FridaGDBClient,
        address: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_bool_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_bool(
        self_: *mut FridaGDBClient,
        address: guint64,
        val: gboolean,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_write_bool_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_make_buffer_builder(
        self_: *mut FridaGDBClient,
    ) -> *mut FridaBufferBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_make_buffer(
        self_: *mut FridaGDBClient,
        bytes: *mut GBytes,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_buffer(
        self_: *mut FridaGDBClient,
        address: guint64,
        size: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_read_buffer_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBuffer;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gdb_client_add_breakpoint(
        self_: *mut FridaGDBClient,
        kind: FridaGDBBreakpointKind,
        address: guint64,
        size: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_add_breakpoint_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBBreakpoint;
}
unsafe extern "C" {
    pub fn frida_gdb_client_run_remote_command(
        self_: *mut FridaGDBClient,
        command: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_run_remote_command_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_load_target_properties(
        self_: *mut FridaGDBClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_load_target_properties_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_request_stop_info(self_: *mut FridaGDBClient);
}
unsafe extern "C" {
    pub fn frida_gdb_client_execute_simple(
        self_: *mut FridaGDBClient,
        command: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_execute_simple_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_execute(
        self_: *mut FridaGDBClient,
        command: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_execute_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_perform_execute(
        self_: *mut FridaGDBClient,
        command: *mut GBytes,
        cancellable: *mut GCancellable,
        request: *mut FridaPromise,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_perform_execute_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_simple(
        self_: *mut FridaGDBClient,
        request: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_param_spec_packet(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_set_packet(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_take_packet(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_get_packet(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_get_type() -> GType;
}
pub type FridaGDBClientPacket_autoptr = *mut FridaGDBClientPacket;
pub type FridaGDBClientPacket_listautoptr = *mut GList;
pub type FridaGDBClientPacket_slistautoptr = *mut GSList;
pub type FridaGDBClientPacket_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_query_simple_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_property(
        self_: *mut FridaGDBClient,
        name: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_property_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_query(
        self_: *mut FridaGDBClient,
        request: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_with_predicate(
        self_: *mut FridaGDBClient,
        request: *mut GBytes,
        predicate: FridaGDBClientResponsePredicate,
        predicate_target: gpointer,
        predicate_target_destroy_notify: GDestroyNotify,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_query_with_predicate_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_try_handle_notification(
        self_: *mut FridaGDBClient,
        packet: *mut FridaGDBClientPacket,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_gdb_client_parse_stop(
        self_: *mut FridaGDBClient,
        signum: guint,
        properties: *mut FridaGDBClientPropertyDictionary,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_parse_stop_finish(
        self_: *mut FridaGDBClient,
        _res_: *mut GAsyncResult,
        exception: *mut *mut FridaGDBException,
        breakpoint: *mut *mut FridaGDBBreakpoint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_param_spec_packet_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_set_packet_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_take_packet_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_get_packet_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_get_type() -> GType;
}
pub type FridaGDBClientPacketBuilder_autoptr = *mut FridaGDBClientPacketBuilder;
pub type FridaGDBClientPacketBuilder_listautoptr = *mut GList;
pub type FridaGDBClientPacketBuilder_slistautoptr = *mut GSList;
pub type FridaGDBClientPacketBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_make_packet_builder_sized(
        self_: *mut FridaGDBClient,
        capacity: gsize,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_stream(self_: *mut FridaGDBClient) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_gdb_target_arch_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_arch(self_: *mut FridaGDBClient) -> FridaGDBTargetArch;
}
unsafe extern "C" {
    pub fn frida_gdb_client_set_arch(self_: *mut FridaGDBClient, value: FridaGDBTargetArch);
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_pointer_size(self_: *mut FridaGDBClient) -> guint;
}
unsafe extern "C" {
    pub fn frida_gdb_client_set_pointer_size(self_: *mut FridaGDBClient, value: guint);
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_byte_order(self_: *mut FridaGDBClient) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_gdb_client_set_byte_order(
        self_: *mut FridaGDBClient,
        value: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_state(self_: *mut FridaGDBClient) -> FridaGDBClientState;
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_exception(self_: *mut FridaGDBClient) -> *mut FridaGDBException;
}
unsafe extern "C" {
    pub fn frida_gdb_client_get_features(self_: *mut FridaGDBClient) -> *mut GeeSet;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_new_from_bytes(
        payload_bytes: *mut GBytes,
    ) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_construct_from_bytes(
        object_type: GType,
        payload_bytes: *mut GBytes,
    ) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_new() -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_construct(object_type: GType) -> *mut FridaGDBClientPacket;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_get_payload(self_: *mut FridaGDBClientPacket) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_get_payload_bytes(
        self_: *mut FridaGDBClientPacket,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_new(
        capacity: gsize,
        checksum_type: FridaGDBClientChecksumType,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_construct(
        object_type: GType,
        capacity: gsize,
        checksum_type: FridaGDBClientChecksumType,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_reset(self_: *mut FridaGDBClientPacketBuilder);
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append(
        self_: *mut FridaGDBClientPacketBuilder,
        val: *const gchar,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_c(
        self_: *mut FridaGDBClientPacketBuilder,
        c: gchar,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_escaped(
        self_: *mut FridaGDBClientPacketBuilder,
        val: *const gchar,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_c_escaped(
        self_: *mut FridaGDBClientPacketBuilder,
        c: gchar,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_address(
        self_: *mut FridaGDBClientPacketBuilder,
        address: guint64,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_size(
        self_: *mut FridaGDBClientPacketBuilder,
        size: gsize,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_uint(
        self_: *mut FridaGDBClientPacketBuilder,
        val: guint,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_process_id(
        self_: *mut FridaGDBClientPacketBuilder,
        process_id: guint,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_register_id(
        self_: *mut FridaGDBClientPacketBuilder,
        register_id: guint,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_register_value(
        self_: *mut FridaGDBClientPacketBuilder,
        val: guint64,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_append_hexbyte(
        self_: *mut FridaGDBClientPacketBuilder,
        byte: guint8,
    ) -> *mut FridaGDBClientPacketBuilder;
}
unsafe extern "C" {
    pub fn frida_gdb_client_packet_builder_build(
        self_: *mut FridaGDBClientPacketBuilder,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_parse(
        raw_properties: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaGDBClientPropertyDictionary;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_foreach(
        self_: *mut FridaGDBClientPropertyDictionary,
        f: GeeForallFunc,
        f_target: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_has(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_string(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_uint(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_uint64(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_string_array(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_uint_array(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_get_uint64_array(
        self_: *mut FridaGDBClientPropertyDictionary,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_new() -> *mut FridaGDBClientPropertyDictionary;
}
unsafe extern "C" {
    pub fn frida_gdb_client_property_dictionary_construct(
        object_type: GType,
    ) -> *mut FridaGDBClientPropertyDictionary;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_new(
        name: *const gchar,
        altname: *const gchar,
        id: guint,
        bitsize: guint,
    ) -> *mut FridaGDBClientRegister;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_construct(
        object_type: GType,
        name: *const gchar,
        altname: *const gchar,
        id: guint,
        bitsize: guint,
    ) -> *mut FridaGDBClientRegister;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_get_name(self_: *mut FridaGDBClientRegister) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_get_altname(
        self_: *mut FridaGDBClientRegister,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_get_id(self_: *mut FridaGDBClientRegister) -> guint;
}
unsafe extern "C" {
    pub fn frida_gdb_client_register_get_bitsize(self_: *mut FridaGDBClientRegister) -> guint;
}
unsafe extern "C" {
    pub fn frida_gdb_client_target_spec_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_target_spec_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_param_spec_target_spec(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_set_target_spec(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_take_target_spec(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_gdb_client_value_get_target_spec(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_gdb_client_target_spec_get_type() -> GType;
}
pub type FridaGDBClientTargetSpec_autoptr = *mut FridaGDBClientTargetSpec;
pub type FridaGDBClientTargetSpec_listautoptr = *mut GList;
pub type FridaGDBClientTargetSpec_slistautoptr = *mut GSList;
pub type FridaGDBClientTargetSpec_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_gdb_client_target_spec_new(
        arch: FridaGDBTargetArch,
        registers: *mut GeeList,
    ) -> *mut FridaGDBClientTargetSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_client_target_spec_construct(
        object_type: GType,
        arch: FridaGDBTargetArch,
        registers: *mut GeeList,
    ) -> *mut FridaGDBClientTargetSpec;
}
unsafe extern "C" {
    pub fn frida_gdb_target_arch_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaGDBTargetArch;
}
unsafe extern "C" {
    pub fn frida_gdb_target_arch_to_nick(self_: FridaGDBTargetArch) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_new(
        id: *const gchar,
        name: *const gchar,
        client: *mut FridaGDBClient,
    ) -> *mut FridaGDBThread;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_construct(
        object_type: GType,
        id: *const gchar,
        name: *const gchar,
        client: *mut FridaGDBClient,
    ) -> *mut FridaGDBThread;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_step(
        self_: *mut FridaGDBThread,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_step_finish(
        self_: *mut FridaGDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_step_and_continue(self_: *mut FridaGDBThread, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_gdb_thread_read_registers(
        self_: *mut FridaGDBThread,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_read_registers_finish(
        self_: *mut FridaGDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_write_registers(
        self_: *mut FridaGDBThread,
        regs: *mut GeeMap,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_write_registers_finish(
        self_: *mut FridaGDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_read_register(
        self_: *mut FridaGDBThread,
        name: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_read_register_finish(
        self_: *mut FridaGDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_write_register(
        self_: *mut FridaGDBThread,
        name: *const gchar,
        val: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_write_register_finish(
        self_: *mut FridaGDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_thread_get_id(self_: *mut FridaGDBThread) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_get_name(self_: *mut FridaGDBThread) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_thread_get_client(self_: *mut FridaGDBThread) -> *mut FridaGDBClient;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_new(
        signum: guint,
        breakpoint: *mut FridaGDBBreakpoint,
        thread: *mut FridaGDBThread,
    ) -> *mut FridaGDBException;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_construct(
        object_type: GType,
        signum: guint,
        breakpoint: *mut FridaGDBBreakpoint,
        thread: *mut FridaGDBThread,
    ) -> *mut FridaGDBException;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_to_string(self_: *mut FridaGDBException) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_get_signum(self_: *mut FridaGDBException) -> guint;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_get_breakpoint(
        self_: *mut FridaGDBException,
    ) -> *mut FridaGDBBreakpoint;
}
unsafe extern "C" {
    pub fn frida_gdb_exception_get_thread(self_: *mut FridaGDBException) -> *mut FridaGDBThread;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_kind_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaGDBBreakpointKind;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_kind_to_nick(self_: FridaGDBBreakpointKind) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_new(
        kind: FridaGDBBreakpointKind,
        address: guint64,
        size: gsize,
        client: *mut FridaGDBClient,
    ) -> *mut FridaGDBBreakpoint;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_construct(
        object_type: GType,
        kind: FridaGDBBreakpointKind,
        address: guint64,
        size: gsize,
        client: *mut FridaGDBClient,
    ) -> *mut FridaGDBBreakpoint;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_enable(
        self_: *mut FridaGDBBreakpoint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_enable_finish(
        self_: *mut FridaGDBBreakpoint,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_disable(
        self_: *mut FridaGDBBreakpoint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_disable_finish(
        self_: *mut FridaGDBBreakpoint,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_remove(
        self_: *mut FridaGDBBreakpoint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_remove_finish(
        self_: *mut FridaGDBBreakpoint,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_get_kind(self_: *mut FridaGDBBreakpoint) -> FridaGDBBreakpointKind;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_get_address(self_: *mut FridaGDBBreakpoint) -> guint64;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_get_size(self_: *mut FridaGDBBreakpoint) -> gsize;
}
unsafe extern "C" {
    pub fn frida_gdb_breakpoint_get_client(self_: *mut FridaGDBBreakpoint) -> *mut FridaGDBClient;
}
unsafe extern "C" {
    pub fn frida_system_get_frontmost_application(
        options: *mut FridaFrontmostQueryOptions,
        result: *mut FridaHostApplicationInfo,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_system_enumerate_applications(
        options: *mut FridaApplicationQueryOptions,
        result_length1: *mut gint,
    ) -> *mut FridaHostApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_system_enumerate_processes(
        options: *mut FridaProcessQueryOptions,
        result_length1: *mut gint,
    ) -> *mut FridaHostProcessInfo;
}
unsafe extern "C" {
    pub fn frida_system_kill(pid: guint);
}
unsafe extern "C" {
    pub fn frida_application_enumerator_get_type() -> GType;
}
pub type FridaApplicationEnumerator_autoptr = *mut FridaApplicationEnumerator;
pub type FridaApplicationEnumerator_listautoptr = *mut GList;
pub type FridaApplicationEnumerator_slistautoptr = *mut GSList;
pub type FridaApplicationEnumerator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_application_enumerator_enumerate_applications(
        self_: *mut FridaApplicationEnumerator,
        options: *mut FridaApplicationQueryOptions,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_application_enumerator_enumerate_applications_finish(
        self_: *mut FridaApplicationEnumerator,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
    ) -> *mut FridaHostApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_application_enumerator_new() -> *mut FridaApplicationEnumerator;
}
unsafe extern "C" {
    pub fn frida_application_enumerator_construct(
        object_type: GType,
    ) -> *mut FridaApplicationEnumerator;
}
unsafe extern "C" {
    pub fn frida_process_enumerator_get_type() -> GType;
}
pub type FridaProcessEnumerator_autoptr = *mut FridaProcessEnumerator;
pub type FridaProcessEnumerator_listautoptr = *mut GList;
pub type FridaProcessEnumerator_slistautoptr = *mut GSList;
pub type FridaProcessEnumerator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_process_enumerator_enumerate_processes(
        self_: *mut FridaProcessEnumerator,
        options: *mut FridaProcessQueryOptions,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_process_enumerator_enumerate_processes_finish(
        self_: *mut FridaProcessEnumerator,
        _res_: *mut GAsyncResult,
        result_length1: *mut gint,
    ) -> *mut FridaHostProcessInfo;
}
unsafe extern "C" {
    pub fn frida_process_enumerator_new() -> *mut FridaProcessEnumerator;
}
unsafe extern "C" {
    pub fn frida_process_enumerator_construct(object_type: GType) -> *mut FridaProcessEnumerator;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_temporary_directory(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_temporary_directory(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_temporary_directory(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_temporary_directory(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_get_type() -> GType;
}
pub type FridaTemporaryDirectory_autoptr = *mut FridaTemporaryDirectory;
pub type FridaTemporaryDirectory_listautoptr = *mut GList;
pub type FridaTemporaryDirectory_slistautoptr = *mut GSList;
pub type FridaTemporaryDirectory_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_temporary_directory_new() -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_construct(object_type: GType) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_new_with_file(
        file: *mut GFile,
        is_ours: gboolean,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_construct_with_file(
        object_type: GType,
        file: *mut GFile,
        is_ours: gboolean,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_always_use(name: *const gchar);
}
unsafe extern "C" {
    pub fn frida_temporary_directory_use_sysroot(root: *const gchar);
}
unsafe extern "C" {
    pub fn frida_temporary_directory_destroy(self_: *mut FridaTemporaryDirectory);
}
unsafe extern "C" {
    pub fn frida_temporary_directory_make_name() -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_get_path(self_: *mut FridaTemporaryDirectory) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_get_is_ours(self_: *mut FridaTemporaryDirectory) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_temporary_directory_get_system_default() -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_temporary_file_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_temporary_file_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_temporary_file(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_temporary_file(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_temporary_file(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_temporary_file(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_temporary_file_get_type() -> GType;
}
pub type FridaTemporaryFile_autoptr = *mut FridaTemporaryFile;
pub type FridaTemporaryFile_listautoptr = *mut GList;
pub type FridaTemporaryFile_slistautoptr = *mut GSList;
pub type FridaTemporaryFile_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_temporary_file_new_from_stream(
        name: *const gchar,
        istream: *mut GInputStream,
        directory: *mut FridaTemporaryDirectory,
        error: *mut *mut GError,
    ) -> *mut FridaTemporaryFile;
}
unsafe extern "C" {
    pub fn frida_temporary_file_construct_from_stream(
        object_type: GType,
        name: *const gchar,
        istream: *mut GInputStream,
        directory: *mut FridaTemporaryDirectory,
        error: *mut *mut GError,
    ) -> *mut FridaTemporaryFile;
}
unsafe extern "C" {
    pub fn frida_temporary_file_new(
        file: *mut GFile,
        directory: *mut FridaTemporaryDirectory,
    ) -> *mut FridaTemporaryFile;
}
unsafe extern "C" {
    pub fn frida_temporary_file_construct(
        object_type: GType,
        file: *mut GFile,
        directory: *mut FridaTemporaryDirectory,
    ) -> *mut FridaTemporaryFile;
}
unsafe extern "C" {
    pub fn frida_temporary_file_destroy(self_: *mut FridaTemporaryFile);
}
unsafe extern "C" {
    pub fn frida_temporary_file_get_path(self_: *mut FridaTemporaryFile) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_temporary_file_get_parent(
        self_: *mut FridaTemporaryFile,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_file_monitor_get_type() -> GType;
}
pub type FridaFileMonitor_autoptr = *mut FridaFileMonitor;
pub type FridaFileMonitor_listautoptr = *mut GList;
pub type FridaFileMonitor_slistautoptr = *mut GSList;
pub type FridaFileMonitor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_file_monitor_new(path: *const gchar) -> *mut FridaFileMonitor;
}
unsafe extern "C" {
    pub fn frida_file_monitor_construct(
        object_type: GType,
        path: *const gchar,
    ) -> *mut FridaFileMonitor;
}
unsafe extern "C" {
    pub fn frida_file_monitor_enable(
        self_: *mut FridaFileMonitor,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_enable_finish(
        self_: *mut FridaFileMonitor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_enable_sync(
        self_: *mut FridaFileMonitor,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_disable(
        self_: *mut FridaFileMonitor,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_disable_finish(
        self_: *mut FridaFileMonitor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_disable_sync(
        self_: *mut FridaFileMonitor,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_file_monitor_get_path(self_: *mut FridaFileMonitor) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_backend_get_type() -> GType;
}
pub type FridaLinuxHostSessionBackend_autoptr = *mut FridaLinuxHostSessionBackend;
pub type FridaLinuxHostSessionBackend_listautoptr = *mut GList;
pub type FridaLinuxHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaLinuxHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_host_session_backend_new() -> *mut FridaLinuxHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaLinuxHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_provider_get_type() -> GType;
}
pub type FridaLinuxHostSessionProvider_autoptr = *mut FridaLinuxHostSessionProvider;
pub type FridaLinuxHostSessionProvider_listautoptr = *mut GList;
pub type FridaLinuxHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaLinuxHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_host_session_provider_new() -> *mut FridaLinuxHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_provider_construct(
        object_type: GType,
    ) -> *mut FridaLinuxHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_get_type() -> GType;
}
pub type FridaLinuxHostSession_autoptr = *mut FridaLinuxHostSession;
pub type FridaLinuxHostSession_listautoptr = *mut GList;
pub type FridaLinuxHostSession_slistautoptr = *mut GSList;
pub type FridaLinuxHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_host_session_new(
        helper: *mut FridaLinuxHelper,
        tempdir: *mut FridaTemporaryDirectory,
        report_crashes: gboolean,
    ) -> *mut FridaLinuxHostSession;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_construct(
        object_type: GType,
        helper: *mut FridaLinuxHelper,
        tempdir: *mut FridaTemporaryDirectory,
        report_crashes: gboolean,
    ) -> *mut FridaLinuxHostSession;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_get_helper(
        self_: *mut FridaLinuxHostSession,
    ) -> *mut FridaLinuxHelper;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_get_tempdir(
        self_: *mut FridaLinuxHostSession,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_linux_host_session_get_report_crashes(
        self_: *mut FridaLinuxHostSession,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_linjector_get_type() -> GType;
}
pub type FridaLinjector_autoptr = *mut FridaLinjector;
pub type FridaLinjector_listautoptr = *mut GList;
pub type FridaLinjector_slistautoptr = *mut GSList;
pub type FridaLinjector_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linjector_new(
        helper: *mut FridaLinuxHelper,
        close_helper: gboolean,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaLinjector;
}
unsafe extern "C" {
    pub fn frida_linjector_construct(
        object_type: GType,
        helper: *mut FridaLinuxHelper,
        close_helper: gboolean,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaLinjector;
}
unsafe extern "C" {
    pub fn frida_linjector_inject_library_file_with_template(
        self_: *mut FridaLinjector,
        pid: guint,
        path_template: *mut FridaPathTemplate,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linjector_inject_library_file_with_template_finish(
        self_: *mut FridaLinjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_type() -> GType;
}
pub type FridaAgentDescriptor_autoptr = *mut FridaAgentDescriptor;
pub type FridaAgentDescriptor_listautoptr = *mut GList;
pub type FridaAgentDescriptor_slistautoptr = *mut GSList;
pub type FridaAgentDescriptor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linjector_inject_library_resource(
        self_: *mut FridaLinjector,
        pid: guint,
        agent: *mut FridaAgentDescriptor,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linjector_inject_library_resource_finish(
        self_: *mut FridaLinjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_linjector_inject_library_fd(
        self_: *mut FridaLinjector,
        pid: guint,
        library_so: *mut GUnixInputStream,
        entrypoint: *const gchar,
        data: *const gchar,
        features: FridaAgentFeatures,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linjector_inject_library_fd_finish(
        self_: *mut FridaLinjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_linjector_request_control_channel(
        self_: *mut FridaLinjector,
        id: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_linjector_request_control_channel_finish(
        self_: *mut FridaLinjector,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_linjector_any_still_injected(self_: *mut FridaLinjector) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_linjector_is_still_injected(self_: *mut FridaLinjector, id: guint) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_linjector_get_helper(self_: *mut FridaLinjector) -> *mut FridaLinuxHelper;
}
unsafe extern "C" {
    pub fn frida_linjector_get_close_helper(self_: *mut FridaLinjector) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_linjector_get_tempdir(self_: *mut FridaLinjector) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_agent_mode_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_type() -> GType;
}
pub type FridaAgentResource_autoptr = *mut FridaAgentResource;
pub type FridaAgentResource_listautoptr = *mut GList;
pub type FridaAgentResource_slistautoptr = *mut GSList;
pub type FridaAgentResource_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_agent_descriptor_new(
        name_template: *mut FridaPathTemplate,
        so32: *mut GBytes,
        so64: *mut GBytes,
        resources: *mut *mut FridaAgentResource,
        resources_length1: gint,
        mode: FridaAgentMode,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaAgentDescriptor;
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_construct(
        object_type: GType,
        name_template: *mut FridaPathTemplate,
        so32: *mut GBytes,
        so64: *mut GBytes,
        resources: *mut *mut FridaAgentResource,
        resources_length1: gint,
        mode: FridaAgentMode,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaAgentDescriptor;
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_path_template(
        self_: *mut FridaAgentDescriptor,
        result: *mut FridaPathTemplate,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_name_template(
        self_: *mut FridaAgentDescriptor,
        result: *mut FridaPathTemplate,
    );
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_resources(
        self_: *mut FridaAgentDescriptor,
    ) -> *mut GeeCollection;
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_mode(self_: *mut FridaAgentDescriptor) -> FridaAgentMode;
}
unsafe extern "C" {
    pub fn frida_agent_descriptor_get_tempdir(
        self_: *mut FridaAgentDescriptor,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_agent_resource_new(
        name: *const gchar,
        blob: *mut GBytes,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaAgentResource;
}
unsafe extern "C" {
    pub fn frida_agent_resource_construct(
        object_type: GType,
        name: *const gchar,
        blob: *mut GBytes,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaAgentResource;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_file(
        self_: *mut FridaAgentResource,
        error: *mut *mut GError,
    ) -> *mut FridaTemporaryFile;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_memfd(
        self_: *mut FridaAgentResource,
        error: *mut *mut GError,
    ) -> *mut GUnixInputStream;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_name(self_: *mut FridaAgentResource) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_blob(self_: *mut FridaAgentResource) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_agent_resource_get_tempdir(
        self_: *mut FridaAgentResource,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_linux_helper_process_get_type() -> GType;
}
pub type FridaLinuxHelperProcess_autoptr = *mut FridaLinuxHelperProcess;
pub type FridaLinuxHelperProcess_listautoptr = *mut GList;
pub type FridaLinuxHelperProcess_slistautoptr = *mut GSList;
pub type FridaLinuxHelperProcess_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_linux_helper_process_new(
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaLinuxHelperProcess;
}
unsafe extern "C" {
    pub fn frida_linux_helper_process_construct(
        object_type: GType,
        tempdir: *mut FridaTemporaryDirectory,
    ) -> *mut FridaLinuxHelperProcess;
}
unsafe extern "C" {
    pub fn frida_linux_helper_process_get_tempdir(
        self_: *mut FridaLinuxHelperProcess,
    ) -> *mut FridaTemporaryDirectory;
}
unsafe extern "C" {
    pub fn frida_helper_factory_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_helper_factory_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_helper_factory(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_helper_factory(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_helper_factory(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_helper_factory(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_helper_factory_get_type() -> GType;
}
pub type FridaHelperFactory_autoptr = *mut FridaHelperFactory;
pub type FridaHelperFactory_listautoptr = *mut GList;
pub type FridaHelperFactory_slistautoptr = *mut GSList;
pub type FridaHelperFactory_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_helper_session_get_type() -> GType;
}
pub type FridaHelperSession_autoptr = *mut FridaHelperSession;
pub type FridaHelperSession_listautoptr = *mut GList;
pub type FridaHelperSession_slistautoptr = *mut GSList;
pub type FridaHelperSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_resource_store_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_resource_store_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_param_spec_resource_store(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_value_set_resource_store(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_take_resource_store(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_value_get_resource_store(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_resource_store_get_type() -> GType;
}
pub type FridaResourceStore_autoptr = *mut FridaResourceStore;
pub type FridaResourceStore_listautoptr = *mut GList;
pub type FridaResourceStore_slistautoptr = *mut GSList;
pub type FridaResourceStore_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_memory_helper_file_get_type() -> GType;
}
pub type FridaMemoryHelperFile_autoptr = *mut FridaMemoryHelperFile;
pub type FridaMemoryHelperFile_listautoptr = *mut GList;
pub type FridaMemoryHelperFile_slistautoptr = *mut GSList;
pub type FridaMemoryHelperFile_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_super_su_spawn(
        working_directory: *const gchar,
        argv: *mut *mut gchar,
        argv_length1: gint,
        envp: *mut *mut gchar,
        envp_length1: gint,
        capture_output: gboolean,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_super_su_process_get_type() -> GType;
}
pub type FridaSuperSUProcess_autoptr = *mut FridaSuperSUProcess;
pub type FridaSuperSUProcess_listautoptr = *mut GList;
pub type FridaSuperSUProcess_slistautoptr = *mut GSList;
pub type FridaSuperSUProcess_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_super_su_spawn_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaSuperSUProcess;
}
unsafe extern "C" {
    pub fn frida_super_su_process_detach(
        self_: *mut FridaSuperSUProcess,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_super_su_process_detach_finish(
        self_: *mut FridaSuperSUProcess,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_super_su_process_wait(
        self_: *mut FridaSuperSUProcess,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_super_su_process_wait_finish(
        self_: *mut FridaSuperSUProcess,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_super_su_process_get_output(self_: *mut FridaSuperSUProcess) -> *mut GInputStream;
}
unsafe extern "C" {
    pub fn frida_super_su_process_get_exit_status(self_: *mut FridaSuperSUProcess) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_backend_get_type() -> GType;
}
pub type FridaFruityHostSessionBackend_autoptr = *mut FridaFruityHostSessionBackend;
pub type FridaFruityHostSessionBackend_listautoptr = *mut GList;
pub type FridaFruityHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaFruityHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_host_session_backend_new() -> *mut FridaFruityHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaFruityHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_get_type() -> GType;
}
pub type FridaFruityHostSessionProvider_autoptr = *mut FridaFruityHostSessionProvider;
pub type FridaFruityHostSessionProvider_listautoptr = *mut GList;
pub type FridaFruityHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaFruityHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_get_type() -> GType;
}
pub type FridaFruityDevice_autoptr = *mut FridaFruityDevice;
pub type FridaFruityDevice_listautoptr = *mut GList;
pub type FridaFruityDevice_slistautoptr = *mut GSList;
pub type FridaFruityDevice_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_new(
        device: *mut FridaFruityDevice,
    ) -> *mut FridaFruityHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_construct(
        object_type: GType,
        device: *mut FridaFruityDevice,
    ) -> *mut FridaFruityHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_close(
        self_: *mut FridaFruityHostSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_close_finish(
        self_: *mut FridaFruityHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_provider_get_device(
        self_: *mut FridaFruityHostSessionProvider,
    ) -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_get_type() -> GType;
}
pub type FridaFruityHostSession_autoptr = *mut FridaFruityHostSession;
pub type FridaFruityHostSession_listautoptr = *mut GList;
pub type FridaFruityHostSession_slistautoptr = *mut GSList;
pub type FridaFruityHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_host_session_new(
        device: *mut FridaFruityDevice,
    ) -> *mut FridaFruityHostSession;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_construct(
        object_type: GType,
        device: *mut FridaFruityDevice,
    ) -> *mut FridaFruityHostSession;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_close(
        self_: *mut FridaFruityHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_close_finish(
        self_: *mut FridaFruityHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_link_agent_session(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaAgentSessionId,
        sink: *mut FridaAgentMessageSink,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_link_agent_session_finish(
        self_: *mut FridaFruityHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_unlink_agent_session(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_link_channel(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaChannelId,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_unlink_channel(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaChannelId,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_link_service_session(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaServiceSessionId,
        error: *mut *mut GError,
    ) -> *mut FridaServiceSession;
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_unlink_service_session(
        self_: *mut FridaFruityHostSession,
        id: *mut FridaServiceSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_host_session_get_device(
        self_: *mut FridaFruityHostSession,
    ) -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_plist_service_session_get_type() -> GType;
}
pub type FridaPlistServiceSession_autoptr = *mut FridaPlistServiceSession;
pub type FridaPlistServiceSession_listautoptr = *mut GList;
pub type FridaPlistServiceSession_slistautoptr = *mut GSList;
pub type FridaPlistServiceSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_dtx_service_session_get_type() -> GType;
}
pub type FridaDTXServiceSession_autoptr = *mut FridaDTXServiceSession;
pub type FridaDTXServiceSession_listautoptr = *mut GList;
pub type FridaDTXServiceSession_slistautoptr = *mut GSList;
pub type FridaDTXServiceSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_xpc_service_session_get_type() -> GType;
}
pub type FridaXpcServiceSession_autoptr = *mut FridaXpcServiceSession;
pub type FridaXpcServiceSession_listautoptr = *mut GList;
pub type FridaXpcServiceSession_slistautoptr = *mut GSList;
pub type FridaXpcServiceSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_get_type() -> GType;
}
pub type FridaFruityDeviceMonitor_autoptr = *mut FridaFruityDeviceMonitor;
pub type FridaFruityDeviceMonitor_listautoptr = *mut GList;
pub type FridaFruityDeviceMonitor_slistautoptr = *mut GSList;
pub type FridaFruityDeviceMonitor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_start(
        self_: *mut FridaFruityDeviceMonitor,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_start_finish(
        self_: *mut FridaFruityDeviceMonitor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_stop(
        self_: *mut FridaFruityDeviceMonitor,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_stop_finish(
        self_: *mut FridaFruityDeviceMonitor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_new() -> *mut FridaFruityDeviceMonitor;
}
unsafe extern "C" {
    pub fn frida_fruity_device_monitor_construct(
        object_type: GType,
    ) -> *mut FridaFruityDeviceMonitor;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_type() -> GType;
}
pub type FridaFruityUsbmuxDevice_autoptr = *mut FridaFruityUsbmuxDevice;
pub type FridaFruityUsbmuxDevice_listautoptr = *mut GList;
pub type FridaFruityUsbmuxDevice_slistautoptr = *mut GSList;
pub type FridaFruityUsbmuxDevice_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_find_usbmux_device(
        self_: *mut FridaFruityDevice,
    ) -> *mut FridaFruityUsbmuxDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_device_find_tunnel(
        self_: *mut FridaFruityDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_get_type() -> GType;
}
pub type FridaFruityDiscoveryService_autoptr = *mut FridaFruityDiscoveryService;
pub type FridaFruityDiscoveryService_listautoptr = *mut GList;
pub type FridaFruityDiscoveryService_slistautoptr = *mut GSList;
pub type FridaFruityDiscoveryService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_tunnel_get_type() -> GType;
}
pub type FridaFruityTunnel_autoptr = *mut FridaFruityTunnel;
pub type FridaFruityTunnel_listautoptr = *mut GList;
pub type FridaFruityTunnel_slistautoptr = *mut GSList;
pub type FridaFruityTunnel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_find_tunnel_finish(
        self_: *mut FridaFruityDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTunnel;
}
unsafe extern "C" {
    pub fn frida_fruity_device_get_lockdown_client(
        self_: *mut FridaFruityDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_get_type() -> GType;
}
pub type FridaFruityLockdownClient_autoptr = *mut FridaFruityLockdownClient;
pub type FridaFruityLockdownClient_listautoptr = *mut GList;
pub type FridaFruityLockdownClient_slistautoptr = *mut GSList;
pub type FridaFruityLockdownClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_get_lockdown_client_finish(
        self_: *mut FridaFruityDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityLockdownClient;
}
unsafe extern "C" {
    pub fn frida_fruity_device_open_lockdown_service(
        self_: *mut FridaFruityDevice,
        service_name: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_open_lockdown_service_finish(
        self_: *mut FridaFruityDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_open_tcp_channel_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_device_open_tcp_channel(
        self_: *mut FridaFruityDevice,
        location: *const gchar,
        flags: FridaFruityOpenTcpChannelFlags,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_tcp_channel(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_tcp_channel(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_tcp_channel(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_tcp_channel(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_get_type() -> GType;
}
pub type FridaFruityTcpChannel_autoptr = *mut FridaFruityTcpChannel;
pub type FridaFruityTcpChannel_listautoptr = *mut GList;
pub type FridaFruityTcpChannel_slistautoptr = *mut GSList;
pub type FridaFruityTcpChannel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_open_tcp_channel_finish(
        self_: *mut FridaFruityDevice,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTcpChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_device_new() -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_device_construct(object_type: GType) -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_connection_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_device_get_connection_type(
        self_: *mut FridaFruityDevice,
    ) -> FridaFruityConnectionType;
}
unsafe extern "C" {
    pub fn frida_fruity_device_get_udid(self_: *mut FridaFruityDevice) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_device_get_name(self_: *mut FridaFruityDevice) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_device_get_icon(self_: *mut FridaFruityDevice) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_type() -> GType;
}
pub type FridaFruityTransport_autoptr = *mut FridaFruityTransport;
pub type FridaFruityTransport_listautoptr = *mut GList;
pub type FridaFruityTransport_slistautoptr = *mut GSList;
pub type FridaFruityTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_get_transports(self_: *mut FridaFruityDevice) -> *mut GeeSet;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_new() -> *mut FridaFruityTcpChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_channel_construct(object_type: GType) -> *mut FridaFruityTcpChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_find_tunnel(
        self_: *mut FridaFruityTransport,
        device: *mut FridaFruityUsbmuxDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_transport_find_tunnel_finish(
        self_: *mut FridaFruityTransport,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTunnel;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_connection_type(
        self_: *mut FridaFruityTransport,
    ) -> FridaFruityConnectionType;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_udid(self_: *mut FridaFruityTransport) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_name(self_: *mut FridaFruityTransport) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_icon(self_: *mut FridaFruityTransport) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_fruity_transport_get_usbmux_device(
        self_: *mut FridaFruityTransport,
    ) -> *mut FridaFruityUsbmuxDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_close(
        self_: *mut FridaFruityTunnel,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_close_finish(
        self_: *mut FridaFruityTunnel,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_open_tcp_connection(
        self_: *mut FridaFruityTunnel,
        port: guint16,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_open_tcp_connection_finish(
        self_: *mut FridaFruityTunnel,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_get_discovery(
        self_: *mut FridaFruityTunnel,
    ) -> *mut FridaFruityDiscoveryService;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_get_opened_at(self_: *mut FridaFruityTunnel) -> gint64;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_get_remote_unlock_host_key(
        self_: *mut FridaFruityTunnel,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_backend_get_type() -> GType;
}
pub type FridaFruityBackend_autoptr = *mut FridaFruityBackend;
pub type FridaFruityBackend_listautoptr = *mut GList;
pub type FridaFruityBackend_slistautoptr = *mut GSList;
pub type FridaFruityBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_backend_start(
        self_: *mut FridaFruityBackend,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_backend_start_finish(
        self_: *mut FridaFruityBackend,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_backend_stop(
        self_: *mut FridaFruityBackend,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_backend_stop_finish(
        self_: *mut FridaFruityBackend,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_backend_get_type() -> GType;
}
pub type FridaFruityUsbmuxBackend_autoptr = *mut FridaFruityUsbmuxBackend;
pub type FridaFruityUsbmuxBackend_listautoptr = *mut GList;
pub type FridaFruityUsbmuxBackend_slistautoptr = *mut GSList;
pub type FridaFruityUsbmuxBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usbmux_transport_get_type() -> GType;
}
pub type FridaFruityUsbmuxTransport_autoptr = *mut FridaFruityUsbmuxTransport;
pub type FridaFruityUsbmuxTransport_listautoptr = *mut GList;
pub type FridaFruityUsbmuxTransport_slistautoptr = *mut GSList;
pub type FridaFruityUsbmuxTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usbmux_tunnel_get_type() -> GType;
}
pub type FridaFruityUsbmuxTunnel_autoptr = *mut FridaFruityUsbmuxTunnel;
pub type FridaFruityUsbmuxTunnel_listautoptr = *mut GList;
pub type FridaFruityUsbmuxTunnel_slistautoptr = *mut GSList;
pub type FridaFruityUsbmuxTunnel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_portable_core_device_backend_get_type() -> GType;
}
pub type FridaFruityPortableCoreDeviceBackend_autoptr = *mut FridaFruityPortableCoreDeviceBackend;
pub type FridaFruityPortableCoreDeviceBackend_listautoptr = *mut GList;
pub type FridaFruityPortableCoreDeviceBackend_slistautoptr = *mut GSList;
pub type FridaFruityPortableCoreDeviceBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_portable_core_device_usb_transport_get_type() -> GType;
}
pub type FridaFruityPortableCoreDeviceUsbTransport_autoptr =
    *mut FridaFruityPortableCoreDeviceUsbTransport;
pub type FridaFruityPortableCoreDeviceUsbTransport_listautoptr = *mut GList;
pub type FridaFruityPortableCoreDeviceUsbTransport_slistautoptr = *mut GSList;
pub type FridaFruityPortableCoreDeviceUsbTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_portable_usb_tunnel_get_type() -> GType;
}
pub type FridaFruityPortableUsbTunnel_autoptr = *mut FridaFruityPortableUsbTunnel;
pub type FridaFruityPortableUsbTunnel_listautoptr = *mut GList;
pub type FridaFruityPortableUsbTunnel_slistautoptr = *mut GSList;
pub type FridaFruityPortableUsbTunnel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_portable_core_device_network_transport_get_type() -> GType;
}
pub type FridaFruityPortableCoreDeviceNetworkTransport_autoptr =
    *mut FridaFruityPortableCoreDeviceNetworkTransport;
pub type FridaFruityPortableCoreDeviceNetworkTransport_listautoptr = *mut GList;
pub type FridaFruityPortableCoreDeviceNetworkTransport_slistautoptr = *mut GSList;
pub type FridaFruityPortableCoreDeviceNetworkTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_portable_network_tunnel_get_type() -> GType;
}
pub type FridaFruityPortableNetworkTunnel_autoptr = *mut FridaFruityPortableNetworkTunnel;
pub type FridaFruityPortableNetworkTunnel_listautoptr = *mut GList;
pub type FridaFruityPortableNetworkTunnel_slistautoptr = *mut GSList;
pub type FridaFruityPortableNetworkTunnel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_fruit_finder_get_type() -> GType;
}
pub type FridaFruityFruitFinder_autoptr = *mut FridaFruityFruitFinder;
pub type FridaFruityFruitFinder_listautoptr = *mut GList;
pub type FridaFruityFruitFinder_slistautoptr = *mut GSList;
pub type FridaFruityFruitFinder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_fruit_finder_make_default() -> *mut FridaFruityFruitFinder;
}
unsafe extern "C" {
    pub fn frida_fruity_fruit_finder_udid_from_iface(
        self_: *mut FridaFruityFruitFinder,
        ifname: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_null_fruit_finder_get_type() -> GType;
}
pub type FridaFruityNullFruitFinder_autoptr = *mut FridaFruityNullFruitFinder;
pub type FridaFruityNullFruitFinder_listautoptr = *mut GList;
pub type FridaFruityNullFruitFinder_slistautoptr = *mut GSList;
pub type FridaFruityNullFruitFinder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_null_fruit_finder_new() -> *mut FridaFruityNullFruitFinder;
}
unsafe extern "C" {
    pub fn frida_fruity_null_fruit_finder_construct(
        object_type: GType,
    ) -> *mut FridaFruityNullFruitFinder;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_get_type() -> GType;
}
pub type FridaFruityPairingBrowser_autoptr = *mut FridaFruityPairingBrowser;
pub type FridaFruityPairingBrowser_listautoptr = *mut GList;
pub type FridaFruityPairingBrowser_slistautoptr = *mut GSList;
pub type FridaFruityPairingBrowser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_make_default() -> *mut FridaFruityPairingBrowser;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_start(
        self_: *mut FridaFruityPairingBrowser,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_start_finish(
        self_: *mut FridaFruityPairingBrowser,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_stop(
        self_: *mut FridaFruityPairingBrowser,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_browser_stop_finish(
        self_: *mut FridaFruityPairingBrowser,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_null_pairing_browser_get_type() -> GType;
}
pub type FridaFruityNullPairingBrowser_autoptr = *mut FridaFruityNullPairingBrowser;
pub type FridaFruityNullPairingBrowser_listautoptr = *mut GList;
pub type FridaFruityNullPairingBrowser_slistautoptr = *mut GSList;
pub type FridaFruityNullPairingBrowser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_null_pairing_browser_new() -> *mut FridaFruityNullPairingBrowser;
}
unsafe extern "C" {
    pub fn frida_fruity_null_pairing_browser_construct(
        object_type: GType,
    ) -> *mut FridaFruityNullPairingBrowser;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_details_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_details_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_service_details(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_service_details(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_service_details(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_service_details(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_details_get_type() -> GType;
}
pub type FridaFruityPairingServiceDetails_autoptr = *mut FridaFruityPairingServiceDetails;
pub type FridaFruityPairingServiceDetails_listautoptr = *mut GList;
pub type FridaFruityPairingServiceDetails_slistautoptr = *mut GSList;
pub type FridaFruityPairingServiceDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_details_new() -> *mut FridaFruityPairingServiceDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_details_construct(
        object_type: GType,
    ) -> *mut FridaFruityPairingServiceDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_open(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDiscoveryService;
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_close(self_: *mut FridaFruityDiscoveryService);
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_query_udid(
        self_: *mut FridaFruityDiscoveryService,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_service_info_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_service_info_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_service_info(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_service_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_service_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_service_info(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_service_info_get_type() -> GType;
}
pub type FridaFruityServiceInfo_autoptr = *mut FridaFruityServiceInfo;
pub type FridaFruityServiceInfo_listautoptr = *mut GList;
pub type FridaFruityServiceInfo_slistautoptr = *mut GSList;
pub type FridaFruityServiceInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_get_service(
        self_: *mut FridaFruityDiscoveryService,
        identifier: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityServiceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_discovery_service_get_stream(
        self_: *mut FridaFruityDiscoveryService,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_service_info_new() -> *mut FridaFruityServiceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_service_info_construct(object_type: GType) -> *mut FridaFruityServiceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_type() -> GType;
}
pub type FridaFruityPairingService_autoptr = *mut FridaFruityPairingService;
pub type FridaFruityPairingService_listautoptr = *mut GList;
pub type FridaFruityPairingService_slistautoptr = *mut GSList;
pub type FridaFruityPairingService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_get_type() -> GType;
}
pub type FridaFruityPairingTransport_autoptr = *mut FridaFruityPairingTransport;
pub type FridaFruityPairingTransport_listautoptr = *mut GList;
pub type FridaFruityPairingTransport_slistautoptr = *mut GSList;
pub type FridaFruityPairingTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_store(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_store(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_store(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_store(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_get_type() -> GType;
}
pub type FridaFruityPairingStore_autoptr = *mut FridaFruityPairingStore;
pub type FridaFruityPairingStore_listautoptr = *mut GList;
pub type FridaFruityPairingStore_slistautoptr = *mut GSList;
pub type FridaFruityPairingStore_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_open(
        transport: *mut FridaFruityPairingTransport,
        store: *mut FridaFruityPairingStore,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPairingService;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_close(self_: *mut FridaFruityPairingService);
}
unsafe extern "C" {
    pub fn frida_fruity_udp_socket_get_type() -> GType;
}
pub type FridaFruityUdpSocket_autoptr = *mut FridaFruityUdpSocket;
pub type FridaFruityUdpSocket_listautoptr = *mut GList;
pub type FridaFruityUdpSocket_slistautoptr = *mut GSList;
pub type FridaFruityUdpSocket_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_network_stack_get_type() -> GType;
}
pub type FridaFruityNetworkStack_autoptr = *mut FridaFruityNetworkStack;
pub type FridaFruityNetworkStack_listautoptr = *mut GList;
pub type FridaFruityNetworkStack_slistautoptr = *mut GSList;
pub type FridaFruityNetworkStack_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_open_tunnel(
        self_: *mut FridaFruityPairingService,
        device_address: *mut GInetAddress,
        netstack: *mut FridaFruityNetworkStack,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_get_type() -> GType;
}
pub type FridaFruityTunnelConnection_autoptr = *mut FridaFruityTunnelConnection;
pub type FridaFruityTunnelConnection_listautoptr = *mut GList;
pub type FridaFruityTunnelConnection_slistautoptr = *mut GSList;
pub type FridaFruityTunnelConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_open_tunnel_finish(
        self_: *mut FridaFruityPairingService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTunnelConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_transport(
        self_: *mut FridaFruityPairingService,
    ) -> *mut FridaFruityPairingTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_store(
        self_: *mut FridaFruityPairingService,
    ) -> *mut FridaFruityPairingStore;
}
unsafe extern "C" {
    pub fn frida_fruity_device_options_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_device_options_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_device_options(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_device_options(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_device_options(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_device_options(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_device_options_get_type() -> GType;
}
pub type FridaFruityDeviceOptions_autoptr = *mut FridaFruityDeviceOptions;
pub type FridaFruityDeviceOptions_listautoptr = *mut GList;
pub type FridaFruityDeviceOptions_slistautoptr = *mut GSList;
pub type FridaFruityDeviceOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_device_options(
        self_: *mut FridaFruityPairingService,
    ) -> *mut FridaFruityDeviceOptions;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_device_info(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_device_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_device_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_device_info(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_get_type() -> GType;
}
pub type FridaFruityDeviceInfo_autoptr = *mut FridaFruityDeviceInfo;
pub type FridaFruityDeviceInfo_listautoptr = *mut GList;
pub type FridaFruityDeviceInfo_slistautoptr = *mut GSList;
pub type FridaFruityDeviceInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_device_info(
        self_: *mut FridaFruityPairingService,
    ) -> *mut FridaFruityDeviceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_peer_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_peer_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_peer(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_peer(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_peer(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_peer(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_peer_get_type() -> GType;
}
pub type FridaFruityPairingPeer_autoptr = *mut FridaFruityPairingPeer;
pub type FridaFruityPairingPeer_listautoptr = *mut GList;
pub type FridaFruityPairingPeer_slistautoptr = *mut GSList;
pub type FridaFruityPairingPeer_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_get_established_peer(
        self_: *mut FridaFruityPairingService,
    ) -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_open(
        self_: *mut FridaFruityPairingTransport,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_open_finish(
        self_: *mut FridaFruityPairingTransport,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_cancel(self_: *mut FridaFruityPairingTransport);
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_make_object_builder(
        self_: *mut FridaFruityPairingTransport,
    ) -> *mut FridaObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_transport_post(
        self_: *mut FridaFruityPairingTransport,
        message: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_pairing_transport_get_type() -> GType;
}
pub type FridaFruityXpcPairingTransport_autoptr = *mut FridaFruityXpcPairingTransport;
pub type FridaFruityXpcPairingTransport_listautoptr = *mut GList;
pub type FridaFruityXpcPairingTransport_slistautoptr = *mut GSList;
pub type FridaFruityXpcPairingTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_pairing_transport_new(
        stream: *mut GIOStream,
    ) -> *mut FridaFruityXpcPairingTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_pairing_transport_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityXpcPairingTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_pairing_transport_get_stream(
        self_: *mut FridaFruityXpcPairingTransport,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_plain_pairing_transport_get_type() -> GType;
}
pub type FridaFruityPlainPairingTransport_autoptr = *mut FridaFruityPlainPairingTransport;
pub type FridaFruityPlainPairingTransport_listautoptr = *mut GList;
pub type FridaFruityPlainPairingTransport_slistautoptr = *mut GSList;
pub type FridaFruityPlainPairingTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plain_pairing_transport_new(
        stream: *mut GIOStream,
    ) -> *mut FridaFruityPlainPairingTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_plain_pairing_transport_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityPlainPairingTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_plain_pairing_transport_get_stream(
        self_: *mut FridaFruityPlainPairingTransport,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_new() -> *mut FridaFruityPairingStore;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_construct(object_type: GType)
    -> *mut FridaFruityPairingStore;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_add_peer(
        self_: *mut FridaFruityPairingStore,
        identifier: *const gchar,
        public_key: *mut GBytes,
        info: *mut GBytes,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_find_peer_by_identifier(
        self_: *mut FridaFruityPairingStore,
        identifier: *const gchar,
    ) -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_find_peer_matching_service(
        self_: *mut FridaFruityPairingStore,
        service: *mut FridaFruityPairingServiceDetails,
    ) -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_save_peer(
        self_: *mut FridaFruityPairingStore,
        peer: *mut FridaFruityPairingPeer,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_forget_peer(
        self_: *mut FridaFruityPairingStore,
        peer: *mut FridaFruityPairingPeer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_identity(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_identity(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_identity(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_identity(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_get_type() -> GType;
}
pub type FridaFruityPairingIdentity_autoptr = *mut FridaFruityPairingIdentity;
pub type FridaFruityPairingIdentity_listautoptr = *mut GList;
pub type FridaFruityPairingIdentity_slistautoptr = *mut GSList;
pub type FridaFruityPairingIdentity_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_get_self_identity(
        self_: *mut FridaFruityPairingStore,
    ) -> *mut FridaFruityPairingIdentity;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_store_get_peers(
        self_: *mut FridaFruityPairingStore,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_make() -> *mut FridaFruityPairingIdentity;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_new() -> *mut FridaFruityPairingIdentity;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_identity_construct(
        object_type: GType,
    ) -> *mut FridaFruityPairingIdentity;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_peer_new() -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_peer_construct(object_type: GType) -> *mut FridaFruityPairingPeer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_service_metadata(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_service_metadata(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_service_metadata(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_service_metadata(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_get_type() -> GType;
}
pub type FridaFruityPairingServiceMetadata_autoptr = *mut FridaFruityPairingServiceMetadata;
pub type FridaFruityPairingServiceMetadata_listautoptr = *mut GList;
pub type FridaFruityPairingServiceMetadata_slistautoptr = *mut GSList;
pub type FridaFruityPairingServiceMetadata_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_from_txt_record(
        record: *mut GeeIterable,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPairingServiceMetadata;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_new() -> *mut FridaFruityPairingServiceMetadata;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_service_metadata_construct(
        object_type: GType,
    ) -> *mut FridaFruityPairingServiceMetadata;
}
unsafe extern "C" {
    pub fn frida_fruity_device_options_new() -> *mut FridaFruityDeviceOptions;
}
unsafe extern "C" {
    pub fn frida_fruity_device_options_construct(
        object_type: GType,
    ) -> *mut FridaFruityDeviceOptions;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_new() -> *mut FridaFruityDeviceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_construct(object_type: GType) -> *mut FridaFruityDeviceInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_params_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_params_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_params_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_params_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_builder_get_type() -> GType;
}
pub type FridaFruityPairingParamsBuilder_autoptr = *mut FridaFruityPairingParamsBuilder;
pub type FridaFruityPairingParamsBuilder_listautoptr = *mut GList;
pub type FridaFruityPairingParamsBuilder_slistautoptr = *mut GSList;
pub type FridaFruityPairingParamsBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_parser_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_parser_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_pairing_params_parser(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_pairing_params_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_pairing_params_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_pairing_params_parser(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_pairing_params_parser_get_type() -> GType;
}
pub type FridaFruityPairingParamsParser_autoptr = *mut FridaFruityPairingParamsParser;
pub type FridaFruityPairingParamsParser_listautoptr = *mut GList;
pub type FridaFruityPairingParamsParser_slistautoptr = *mut GSList;
pub type FridaFruityPairingParamsParser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_close(
        self_: *mut FridaFruityTunnelConnection,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_close_finish(
        self_: *mut FridaFruityTunnelConnection,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_make_handshake_request(mtu: gsize) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_make_request(
        body: *mut guint8,
        body_length1: gint,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_get_tunnel_netstack(
        self_: *mut FridaFruityTunnelConnection,
    ) -> *mut FridaFruityNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_get_remote_address(
        self_: *mut FridaFruityTunnelConnection,
    ) -> *mut GInetAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_connection_get_remote_rsd_port(
        self_: *mut FridaFruityTunnelConnection,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_tunnel_parameters(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_tunnel_parameters(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_tunnel_parameters(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_tunnel_parameters(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_get_type() -> GType;
}
pub type FridaFruityTunnelParameters_autoptr = *mut FridaFruityTunnelParameters;
pub type FridaFruityTunnelParameters_listautoptr = *mut GList;
pub type FridaFruityTunnelParameters_slistautoptr = *mut GSList;
pub type FridaFruityTunnelParameters_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_from_json(
        reader: *mut FridaJsonObjectReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTunnelParameters;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_new() -> *mut FridaFruityTunnelParameters;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_parameters_construct(
        object_type: GType,
    ) -> *mut FridaFruityTunnelParameters;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_get_type() -> GType;
}
pub type FridaFruityTcpTunnelConnection_autoptr = *mut FridaFruityTcpTunnelConnection;
pub type FridaFruityTcpTunnelConnection_listautoptr = *mut GList;
pub type FridaFruityTcpTunnelConnection_slistautoptr = *mut GSList;
pub type FridaFruityTcpTunnelConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_tunnel_key_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_key_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_tunnel_key(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_tunnel_key(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_tunnel_key(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_tunnel_key(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_key_get_type() -> GType;
}
pub type FridaFruityTunnelKey_autoptr = *mut FridaFruityTunnelKey;
pub type FridaFruityTunnelKey_listautoptr = *mut GList;
pub type FridaFruityTunnelKey_slistautoptr = *mut GSList;
pub type FridaFruityTunnelKey_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_open(
        address: *mut GInetSocketAddress,
        netstack: *mut FridaFruityNetworkStack,
        local_keypair: *mut FridaFruityTunnelKey,
        remote_pubkey: *mut FridaFruityTunnelKey,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTcpTunnelConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_open_stream(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_open_stream_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityTcpTunnelConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_tcp_tunnel_connection_get_stream(
        self_: *mut FridaFruityTcpTunnelConnection,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_get_type() -> GType;
}
pub type FridaFruityQuicTunnelConnection_autoptr = *mut FridaFruityQuicTunnelConnection;
pub type FridaFruityQuicTunnelConnection_listautoptr = *mut GList;
pub type FridaFruityQuicTunnelConnection_slistautoptr = *mut GSList;
pub type FridaFruityQuicTunnelConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_open(
        address: *mut GInetSocketAddress,
        netstack: *mut FridaFruityNetworkStack,
        local_keypair: *mut FridaFruityTunnelKey,
        remote_pubkey: *mut FridaFruityTunnelKey,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityQuicTunnelConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_get_address(
        self_: *mut FridaFruityQuicTunnelConnection,
    ) -> *mut GInetSocketAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_get_netstack(
        self_: *mut FridaFruityQuicTunnelConnection,
    ) -> *mut FridaFruityNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_get_local_keypair(
        self_: *mut FridaFruityQuicTunnelConnection,
    ) -> *mut FridaFruityTunnelKey;
}
unsafe extern "C" {
    pub fn frida_fruity_quic_tunnel_connection_get_remote_pubkey(
        self_: *mut FridaFruityQuicTunnelConnection,
    ) -> *mut FridaFruityTunnelKey;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_key_new(handle: *mut EVP_PKEY) -> *mut FridaFruityTunnelKey;
}
unsafe extern "C" {
    pub fn frida_fruity_tunnel_key_construct(
        object_type: GType,
        handle: *mut EVP_PKEY,
    ) -> *mut FridaFruityTunnelKey;
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_get_type() -> GType;
}
pub type FridaFruityTrustedService_autoptr = *mut FridaFruityTrustedService;
pub type FridaFruityTrustedService_listautoptr = *mut GList;
pub type FridaFruityTrustedService_slistautoptr = *mut GSList;
pub type FridaFruityTrustedService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_app_service_get_type() -> GType;
}
pub type FridaFruityAppService_autoptr = *mut FridaFruityAppService;
pub type FridaFruityAppService_listautoptr = *mut GList;
pub type FridaFruityAppService_slistautoptr = *mut GSList;
pub type FridaFruityAppService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_app_service_open(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityAppService;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_enumerate_applications(
        self_: *mut FridaFruityAppService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_application_info_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_application_info_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_param_spec_application_info(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_set_application_info(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_take_application_info(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_get_application_info(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_application_info_get_type() -> GType;
}
pub type FridaFruityAppServiceApplicationInfo_autoptr = *mut FridaFruityAppServiceApplicationInfo;
pub type FridaFruityAppServiceApplicationInfo_listautoptr = *mut GList;
pub type FridaFruityAppServiceApplicationInfo_slistautoptr = *mut GSList;
pub type FridaFruityAppServiceApplicationInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_app_service_enumerate_applications_finish(
        self_: *mut FridaFruityAppService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_enumerate_processes(
        self_: *mut FridaFruityAppService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_process_info_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_process_info_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_param_spec_process_info(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_set_process_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_take_process_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_value_get_process_info(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_process_info_get_type() -> GType;
}
pub type FridaFruityAppServiceProcessInfo_autoptr = *mut FridaFruityAppServiceProcessInfo;
pub type FridaFruityAppServiceProcessInfo_listautoptr = *mut GList;
pub type FridaFruityAppServiceProcessInfo_slistautoptr = *mut GSList;
pub type FridaFruityAppServiceProcessInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_app_service_enumerate_processes_finish(
        self_: *mut FridaFruityAppService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_application_info_new()
    -> *mut FridaFruityAppServiceApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_application_info_construct(
        object_type: GType,
    ) -> *mut FridaFruityAppServiceApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_process_info_new() -> *mut FridaFruityAppServiceProcessInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_app_service_process_info_construct(
        object_type: GType,
    ) -> *mut FridaFruityAppServiceProcessInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_close(self_: *mut FridaFruityTrustedService);
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_invoke(
        self_: *mut FridaFruityTrustedService,
        feature_identifier: *const gchar,
        input: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_invoke_finish(
        self_: *mut FridaFruityTrustedService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaVariantReader;
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_add_standard_request_values(
        builder: *mut FridaObjectBuilder,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_construct(
        object_type: GType,
    ) -> *mut FridaFruityTrustedService;
}
unsafe extern "C" {
    pub fn frida_fruity_trusted_service_get_stream(
        self_: *mut FridaFruityTrustedService,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_get_type() -> GType;
}
pub type FridaFruityXpcConnection_autoptr = *mut FridaFruityXpcConnection;
pub type FridaFruityXpcConnection_listautoptr = *mut GList;
pub type FridaFruityXpcConnection_slistautoptr = *mut GSList;
pub type FridaFruityXpcConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_new(stream: *mut GIOStream)
    -> *mut FridaFruityXpcConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityXpcConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_activate(self_: *mut FridaFruityXpcConnection);
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_cancel(self_: *mut FridaFruityXpcConnection);
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_wait_until_ready(
        self_: *mut FridaFruityXpcConnection,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_peer_info_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_peer_info_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_peer_info(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_peer_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_peer_info(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_peer_info(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_peer_info_get_type() -> GType;
}
pub type FridaFruityPeerInfo_autoptr = *mut FridaFruityPeerInfo;
pub type FridaFruityPeerInfo_listautoptr = *mut GList;
pub type FridaFruityPeerInfo_slistautoptr = *mut GSList;
pub type FridaFruityPeerInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_wait_until_ready_finish(
        self_: *mut FridaFruityXpcConnection,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPeerInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_request(
        self_: *mut FridaFruityXpcConnection,
        body: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_xpc_message(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_xpc_message(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_xpc_message(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_xpc_message(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_get_type() -> GType;
}
pub type FridaFruityXpcMessage_autoptr = *mut FridaFruityXpcMessage;
pub type FridaFruityXpcMessage_listautoptr = *mut GList;
pub type FridaFruityXpcMessage_slistautoptr = *mut GSList;
pub type FridaFruityXpcMessage_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_request_finish(
        self_: *mut FridaFruityXpcConnection,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityXpcMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_post(
        self_: *mut FridaFruityXpcConnection,
        body: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_post_finish(
        self_: *mut FridaFruityXpcConnection,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_get_stream(
        self_: *mut FridaFruityXpcConnection,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_connection_get_state(
        self_: *mut FridaFruityXpcConnection,
    ) -> FridaFruityXpcConnectionState;
}
unsafe extern "C" {
    pub fn frida_fruity_peer_info_new() -> *mut FridaFruityPeerInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_peer_info_construct(object_type: GType) -> *mut FridaFruityPeerInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_get_type() -> GType;
}
pub type FridaFruityXpcMessageBuilder_autoptr = *mut FridaFruityXpcMessageBuilder;
pub type FridaFruityXpcMessageBuilder_listautoptr = *mut GList;
pub type FridaFruityXpcMessageBuilder_slistautoptr = *mut GSList;
pub type FridaFruityXpcMessageBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_message_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_new(
        message_type: FridaFruityMessageType,
    ) -> *mut FridaFruityXpcMessageBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_construct(
        object_type: GType,
        message_type: FridaFruityMessageType,
    ) -> *mut FridaFruityXpcMessageBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_message_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_add_flags(
        self_: *mut FridaFruityXpcMessageBuilder,
        flags: FridaFruityMessageFlags,
    ) -> *mut FridaFruityXpcMessageBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_add_id(
        self_: *mut FridaFruityXpcMessageBuilder,
        id: guint64,
    ) -> *mut FridaFruityXpcMessageBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_add_body(
        self_: *mut FridaFruityXpcMessageBuilder,
        b: *mut GBytes,
    ) -> *mut FridaFruityXpcMessageBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_builder_build(
        self_: *mut FridaFruityXpcMessageBuilder,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_parse(
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityXpcMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_message_try_parse(
        data: *mut guint8,
        data_length1: gint,
        size: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut FridaFruityXpcMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_message_type_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaFruityMessageType;
}
unsafe extern "C" {
    pub fn frida_fruity_message_type_to_nick(self_: FridaFruityMessageType) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_message_flags_print(self_: FridaFruityMessageFlags) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_builder_get_type() -> GType;
}
pub type FridaFruityXpcObjectBuilder_autoptr = *mut FridaFruityXpcObjectBuilder;
pub type FridaFruityXpcObjectBuilder_listautoptr = *mut GList;
pub type FridaFruityXpcObjectBuilder_slistautoptr = *mut GSList;
pub type FridaFruityXpcObjectBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_builder_get_type() -> GType;
}
pub type FridaFruityXpcBodyBuilder_autoptr = *mut FridaFruityXpcBodyBuilder;
pub type FridaFruityXpcBodyBuilder_listautoptr = *mut GList;
pub type FridaFruityXpcBodyBuilder_slistautoptr = *mut GSList;
pub type FridaFruityXpcBodyBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_builder_new() -> *mut FridaFruityXpcBodyBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_builder_construct(
        object_type: GType,
    ) -> *mut FridaFruityXpcBodyBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_builder_new() -> *mut FridaFruityXpcObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_builder_construct(
        object_type: GType,
    ) -> *mut FridaFruityXpcObjectBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_parser_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_parser_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_xpc_body_parser(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_xpc_body_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_xpc_body_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_xpc_body_parser(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_body_parser_get_type() -> GType;
}
pub type FridaFruityXpcBodyParser_autoptr = *mut FridaFruityXpcBodyParser;
pub type FridaFruityXpcBodyParser_listautoptr = *mut GList;
pub type FridaFruityXpcBodyParser_slistautoptr = *mut GSList;
pub type FridaFruityXpcBodyParser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_parser_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_parser_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_xpc_object_parser(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_xpc_object_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_xpc_object_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_xpc_object_parser(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_xpc_object_parser_get_type() -> GType;
}
pub type FridaFruityXpcObjectParser_autoptr = *mut FridaFruityXpcObjectParser;
pub type FridaFruityXpcObjectParser_listautoptr = *mut GList;
pub type FridaFruityXpcObjectParser_slistautoptr = *mut GSList;
pub type FridaFruityXpcObjectParser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_get_type() -> GType;
}
pub type FridaFruityDeviceInfoService_autoptr = *mut FridaFruityDeviceInfoService;
pub type FridaFruityDeviceInfoService_listautoptr = *mut GList;
pub type FridaFruityDeviceInfoService_slistautoptr = *mut GSList;
pub type FridaFruityDeviceInfoService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_open(
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDeviceInfoService;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_enumerate_processes(
        self_: *mut FridaFruityDeviceInfoService,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_type() -> GType;
}
pub type FridaFruityDeviceInfoServiceProcessInfo_autoptr =
    *mut FridaFruityDeviceInfoServiceProcessInfo;
pub type FridaFruityDeviceInfoServiceProcessInfo_listautoptr = *mut GList;
pub type FridaFruityDeviceInfoServiceProcessInfo_slistautoptr = *mut GSList;
pub type FridaFruityDeviceInfoServiceProcessInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_enumerate_processes_finish(
        self_: *mut FridaFruityDeviceInfoService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_get_channel_provider(
        self_: *mut FridaFruityDeviceInfoService,
    ) -> *mut FridaHostChannelProvider;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_new()
    -> *mut FridaFruityDeviceInfoServiceProcessInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_construct(
        object_type: GType,
    ) -> *mut FridaFruityDeviceInfoServiceProcessInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_pid(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_pid(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: guint,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_name(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_name(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_real_app_name(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_real_app_name(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_is_application(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_is_application(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_foreground_running(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_foreground_running(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_get_start_date(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
    ) -> *mut GDateTime;
}
unsafe extern "C" {
    pub fn frida_fruity_device_info_service_process_info_set_start_date(
        self_: *mut FridaFruityDeviceInfoServiceProcessInfo,
        value: *mut GDateTime,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_get_type() -> GType;
}
pub type FridaFruityApplicationListingService_autoptr = *mut FridaFruityApplicationListingService;
pub type FridaFruityApplicationListingService_listautoptr = *mut GList;
pub type FridaFruityApplicationListingService_slistautoptr = *mut GSList;
pub type FridaFruityApplicationListingService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_type_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaFruityApplicationListingServiceApplicationType;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_type_to_nick(
        self_: FridaFruityApplicationListingServiceApplicationType,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_open(
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityApplicationListingService;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_ns_object(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_ns_object(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_ns_object(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_ns_object(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_get_type() -> GType;
}
pub type FridaFruityNSObject_autoptr = *mut FridaFruityNSObject;
pub type FridaFruityNSObject_listautoptr = *mut GList;
pub type FridaFruityNSObject_slistautoptr = *mut GSList;
pub type FridaFruityNSObject_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_type() -> GType;
}
pub type FridaFruityNSDictionary_autoptr = *mut FridaFruityNSDictionary;
pub type FridaFruityNSDictionary_listautoptr = *mut GList;
pub type FridaFruityNSDictionary_slistautoptr = *mut GSList;
pub type FridaFruityNSDictionary_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_enumerate_applications(
        self_: *mut FridaFruityApplicationListingService,
        query: *mut FridaFruityNSDictionary,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_type() -> GType;
}
pub type FridaFruityApplicationListingServiceApplicationInfo_autoptr =
    *mut FridaFruityApplicationListingServiceApplicationInfo;
pub type FridaFruityApplicationListingServiceApplicationInfo_listautoptr = *mut GList;
pub type FridaFruityApplicationListingServiceApplicationInfo_slistautoptr = *mut GSList;
pub type FridaFruityApplicationListingServiceApplicationInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_enumerate_applications_finish(
        self_: *mut FridaFruityApplicationListingService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_get_channel_provider(
        self_: *mut FridaFruityApplicationListingService,
    ) -> *mut FridaHostChannelProvider;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_new()
    -> *mut FridaFruityApplicationListingServiceApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_construct(
        object_type: GType,
    ) -> *mut FridaFruityApplicationListingServiceApplicationInfo;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_app_type(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> FridaFruityApplicationListingServiceApplicationType;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_app_type(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: FridaFruityApplicationListingServiceApplicationType,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_display_name(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_display_name(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_bundle_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_bundle_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_bundle_path(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_bundle_path(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_version(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_version(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_placeholder(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_placeholder(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_restricted(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_restricted(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_executable_name(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_executable_name(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_app_extension_uuids(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_app_extension_uuids(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_plugin_uuid(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_plugin_uuid(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_plugin_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_plugin_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_container_bundle_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_container_bundle_identifier(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_get_container_bundle_path(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_listing_service_application_info_set_container_bundle_path(
        self_: *mut FridaFruityApplicationListingServiceApplicationInfo,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_get_type() -> GType;
}
pub type FridaFruityProcessControlService_autoptr = *mut FridaFruityProcessControlService;
pub type FridaFruityProcessControlService_listautoptr = *mut GList;
pub type FridaFruityProcessControlService_slistautoptr = *mut GSList;
pub type FridaFruityProcessControlService_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_open(
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityProcessControlService;
}
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_kill(
        self_: *mut FridaFruityProcessControlService,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_kill_finish(
        self_: *mut FridaFruityProcessControlService,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_process_control_service_get_channel_provider(
        self_: *mut FridaFruityProcessControlService,
    ) -> *mut FridaHostChannelProvider;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_get_type() -> GType;
}
pub type FridaFruityDTXConnection_autoptr = *mut FridaFruityDTXConnection;
pub type FridaFruityDTXConnection_listautoptr = *mut GList;
pub type FridaFruityDTXConnection_slistautoptr = *mut GSList;
pub type FridaFruityDTXConnection_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_obtain(
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_obtain_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDTXConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_close_all(
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_close_all_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_new(stream: *mut GIOStream)
    -> *mut FridaFruityDTXConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityDTXConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_get_type() -> GType;
}
pub type FridaFruityDTXChannel_autoptr = *mut FridaFruityDTXChannel;
pub type FridaFruityDTXChannel_listautoptr = *mut GList;
pub type FridaFruityDTXChannel_slistautoptr = *mut GSList;
pub type FridaFruityDTXChannel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_make_channel(
        self_: *mut FridaFruityDTXConnection,
        identifier: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDTXChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_get_stream(
        self_: *mut FridaFruityDTXConnection,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_connection_get_state(
        self_: *mut FridaFruityDTXConnection,
    ) -> FridaFruityDTXConnectionState;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_control_channel_get_type() -> GType;
}
pub type FridaFruityDTXControlChannel_autoptr = *mut FridaFruityDTXControlChannel;
pub type FridaFruityDTXControlChannel_listautoptr = *mut GList;
pub type FridaFruityDTXControlChannel_slistautoptr = *mut GSList;
pub type FridaFruityDTXControlChannel_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_message_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_message_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_message_transport_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_message_dup(
        self_: *const FridaFruityDTXMessage,
    ) -> *mut FridaFruityDTXMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_message_free(self_: *mut FridaFruityDTXMessage);
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_transport_get_type() -> GType;
}
pub type FridaFruityDTXTransport_autoptr = *mut FridaFruityDTXTransport;
pub type FridaFruityDTXTransport_listautoptr = *mut GList;
pub type FridaFruityDTXTransport_slistautoptr = *mut GSList;
pub type FridaFruityDTXTransport_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_new(
        code: gint32,
        transport: *mut FridaFruityDTXTransport,
    ) -> *mut FridaFruityDTXChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_construct(
        object_type: GType,
        code: gint32,
        transport: *mut FridaFruityDTXTransport,
    ) -> *mut FridaFruityDTXChannel;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_dtx_argument_list_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_dtx_argument_list_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_dtx_argument_list_builder(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_dtx_argument_list_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_get_type() -> GType;
}
pub type FridaFruityDTXArgumentListBuilder_autoptr = *mut FridaFruityDTXArgumentListBuilder;
pub type FridaFruityDTXArgumentListBuilder_listautoptr = *mut GList;
pub type FridaFruityDTXArgumentListBuilder_slistautoptr = *mut GSList;
pub type FridaFruityDTXArgumentListBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_invoke(
        self_: *mut FridaFruityDTXChannel,
        method_name: *const gchar,
        args: *mut FridaFruityDTXArgumentListBuilder,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_invoke_finish(
        self_: *mut FridaFruityDTXChannel,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityNSObject;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_invoke_without_reply(
        self_: *mut FridaFruityDTXChannel,
        method_name: *const gchar,
        args: *mut FridaFruityDTXArgumentListBuilder,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_get_code(self_: *mut FridaFruityDTXChannel) -> gint32;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_get_transport(
        self_: *mut FridaFruityDTXChannel,
    ) -> *mut FridaFruityDTXTransport;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_set_transport(
        self_: *mut FridaFruityDTXChannel,
        value: *mut FridaFruityDTXTransport,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_channel_get_state(
        self_: *mut FridaFruityDTXChannel,
    ) -> FridaFruityDTXChannelState;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_transport_send_message(
        self_: *mut FridaFruityDTXTransport,
        message: *mut FridaFruityDTXMessage,
        identifier: *mut guint32,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_transport_remove_channel(
        self_: *mut FridaFruityDTXTransport,
        channel: *mut FridaFruityDTXChannel,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_dtx_argument_list(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_dtx_argument_list(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_dtx_argument_list(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_dtx_argument_list(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_get_type() -> GType;
}
pub type FridaFruityDTXArgumentList_autoptr = *mut FridaFruityDTXArgumentList;
pub type FridaFruityDTXArgumentList_listautoptr = *mut GList;
pub type FridaFruityDTXArgumentList_slistautoptr = *mut GSList;
pub type FridaFruityDTXArgumentList_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_parse(
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDTXArgumentList;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_new() -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_construct(
        object_type: GType,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_append_string(
        self_: *mut FridaFruityDTXArgumentListBuilder,
        str_: *const gchar,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_append_object(
        self_: *mut FridaFruityDTXArgumentListBuilder,
        obj: *mut FridaFruityNSObject,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_append_int32(
        self_: *mut FridaFruityDTXArgumentListBuilder,
        val: gint32,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_append_int64(
        self_: *mut FridaFruityDTXArgumentListBuilder,
        val: gint64,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_append_double(
        self_: *mut FridaFruityDTXArgumentListBuilder,
        val: gdouble,
    ) -> *mut FridaFruityDTXArgumentListBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_dtx_argument_list_builder_build(
        self_: *mut FridaFruityDTXArgumentListBuilder,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_primitive_reader_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_primitive_reader_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_primitive_reader(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_primitive_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_primitive_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_primitive_reader(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_primitive_reader_get_type() -> GType;
}
pub type FridaFruityPrimitiveReader_autoptr = *mut FridaFruityPrimitiveReader;
pub type FridaFruityPrimitiveReader_listautoptr = *mut GList;
pub type FridaFruityPrimitiveReader_slistautoptr = *mut GSList;
pub type FridaFruityPrimitiveReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_primitive_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_primitive_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_primitive_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_primitive_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_primitive_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_primitive_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_primitive_builder_get_type() -> GType;
}
pub type FridaFruityPrimitiveBuilder_autoptr = *mut FridaFruityPrimitiveBuilder;
pub type FridaFruityPrimitiveBuilder_listautoptr = *mut GList;
pub type FridaFruityPrimitiveBuilder_slistautoptr = *mut GSList;
pub type FridaFruityPrimitiveBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_new(
        stream: *mut GIOStream,
    ) -> *mut FridaFruityLockdownClient;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityLockdownClient;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_open(
        device: *mut FridaFruityUsbmuxDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityLockdownClient;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_close(
        self_: *mut FridaFruityLockdownClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_close_finish(
        self_: *mut FridaFruityLockdownClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_start_session(
        self_: *mut FridaFruityLockdownClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_start_session_finish(
        self_: *mut FridaFruityLockdownClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_get_value(
        self_: *mut FridaFruityLockdownClient,
        domain: *const gchar,
        key: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_type() -> GType;
}
pub type FridaFruityPlistDict_autoptr = *mut FridaFruityPlistDict;
pub type FridaFruityPlistDict_listautoptr = *mut GList;
pub type FridaFruityPlistDict_slistautoptr = *mut GSList;
pub type FridaFruityPlistDict_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_get_type() -> GType;
}
pub type FridaFruityPlist_autoptr = *mut FridaFruityPlist;
pub type FridaFruityPlist_listautoptr = *mut GList;
pub type FridaFruityPlist_slistautoptr = *mut GSList;
pub type FridaFruityPlist_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_get_value_finish(
        self_: *mut FridaFruityLockdownClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_start_service(
        self_: *mut FridaFruityLockdownClient,
        name_with_options: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_start_service_finish(
        self_: *mut FridaFruityLockdownClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_unpair(
        self_: *mut FridaFruityLockdownClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_unpair_finish(
        self_: *mut FridaFruityLockdownClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_get_type() -> GType;
}
pub type FridaFruityPlistServiceClient_autoptr = *mut FridaFruityPlistServiceClient;
pub type FridaFruityPlistServiceClient_listautoptr = *mut GList;
pub type FridaFruityPlistServiceClient_slistautoptr = *mut GSList;
pub type FridaFruityPlistServiceClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_lockdown_client_get_service(
        self_: *mut FridaFruityLockdownClient,
    ) -> *mut FridaFruityPlistServiceClient;
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_get_type() -> GType;
}
pub type FridaFruityInstallationProxyClient_autoptr = *mut FridaFruityInstallationProxyClient;
pub type FridaFruityInstallationProxyClient_listautoptr = *mut GList;
pub type FridaFruityInstallationProxyClient_slistautoptr = *mut GSList;
pub type FridaFruityInstallationProxyClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_open(
        device: *mut FridaFruityDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityInstallationProxyClient;
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_close(
        self_: *mut FridaFruityInstallationProxyClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_close_finish(
        self_: *mut FridaFruityInstallationProxyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_browse(
        self_: *mut FridaFruityInstallationProxyClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_type() -> GType;
}
pub type FridaFruityApplicationDetails_autoptr = *mut FridaFruityApplicationDetails;
pub type FridaFruityApplicationDetails_listautoptr = *mut GList;
pub type FridaFruityApplicationDetails_slistautoptr = *mut GSList;
pub type FridaFruityApplicationDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_browse_finish(
        self_: *mut FridaFruityInstallationProxyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_lookup(
        self_: *mut FridaFruityInstallationProxyClient,
        query: *mut FridaFruityPlistDict,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_lookup_finish(
        self_: *mut FridaFruityInstallationProxyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeHashMap;
}
unsafe extern "C" {
    pub fn frida_fruity_installation_proxy_client_get_device(
        self_: *mut FridaFruityInstallationProxyClient,
    ) -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_new(
        identifier: *const gchar,
        name: *const gchar,
        version: *const gchar,
        build: *const gchar,
        path: *const gchar,
        containers: *mut GeeMap,
        debuggable: gboolean,
    ) -> *mut FridaFruityApplicationDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_construct(
        object_type: GType,
        identifier: *const gchar,
        name: *const gchar,
        version: *const gchar,
        build: *const gchar,
        path: *const gchar,
        containers: *mut GeeMap,
        debuggable: gboolean,
    ) -> *mut FridaFruityApplicationDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_identifier(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_name(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_version(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_build(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_path(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_containers(
        self_: *mut FridaFruityApplicationDetails,
    ) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_fruity_application_details_get_debuggable(
        self_: *mut FridaFruityApplicationDetails,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_type() -> GType;
}
pub type FridaFruitySpringboardServicesClient_autoptr = *mut FridaFruitySpringboardServicesClient;
pub type FridaFruitySpringboardServicesClient_listautoptr = *mut GList;
pub type FridaFruitySpringboardServicesClient_slistautoptr = *mut GSList;
pub type FridaFruitySpringboardServicesClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_open(
        device: *mut FridaFruityDevice,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruitySpringboardServicesClient;
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_close(
        self_: *mut FridaFruitySpringboardServicesClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_close_finish(
        self_: *mut FridaFruitySpringboardServicesClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_icon_png_data(
        self_: *mut FridaFruitySpringboardServicesClient,
        bundle_id: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_icon_png_data_finish(
        self_: *mut FridaFruitySpringboardServicesClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_icon_png_data_batch(
        self_: *mut FridaFruitySpringboardServicesClient,
        bundle_ids: *mut *mut gchar,
        bundle_ids_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_icon_png_data_batch_finish(
        self_: *mut FridaFruitySpringboardServicesClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeHashMap;
}
unsafe extern "C" {
    pub fn frida_fruity_springboard_services_client_get_device(
        self_: *mut FridaFruitySpringboardServicesClient,
    ) -> *mut FridaFruityDevice;
}
unsafe extern "C" {
    pub fn frida_lldb_client_get_type() -> GType;
}
pub type FridaLLDBClient_autoptr = *mut FridaLLDBClient;
pub type FridaLLDBClient_listautoptr = *mut GList;
pub type FridaLLDBClient_slistautoptr = *mut GSList;
pub type FridaLLDBClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_cache_policy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_client_open(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBClient;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_get_type() -> GType;
}
pub type FridaLLDBLaunchOptions_autoptr = *mut FridaLLDBLaunchOptions;
pub type FridaLLDBLaunchOptions_listautoptr = *mut GList;
pub type FridaLLDBLaunchOptions_slistautoptr = *mut GSList;
pub type FridaLLDBLaunchOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_launch(
        self_: *mut FridaLLDBClient,
        argv: *mut *mut gchar,
        argv_length1: gint,
        options: *mut FridaLLDBLaunchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_type() -> GType;
}
pub type FridaLLDBProcess_autoptr = *mut FridaLLDBProcess;
pub type FridaLLDBProcess_listautoptr = *mut GList;
pub type FridaLLDBProcess_slistautoptr = *mut GSList;
pub type FridaLLDBProcess_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_launch_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_client_attach_by_name(
        self_: *mut FridaLLDBClient,
        name: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_attach_by_name_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_client_attach_by_pid(
        self_: *mut FridaLLDBClient,
        pid: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_attach_by_pid_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_get_type() -> GType;
}
pub type FridaLLDBThread_autoptr = *mut FridaLLDBThread;
pub type FridaLLDBThread_listautoptr = *mut GList;
pub type FridaLLDBThread_slistautoptr = *mut GSList;
pub type FridaLLDBThread_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_enumerate_threads(
        self_: *mut FridaLLDBClient,
        func: FridaLLDBClientFoundThreadFunc,
        func_target: gpointer,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_enumerate_threads_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_module_get_type() -> GType;
}
pub type FridaLLDBModule_autoptr = *mut FridaLLDBModule;
pub type FridaLLDBModule_listautoptr = *mut GList;
pub type FridaLLDBModule_slistautoptr = *mut GSList;
pub type FridaLLDBModule_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_enumerate_modules(
        self_: *mut FridaLLDBClient,
        func: FridaLLDBClientFoundModuleFunc,
        func_target: gpointer,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_enumerate_modules_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_allocate(
        self_: *mut FridaLLDBClient,
        size: gsize,
        protection: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_allocate_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_client_deallocate(
        self_: *mut FridaLLDBClient,
        address: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_deallocate_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_client_get_apple_dyld_fields(
        self_: *mut FridaLLDBClient,
        cache_policy: FridaLLDBClientCachePolicy,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_get_type() -> GType;
}
pub type FridaLLDBAppleDyldFields_autoptr = *mut FridaLLDBAppleDyldFields;
pub type FridaLLDBAppleDyldFields_listautoptr = *mut GList;
pub type FridaLLDBAppleDyldFields_slistautoptr = *mut GSList;
pub type FridaLLDBAppleDyldFields_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_client_get_apple_dyld_fields_finish(
        self_: *mut FridaLLDBClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBAppleDyldFields;
}
unsafe extern "C" {
    pub fn frida_lldb_client_strip_code_address(
        self_: *mut FridaLLDBClient,
        address: guint64,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_client_get_process(self_: *mut FridaLLDBClient) -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_new() -> *mut FridaLLDBLaunchOptions;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_construct(object_type: GType) -> *mut FridaLLDBLaunchOptions;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_get_env(
        self_: *mut FridaLLDBLaunchOptions,
        result_length1: *mut gint,
    ) -> *mut *mut gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_set_env(
        self_: *mut FridaLLDBLaunchOptions,
        value: *mut *mut gchar,
        value_length1: gint,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_get_arch(self_: *mut FridaLLDBLaunchOptions) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_set_arch(
        self_: *mut FridaLLDBLaunchOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_aslr_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_get_aslr(self_: *mut FridaLLDBLaunchOptions) -> FridaLLDBASLR;
}
unsafe extern "C" {
    pub fn frida_lldb_launch_options_set_aslr(
        self_: *mut FridaLLDBLaunchOptions,
        value: FridaLLDBASLR,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_process_observed_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_process_new() -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_process_construct(object_type: GType) -> *mut FridaLLDBProcess;
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_pid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_pid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_parent_pid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_parent_pid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_real_uid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_real_uid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_real_gid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_real_gid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_effective_uid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_effective_uid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_effective_gid(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_effective_gid(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_darwin_cpu_arch_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_darwin_cpu_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_cpu_type(self_: *mut FridaLLDBProcess) -> FridaLLDBDarwinCpuType;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_cpu_type(
        self_: *mut FridaLLDBProcess,
        value: FridaLLDBDarwinCpuType,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_darwin_cpu_subtype_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_cpu_subtype(
        self_: *mut FridaLLDBProcess,
    ) -> FridaLLDBDarwinCpuSubtype;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_cpu_subtype(
        self_: *mut FridaLLDBProcess,
        value: FridaLLDBDarwinCpuSubtype,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_pointer_size(self_: *mut FridaLLDBProcess) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_pointer_size(self_: *mut FridaLLDBProcess, value: guint);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_os_type(self_: *mut FridaLLDBProcess) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_os_type(self_: *mut FridaLLDBProcess, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_vendor(self_: *mut FridaLLDBProcess) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_vendor(self_: *mut FridaLLDBProcess, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_byte_order(self_: *mut FridaLLDBProcess)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_byte_order(
        self_: *mut FridaLLDBProcess,
        value: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_process_get_observed_state(
        self_: *mut FridaLLDBProcess,
    ) -> FridaLLDBProcessObservedState;
}
unsafe extern "C" {
    pub fn frida_lldb_process_set_observed_state(
        self_: *mut FridaLLDBProcess,
        value: FridaLLDBProcessObservedState,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_aslr_from_nick(nick: *const gchar, error: *mut *mut GError) -> FridaLLDBASLR;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_new(
        id: *const gchar,
        name: *const gchar,
        client: *mut FridaLLDBClient,
    ) -> *mut FridaLLDBThread;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_construct(
        object_type: GType,
        id: *const gchar,
        name: *const gchar,
        client: *mut FridaLLDBClient,
    ) -> *mut FridaLLDBThread;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_save_register_state(
        self_: *mut FridaLLDBThread,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_thread_snapshot_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_snapshot_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_param_spec_snapshot(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_set_snapshot(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_take_snapshot(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_get_snapshot(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_snapshot_get_type() -> GType;
}
pub type FridaLLDBThreadSnapshot_autoptr = *mut FridaLLDBThreadSnapshot;
pub type FridaLLDBThreadSnapshot_listautoptr = *mut GList;
pub type FridaLLDBThreadSnapshot_slistautoptr = *mut GSList;
pub type FridaLLDBThreadSnapshot_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_thread_save_register_state_finish(
        self_: *mut FridaLLDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaLLDBThreadSnapshot;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_restore_register_state(
        self_: *mut FridaLLDBThread,
        snapshot: *mut FridaLLDBThreadSnapshot,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_thread_restore_register_state_finish(
        self_: *mut FridaLLDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_thread_stack_bounds_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_stack_bounds_dup(
        self_: *const FridaLLDBThreadStackBounds,
    ) -> *mut FridaLLDBThreadStackBounds;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_stack_bounds_free(self_: *mut FridaLLDBThreadStackBounds);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_generate_backtrace(
        self_: *mut FridaLLDBThread,
        stack: *mut FridaLLDBThreadStackBounds,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_param_spec_frame(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_set_frame(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_take_frame(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_thread_value_get_frame(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_get_type() -> GType;
}
pub type FridaLLDBThreadFrame_autoptr = *mut FridaLLDBThreadFrame;
pub type FridaLLDBThreadFrame_listautoptr = *mut GList;
pub type FridaLLDBThreadFrame_slistautoptr = *mut GSList;
pub type FridaLLDBThreadFrame_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_thread_generate_backtrace_finish(
        self_: *mut FridaLLDBThread,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_snapshot_get_handle(self_: *mut FridaLLDBThreadSnapshot) -> guint;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_new(
        address: guint64,
        stack_location: guint64,
    ) -> *mut FridaLLDBThreadFrame;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_construct(
        object_type: GType,
        address: guint64,
        stack_location: guint64,
    ) -> *mut FridaLLDBThreadFrame;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_get_address(self_: *mut FridaLLDBThreadFrame) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_frame_get_stack_location(self_: *mut FridaLLDBThreadFrame) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_thread_stack_bounds_init(
        self_: *mut FridaLLDBThreadStackBounds,
        bottom: guint64,
        top: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_lldb_module_segment_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_module_segment_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_module_param_spec_segment(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_lldb_module_value_set_segment(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_module_value_take_segment(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_lldb_module_value_get_segment(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_lldb_module_segment_get_type() -> GType;
}
pub type FridaLLDBModuleSegment_autoptr = *mut FridaLLDBModuleSegment;
pub type FridaLLDBModuleSegment_listautoptr = *mut GList;
pub type FridaLLDBModuleSegment_slistautoptr = *mut GSList;
pub type FridaLLDBModuleSegment_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_module_new(
        load_address: guint64,
        pathname: *const gchar,
        segments: *mut GeeArrayList,
    ) -> *mut FridaLLDBModule;
}
unsafe extern "C" {
    pub fn frida_lldb_module_construct(
        object_type: GType,
        load_address: guint64,
        pathname: *const gchar,
        segments: *mut GeeArrayList,
    ) -> *mut FridaLLDBModule;
}
unsafe extern "C" {
    pub fn frida_lldb_module_get_load_address(self_: *mut FridaLLDBModule) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_module_get_pathname(self_: *mut FridaLLDBModule) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_module_get_segments(self_: *mut FridaLLDBModule) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_lldb_module_segment_new() -> *mut FridaLLDBModuleSegment;
}
unsafe extern "C" {
    pub fn frida_lldb_module_segment_construct(object_type: GType) -> *mut FridaLLDBModuleSegment;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_get_type() -> GType;
}
pub type FridaLLDBException_autoptr = *mut FridaLLDBException;
pub type FridaLLDBException_listautoptr = *mut GList;
pub type FridaLLDBException_slistautoptr = *mut GSList;
pub type FridaLLDBException_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_lldb_signal_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_mach_exception_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_new(
        signum: FridaLLDBSignal,
        metype: FridaLLDBMachExceptionType,
        medata: *mut GeeArrayList,
        breakpoint: *mut FridaGDBBreakpoint,
        thread: *mut FridaLLDBThread,
        context: *mut GeeHashMap,
    ) -> *mut FridaLLDBException;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_construct(
        object_type: GType,
        signum: FridaLLDBSignal,
        metype: FridaLLDBMachExceptionType,
        medata: *mut GeeArrayList,
        breakpoint: *mut FridaGDBBreakpoint,
        thread: *mut FridaLLDBThread,
        context: *mut GeeHashMap,
    ) -> *mut FridaLLDBException;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_get_metype(
        self_: *mut FridaLLDBException,
    ) -> FridaLLDBMachExceptionType;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_get_medata(self_: *mut FridaLLDBException) -> *mut GeeArrayList;
}
unsafe extern "C" {
    pub fn frida_lldb_exception_get_context(self_: *mut FridaLLDBException) -> *mut GeeHashMap;
}
unsafe extern "C" {
    pub fn frida_lldb_signal_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaLLDBSignal;
}
unsafe extern "C" {
    pub fn frida_lldb_signal_to_nick(self_: FridaLLDBSignal) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_signal_to_name(self_: FridaLLDBSignal) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_mach_exception_type_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaLLDBMachExceptionType;
}
unsafe extern "C" {
    pub fn frida_lldb_mach_exception_type_to_nick(self_: FridaLLDBMachExceptionType) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_mach_exception_type_to_name(self_: FridaLLDBMachExceptionType) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_new(
        all_image_info: guint64,
        notification_callback: guint64,
        libsystem_initialized: guint64,
        dyld_load_address: guint64,
    ) -> *mut FridaLLDBAppleDyldFields;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_construct(
        object_type: GType,
        all_image_info: guint64,
        notification_callback: guint64,
        libsystem_initialized: guint64,
        dyld_load_address: guint64,
    ) -> *mut FridaLLDBAppleDyldFields;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_get_all_image_info(
        self_: *mut FridaLLDBAppleDyldFields,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_get_notification_callback(
        self_: *mut FridaLLDBAppleDyldFields,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_get_libsystem_initialized(
        self_: *mut FridaLLDBAppleDyldFields,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_lldb_apple_dyld_fields_get_dyld_load_address(
        self_: *mut FridaLLDBAppleDyldFields,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_inject(
        module: *mut GumDarwinModule,
        lldb: *mut FridaLLDBClient,
        channel_provider: *mut FridaHostChannelProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_injector_transaction_get_type() -> GType;
}
pub type FridaFruityInjectorTransaction_autoptr = *mut FridaFruityInjectorTransaction;
pub type FridaFruityInjectorTransaction_listautoptr = *mut GList;
pub type FridaFruityInjectorTransaction_slistautoptr = *mut GSList;
pub type FridaFruityInjectorTransaction_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_injector_inject_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityInjectorTransaction;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_transaction_commit(
        self_: *mut FridaFruityInjectorTransaction,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_injector_transaction_commit_finish(
        self_: *mut FridaFruityInjectorTransaction,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_injector_gadget_details_get_type() -> GType;
}
pub type FridaFruityInjectorGadgetDetails_autoptr = *mut FridaFruityInjectorGadgetDetails;
pub type FridaFruityInjectorGadgetDetails_listautoptr = *mut GList;
pub type FridaFruityInjectorGadgetDetails_slistautoptr = *mut GSList;
pub type FridaFruityInjectorGadgetDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_injector_transaction_get_gadget(
        self_: *mut FridaFruityInjectorTransaction,
    ) -> *mut FridaFruityInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_gadget_details_new(
        port: guint16,
    ) -> *mut FridaFruityInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_gadget_details_construct(
        object_type: GType,
        port: guint16,
    ) -> *mut FridaFruityInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_gadget_details_get_port(
        self_: *mut FridaFruityInjectorGadgetDetails,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_fruity_injector_session_get_type() -> GType;
}
pub type FridaFruityInjectorSession_autoptr = *mut FridaFruityInjectorSession;
pub type FridaFruityInjectorSession_listautoptr = *mut GList;
pub type FridaFruityInjectorSession_slistautoptr = *mut GSList;
pub type FridaFruityInjectorSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_get_type() -> GType;
}
pub type FridaFruityUsbmuxClient_autoptr = *mut FridaFruityUsbmuxClient;
pub type FridaFruityUsbmuxClient_listautoptr = *mut GList;
pub type FridaFruityUsbmuxClient_slistautoptr = *mut GSList;
pub type FridaFruityUsbmuxClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_open(
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityUsbmuxClient;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_close(
        self_: *mut FridaFruityUsbmuxClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_close_finish(
        self_: *mut FridaFruityUsbmuxClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_enable_listen_mode(
        self_: *mut FridaFruityUsbmuxClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_enable_listen_mode_finish(
        self_: *mut FridaFruityUsbmuxClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_connect_to_port(
        self_: *mut FridaFruityUsbmuxClient,
        device_id: guint,
        port: guint16,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_connect_to_port_finish(
        self_: *mut FridaFruityUsbmuxClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_read_pair_record(
        self_: *mut FridaFruityUsbmuxClient,
        udid: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_read_pair_record_finish(
        self_: *mut FridaFruityUsbmuxClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_delete_pair_record(
        self_: *mut FridaFruityUsbmuxClient,
        udid: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_delete_pair_record_finish(
        self_: *mut FridaFruityUsbmuxClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_new() -> *mut FridaFruityUsbmuxClient;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_construct(object_type: GType)
    -> *mut FridaFruityUsbmuxClient;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_client_get_connection(
        self_: *mut FridaFruityUsbmuxClient,
    ) -> *mut GSocketConnection;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_new(
        connection_type: FridaFruityConnectionType,
        id: guint,
        product_id: gint,
        udid: *const gchar,
        network_address: *mut GInetSocketAddress,
    ) -> *mut FridaFruityUsbmuxDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_construct(
        object_type: GType,
        connection_type: FridaFruityConnectionType,
        id: guint,
        product_id: gint,
        udid: *const gchar,
        network_address: *mut GInetSocketAddress,
    ) -> *mut FridaFruityUsbmuxDevice;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_connection_type(
        self_: *mut FridaFruityUsbmuxDevice,
    ) -> FridaFruityConnectionType;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_id(self_: *mut FridaFruityUsbmuxDevice) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_product_id(self_: *mut FridaFruityUsbmuxDevice) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_udid(self_: *mut FridaFruityUsbmuxDevice)
    -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_usbmux_device_get_network_address(
        self_: *mut FridaFruityUsbmuxDevice,
    ) -> *mut GInetSocketAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_dns_packet_reader(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_dns_packet_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_dns_packet_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_dns_packet_reader(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_get_type() -> GType;
}
pub type FridaFruityDnsPacketReader_autoptr = *mut FridaFruityDnsPacketReader;
pub type FridaFruityDnsPacketReader_listautoptr = *mut GList;
pub type FridaFruityDnsPacketReader_slistautoptr = *mut GSList;
pub type FridaFruityDnsPacketReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_new(
        packet: *mut GBytes,
    ) -> *mut FridaFruityDnsPacketReader;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_construct(
        object_type: GType,
        packet: *mut GBytes,
    ) -> *mut FridaFruityDnsPacketReader;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_record_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_record_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_dns_resource_record(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_dns_resource_record(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_dns_resource_record(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_dns_resource_record(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_record_get_type() -> GType;
}
pub type FridaFruityDnsResourceRecord_autoptr = *mut FridaFruityDnsResourceRecord;
pub type FridaFruityDnsResourceRecord_listautoptr = *mut GList;
pub type FridaFruityDnsResourceRecord_slistautoptr = *mut GSList;
pub type FridaFruityDnsResourceRecord_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_ptr_record_get_type() -> GType;
}
pub type FridaFruityDnsPtrRecord_autoptr = *mut FridaFruityDnsPtrRecord;
pub type FridaFruityDnsPtrRecord_listautoptr = *mut GList;
pub type FridaFruityDnsPtrRecord_slistautoptr = *mut GSList;
pub type FridaFruityDnsPtrRecord_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_ptr(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsPtrRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_txt_record_get_type() -> GType;
}
pub type FridaFruityDnsTxtRecord_autoptr = *mut FridaFruityDnsTxtRecord;
pub type FridaFruityDnsTxtRecord_listautoptr = *mut GList;
pub type FridaFruityDnsTxtRecord_slistautoptr = *mut GSList;
pub type FridaFruityDnsTxtRecord_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_txt(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsTxtRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_aaaa_record_get_type() -> GType;
}
pub type FridaFruityDnsAaaaRecord_autoptr = *mut FridaFruityDnsAaaaRecord;
pub type FridaFruityDnsAaaaRecord_listautoptr = *mut GList;
pub type FridaFruityDnsAaaaRecord_slistautoptr = *mut GSList;
pub type FridaFruityDnsAaaaRecord_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_aaaa(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsAaaaRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_srv_record_get_type() -> GType;
}
pub type FridaFruityDnsSrvRecord_autoptr = *mut FridaFruityDnsSrvRecord;
pub type FridaFruityDnsSrvRecord_listautoptr = *mut GList;
pub type FridaFruityDnsSrvRecord_slistautoptr = *mut GSList;
pub type FridaFruityDnsSrvRecord_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_srv(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsSrvRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_record(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsResourceRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_key_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_key_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_dns_resource_key(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_dns_resource_key(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_dns_resource_key(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_dns_resource_key(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_key_get_type() -> GType;
}
pub type FridaFruityDnsResourceKey_autoptr = *mut FridaFruityDnsResourceKey;
pub type FridaFruityDnsResourceKey_listautoptr = *mut GList;
pub type FridaFruityDnsResourceKey_slistautoptr = *mut GSList;
pub type FridaFruityDnsResourceKey_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_key(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut FridaFruityDnsResourceKey;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_name(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_packet_reader_read_string(
        self_: *mut FridaFruityDnsPacketReader,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_ptr_record_new() -> *mut FridaFruityDnsPtrRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_ptr_record_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsPtrRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_txt_record_new() -> *mut FridaFruityDnsTxtRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_txt_record_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsTxtRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_aaaa_record_new() -> *mut FridaFruityDnsAaaaRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_aaaa_record_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsAaaaRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_srv_record_new() -> *mut FridaFruityDnsSrvRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_srv_record_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsSrvRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_record_new() -> *mut FridaFruityDnsResourceRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_record_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsResourceRecord;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_record_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_record_class_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_key_new() -> *mut FridaFruityDnsResourceKey;
}
unsafe extern "C" {
    pub fn frida_fruity_dns_resource_key_construct(
        object_type: GType,
    ) -> *mut FridaFruityDnsResourceKey;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_hash(self_: *mut FridaFruityNSObject) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_is_equal_to(
        self_: *mut FridaFruityNSObject,
        other: *mut FridaFruityNSObject,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_to_string(self_: *mut FridaFruityNSObject) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_hash_func(val: *mut FridaFruityNSObject) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_equal_func(
        a: *mut FridaFruityNSObject,
        b: *mut FridaFruityNSObject,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_new() -> *mut FridaFruityNSObject;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_object_construct(object_type: GType) -> *mut FridaFruityNSObject;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_get_type() -> GType;
}
pub type FridaFruityNSNumber_autoptr = *mut FridaFruityNSNumber;
pub type FridaFruityNSNumber_listautoptr = *mut GList;
pub type FridaFruityNSNumber_slistautoptr = *mut GSList;
pub type FridaFruityNSNumber_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_number_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_new_from_boolean(val: gboolean) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_construct_from_boolean(
        object_type: GType,
        val: gboolean,
    ) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_new_from_integer(val: gint64) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_construct_from_integer(
        object_type: GType,
        val: gint64,
    ) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_new_from_float(val: gfloat) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_construct_from_float(
        object_type: GType,
        val: gfloat,
    ) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_new_from_double(val: gdouble) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_construct_from_double(
        object_type: GType,
        val: gdouble,
    ) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_new() -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_construct(object_type: GType) -> *mut FridaFruityNSNumber;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_get_kind(
        self_: *mut FridaFruityNSNumber,
    ) -> FridaFruityNSNumberKind;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_get_boolean(self_: *mut FridaFruityNSNumber) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_get_integer(self_: *mut FridaFruityNSNumber) -> gint64;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_number_get_number(self_: *mut FridaFruityNSNumber) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_string_get_type() -> GType;
}
pub type FridaFruityNSString_autoptr = *mut FridaFruityNSString;
pub type FridaFruityNSString_listautoptr = *mut GList;
pub type FridaFruityNSString_slistautoptr = *mut GSList;
pub type FridaFruityNSString_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_string_new(str_: *const gchar) -> *mut FridaFruityNSString;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_string_construct(
        object_type: GType,
        str_: *const gchar,
    ) -> *mut FridaFruityNSString;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_string_get_str(self_: *mut FridaFruityNSString) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_data_get_type() -> GType;
}
pub type FridaFruityNSData_autoptr = *mut FridaFruityNSData;
pub type FridaFruityNSData_listautoptr = *mut GList;
pub type FridaFruityNSData_slistautoptr = *mut GSList;
pub type FridaFruityNSData_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_data_new(bytes: *mut GBytes) -> *mut FridaFruityNSData;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_data_construct(
        object_type: GType,
        bytes: *mut GBytes,
    ) -> *mut FridaFruityNSData;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_data_get_bytes(self_: *mut FridaFruityNSData) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_new(storage: *mut GeeHashMap)
    -> *mut FridaFruityNSDictionary;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_construct(
        object_type: GType,
        storage: *mut GeeHashMap,
    ) -> *mut FridaFruityNSDictionary;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_value(
        self_: *mut FridaFruityNSDictionary,
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gconstpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_optional_value(
        self_: *mut FridaFruityNSDictionary,
        t_type: GType,
        t_dup_func: GBoxedCopyFunc,
        t_destroy_func: GDestroyNotify,
        key: *const gchar,
        val: *mut gconstpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_set_value(
        self_: *mut FridaFruityNSDictionary,
        key: *const gchar,
        val: *mut FridaFruityNSObject,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_size(self_: *mut FridaFruityNSDictionary) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_entries(
        self_: *mut FridaFruityNSDictionary,
    ) -> *mut GeeSet;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_keys(
        self_: *mut FridaFruityNSDictionary,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_get_values(
        self_: *mut FridaFruityNSDictionary,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_get_type() -> GType;
}
pub type FridaFruityNSDictionaryRaw_autoptr = *mut FridaFruityNSDictionaryRaw;
pub type FridaFruityNSDictionaryRaw_listautoptr = *mut GList;
pub type FridaFruityNSDictionaryRaw_slistautoptr = *mut GSList;
pub type FridaFruityNSDictionaryRaw_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_new(
        storage: *mut GeeHashMap,
    ) -> *mut FridaFruityNSDictionaryRaw;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_construct(
        object_type: GType,
        storage: *mut GeeHashMap,
    ) -> *mut FridaFruityNSDictionaryRaw;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_get_size(self_: *mut FridaFruityNSDictionaryRaw) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_get_entries(
        self_: *mut FridaFruityNSDictionaryRaw,
    ) -> *mut GeeSet;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_get_keys(
        self_: *mut FridaFruityNSDictionaryRaw,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_dictionary_raw_get_values(
        self_: *mut FridaFruityNSDictionaryRaw,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_array_get_type() -> GType;
}
pub type FridaFruityNSArray_autoptr = *mut FridaFruityNSArray;
pub type FridaFruityNSArray_listautoptr = *mut GList;
pub type FridaFruityNSArray_slistautoptr = *mut GSList;
pub type FridaFruityNSArray_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_array_new(storage: *mut GeeArrayList) -> *mut FridaFruityNSArray;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_array_construct(
        object_type: GType,
        storage: *mut GeeArrayList,
    ) -> *mut FridaFruityNSArray;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_array_add_object(
        self_: *mut FridaFruityNSArray,
        obj: *mut FridaFruityNSObject,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_array_get_length(self_: *mut FridaFruityNSArray) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_array_get_elements(self_: *mut FridaFruityNSArray) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_date_get_type() -> GType;
}
pub type FridaFruityNSDate_autoptr = *mut FridaFruityNSDate;
pub type FridaFruityNSDate_listautoptr = *mut GList;
pub type FridaFruityNSDate_slistautoptr = *mut GSList;
pub type FridaFruityNSDate_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_date_new(time: gdouble) -> *mut FridaFruityNSDate;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_date_construct(
        object_type: GType,
        time: gdouble,
    ) -> *mut FridaFruityNSDate;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_date_to_date_time(self_: *mut FridaFruityNSDate) -> *mut GDateTime;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_date_get_time(self_: *mut FridaFruityNSDate) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_error_get_type() -> GType;
}
pub type FridaFruityNSError_autoptr = *mut FridaFruityNSError;
pub type FridaFruityNSError_listautoptr = *mut GList;
pub type FridaFruityNSError_slistautoptr = *mut GSList;
pub type FridaFruityNSError_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_error_new(
        domain: *mut FridaFruityNSString,
        code: gint64,
        user_info: *mut FridaFruityNSDictionary,
    ) -> *mut FridaFruityNSError;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_error_construct(
        object_type: GType,
        domain: *mut FridaFruityNSString,
        code: gint64,
        user_info: *mut FridaFruityNSDictionary,
    ) -> *mut FridaFruityNSError;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_error_get_domain(
        self_: *mut FridaFruityNSError,
    ) -> *mut FridaFruityNSString;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_error_get_code(self_: *mut FridaFruityNSError) -> gint64;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_error_get_user_info(
        self_: *mut FridaFruityNSError,
    ) -> *mut FridaFruityNSDictionary;
}
unsafe extern "C" {
    pub fn frida_fruity_dt_tap_message_get_type() -> GType;
}
pub type FridaFruityDTTapMessage_autoptr = *mut FridaFruityDTTapMessage;
pub type FridaFruityDTTapMessage_listautoptr = *mut GList;
pub type FridaFruityDTTapMessage_slistautoptr = *mut GSList;
pub type FridaFruityDTTapMessage_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_dt_tap_message_new(
        plist: *mut FridaFruityNSDictionary,
    ) -> *mut FridaFruityDTTapMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_dt_tap_message_construct(
        object_type: GType,
        plist: *mut FridaFruityNSDictionary,
    ) -> *mut FridaFruityDTTapMessage;
}
unsafe extern "C" {
    pub fn frida_fruity_dt_tap_message_get_plist(
        self_: *mut FridaFruityDTTapMessage,
    ) -> *mut FridaFruityNSDictionary;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_encode(
        obj: *mut FridaFruityNSObject,
        result_length1: *mut gint,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_decode(
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityNSObject;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_encoding_context_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_encoding_context_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_param_spec_encoding_context(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_set_encoding_context(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_take_encoding_context(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_get_encoding_context(
        value: *const GValue,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_encoding_context_get_type() -> GType;
}
pub type FridaFruityNSKeyedArchiveEncodingContext_autoptr =
    *mut FridaFruityNSKeyedArchiveEncodingContext;
pub type FridaFruityNSKeyedArchiveEncodingContext_listautoptr = *mut GList;
pub type FridaFruityNSKeyedArchiveEncodingContext_slistautoptr = *mut GSList;
pub type FridaFruityNSKeyedArchiveEncodingContext_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_decoding_context_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_decoding_context_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_param_spec_decoding_context(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_set_decoding_context(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_take_decoding_context(
        value: *mut GValue,
        v_object: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_value_get_decoding_context(
        value: *const GValue,
    ) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_ns_keyed_archive_decoding_context_get_type() -> GType;
}
pub type FridaFruityNSKeyedArchiveDecodingContext_autoptr =
    *mut FridaFruityNSKeyedArchiveDecodingContext;
pub type FridaFruityNSKeyedArchiveDecodingContext_listautoptr = *mut GList;
pub type FridaFruityNSKeyedArchiveDecodingContext_slistautoptr = *mut GSList;
pub type FridaFruityNSKeyedArchiveDecodingContext_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_format_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_new_from_binary(
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_construct_from_binary(
        object_type: GType,
        data: *mut guint8,
        data_length1: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_new_from_xml(
        xml: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_construct_from_xml(
        object_type: GType,
        xml: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_new_from_data(
        data: *mut guint8,
        data_length1: gint,
        format: FridaFruityPlistFormat,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_construct_from_data(
        object_type: GType,
        data: *mut guint8,
        data_length1: gint,
        format: FridaFruityPlistFormat,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_to_binary(
        self_: *mut FridaFruityPlist,
        result_length1: *mut gint,
    ) -> *mut guint8;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_to_xml(self_: *mut FridaFruityPlist) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_new() -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_construct(object_type: GType) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_clone(
        self_: *mut FridaFruityPlistDict,
    ) -> *mut FridaFruityPlistDict;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_clear(self_: *mut FridaFruityPlistDict);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_remove(self_: *mut FridaFruityPlistDict, key: *const gchar);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_has(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_boolean(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_boolean(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: gboolean,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_integer(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gint64;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_integer(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: gint64,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_float(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gfloat;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_float(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: gfloat,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_double(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_double(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: gdouble,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_string(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_string(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        str_: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_bytes(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_bytes_as_string(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_bytes(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: *mut GBytes,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_dict(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistDict;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_dict(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        dict: *mut FridaFruityPlistDict,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_type() -> GType;
}
pub type FridaFruityPlistArray_autoptr = *mut FridaFruityPlistArray;
pub type FridaFruityPlistArray_listautoptr = *mut GList;
pub type FridaFruityPlistArray_slistautoptr = *mut GSList;
pub type FridaFruityPlistArray_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_array(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistArray;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_array(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        array: *mut FridaFruityPlistArray,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_uid_get_type() -> GType;
}
pub type FridaFruityPlistUid_autoptr = *mut FridaFruityPlistUid;
pub type FridaFruityPlistUid_listautoptr = *mut GList;
pub type FridaFruityPlistUid_slistautoptr = *mut GSList;
pub type FridaFruityPlistUid_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_uid(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistUid;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_uid(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        uid: *mut FridaFruityPlistUid,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_value(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        expected_type: GType,
        error: *mut *mut GError,
    ) -> *mut GValue;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_value(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: *mut GValue,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_set_raw_value(
        self_: *mut FridaFruityPlistDict,
        key: *const gchar,
        val: *mut GValue,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_steal_all(
        self_: *mut FridaFruityPlistDict,
        dict: *mut FridaFruityPlistDict,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_new() -> *mut FridaFruityPlistDict;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_construct(object_type: GType) -> *mut FridaFruityPlistDict;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_is_empty(self_: *mut FridaFruityPlistDict) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_size(self_: *mut FridaFruityPlistDict) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_entries(self_: *mut FridaFruityPlistDict) -> *mut GeeSet;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_keys(self_: *mut FridaFruityPlistDict) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_dict_get_values(self_: *mut FridaFruityPlistDict)
    -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_clear(self_: *mut FridaFruityPlistArray);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_remove_at(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_boolean(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_boolean(self_: *mut FridaFruityPlistArray, val: gboolean);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_integer(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> gint64;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_integer(self_: *mut FridaFruityPlistArray, val: gint64);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_float(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> gfloat;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_float(self_: *mut FridaFruityPlistArray, val: gfloat);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_double(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_double(self_: *mut FridaFruityPlistArray, val: gdouble);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_string(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_string(
        self_: *mut FridaFruityPlistArray,
        str_: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_bytes(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_bytes_as_string(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_bytes(self_: *mut FridaFruityPlistArray, val: *mut GBytes);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_dict(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistDict;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_dict(
        self_: *mut FridaFruityPlistArray,
        dict: *mut FridaFruityPlistDict,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_array(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistArray;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_array(
        self_: *mut FridaFruityPlistArray,
        array: *mut FridaFruityPlistArray,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_uid(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlistUid;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_uid(
        self_: *mut FridaFruityPlistArray,
        uid: *mut FridaFruityPlistUid,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_value(
        self_: *mut FridaFruityPlistArray,
        index: gint,
        expected_type: GType,
        error: *mut *mut GError,
    ) -> *mut GValue;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_add_value(self_: *mut FridaFruityPlistArray, val: *mut GValue);
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_new() -> *mut FridaFruityPlistArray;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_construct(object_type: GType) -> *mut FridaFruityPlistArray;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_is_empty(self_: *mut FridaFruityPlistArray) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_length(self_: *mut FridaFruityPlistArray) -> gint;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_array_get_elements(
        self_: *mut FridaFruityPlistArray,
    ) -> *mut GeeIterable;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_null_get_type() -> GType;
}
pub type FridaFruityPlistNull_autoptr = *mut FridaFruityPlistNull;
pub type FridaFruityPlistNull_listautoptr = *mut GList;
pub type FridaFruityPlistNull_slistautoptr = *mut GSList;
pub type FridaFruityPlistNull_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_null_new() -> *mut FridaFruityPlistNull;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_null_construct(object_type: GType) -> *mut FridaFruityPlistNull;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_date_get_type() -> GType;
}
pub type FridaFruityPlistDate_autoptr = *mut FridaFruityPlistDate;
pub type FridaFruityPlistDate_listautoptr = *mut GList;
pub type FridaFruityPlistDate_slistautoptr = *mut GSList;
pub type FridaFruityPlistDate_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_plist_date_new(time: *mut GDateTime) -> *mut FridaFruityPlistDate;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_date_construct(
        object_type: GType,
        time: *mut GDateTime,
    ) -> *mut FridaFruityPlistDate;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_date_get_time(self_: *mut FridaFruityPlistDate) -> *mut GDateTime;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_uid_new(uid: guint64) -> *mut FridaFruityPlistUid;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_uid_construct(
        object_type: GType,
        uid: guint64,
    ) -> *mut FridaFruityPlistUid;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_uid_get_uid(self_: *mut FridaFruityPlistUid) -> guint64;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_new(
        stream: *mut GIOStream,
    ) -> *mut FridaFruityPlistServiceClient;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaFruityPlistServiceClient;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_close(
        self_: *mut FridaFruityPlistServiceClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_close_finish(
        self_: *mut FridaFruityPlistServiceClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_query(
        self_: *mut FridaFruityPlistServiceClient,
        request: *mut FridaFruityPlist,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_error_quark() -> GQuark;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_error_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_query_finish(
        self_: *mut FridaFruityPlistServiceClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_write_message(
        self_: *mut FridaFruityPlistServiceClient,
        message: *mut FridaFruityPlist,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_read_message(
        self_: *mut FridaFruityPlistServiceClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_read_message_finish(
        self_: *mut FridaFruityPlistServiceClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaFruityPlist;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_read_messages(
        self_: *mut FridaFruityPlistServiceClient,
        limit: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_read_messages_finish(
        self_: *mut FridaFruityPlistServiceClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_get_stream(
        self_: *mut FridaFruityPlistServiceClient,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_plist_service_client_set_stream(
        self_: *mut FridaFruityPlistServiceClient,
        value: *mut GIOStream,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_opack_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_opack_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_opack_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_opack_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_get_type() -> GType;
}
pub type FridaFruityOpackBuilder_autoptr = *mut FridaFruityOpackBuilder;
pub type FridaFruityOpackBuilder_listautoptr = *mut GList;
pub type FridaFruityOpackBuilder_slistautoptr = *mut GSList;
pub type FridaFruityOpackBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_new() -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_construct(object_type: GType)
    -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_begin_dictionary(
        self_: *mut FridaFruityOpackBuilder,
    ) -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_set_member_name(
        self_: *mut FridaFruityOpackBuilder,
        name: *const gchar,
    ) -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_end_dictionary(
        self_: *mut FridaFruityOpackBuilder,
    ) -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_add_string_value(
        self_: *mut FridaFruityOpackBuilder,
        val: *const gchar,
    ) -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_add_data_value(
        self_: *mut FridaFruityOpackBuilder,
        val: *mut GBytes,
    ) -> *mut FridaFruityOpackBuilder;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_builder_build(self_: *mut FridaFruityOpackBuilder) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_parser_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_parser_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_opack_parser(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_opack_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_opack_parser(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_opack_parser(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_opack_parser_get_type() -> GType;
}
pub type FridaFruityOpackParser_autoptr = *mut FridaFruityOpackParser;
pub type FridaFruityOpackParser_listautoptr = *mut GList;
pub type FridaFruityOpackParser_slistautoptr = *mut GSList;
pub type FridaFruityOpackParser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_opack_parser_parse(
        opack: *mut GBytes,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_open_tcp_connection(
        self_: *mut FridaFruityNetworkStack,
        address: *mut GInetSocketAddress,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_open_tcp_connection_finish(
        self_: *mut FridaFruityNetworkStack,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_open_tcp_connection_with_timeout(
        self_: *mut FridaFruityNetworkStack,
        address: *mut GInetSocketAddress,
        timeout: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_open_tcp_connection_with_timeout_finish(
        self_: *mut FridaFruityNetworkStack,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_create_udp_socket(
        self_: *mut FridaFruityNetworkStack,
        error: *mut *mut GError,
    ) -> *mut FridaFruityUdpSocket;
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_get_listener_ip(
        self_: *mut FridaFruityNetworkStack,
    ) -> *mut GInetAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_network_stack_get_scope_id(self_: *mut FridaFruityNetworkStack) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_udp_socket_bind(
        self_: *mut FridaFruityUdpSocket,
        address: *mut GInetSocketAddress,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_udp_socket_get_local_address(
        self_: *mut FridaFruityUdpSocket,
        error: *mut *mut GError,
    ) -> *mut GInetSocketAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_udp_socket_socket_connect(
        self_: *mut FridaFruityUdpSocket,
        address: *mut GInetSocketAddress,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_udp_socket_get_datagram_based(
        self_: *mut FridaFruityUdpSocket,
    ) -> *mut GDatagramBased;
}
unsafe extern "C" {
    pub fn frida_fruity_system_network_stack_get_type() -> GType;
}
pub type FridaFruitySystemNetworkStack_autoptr = *mut FridaFruitySystemNetworkStack;
pub type FridaFruitySystemNetworkStack_listautoptr = *mut GList;
pub type FridaFruitySystemNetworkStack_slistautoptr = *mut GSList;
pub type FridaFruitySystemNetworkStack_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_system_network_stack_new(
        listener_ip: *mut GInetAddress,
        scope_id: guint,
    ) -> *mut FridaFruitySystemNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_system_network_stack_construct(
        object_type: GType,
        listener_ip: *mut GInetAddress,
        scope_id: guint,
    ) -> *mut FridaFruitySystemNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_get_type() -> GType;
}
pub type FridaFruityVirtualNetworkStack_autoptr = *mut FridaFruityVirtualNetworkStack;
pub type FridaFruityVirtualNetworkStack_listautoptr = *mut GList;
pub type FridaFruityVirtualNetworkStack_slistautoptr = *mut GSList;
pub type FridaFruityVirtualNetworkStack_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_new(
        ethernet_address: *mut GBytes,
        ipv6_address: *mut GInetAddress,
        mtu: guint16,
    ) -> *mut FridaFruityVirtualNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_construct(
        object_type: GType,
        ethernet_address: *mut GBytes,
        ipv6_address: *mut GInetAddress,
        mtu: guint16,
    ) -> *mut FridaFruityVirtualNetworkStack;
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_stop(self_: *mut FridaFruityVirtualNetworkStack);
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_handle_incoming_datagram(
        self_: *mut FridaFruityVirtualNetworkStack,
        datagram: *mut GBytes,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_get_ethernet_address(
        self_: *mut FridaFruityVirtualNetworkStack,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_get_ipv6_address(
        self_: *mut FridaFruityVirtualNetworkStack,
    ) -> *mut GInetAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_virtual_network_stack_get_mtu(
        self_: *mut FridaFruityVirtualNetworkStack,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_fruity_usb_device_get_type() -> GType;
}
pub type FridaFruityUsbDevice_autoptr = *mut FridaFruityUsbDevice;
pub type FridaFruityUsbDevice_listautoptr = *mut GList;
pub type FridaFruityUsbDevice_slistautoptr = *mut GSList;
pub type FridaFruityUsbDevice_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usb_ncm_driver_get_type() -> GType;
}
pub type FridaFruityUsbNcmDriver_autoptr = *mut FridaFruityUsbNcmDriver;
pub type FridaFruityUsbNcmDriver_listautoptr = *mut GList;
pub type FridaFruityUsbNcmDriver_slistautoptr = *mut GSList;
pub type FridaFruityUsbNcmDriver_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_usb_ncm_config_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_usb_ncm_config_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_param_spec_usb_ncm_config(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_fruity_value_set_usb_ncm_config(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_take_usb_ncm_config(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_fruity_value_get_usb_ncm_config(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_fruity_usb_ncm_config_get_type() -> GType;
}
pub type FridaFruityUsbNcmConfig_autoptr = *mut FridaFruityUsbNcmConfig;
pub type FridaFruityUsbNcmConfig_listautoptr = *mut GList;
pub type FridaFruityUsbNcmConfig_slistautoptr = *mut GSList;
pub type FridaFruityUsbNcmConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_linux_fruit_finder_get_type() -> GType;
}
pub type FridaFruityLinuxFruitFinder_autoptr = *mut FridaFruityLinuxFruitFinder;
pub type FridaFruityLinuxFruitFinder_listautoptr = *mut GList;
pub type FridaFruityLinuxFruitFinder_slistautoptr = *mut GSList;
pub type FridaFruityLinuxFruitFinder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_linux_fruit_finder_new() -> *mut FridaFruityLinuxFruitFinder;
}
unsafe extern "C" {
    pub fn frida_fruity_linux_fruit_finder_construct(
        object_type: GType,
    ) -> *mut FridaFruityLinuxFruitFinder;
}
unsafe extern "C" {
    pub fn frida_fruity_linux_pairing_browser_get_type() -> GType;
}
pub type FridaFruityLinuxPairingBrowser_autoptr = *mut FridaFruityLinuxPairingBrowser;
pub type FridaFruityLinuxPairingBrowser_listautoptr = *mut GList;
pub type FridaFruityLinuxPairingBrowser_slistautoptr = *mut GSList;
pub type FridaFruityLinuxPairingBrowser_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_linux_pairing_browser_new() -> *mut FridaFruityLinuxPairingBrowser;
}
unsafe extern "C" {
    pub fn frida_fruity_linux_pairing_browser_construct(
        object_type: GType,
    ) -> *mut FridaFruityLinuxPairingBrowser;
}
unsafe extern "C" {
    pub fn frida_fruity_network_wait_until_interfaces_ready(
        interface_names: *mut GeeCollection,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_network_wait_until_interfaces_ready_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_proxy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_register_object(
        object: *mut ::std::os::raw::c_void,
        connection: *mut GDBusConnection,
        path: *const gchar,
        error: *mut *mut GError,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_rr_item_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_rr_item_dup(
        self_: *const FridaFruityResolvedRRItem,
    ) -> *mut FridaFruityResolvedRRItem;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_rr_item_free(self_: *mut FridaFruityResolvedRRItem);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_rr_item_copy(
        self_: *const FridaFruityResolvedRRItem,
        dest: *mut FridaFruityResolvedRRItem,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_rr_item_destroy(self_: *mut FridaFruityResolvedRRItem);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_item_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_address_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_address_dup(
        self_: *const FridaFruityResolvedSrvAddress,
    ) -> *mut FridaFruityResolvedSrvAddress;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_address_free(self_: *mut FridaFruityResolvedSrvAddress);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_address_copy(
        self_: *const FridaFruityResolvedSrvAddress,
        dest: *mut FridaFruityResolvedSrvAddress,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_address_destroy(self_: *mut FridaFruityResolvedSrvAddress);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_item_dup(
        self_: *const FridaFruityResolvedSrvItem,
    ) -> *mut FridaFruityResolvedSrvItem;
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_item_free(self_: *mut FridaFruityResolvedSrvItem);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_item_copy(
        self_: *const FridaFruityResolvedSrvItem,
        dest: *mut FridaFruityResolvedSrvItem,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_srv_item_destroy(self_: *mut FridaFruityResolvedSrvItem);
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_get_type() -> GType;
}
pub type FridaFruityResolvedManager_autoptr = *mut FridaFruityResolvedManager;
pub type FridaFruityResolvedManager_listautoptr = *mut GList;
pub type FridaFruityResolvedManager_slistautoptr = *mut GSList;
pub type FridaFruityResolvedManager_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_resolve_record(
        self_: *mut FridaFruityResolvedManager,
        ifindex: gint32,
        name: *const gchar,
        klass: guint16,
        type_: guint16,
        flags: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_resolve_record_finish(
        self_: *mut FridaFruityResolvedManager,
        _res_: *mut GAsyncResult,
        items: *mut *mut FridaFruityResolvedRRItem,
        items_length1: *mut gint,
        result_flags: *mut guint64,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_resolve_service(
        self_: *mut FridaFruityResolvedManager,
        ifindex: gint32,
        name: *const gchar,
        type_: *const gchar,
        domain: *const gchar,
        family: gint32,
        flags: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_manager_resolve_service_finish(
        self_: *mut FridaFruityResolvedManager,
        _res_: *mut GAsyncResult,
        srv_items: *mut *mut FridaFruityResolvedSrvItem,
        srv_items_length1: *mut gint,
        txt_items: *mut *mut GVariant,
        canonical_name: *mut *mut gchar,
        canonical_type: *mut *mut gchar,
        canonical_domain: *mut *mut gchar,
        result_flags: *mut guint64,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_fruity_resolved_flags_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_backend_get_type() -> GType;
}
pub type FridaDroidyHostSessionBackend_autoptr = *mut FridaDroidyHostSessionBackend;
pub type FridaDroidyHostSessionBackend_listautoptr = *mut GList;
pub type FridaDroidyHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaDroidyHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_host_session_backend_new() -> *mut FridaDroidyHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaDroidyHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_get_type() -> GType;
}
pub type FridaDroidyHostSessionProvider_autoptr = *mut FridaDroidyHostSessionProvider;
pub type FridaDroidyHostSessionProvider_listautoptr = *mut GList;
pub type FridaDroidyHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaDroidyHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_device_details_get_type() -> GType;
}
pub type FridaDroidyDeviceDetails_autoptr = *mut FridaDroidyDeviceDetails;
pub type FridaDroidyDeviceDetails_listautoptr = *mut GList;
pub type FridaDroidyDeviceDetails_slistautoptr = *mut GSList;
pub type FridaDroidyDeviceDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_new(
        details: *mut FridaDroidyDeviceDetails,
    ) -> *mut FridaDroidyHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_construct(
        object_type: GType,
        details: *mut FridaDroidyDeviceDetails,
    ) -> *mut FridaDroidyHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_close(
        self_: *mut FridaDroidyHostSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_close_finish(
        self_: *mut FridaDroidyHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_provider_get_device_details(
        self_: *mut FridaDroidyHostSessionProvider,
    ) -> *mut FridaDroidyDeviceDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_get_type() -> GType;
}
pub type FridaDroidyHostSession_autoptr = *mut FridaDroidyHostSession;
pub type FridaDroidyHostSession_listautoptr = *mut GList;
pub type FridaDroidyHostSession_slistautoptr = *mut GSList;
pub type FridaDroidyHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_host_session_new(
        device_details: *mut FridaDroidyDeviceDetails,
        channel_provider: *mut FridaHostChannelProvider,
    ) -> *mut FridaDroidyHostSession;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_construct(
        object_type: GType,
        device_details: *mut FridaDroidyDeviceDetails,
        channel_provider: *mut FridaHostChannelProvider,
    ) -> *mut FridaDroidyHostSession;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_close(
        self_: *mut FridaDroidyHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_close_finish(
        self_: *mut FridaDroidyHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_link_agent_session(
        self_: *mut FridaDroidyHostSession,
        id: *mut FridaAgentSessionId,
        sink: *mut FridaAgentMessageSink,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_link_agent_session_finish(
        self_: *mut FridaDroidyHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_unlink_agent_session(
        self_: *mut FridaDroidyHostSession,
        id: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_link_channel(
        self_: *mut FridaDroidyHostSession,
        id: *mut FridaChannelId,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_unlink_channel(
        self_: *mut FridaDroidyHostSession,
        id: *mut FridaChannelId,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_get_device_details(
        self_: *mut FridaDroidyHostSession,
    ) -> *mut FridaDroidyDeviceDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_get_channel_provider(
        self_: *mut FridaDroidyHostSession,
    ) -> *mut FridaHostChannelProvider;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_get_type() -> GType;
}
pub type FridaDroidyHostSessionHelperClient_autoptr = *mut FridaDroidyHostSessionHelperClient;
pub type FridaDroidyHostSessionHelperClient_listautoptr = *mut GList;
pub type FridaDroidyHostSessionHelperClient_slistautoptr = *mut GSList;
pub type FridaDroidyHostSessionHelperClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_open(
        device_serial: *const gchar,
        instance_id: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDroidyHostSessionHelperClient;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_close(
        self_: *mut FridaDroidyHostSessionHelperClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_close_finish(
        self_: *mut FridaDroidyHostSessionHelperClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_request(
        self_: *mut FridaDroidyHostSessionHelperClient,
        stanza: *mut JsonNode,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_request_finish(
        self_: *mut FridaDroidyHostSessionHelperClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut JsonNode;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_get_device_serial(
        self_: *mut FridaDroidyHostSessionHelperClient,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_host_session_helper_client_get_instance_id(
        self_: *mut FridaDroidyHostSessionHelperClient,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_get_type() -> GType;
}
pub type FridaDroidyDeviceTracker_autoptr = *mut FridaDroidyDeviceTracker;
pub type FridaDroidyDeviceTracker_listautoptr = *mut GList;
pub type FridaDroidyDeviceTracker_slistautoptr = *mut GSList;
pub type FridaDroidyDeviceTracker_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_open(
        self_: *mut FridaDroidyDeviceTracker,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_open_finish(
        self_: *mut FridaDroidyDeviceTracker,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_close(
        self_: *mut FridaDroidyDeviceTracker,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_close_finish(
        self_: *mut FridaDroidyDeviceTracker,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_new() -> *mut FridaDroidyDeviceTracker;
}
unsafe extern "C" {
    pub fn frida_droidy_device_tracker_construct(
        object_type: GType,
    ) -> *mut FridaDroidyDeviceTracker;
}
unsafe extern "C" {
    pub fn frida_droidy_device_details_new(
        serial: *const gchar,
        name: *const gchar,
    ) -> *mut FridaDroidyDeviceDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_device_details_construct(
        object_type: GType,
        serial: *const gchar,
        name: *const gchar,
    ) -> *mut FridaDroidyDeviceDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_device_details_get_serial(
        self_: *mut FridaDroidyDeviceDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_device_details_get_name(
        self_: *mut FridaDroidyDeviceDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_run(
        command: *const gchar,
        device_serial: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_run_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_get_type() -> GType;
}
pub type FridaDroidyShellSession_autoptr = *mut FridaDroidyShellSession;
pub type FridaDroidyShellSession_listautoptr = *mut GList;
pub type FridaDroidyShellSession_slistautoptr = *mut GSList;
pub type FridaDroidyShellSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_shell_session_open(
        self_: *mut FridaDroidyShellSession,
        device_serial: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_open_finish(
        self_: *mut FridaDroidyShellSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_close(
        self_: *mut FridaDroidyShellSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_close_finish(
        self_: *mut FridaDroidyShellSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_check_call(
        self_: *mut FridaDroidyShellSession,
        command: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_check_call_finish(
        self_: *mut FridaDroidyShellSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_check_output(
        self_: *mut FridaDroidyShellSession,
        command: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_check_output_finish(
        self_: *mut FridaDroidyShellSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_run(
        self_: *mut FridaDroidyShellSession,
        command: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_type() -> GType;
}
pub type FridaDroidyShellCommandResult_autoptr = *mut FridaDroidyShellCommandResult;
pub type FridaDroidyShellCommandResult_listautoptr = *mut GList;
pub type FridaDroidyShellCommandResult_slistautoptr = *mut GSList;
pub type FridaDroidyShellCommandResult_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_shell_session_run_finish(
        self_: *mut FridaDroidyShellSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDroidyShellCommandResult;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_send_command(
        self_: *mut FridaDroidyShellSession,
        command: *const gchar,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_new() -> *mut FridaDroidyShellSession;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_session_construct(object_type: GType)
    -> *mut FridaDroidyShellSession;
}
unsafe extern "C" {
    pub fn frida_droidy_stdio_pipe_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_new(
        status: guint8,
        stdout_bytes: *mut GBytes,
        stderr_bytes: *mut GBytes,
    ) -> *mut FridaDroidyShellCommandResult;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_construct(
        object_type: GType,
        status: guint8,
        stdout_bytes: *mut GBytes,
        stderr_bytes: *mut GBytes,
    ) -> *mut FridaDroidyShellCommandResult;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_status(
        self_: *mut FridaDroidyShellCommandResult,
    ) -> guint8;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_stdout_text(
        self_: *mut FridaDroidyShellCommandResult,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_stdout_bytes(
        self_: *mut FridaDroidyShellCommandResult,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_stderr_text(
        self_: *mut FridaDroidyShellCommandResult,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_shell_command_result_get_stderr_bytes(
        self_: *mut FridaDroidyShellCommandResult,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_get_type() -> GType;
}
pub type FridaDroidyFileMetadata_autoptr = *mut FridaDroidyFileMetadata;
pub type FridaDroidyFileMetadata_listautoptr = *mut GList;
pub type FridaDroidyFileMetadata_slistautoptr = *mut GSList;
pub type FridaDroidyFileMetadata_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_file_sync_send(
        content: *mut GInputStream,
        metadata: *mut FridaDroidyFileMetadata,
        remote_path: *const gchar,
        device_serial: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_file_sync_send_finish(_res_: *mut GAsyncResult, error: *mut *mut GError);
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_new() -> *mut FridaDroidyFileMetadata;
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_construct(object_type: GType)
    -> *mut FridaDroidyFileMetadata;
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_get_mode(self_: *mut FridaDroidyFileMetadata) -> guint32;
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_set_mode(self_: *mut FridaDroidyFileMetadata, value: guint32);
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_get_time_modified(
        self_: *mut FridaDroidyFileMetadata,
    ) -> *mut GDateTime;
}
unsafe extern "C" {
    pub fn frida_droidy_file_metadata_set_time_modified(
        self_: *mut FridaDroidyFileMetadata,
        value: *mut GDateTime,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_get_type() -> GType;
}
pub type FridaDroidyJDWPTracker_autoptr = *mut FridaDroidyJDWPTracker;
pub type FridaDroidyJDWPTracker_listautoptr = *mut GList;
pub type FridaDroidyJDWPTracker_slistautoptr = *mut GSList;
pub type FridaDroidyJDWPTracker_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_open(
        self_: *mut FridaDroidyJDWPTracker,
        device_serial: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_open_finish(
        self_: *mut FridaDroidyJDWPTracker,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_close(
        self_: *mut FridaDroidyJDWPTracker,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_close_finish(
        self_: *mut FridaDroidyJDWPTracker,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_new() -> *mut FridaDroidyJDWPTracker;
}
unsafe extern "C" {
    pub fn frida_droidy_jdwp_tracker_construct(object_type: GType) -> *mut FridaDroidyJDWPTracker;
}
unsafe extern "C" {
    pub fn frida_droidy_client_get_type() -> GType;
}
pub type FridaDroidyClient_autoptr = *mut FridaDroidyClient;
pub type FridaDroidyClient_listautoptr = *mut GList;
pub type FridaDroidyClient_slistautoptr = *mut GSList;
pub type FridaDroidyClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_client_request_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_droidy_client_open(
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDroidyClient;
}
unsafe extern "C" {
    pub fn frida_droidy_client_new(stream: *mut GIOStream) -> *mut FridaDroidyClient;
}
unsafe extern "C" {
    pub fn frida_droidy_client_construct(
        object_type: GType,
        stream: *mut GIOStream,
    ) -> *mut FridaDroidyClient;
}
unsafe extern "C" {
    pub fn frida_droidy_client_close(
        self_: *mut FridaDroidyClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_close_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request(
        self_: *mut FridaDroidyClient,
        message: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_data(
        self_: *mut FridaDroidyClient,
        message: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_data_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_protocol_change(
        self_: *mut FridaDroidyClient,
        message: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_protocol_change_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_sync_session(
        self_: *mut FridaDroidyClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_get_type() -> GType;
}
pub type FridaDroidySyncSession_autoptr = *mut FridaDroidySyncSession;
pub type FridaDroidySyncSession_listautoptr = *mut GList;
pub type FridaDroidySyncSession_slistautoptr = *mut GSList;
pub type FridaDroidySyncSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_client_request_sync_session_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDroidySyncSession;
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_with_bytes(
        self_: *mut FridaDroidyClient,
        message: *mut GBytes,
        request_type: FridaDroidyClientRequestType,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_client_request_with_bytes_finish(
        self_: *mut FridaDroidyClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_droidy_client_get_stream(self_: *mut FridaDroidyClient) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_new(
        client: *mut FridaDroidyClient,
    ) -> *mut FridaDroidySyncSession;
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_construct(
        object_type: GType,
        client: *mut FridaDroidyClient,
    ) -> *mut FridaDroidySyncSession;
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_send(
        self_: *mut FridaDroidySyncSession,
        chunk: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_send_finish(
        self_: *mut FridaDroidySyncSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_finish(
        self_: *mut FridaDroidySyncSession,
        chunk: *mut GBytes,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_finish_finish(
        self_: *mut FridaDroidySyncSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_sync_session_get_client(
        self_: *mut FridaDroidySyncSession,
    ) -> *mut FridaDroidyClient;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_type() -> GType;
}
pub type FridaJDWPClient_autoptr = *mut FridaJDWPClient;
pub type FridaJDWPClient_listautoptr = *mut GList;
pub type FridaJDWPClient_slistautoptr = *mut GSList;
pub type FridaJDWPClient_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_client_state_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_open(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_open_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaJDWPClient;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_close(
        self_: *mut FridaJDWPClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_close_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_suspend(
        self_: *mut FridaJDWPClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_suspend_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_resume(
        self_: *mut FridaJDWPClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_resume_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_create_string(
        self_: *mut FridaJDWPClient,
        str_: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_value_get_type() -> GType;
}
pub type FridaJDWPValue_autoptr = *mut FridaJDWPValue;
pub type FridaJDWPValue_listautoptr = *mut GList;
pub type FridaJDWPValue_slistautoptr = *mut GSList;
pub type FridaJDWPValue_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_object_get_type() -> GType;
}
pub type FridaJDWPObject_autoptr = *mut FridaJDWPObject;
pub type FridaJDWPObject_listautoptr = *mut GList;
pub type FridaJDWPObject_slistautoptr = *mut GSList;
pub type FridaJDWPObject_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_string_get_type() -> GType;
}
pub type FridaJDWPString_autoptr = *mut FridaJDWPString;
pub type FridaJDWPString_listautoptr = *mut GList;
pub type FridaJDWPString_slistautoptr = *mut GSList;
pub type FridaJDWPString_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_client_create_string_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaJDWPString;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_dup(self_: *const FridaJDWPObjectID) -> *mut FridaJDWPObjectID;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_free(self_: *mut FridaJDWPObjectID);
}
unsafe extern "C" {
    pub fn frida_jdwp_client_read_string(
        self_: *mut FridaJDWPClient,
        id: *mut FridaJDWPObjectID,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_read_string_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_class_by_signature(
        self_: *mut FridaJDWPClient,
        signature: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_get_type() -> GType;
}
pub type FridaJDWPClassInfo_autoptr = *mut FridaJDWPClassInfo;
pub type FridaJDWPClassInfo_listautoptr = *mut GList;
pub type FridaJDWPClassInfo_slistautoptr = *mut GSList;
pub type FridaJDWPClassInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_client_get_class_by_signature_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaJDWPClassInfo;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_classes_by_signature(
        self_: *mut FridaJDWPClient,
        signature: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_classes_by_signature_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_dup(
        self_: *const FridaJDWPReferenceTypeID,
    ) -> *mut FridaJDWPReferenceTypeID;
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_free(self_: *mut FridaJDWPReferenceTypeID);
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_methods(
        self_: *mut FridaJDWPClient,
        type_: *mut FridaJDWPReferenceTypeID,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_get_type() -> GType;
}
pub type FridaJDWPMethodInfo_autoptr = *mut FridaJDWPMethodInfo;
pub type FridaJDWPMethodInfo_listautoptr = *mut GList;
pub type FridaJDWPMethodInfo_slistautoptr = *mut GSList;
pub type FridaJDWPMethodInfo_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_client_get_methods_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_type_tag_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_dup(
        self_: *const FridaJDWPTaggedReferenceTypeID,
    ) -> *mut FridaJDWPTaggedReferenceTypeID;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_free(self_: *mut FridaJDWPTaggedReferenceTypeID);
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_dup(self_: *const FridaJDWPThreadID) -> *mut FridaJDWPThreadID;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_free(self_: *mut FridaJDWPThreadID);
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_dup(self_: *const FridaJDWPMethodID) -> *mut FridaJDWPMethodID;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_free(self_: *mut FridaJDWPMethodID);
}
unsafe extern "C" {
    pub fn frida_jdwp_invoke_options_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_invoke_static_method(
        self_: *mut FridaJDWPClient,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        thread: *mut FridaJDWPThreadID,
        method: *mut FridaJDWPMethodID,
        arguments: *mut *mut FridaJDWPValue,
        arguments_length1: gint,
        options: FridaJDWPInvokeOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_invoke_static_method_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaJDWPValue;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_invoke_instance_method(
        self_: *mut FridaJDWPClient,
        object: *mut FridaJDWPObjectID,
        thread: *mut FridaJDWPThreadID,
        clazz: *mut FridaJDWPReferenceTypeID,
        method: *mut FridaJDWPMethodID,
        arguments: *mut *mut FridaJDWPValue,
        arguments_length1: gint,
        options: FridaJDWPInvokeOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_invoke_instance_method_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaJDWPValue;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_suspend_policy_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_modifier_get_type() -> GType;
}
pub type FridaJDWPEventModifier_autoptr = *mut FridaJDWPEventModifier;
pub type FridaJDWPEventModifier_listautoptr = *mut GList;
pub type FridaJDWPEventModifier_slistautoptr = *mut GSList;
pub type FridaJDWPEventModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_client_set_event_request(
        self_: *mut FridaJDWPClient,
        kind: FridaJDWPEventKind,
        suspend_policy: FridaJDWPSuspendPolicy,
        modifiers: *mut *mut FridaJDWPEventModifier,
        modifiers_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_dup(
        self_: *const FridaJDWPEventRequestID,
    ) -> *mut FridaJDWPEventRequestID;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_free(self_: *mut FridaJDWPEventRequestID);
}
unsafe extern "C" {
    pub fn frida_jdwp_client_set_event_request_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        result: *mut FridaJDWPEventRequestID,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_clear_event_request(
        self_: *mut FridaJDWPClient,
        kind: FridaJDWPEventKind,
        request_id: *mut FridaJDWPEventRequestID,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_clear_event_request_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_clear_all_breakpoints(
        self_: *mut FridaJDWPClient,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_clear_all_breakpoints_finish(
        self_: *mut FridaJDWPClient,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_stream(self_: *mut FridaJDWPClient) -> *mut GIOStream;
}
unsafe extern "C" {
    pub fn frida_jdwp_client_get_state(self_: *mut FridaJDWPClient) -> FridaJDWPClientState;
}
unsafe extern "C" {
    pub fn frida_jdwp_type_tag_to_short_string(self_: FridaJDWPTypeTag) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_tag_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_to_string(self_: *mut FridaJDWPValue) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_construct(object_type: GType) -> *mut FridaJDWPValue;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_get_tag(self_: *mut FridaJDWPValue) -> FridaJDWPValueTag;
}
unsafe extern "C" {
    pub fn frida_jdwp_byte_get_type() -> GType;
}
pub type FridaJDWPByte_autoptr = *mut FridaJDWPByte;
pub type FridaJDWPByte_listautoptr = *mut GList;
pub type FridaJDWPByte_slistautoptr = *mut GSList;
pub type FridaJDWPByte_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_byte_new(val: guint8) -> *mut FridaJDWPByte;
}
unsafe extern "C" {
    pub fn frida_jdwp_byte_construct(object_type: GType, val: guint8) -> *mut FridaJDWPByte;
}
unsafe extern "C" {
    pub fn frida_jdwp_byte_get_val(self_: *mut FridaJDWPByte) -> guint8;
}
unsafe extern "C" {
    pub fn frida_jdwp_char_get_type() -> GType;
}
pub type FridaJDWPChar_autoptr = *mut FridaJDWPChar;
pub type FridaJDWPChar_listautoptr = *mut GList;
pub type FridaJDWPChar_slistautoptr = *mut GSList;
pub type FridaJDWPChar_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_char_new(val: *const gchar) -> *mut FridaJDWPChar;
}
unsafe extern "C" {
    pub fn frida_jdwp_char_construct(object_type: GType, val: *const gchar) -> *mut FridaJDWPChar;
}
unsafe extern "C" {
    pub fn frida_jdwp_char_get_val(self_: *mut FridaJDWPChar) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_double_get_type() -> GType;
}
pub type FridaJDWPDouble_autoptr = *mut FridaJDWPDouble;
pub type FridaJDWPDouble_listautoptr = *mut GList;
pub type FridaJDWPDouble_slistautoptr = *mut GSList;
pub type FridaJDWPDouble_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_double_new(val: gdouble) -> *mut FridaJDWPDouble;
}
unsafe extern "C" {
    pub fn frida_jdwp_double_construct(object_type: GType, val: gdouble) -> *mut FridaJDWPDouble;
}
unsafe extern "C" {
    pub fn frida_jdwp_double_get_val(self_: *mut FridaJDWPDouble) -> gdouble;
}
unsafe extern "C" {
    pub fn frida_jdwp_float_get_type() -> GType;
}
pub type FridaJDWPFloat_autoptr = *mut FridaJDWPFloat;
pub type FridaJDWPFloat_listautoptr = *mut GList;
pub type FridaJDWPFloat_slistautoptr = *mut GSList;
pub type FridaJDWPFloat_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_float_new(val: gfloat) -> *mut FridaJDWPFloat;
}
unsafe extern "C" {
    pub fn frida_jdwp_float_construct(object_type: GType, val: gfloat) -> *mut FridaJDWPFloat;
}
unsafe extern "C" {
    pub fn frida_jdwp_float_get_val(self_: *mut FridaJDWPFloat) -> gfloat;
}
unsafe extern "C" {
    pub fn frida_jdwp_int_get_type() -> GType;
}
pub type FridaJDWPInt_autoptr = *mut FridaJDWPInt;
pub type FridaJDWPInt_listautoptr = *mut GList;
pub type FridaJDWPInt_slistautoptr = *mut GSList;
pub type FridaJDWPInt_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_int_new(val: gint32) -> *mut FridaJDWPInt;
}
unsafe extern "C" {
    pub fn frida_jdwp_int_construct(object_type: GType, val: gint32) -> *mut FridaJDWPInt;
}
unsafe extern "C" {
    pub fn frida_jdwp_int_get_val(self_: *mut FridaJDWPInt) -> gint32;
}
unsafe extern "C" {
    pub fn frida_jdwp_long_get_type() -> GType;
}
pub type FridaJDWPLong_autoptr = *mut FridaJDWPLong;
pub type FridaJDWPLong_listautoptr = *mut GList;
pub type FridaJDWPLong_slistautoptr = *mut GSList;
pub type FridaJDWPLong_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_long_new(val: gint64) -> *mut FridaJDWPLong;
}
unsafe extern "C" {
    pub fn frida_jdwp_long_construct(object_type: GType, val: gint64) -> *mut FridaJDWPLong;
}
unsafe extern "C" {
    pub fn frida_jdwp_long_get_val(self_: *mut FridaJDWPLong) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPObject;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPObject;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_get_val(self_: *mut FridaJDWPObject, result: *mut FridaJDWPObjectID);
}
unsafe extern "C" {
    pub fn frida_jdwp_short_get_type() -> GType;
}
pub type FridaJDWPShort_autoptr = *mut FridaJDWPShort;
pub type FridaJDWPShort_listautoptr = *mut GList;
pub type FridaJDWPShort_slistautoptr = *mut GSList;
pub type FridaJDWPShort_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_short_new(val: gint16) -> *mut FridaJDWPShort;
}
unsafe extern "C" {
    pub fn frida_jdwp_short_construct(object_type: GType, val: gint16) -> *mut FridaJDWPShort;
}
unsafe extern "C" {
    pub fn frida_jdwp_short_get_val(self_: *mut FridaJDWPShort) -> gint16;
}
unsafe extern "C" {
    pub fn frida_jdwp_void_get_type() -> GType;
}
pub type FridaJDWPVoid_autoptr = *mut FridaJDWPVoid;
pub type FridaJDWPVoid_listautoptr = *mut GList;
pub type FridaJDWPVoid_slistautoptr = *mut GSList;
pub type FridaJDWPVoid_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_void_new() -> *mut FridaJDWPVoid;
}
unsafe extern "C" {
    pub fn frida_jdwp_void_construct(object_type: GType) -> *mut FridaJDWPVoid;
}
unsafe extern "C" {
    pub fn frida_jdwp_boolean_get_type() -> GType;
}
pub type FridaJDWPBoolean_autoptr = *mut FridaJDWPBoolean;
pub type FridaJDWPBoolean_listautoptr = *mut GList;
pub type FridaJDWPBoolean_slistautoptr = *mut GSList;
pub type FridaJDWPBoolean_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_boolean_new(val: gboolean) -> *mut FridaJDWPBoolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_boolean_construct(object_type: GType, val: gboolean)
    -> *mut FridaJDWPBoolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_boolean_get_val(self_: *mut FridaJDWPBoolean) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_array_get_type() -> GType;
}
pub type FridaJDWPArray_autoptr = *mut FridaJDWPArray;
pub type FridaJDWPArray_listautoptr = *mut GList;
pub type FridaJDWPArray_slistautoptr = *mut GSList;
pub type FridaJDWPArray_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_array_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPArray;
}
unsafe extern "C" {
    pub fn frida_jdwp_array_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPArray;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_object_get_type() -> GType;
}
pub type FridaJDWPClassObject_autoptr = *mut FridaJDWPClassObject;
pub type FridaJDWPClassObject_listautoptr = *mut GList;
pub type FridaJDWPClassObject_slistautoptr = *mut GSList;
pub type FridaJDWPClassObject_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_object_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPClassObject;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_object_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPClassObject;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_group_get_type() -> GType;
}
pub type FridaJDWPThreadGroup_autoptr = *mut FridaJDWPThreadGroup;
pub type FridaJDWPThreadGroup_listautoptr = *mut GList;
pub type FridaJDWPThreadGroup_slistautoptr = *mut GSList;
pub type FridaJDWPThreadGroup_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_thread_group_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPThreadGroup;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_group_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPThreadGroup;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_loader_get_type() -> GType;
}
pub type FridaJDWPClassLoader_autoptr = *mut FridaJDWPClassLoader;
pub type FridaJDWPClassLoader_listautoptr = *mut GList;
pub type FridaJDWPClassLoader_slistautoptr = *mut GSList;
pub type FridaJDWPClassLoader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_loader_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPClassLoader;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_loader_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPClassLoader;
}
unsafe extern "C" {
    pub fn frida_jdwp_string_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPString;
}
unsafe extern "C" {
    pub fn frida_jdwp_string_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPString;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_get_type() -> GType;
}
pub type FridaJDWPThread_autoptr = *mut FridaJDWPThread;
pub type FridaJDWPThread_listautoptr = *mut GList;
pub type FridaJDWPThread_slistautoptr = *mut GSList;
pub type FridaJDWPThread_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_thread_new(val: *mut FridaJDWPObjectID) -> *mut FridaJDWPThread;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_construct(
        object_type: GType,
        val: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPThread;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_status_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_new(
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        status: FridaJDWPClassStatus,
    ) -> *mut FridaJDWPClassInfo;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_construct(
        object_type: GType,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        status: FridaJDWPClassStatus,
    ) -> *mut FridaJDWPClassInfo;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_to_string(self_: *mut FridaJDWPClassInfo) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_get_ref_type(
        self_: *mut FridaJDWPClassInfo,
        result: *mut FridaJDWPTaggedReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_info_get_status(self_: *mut FridaJDWPClassInfo)
    -> FridaJDWPClassStatus;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_status_to_short_string(self_: FridaJDWPClassStatus) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_new(
        id: *mut FridaJDWPMethodID,
        name: *const gchar,
        signature: *const gchar,
        mod_bits: gint32,
    ) -> *mut FridaJDWPMethodInfo;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_construct(
        object_type: GType,
        id: *mut FridaJDWPMethodID,
        name: *const gchar,
        signature: *const gchar,
        mod_bits: gint32,
    ) -> *mut FridaJDWPMethodInfo;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_to_string(self_: *mut FridaJDWPMethodInfo) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_get_id(
        self_: *mut FridaJDWPMethodInfo,
        result: *mut FridaJDWPMethodID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_get_name(self_: *mut FridaJDWPMethodInfo) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_get_signature(self_: *mut FridaJDWPMethodInfo) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_info_get_mod_bits(self_: *mut FridaJDWPMethodInfo) -> gint32;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_init(self_: *mut FridaJDWPObjectID, handle: gint64);
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_to_string(self_: *mut FridaJDWPObjectID) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_get_handle(self_: *mut FridaJDWPObjectID) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_object_id_get_is_null(self_: *mut FridaJDWPObjectID) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_dup(
        self_: *const FridaJDWPTaggedObjectID,
    ) -> *mut FridaJDWPTaggedObjectID;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_free(self_: *mut FridaJDWPTaggedObjectID);
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_init(
        self_: *mut FridaJDWPTaggedObjectID,
        tag: FridaJDWPTypeTag,
        id: *mut FridaJDWPObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_to_string(self_: *mut FridaJDWPTaggedObjectID)
    -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_get_tag(
        self_: *mut FridaJDWPTaggedObjectID,
    ) -> FridaJDWPTypeTag;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_object_id_get_id(
        self_: *mut FridaJDWPTaggedObjectID,
        result: *mut FridaJDWPObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_init(self_: *mut FridaJDWPThreadID, handle: gint64);
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_to_string(self_: *mut FridaJDWPThreadID) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_id_get_handle(self_: *mut FridaJDWPThreadID) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_init(self_: *mut FridaJDWPReferenceTypeID, handle: gint64);
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_to_string(
        self_: *mut FridaJDWPReferenceTypeID,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_reference_type_id_get_handle(self_: *mut FridaJDWPReferenceTypeID) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_init(
        self_: *mut FridaJDWPTaggedReferenceTypeID,
        tag: FridaJDWPTypeTag,
        id: *mut FridaJDWPReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_to_string(
        self_: *mut FridaJDWPTaggedReferenceTypeID,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_get_tag(
        self_: *mut FridaJDWPTaggedReferenceTypeID,
    ) -> FridaJDWPTypeTag;
}
unsafe extern "C" {
    pub fn frida_jdwp_tagged_reference_type_id_get_id(
        self_: *mut FridaJDWPTaggedReferenceTypeID,
        result: *mut FridaJDWPReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_init(self_: *mut FridaJDWPMethodID, handle: gint64);
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_to_string(self_: *mut FridaJDWPMethodID) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_id_get_handle(self_: *mut FridaJDWPMethodID) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_dup(self_: *const FridaJDWPFieldID) -> *mut FridaJDWPFieldID;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_free(self_: *mut FridaJDWPFieldID);
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_init(self_: *mut FridaJDWPFieldID, handle: gint64);
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_to_string(self_: *mut FridaJDWPFieldID) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_id_get_handle(self_: *mut FridaJDWPFieldID) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_get_type() -> GType;
}
pub type FridaJDWPLocation_autoptr = *mut FridaJDWPLocation;
pub type FridaJDWPLocation_listautoptr = *mut GList;
pub type FridaJDWPLocation_slistautoptr = *mut GSList;
pub type FridaJDWPLocation_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_location_new(
        declaring: *mut FridaJDWPTaggedReferenceTypeID,
        method: *mut FridaJDWPMethodID,
        index: guint64,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_construct(
        object_type: GType,
        declaring: *mut FridaJDWPTaggedReferenceTypeID,
        method: *mut FridaJDWPMethodID,
        index: guint64,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_to_string(self_: *mut FridaJDWPLocation) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_get_declaring(
        self_: *mut FridaJDWPLocation,
        result: *mut FridaJDWPTaggedReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_location_get_method(
        self_: *mut FridaJDWPLocation,
        result: *mut FridaJDWPMethodID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_location_get_index(self_: *mut FridaJDWPLocation) -> guint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_events_get_type() -> GType;
}
pub type FridaJDWPEvents_autoptr = *mut FridaJDWPEvents;
pub type FridaJDWPEvents_listautoptr = *mut GList;
pub type FridaJDWPEvents_slistautoptr = *mut GSList;
pub type FridaJDWPEvents_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_event_get_type() -> GType;
}
pub type FridaJDWPEvent_autoptr = *mut FridaJDWPEvent;
pub type FridaJDWPEvent_listautoptr = *mut GList;
pub type FridaJDWPEvent_slistautoptr = *mut GSList;
pub type FridaJDWPEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_events_new(
        suspend_policy: FridaJDWPSuspendPolicy,
        items: *mut GeeList,
    ) -> *mut FridaJDWPEvents;
}
unsafe extern "C" {
    pub fn frida_jdwp_events_construct(
        object_type: GType,
        suspend_policy: FridaJDWPSuspendPolicy,
        items: *mut GeeList,
    ) -> *mut FridaJDWPEvents;
}
unsafe extern "C" {
    pub fn frida_jdwp_events_to_string(self_: *mut FridaJDWPEvents) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_events_get_suspend_policy(
        self_: *mut FridaJDWPEvents,
    ) -> FridaJDWPSuspendPolicy;
}
unsafe extern "C" {
    pub fn frida_jdwp_events_get_items(self_: *mut FridaJDWPEvents) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_to_string(self_: *mut FridaJDWPEvent) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_construct(object_type: GType) -> *mut FridaJDWPEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_get_kind(self_: *mut FridaJDWPEvent) -> FridaJDWPEventKind;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_get_request(
        self_: *mut FridaJDWPEvent,
        result: *mut FridaJDWPEventRequestID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_single_step_event_get_type() -> GType;
}
pub type FridaJDWPSingleStepEvent_autoptr = *mut FridaJDWPSingleStepEvent;
pub type FridaJDWPSingleStepEvent_listautoptr = *mut GList;
pub type FridaJDWPSingleStepEvent_slistautoptr = *mut GSList;
pub type FridaJDWPSingleStepEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_single_step_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPSingleStepEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_single_step_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPSingleStepEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_single_step_event_get_thread(
        self_: *mut FridaJDWPSingleStepEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_single_step_event_get_location(
        self_: *mut FridaJDWPSingleStepEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_breakpoint_event_get_type() -> GType;
}
pub type FridaJDWPBreakpointEvent_autoptr = *mut FridaJDWPBreakpointEvent;
pub type FridaJDWPBreakpointEvent_listautoptr = *mut GList;
pub type FridaJDWPBreakpointEvent_slistautoptr = *mut GSList;
pub type FridaJDWPBreakpointEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_breakpoint_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPBreakpointEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_breakpoint_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPBreakpointEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_breakpoint_event_get_thread(
        self_: *mut FridaJDWPBreakpointEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_breakpoint_event_get_location(
        self_: *mut FridaJDWPBreakpointEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_frame_pop_event_get_type() -> GType;
}
pub type FridaJDWPFramePopEvent_autoptr = *mut FridaJDWPFramePopEvent;
pub type FridaJDWPFramePopEvent_listautoptr = *mut GList;
pub type FridaJDWPFramePopEvent_slistautoptr = *mut GSList;
pub type FridaJDWPFramePopEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_frame_pop_event_new() -> *mut FridaJDWPFramePopEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_frame_pop_event_construct(object_type: GType) -> *mut FridaJDWPFramePopEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_get_type() -> GType;
}
pub type FridaJDWPExceptionEvent_autoptr = *mut FridaJDWPExceptionEvent;
pub type FridaJDWPExceptionEvent_listautoptr = *mut GList;
pub type FridaJDWPExceptionEvent_slistautoptr = *mut GSList;
pub type FridaJDWPExceptionEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        exception: *mut FridaJDWPTaggedObjectID,
        catch_location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPExceptionEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        exception: *mut FridaJDWPTaggedObjectID,
        catch_location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPExceptionEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_get_thread(
        self_: *mut FridaJDWPExceptionEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_get_location(
        self_: *mut FridaJDWPExceptionEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_get_exception(
        self_: *mut FridaJDWPExceptionEvent,
        result: *mut FridaJDWPTaggedObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_event_get_catch_location(
        self_: *mut FridaJDWPExceptionEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_user_defined_event_get_type() -> GType;
}
pub type FridaJDWPUserDefinedEvent_autoptr = *mut FridaJDWPUserDefinedEvent;
pub type FridaJDWPUserDefinedEvent_listautoptr = *mut GList;
pub type FridaJDWPUserDefinedEvent_slistautoptr = *mut GSList;
pub type FridaJDWPUserDefinedEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_user_defined_event_new() -> *mut FridaJDWPUserDefinedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_user_defined_event_construct(
        object_type: GType,
    ) -> *mut FridaJDWPUserDefinedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_start_event_get_type() -> GType;
}
pub type FridaJDWPThreadStartEvent_autoptr = *mut FridaJDWPThreadStartEvent;
pub type FridaJDWPThreadStartEvent_listautoptr = *mut GList;
pub type FridaJDWPThreadStartEvent_slistautoptr = *mut GSList;
pub type FridaJDWPThreadStartEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_thread_start_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadStartEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_start_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadStartEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_start_event_get_thread(
        self_: *mut FridaJDWPThreadStartEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_death_event_get_type() -> GType;
}
pub type FridaJDWPThreadDeathEvent_autoptr = *mut FridaJDWPThreadDeathEvent;
pub type FridaJDWPThreadDeathEvent_listautoptr = *mut GList;
pub type FridaJDWPThreadDeathEvent_slistautoptr = *mut GSList;
pub type FridaJDWPThreadDeathEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_thread_death_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadDeathEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_death_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadDeathEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_death_event_get_thread(
        self_: *mut FridaJDWPThreadDeathEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_get_type() -> GType;
}
pub type FridaJDWPClassPrepareEvent_autoptr = *mut FridaJDWPClassPrepareEvent;
pub type FridaJDWPClassPrepareEvent_listautoptr = *mut GList;
pub type FridaJDWPClassPrepareEvent_slistautoptr = *mut GSList;
pub type FridaJDWPClassPrepareEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        signature: *const gchar,
        status: FridaJDWPClassStatus,
    ) -> *mut FridaJDWPClassPrepareEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        signature: *const gchar,
        status: FridaJDWPClassStatus,
    ) -> *mut FridaJDWPClassPrepareEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_get_thread(
        self_: *mut FridaJDWPClassPrepareEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_get_ref_type(
        self_: *mut FridaJDWPClassPrepareEvent,
        result: *mut FridaJDWPTaggedReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_get_signature(
        self_: *mut FridaJDWPClassPrepareEvent,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_prepare_event_get_status(
        self_: *mut FridaJDWPClassPrepareEvent,
    ) -> FridaJDWPClassStatus;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_unload_event_get_type() -> GType;
}
pub type FridaJDWPClassUnloadEvent_autoptr = *mut FridaJDWPClassUnloadEvent;
pub type FridaJDWPClassUnloadEvent_listautoptr = *mut GList;
pub type FridaJDWPClassUnloadEvent_slistautoptr = *mut GSList;
pub type FridaJDWPClassUnloadEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_unload_event_new(
        request: *mut FridaJDWPEventRequestID,
        signature: *const gchar,
    ) -> *mut FridaJDWPClassUnloadEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_unload_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        signature: *const gchar,
    ) -> *mut FridaJDWPClassUnloadEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_unload_event_get_signature(
        self_: *mut FridaJDWPClassUnloadEvent,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_load_event_get_type() -> GType;
}
pub type FridaJDWPClassLoadEvent_autoptr = *mut FridaJDWPClassLoadEvent;
pub type FridaJDWPClassLoadEvent_listautoptr = *mut GList;
pub type FridaJDWPClassLoadEvent_slistautoptr = *mut GSList;
pub type FridaJDWPClassLoadEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_load_event_new() -> *mut FridaJDWPClassLoadEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_load_event_construct(
        object_type: GType,
    ) -> *mut FridaJDWPClassLoadEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_type() -> GType;
}
pub type FridaJDWPFieldEvent_autoptr = *mut FridaJDWPFieldEvent;
pub type FridaJDWPFieldEvent_listautoptr = *mut GList;
pub type FridaJDWPFieldEvent_slistautoptr = *mut GSList;
pub type FridaJDWPFieldEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_field_event_construct(object_type: GType) -> *mut FridaJDWPFieldEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_thread(
        self_: *mut FridaJDWPFieldEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_location(
        self_: *mut FridaJDWPFieldEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_ref_type(
        self_: *mut FridaJDWPFieldEvent,
        result: *mut FridaJDWPTaggedReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_field(
        self_: *mut FridaJDWPFieldEvent,
        result: *mut FridaJDWPFieldID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_field_event_get_object(
        self_: *mut FridaJDWPFieldEvent,
        result: *mut FridaJDWPTaggedObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_field_access_event_get_type() -> GType;
}
pub type FridaJDWPFieldAccessEvent_autoptr = *mut FridaJDWPFieldAccessEvent;
pub type FridaJDWPFieldAccessEvent_listautoptr = *mut GList;
pub type FridaJDWPFieldAccessEvent_slistautoptr = *mut GSList;
pub type FridaJDWPFieldAccessEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_field_access_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        field: *mut FridaJDWPFieldID,
        object: *mut FridaJDWPTaggedObjectID,
    ) -> *mut FridaJDWPFieldAccessEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_access_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        field: *mut FridaJDWPFieldID,
        object: *mut FridaJDWPTaggedObjectID,
    ) -> *mut FridaJDWPFieldAccessEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_modification_event_get_type() -> GType;
}
pub type FridaJDWPFieldModificationEvent_autoptr = *mut FridaJDWPFieldModificationEvent;
pub type FridaJDWPFieldModificationEvent_listautoptr = *mut GList;
pub type FridaJDWPFieldModificationEvent_slistautoptr = *mut GSList;
pub type FridaJDWPFieldModificationEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_field_modification_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        field: *mut FridaJDWPFieldID,
        object: *mut FridaJDWPTaggedObjectID,
        value_to_be: *mut FridaJDWPValue,
    ) -> *mut FridaJDWPFieldModificationEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_modification_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        ref_type: *mut FridaJDWPTaggedReferenceTypeID,
        field: *mut FridaJDWPFieldID,
        object: *mut FridaJDWPTaggedObjectID,
        value_to_be: *mut FridaJDWPValue,
    ) -> *mut FridaJDWPFieldModificationEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_modification_event_get_value_to_be(
        self_: *mut FridaJDWPFieldModificationEvent,
    ) -> *mut FridaJDWPValue;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_catch_event_get_type() -> GType;
}
pub type FridaJDWPExceptionCatchEvent_autoptr = *mut FridaJDWPExceptionCatchEvent;
pub type FridaJDWPExceptionCatchEvent_listautoptr = *mut GList;
pub type FridaJDWPExceptionCatchEvent_slistautoptr = *mut GSList;
pub type FridaJDWPExceptionCatchEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_exception_catch_event_new() -> *mut FridaJDWPExceptionCatchEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_catch_event_construct(
        object_type: GType,
    ) -> *mut FridaJDWPExceptionCatchEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_event_get_type() -> GType;
}
pub type FridaJDWPMethodEvent_autoptr = *mut FridaJDWPMethodEvent;
pub type FridaJDWPMethodEvent_listautoptr = *mut GList;
pub type FridaJDWPMethodEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMethodEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_method_event_construct(object_type: GType) -> *mut FridaJDWPMethodEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_event_get_thread(
        self_: *mut FridaJDWPMethodEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_method_event_get_location(
        self_: *mut FridaJDWPMethodEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_entry_event_get_type() -> GType;
}
pub type FridaJDWPMethodEntryEvent_autoptr = *mut FridaJDWPMethodEntryEvent;
pub type FridaJDWPMethodEntryEvent_listautoptr = *mut GList;
pub type FridaJDWPMethodEntryEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMethodEntryEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_method_entry_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMethodEntryEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_entry_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMethodEntryEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_event_get_type() -> GType;
}
pub type FridaJDWPMethodExitEvent_autoptr = *mut FridaJDWPMethodExitEvent;
pub type FridaJDWPMethodExitEvent_listautoptr = *mut GList;
pub type FridaJDWPMethodExitEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMethodExitEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMethodExitEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMethodExitEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_with_return_value_event_get_type() -> GType;
}
pub type FridaJDWPMethodExitWithReturnValueEvent_autoptr =
    *mut FridaJDWPMethodExitWithReturnValueEvent;
pub type FridaJDWPMethodExitWithReturnValueEvent_listautoptr = *mut GList;
pub type FridaJDWPMethodExitWithReturnValueEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMethodExitWithReturnValueEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_with_return_value_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        retval: *mut FridaJDWPValue,
    ) -> *mut FridaJDWPMethodExitWithReturnValueEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_with_return_value_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        location: *mut FridaJDWPLocation,
        retval: *mut FridaJDWPValue,
    ) -> *mut FridaJDWPMethodExitWithReturnValueEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_method_exit_with_return_value_event_get_retval(
        self_: *mut FridaJDWPMethodExitWithReturnValueEvent,
    ) -> *mut FridaJDWPValue;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_event_get_type() -> GType;
}
pub type FridaJDWPMonitorEvent_autoptr = *mut FridaJDWPMonitorEvent;
pub type FridaJDWPMonitorEvent_listautoptr = *mut GList;
pub type FridaJDWPMonitorEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMonitorEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_monitor_event_construct(object_type: GType) -> *mut FridaJDWPMonitorEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_event_get_thread(
        self_: *mut FridaJDWPMonitorEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_event_get_object(
        self_: *mut FridaJDWPMonitorEvent,
        result: *mut FridaJDWPTaggedObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_event_get_location(
        self_: *mut FridaJDWPMonitorEvent,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_enter_event_get_type() -> GType;
}
pub type FridaJDWPMonitorContendedEnterEvent_autoptr = *mut FridaJDWPMonitorContendedEnterEvent;
pub type FridaJDWPMonitorContendedEnterEvent_listautoptr = *mut GList;
pub type FridaJDWPMonitorContendedEnterEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMonitorContendedEnterEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_enter_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMonitorContendedEnterEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_enter_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMonitorContendedEnterEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_entered_event_get_type() -> GType;
}
pub type FridaJDWPMonitorContendedEnteredEvent_autoptr = *mut FridaJDWPMonitorContendedEnteredEvent;
pub type FridaJDWPMonitorContendedEnteredEvent_listautoptr = *mut GList;
pub type FridaJDWPMonitorContendedEnteredEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMonitorContendedEnteredEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_entered_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMonitorContendedEnteredEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_contended_entered_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
    ) -> *mut FridaJDWPMonitorContendedEnteredEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_wait_event_get_type() -> GType;
}
pub type FridaJDWPMonitorWaitEvent_autoptr = *mut FridaJDWPMonitorWaitEvent;
pub type FridaJDWPMonitorWaitEvent_listautoptr = *mut GList;
pub type FridaJDWPMonitorWaitEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMonitorWaitEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_monitor_wait_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
        timeout: gint64,
    ) -> *mut FridaJDWPMonitorWaitEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_wait_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
        timeout: gint64,
    ) -> *mut FridaJDWPMonitorWaitEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_wait_event_get_timeout(
        self_: *mut FridaJDWPMonitorWaitEvent,
    ) -> gint64;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_waited_event_get_type() -> GType;
}
pub type FridaJDWPMonitorWaitedEvent_autoptr = *mut FridaJDWPMonitorWaitedEvent;
pub type FridaJDWPMonitorWaitedEvent_listautoptr = *mut GList;
pub type FridaJDWPMonitorWaitedEvent_slistautoptr = *mut GSList;
pub type FridaJDWPMonitorWaitedEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_monitor_waited_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
        timed_out: gboolean,
    ) -> *mut FridaJDWPMonitorWaitedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_waited_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
        object: *mut FridaJDWPTaggedObjectID,
        location: *mut FridaJDWPLocation,
        timed_out: gboolean,
    ) -> *mut FridaJDWPMonitorWaitedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_monitor_waited_event_get_timed_out(
        self_: *mut FridaJDWPMonitorWaitedEvent,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_start_event_get_type() -> GType;
}
pub type FridaJDWPVMStartEvent_autoptr = *mut FridaJDWPVMStartEvent;
pub type FridaJDWPVMStartEvent_listautoptr = *mut GList;
pub type FridaJDWPVMStartEvent_slistautoptr = *mut GSList;
pub type FridaJDWPVMStartEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_vm_start_event_new(
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPVMStartEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_start_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPVMStartEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_start_event_get_thread(
        self_: *mut FridaJDWPVMStartEvent,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_death_event_get_type() -> GType;
}
pub type FridaJDWPVMDeathEvent_autoptr = *mut FridaJDWPVMDeathEvent;
pub type FridaJDWPVMDeathEvent_listautoptr = *mut GList;
pub type FridaJDWPVMDeathEvent_slistautoptr = *mut GSList;
pub type FridaJDWPVMDeathEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_vm_death_event_new(
        request: *mut FridaJDWPEventRequestID,
    ) -> *mut FridaJDWPVMDeathEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_death_event_construct(
        object_type: GType,
        request: *mut FridaJDWPEventRequestID,
    ) -> *mut FridaJDWPVMDeathEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_disconnected_event_get_type() -> GType;
}
pub type FridaJDWPVMDisconnectedEvent_autoptr = *mut FridaJDWPVMDisconnectedEvent;
pub type FridaJDWPVMDisconnectedEvent_listautoptr = *mut GList;
pub type FridaJDWPVMDisconnectedEvent_slistautoptr = *mut GSList;
pub type FridaJDWPVMDisconnectedEvent_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_vm_disconnected_event_new() -> *mut FridaJDWPVMDisconnectedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_vm_disconnected_event_construct(
        object_type: GType,
    ) -> *mut FridaJDWPVMDisconnectedEvent;
}
unsafe extern "C" {
    pub fn frida_jdwp_packet_builder_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_packet_builder_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_param_spec_packet_builder(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_set_packet_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_take_packet_builder(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_get_packet_builder(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_packet_builder_get_type() -> GType;
}
pub type FridaJDWPPacketBuilder_autoptr = *mut FridaJDWPPacketBuilder;
pub type FridaJDWPPacketBuilder_listautoptr = *mut GList;
pub type FridaJDWPPacketBuilder_slistautoptr = *mut GSList;
pub type FridaJDWPPacketBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_event_modifier_construct(object_type: GType) -> *mut FridaJDWPEventModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_count_modifier_get_type() -> GType;
}
pub type FridaJDWPCountModifier_autoptr = *mut FridaJDWPCountModifier;
pub type FridaJDWPCountModifier_listautoptr = *mut GList;
pub type FridaJDWPCountModifier_slistautoptr = *mut GSList;
pub type FridaJDWPCountModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_count_modifier_new(count: gint32) -> *mut FridaJDWPCountModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_count_modifier_construct(
        object_type: GType,
        count: gint32,
    ) -> *mut FridaJDWPCountModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_count_modifier_get_count(self_: *mut FridaJDWPCountModifier) -> gint32;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_only_modifier_get_type() -> GType;
}
pub type FridaJDWPThreadOnlyModifier_autoptr = *mut FridaJDWPThreadOnlyModifier;
pub type FridaJDWPThreadOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPThreadOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPThreadOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_thread_only_modifier_new(
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_only_modifier_construct(
        object_type: GType,
        thread: *mut FridaJDWPThreadID,
    ) -> *mut FridaJDWPThreadOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_thread_only_modifier_get_thread(
        self_: *mut FridaJDWPThreadOnlyModifier,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_only_modifier_get_type() -> GType;
}
pub type FridaJDWPClassOnlyModifier_autoptr = *mut FridaJDWPClassOnlyModifier;
pub type FridaJDWPClassOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPClassOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPClassOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_only_modifier_new(
        clazz: *mut FridaJDWPReferenceTypeID,
    ) -> *mut FridaJDWPClassOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_only_modifier_construct(
        object_type: GType,
        clazz: *mut FridaJDWPReferenceTypeID,
    ) -> *mut FridaJDWPClassOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_only_modifier_get_clazz(
        self_: *mut FridaJDWPClassOnlyModifier,
        result: *mut FridaJDWPReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_class_match_modifier_get_type() -> GType;
}
pub type FridaJDWPClassMatchModifier_autoptr = *mut FridaJDWPClassMatchModifier;
pub type FridaJDWPClassMatchModifier_listautoptr = *mut GList;
pub type FridaJDWPClassMatchModifier_slistautoptr = *mut GSList;
pub type FridaJDWPClassMatchModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_match_modifier_new(
        class_pattern: *const gchar,
    ) -> *mut FridaJDWPClassMatchModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_match_modifier_construct(
        object_type: GType,
        class_pattern: *const gchar,
    ) -> *mut FridaJDWPClassMatchModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_match_modifier_get_class_pattern(
        self_: *mut FridaJDWPClassMatchModifier,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_exclude_modifier_get_type() -> GType;
}
pub type FridaJDWPClassExcludeModifier_autoptr = *mut FridaJDWPClassExcludeModifier;
pub type FridaJDWPClassExcludeModifier_listautoptr = *mut GList;
pub type FridaJDWPClassExcludeModifier_slistautoptr = *mut GSList;
pub type FridaJDWPClassExcludeModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_class_exclude_modifier_new(
        class_pattern: *const gchar,
    ) -> *mut FridaJDWPClassExcludeModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_exclude_modifier_construct(
        object_type: GType,
        class_pattern: *const gchar,
    ) -> *mut FridaJDWPClassExcludeModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_class_exclude_modifier_get_class_pattern(
        self_: *mut FridaJDWPClassExcludeModifier,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_only_modifier_get_type() -> GType;
}
pub type FridaJDWPLocationOnlyModifier_autoptr = *mut FridaJDWPLocationOnlyModifier;
pub type FridaJDWPLocationOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPLocationOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPLocationOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_location_only_modifier_new(
        declaring: *mut FridaJDWPTaggedReferenceTypeID,
        method: *mut FridaJDWPMethodID,
        index: guint64,
    ) -> *mut FridaJDWPLocationOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_only_modifier_construct(
        object_type: GType,
        declaring: *mut FridaJDWPTaggedReferenceTypeID,
        method: *mut FridaJDWPMethodID,
        index: guint64,
    ) -> *mut FridaJDWPLocationOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_location_only_modifier_get_location(
        self_: *mut FridaJDWPLocationOnlyModifier,
    ) -> *mut FridaJDWPLocation;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_get_type() -> GType;
}
pub type FridaJDWPExceptionOnlyModifier_autoptr = *mut FridaJDWPExceptionOnlyModifier;
pub type FridaJDWPExceptionOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPExceptionOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPExceptionOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_new(
        exception_or_null: *mut FridaJDWPReferenceTypeID,
        caught: gboolean,
        uncaught: gboolean,
    ) -> *mut FridaJDWPExceptionOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_construct(
        object_type: GType,
        exception_or_null: *mut FridaJDWPReferenceTypeID,
        caught: gboolean,
        uncaught: gboolean,
    ) -> *mut FridaJDWPExceptionOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_get_exception_or_null(
        self_: *mut FridaJDWPExceptionOnlyModifier,
        result: *mut FridaJDWPReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_get_caught(
        self_: *mut FridaJDWPExceptionOnlyModifier,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_exception_only_modifier_get_uncaught(
        self_: *mut FridaJDWPExceptionOnlyModifier,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_only_modifier_get_type() -> GType;
}
pub type FridaJDWPFieldOnlyModifier_autoptr = *mut FridaJDWPFieldOnlyModifier;
pub type FridaJDWPFieldOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPFieldOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPFieldOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_field_only_modifier_new(
        declaring: *mut FridaJDWPReferenceTypeID,
        field: *mut FridaJDWPFieldID,
    ) -> *mut FridaJDWPFieldOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_only_modifier_construct(
        object_type: GType,
        declaring: *mut FridaJDWPReferenceTypeID,
        field: *mut FridaJDWPFieldID,
    ) -> *mut FridaJDWPFieldOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_field_only_modifier_get_declaring(
        self_: *mut FridaJDWPFieldOnlyModifier,
        result: *mut FridaJDWPReferenceTypeID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_field_only_modifier_get_field(
        self_: *mut FridaJDWPFieldOnlyModifier,
        result: *mut FridaJDWPFieldID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_get_type() -> GType;
}
pub type FridaJDWPStepModifier_autoptr = *mut FridaJDWPStepModifier;
pub type FridaJDWPStepModifier_listautoptr = *mut GList;
pub type FridaJDWPStepModifier_slistautoptr = *mut GSList;
pub type FridaJDWPStepModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_step_size_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_step_depth_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_new(
        thread: *mut FridaJDWPThreadID,
        step_size: FridaJDWPStepSize,
        step_depth: FridaJDWPStepDepth,
    ) -> *mut FridaJDWPStepModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_construct(
        object_type: GType,
        thread: *mut FridaJDWPThreadID,
        step_size: FridaJDWPStepSize,
        step_depth: FridaJDWPStepDepth,
    ) -> *mut FridaJDWPStepModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_get_thread(
        self_: *mut FridaJDWPStepModifier,
        result: *mut FridaJDWPThreadID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_get_step_size(
        self_: *mut FridaJDWPStepModifier,
    ) -> FridaJDWPStepSize;
}
unsafe extern "C" {
    pub fn frida_jdwp_step_modifier_get_step_depth(
        self_: *mut FridaJDWPStepModifier,
    ) -> FridaJDWPStepDepth;
}
unsafe extern "C" {
    pub fn frida_jdwp_instance_only_modifier_get_type() -> GType;
}
pub type FridaJDWPInstanceOnlyModifier_autoptr = *mut FridaJDWPInstanceOnlyModifier;
pub type FridaJDWPInstanceOnlyModifier_listautoptr = *mut GList;
pub type FridaJDWPInstanceOnlyModifier_slistautoptr = *mut GSList;
pub type FridaJDWPInstanceOnlyModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_instance_only_modifier_new(
        instance: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPInstanceOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_instance_only_modifier_construct(
        object_type: GType,
        instance: *mut FridaJDWPObjectID,
    ) -> *mut FridaJDWPInstanceOnlyModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_instance_only_modifier_get_instance(
        self_: *mut FridaJDWPInstanceOnlyModifier,
        result: *mut FridaJDWPObjectID,
    );
}
unsafe extern "C" {
    pub fn frida_jdwp_source_name_match_modifier_get_type() -> GType;
}
pub type FridaJDWPSourceNameMatchModifier_autoptr = *mut FridaJDWPSourceNameMatchModifier;
pub type FridaJDWPSourceNameMatchModifier_listautoptr = *mut GList;
pub type FridaJDWPSourceNameMatchModifier_slistautoptr = *mut GSList;
pub type FridaJDWPSourceNameMatchModifier_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_source_name_match_modifier_new(
        source_name_pattern: *const gchar,
    ) -> *mut FridaJDWPSourceNameMatchModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_source_name_match_modifier_construct(
        object_type: GType,
        source_name_pattern: *const gchar,
    ) -> *mut FridaJDWPSourceNameMatchModifier;
}
unsafe extern "C" {
    pub fn frida_jdwp_source_name_match_modifier_get_source_name_pattern(
        self_: *mut FridaJDWPSourceNameMatchModifier,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_init(self_: *mut FridaJDWPEventRequestID, handle: gint32);
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_to_string(self_: *mut FridaJDWPEventRequestID)
    -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_jdwp_event_request_id_get_handle(self_: *mut FridaJDWPEventRequestID) -> gint32;
}
unsafe extern "C" {
    pub fn frida_jdwp_command_builder_get_type() -> GType;
}
pub type FridaJDWPCommandBuilder_autoptr = *mut FridaJDWPCommandBuilder;
pub type FridaJDWPCommandBuilder_listautoptr = *mut GList;
pub type FridaJDWPCommandBuilder_slistautoptr = *mut GSList;
pub type FridaJDWPCommandBuilder_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_packet_reader_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_packet_reader_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_param_spec_packet_reader(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_set_packet_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_take_packet_reader(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_get_packet_reader(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_packet_reader_get_type() -> GType;
}
pub type FridaJDWPPacketReader_autoptr = *mut FridaJDWPPacketReader;
pub type FridaJDWPPacketReader_listautoptr = *mut GList;
pub type FridaJDWPPacketReader_slistautoptr = *mut GSList;
pub type FridaJDWPPacketReader_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_jdwp_id_sizes_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_id_sizes_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_param_spec_id_sizes(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_jdwp_value_set_id_sizes(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_take_id_sizes(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_jdwp_value_get_id_sizes(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_jdwp_id_sizes_get_type() -> GType;
}
pub type FridaJDWPIDSizes_autoptr = *mut FridaJDWPIDSizes;
pub type FridaJDWPIDSizes_listautoptr = *mut GList;
pub type FridaJDWPIDSizes_slistautoptr = *mut GSList;
pub type FridaJDWPIDSizes_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_injector_inject(
        gadget: *mut GInputStream,
        package: *const gchar,
        device_serial: *const gchar,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_get_type() -> GType;
}
pub type FridaDroidyInjectorGadgetDetails_autoptr = *mut FridaDroidyInjectorGadgetDetails;
pub type FridaDroidyInjectorGadgetDetails_listautoptr = *mut GList;
pub type FridaDroidyInjectorGadgetDetails_slistautoptr = *mut GSList;
pub type FridaDroidyInjectorGadgetDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_droidy_injector_inject_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaDroidyInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_new(
        pid: guint,
        unix_socket_path: *const gchar,
        jdwp: *mut FridaJDWPClient,
    ) -> *mut FridaDroidyInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_construct(
        object_type: GType,
        pid: guint,
        unix_socket_path: *const gchar,
        jdwp: *mut FridaJDWPClient,
    ) -> *mut FridaDroidyInjectorGadgetDetails;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_get_pid(
        self_: *mut FridaDroidyInjectorGadgetDetails,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_get_unix_socket_path(
        self_: *mut FridaDroidyInjectorGadgetDetails,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_gadget_details_get_jdwp(
        self_: *mut FridaDroidyInjectorGadgetDetails,
    ) -> *mut FridaJDWPClient;
}
unsafe extern "C" {
    pub fn frida_droidy_injector_session_get_type() -> GType;
}
pub type FridaDroidyInjectorSession_autoptr = *mut FridaDroidyInjectorSession;
pub type FridaDroidyInjectorSession_listautoptr = *mut GList;
pub type FridaDroidyInjectorSession_slistautoptr = *mut GSList;
pub type FridaDroidyInjectorSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_axml_element_tree_get_type() -> GType;
}
pub type FridaAXMLElementTree_autoptr = *mut FridaAXMLElementTree;
pub type FridaAXMLElementTree_listautoptr = *mut GList;
pub type FridaAXMLElementTree_slistautoptr = *mut GSList;
pub type FridaAXMLElementTree_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_axml_read(
        stream: *mut GInputStream,
        error: *mut *mut GError,
    ) -> *mut FridaAXMLElementTree;
}
unsafe extern "C" {
    pub fn frida_axml_attribute_get_type() -> GType;
}
pub type FridaAXMLAttribute_autoptr = *mut FridaAXMLAttribute;
pub type FridaAXMLAttribute_listautoptr = *mut GList;
pub type FridaAXMLAttribute_slistautoptr = *mut GSList;
pub type FridaAXMLAttribute_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_axml_element_tree_get_attribute(
        self_: *mut FridaAXMLElementTree,
        name: *const gchar,
    ) -> *mut FridaAXMLAttribute;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_set_attribute(
        self_: *mut FridaAXMLElementTree,
        name: *const gchar,
        value: *mut FridaAXMLAttribute,
    );
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_add_child(
        self_: *mut FridaAXMLElementTree,
        child: *mut FridaAXMLElementTree,
    );
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_get_child(
        self_: *mut FridaAXMLElementTree,
        i: gint,
    ) -> *mut FridaAXMLElementTree;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_to_string(
        self_: *mut FridaAXMLElementTree,
        depth: gint,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_new() -> *mut FridaAXMLElementTree;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_construct(object_type: GType) -> *mut FridaAXMLElementTree;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_get_name(self_: *mut FridaAXMLElementTree) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_axml_element_tree_set_name(self_: *mut FridaAXMLElementTree, value: *const gchar);
}
unsafe extern "C" {
    pub fn frida_axml_resource_value_get_type() -> GType;
}
pub type FridaAXMLResourceValue_autoptr = *mut FridaAXMLResourceValue;
pub type FridaAXMLResourceValue_listautoptr = *mut GList;
pub type FridaAXMLResourceValue_slistautoptr = *mut GSList;
pub type FridaAXMLResourceValue_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_axml_resource_value_to_string(self_: *mut FridaAXMLResourceValue) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_axml_resource_value_new() -> *mut FridaAXMLResourceValue;
}
unsafe extern "C" {
    pub fn frida_axml_resource_value_construct(object_type: GType) -> *mut FridaAXMLResourceValue;
}
unsafe extern "C" {
    pub fn frida_axml_attribute_get_name(self_: *mut FridaAXMLAttribute) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_axml_attribute_get_value(
        self_: *mut FridaAXMLAttribute,
    ) -> *mut FridaAXMLResourceValue;
}
unsafe extern "C" {
    pub fn frida_axml_attribute_new() -> *mut FridaAXMLAttribute;
}
unsafe extern "C" {
    pub fn frida_axml_attribute_construct(object_type: GType) -> *mut FridaAXMLAttribute;
}
unsafe extern "C" {
    pub fn frida_axml_resource_map_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_axml_resource_map_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_param_spec_resource_map(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_axml_value_set_resource_map(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_value_take_resource_map(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_value_get_resource_map(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_axml_resource_map_get_type() -> GType;
}
pub type FridaAXMLResourceMap_autoptr = *mut FridaAXMLResourceMap;
pub type FridaAXMLResourceMap_listautoptr = *mut GList;
pub type FridaAXMLResourceMap_slistautoptr = *mut GSList;
pub type FridaAXMLResourceMap_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_axml_string_pool_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_axml_string_pool_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_param_spec_string_pool(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_axml_value_set_string_pool(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_value_take_string_pool(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_axml_value_get_string_pool(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_axml_string_pool_get_type() -> GType;
}
pub type FridaAXMLStringPool_autoptr = *mut FridaAXMLStringPool;
pub type FridaAXMLStringPool_listautoptr = *mut GList;
pub type FridaAXMLStringPool_slistautoptr = *mut GSList;
pub type FridaAXMLStringPool_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_socket_host_session_backend_get_type() -> GType;
}
pub type FridaSocketHostSessionBackend_autoptr = *mut FridaSocketHostSessionBackend;
pub type FridaSocketHostSessionBackend_listautoptr = *mut GList;
pub type FridaSocketHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaSocketHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_socket_host_session_backend_new() -> *mut FridaSocketHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_socket_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaSocketHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_socket_host_session_provider_get_type() -> GType;
}
pub type FridaSocketHostSessionProvider_autoptr = *mut FridaSocketHostSessionProvider;
pub type FridaSocketHostSessionProvider_listautoptr = *mut GList;
pub type FridaSocketHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaSocketHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_socket_host_session_provider_close(
        self_: *mut FridaSocketHostSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_socket_host_session_provider_close_finish(
        self_: *mut FridaSocketHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_socket_host_session_provider_new() -> *mut FridaSocketHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_socket_host_session_provider_construct(
        object_type: GType,
    ) -> *mut FridaSocketHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_backend_get_type() -> GType;
}
pub type FridaBareboneHostSessionBackend_autoptr = *mut FridaBareboneHostSessionBackend;
pub type FridaBareboneHostSessionBackend_listautoptr = *mut GList;
pub type FridaBareboneHostSessionBackend_slistautoptr = *mut GSList;
pub type FridaBareboneHostSessionBackend_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_host_session_backend_new() -> *mut FridaBareboneHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_backend_construct(
        object_type: GType,
    ) -> *mut FridaBareboneHostSessionBackend;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_provider_get_type() -> GType;
}
pub type FridaBareboneHostSessionProvider_autoptr = *mut FridaBareboneHostSessionProvider;
pub type FridaBareboneHostSessionProvider_listautoptr = *mut GList;
pub type FridaBareboneHostSessionProvider_slistautoptr = *mut GSList;
pub type FridaBareboneHostSessionProvider_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_host_session_provider_close(
        self_: *mut FridaBareboneHostSessionProvider,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_provider_close_finish(
        self_: *mut FridaBareboneHostSessionProvider,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_provider_new() -> *mut FridaBareboneHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_provider_construct(
        object_type: GType,
    ) -> *mut FridaBareboneHostSessionProvider;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_get_type() -> GType;
}
pub type FridaBareboneHostSession_autoptr = *mut FridaBareboneHostSession;
pub type FridaBareboneHostSession_listautoptr = *mut GList;
pub type FridaBareboneHostSession_slistautoptr = *mut GSList;
pub type FridaBareboneHostSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_services_get_type() -> GType;
}
pub type FridaBareboneServices_autoptr = *mut FridaBareboneServices;
pub type FridaBareboneServices_listautoptr = *mut GList;
pub type FridaBareboneServices_slistautoptr = *mut GSList;
pub type FridaBareboneServices_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_host_session_new(
        services: *mut FridaBareboneServices,
    ) -> *mut FridaBareboneHostSession;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_construct(
        object_type: GType,
        services: *mut FridaBareboneServices,
    ) -> *mut FridaBareboneHostSession;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_close(
        self_: *mut FridaBareboneHostSession,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_close_finish(
        self_: *mut FridaBareboneHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_link_agent_session(
        self_: *mut FridaBareboneHostSession,
        id: *mut FridaAgentSessionId,
        sink: *mut FridaAgentMessageSink,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_link_agent_session_finish(
        self_: *mut FridaBareboneHostSession,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaAgentSession;
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_unlink_agent_session(
        self_: *mut FridaBareboneHostSession,
        id: *mut FridaAgentSessionId,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_host_session_get_services(
        self_: *mut FridaBareboneHostSession,
    ) -> *mut FridaBareboneServices;
}
unsafe extern "C" {
    pub fn frida_barebone_agent_session_get_type() -> GType;
}
pub type FridaBareboneAgentSession_autoptr = *mut FridaBareboneAgentSession;
pub type FridaBareboneAgentSession_listautoptr = *mut GList;
pub type FridaBareboneAgentSession_slistautoptr = *mut GSList;
pub type FridaBareboneAgentSession_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_range_details_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_param_spec_range_details(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_barebone_value_set_range_details(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_take_range_details(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_get_range_details(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_get_type() -> GType;
}
pub type FridaBareboneRangeDetails_autoptr = *mut FridaBareboneRangeDetails;
pub type FridaBareboneRangeDetails_listautoptr = *mut GList;
pub type FridaBareboneRangeDetails_slistautoptr = *mut GSList;
pub type FridaBareboneRangeDetails_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_allocation_get_type() -> GType;
}
pub type FridaBareboneAllocation_autoptr = *mut FridaBareboneAllocation;
pub type FridaBareboneAllocation_listautoptr = *mut GList;
pub type FridaBareboneAllocation_slistautoptr = *mut GSList;
pub type FridaBareboneAllocation_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_param_spec_match_pattern(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_barebone_value_set_match_pattern(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_take_match_pattern(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_get_match_pattern(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_get_type() -> GType;
}
pub type FridaBareboneMatchPattern_autoptr = *mut FridaBareboneMatchPattern;
pub type FridaBareboneMatchPattern_listautoptr = *mut GList;
pub type FridaBareboneMatchPattern_slistautoptr = *mut GSList;
pub type FridaBareboneMatchPattern_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_call_frame_get_type() -> GType;
}
pub type FridaBareboneCallFrame_autoptr = *mut FridaBareboneCallFrame;
pub type FridaBareboneCallFrame_listautoptr = *mut GList;
pub type FridaBareboneCallFrame_slistautoptr = *mut GSList;
pub type FridaBareboneCallFrame_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_allocator_get_type() -> GType;
}
pub type FridaBareboneAllocator_autoptr = *mut FridaBareboneAllocator;
pub type FridaBareboneAllocator_listautoptr = *mut GList;
pub type FridaBareboneAllocator_slistautoptr = *mut GSList;
pub type FridaBareboneAllocator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_get_type() -> GType;
}
pub type FridaBareboneInlineHook_autoptr = *mut FridaBareboneInlineHook;
pub type FridaBareboneInlineHook_listautoptr = *mut GList;
pub type FridaBareboneInlineHook_slistautoptr = *mut GSList;
pub type FridaBareboneInlineHook_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_machine_get_type() -> GType;
}
pub type FridaBareboneMachine_autoptr = *mut FridaBareboneMachine;
pub type FridaBareboneMachine_listautoptr = *mut GList;
pub type FridaBareboneMachine_slistautoptr = *mut GSList;
pub type FridaBareboneMachine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_interceptor_get_type() -> GType;
}
pub type FridaBareboneInterceptor_autoptr = *mut FridaBareboneInterceptor;
pub type FridaBareboneInterceptor_listautoptr = *mut GList;
pub type FridaBareboneInterceptor_slistautoptr = *mut GSList;
pub type FridaBareboneInterceptor_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_services_new(
        machine: *mut FridaBareboneMachine,
        allocator: *mut FridaBareboneAllocator,
        interceptor: *mut FridaBareboneInterceptor,
    ) -> *mut FridaBareboneServices;
}
unsafe extern "C" {
    pub fn frida_barebone_services_construct(
        object_type: GType,
        machine: *mut FridaBareboneMachine,
        allocator: *mut FridaBareboneAllocator,
        interceptor: *mut FridaBareboneInterceptor,
    ) -> *mut FridaBareboneServices;
}
unsafe extern "C" {
    pub fn frida_barebone_services_get_machine(
        self_: *mut FridaBareboneServices,
    ) -> *mut FridaBareboneMachine;
}
unsafe extern "C" {
    pub fn frida_barebone_services_get_allocator(
        self_: *mut FridaBareboneServices,
    ) -> *mut FridaBareboneAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_services_get_interceptor(
        self_: *mut FridaBareboneServices,
    ) -> *mut FridaBareboneInterceptor;
}
unsafe extern "C" {
    pub fn frida_barebone_config_get_type() -> GType;
}
pub type FridaBareboneConfig_autoptr = *mut FridaBareboneConfig;
pub type FridaBareboneConfig_listautoptr = *mut GList;
pub type FridaBareboneConfig_slistautoptr = *mut GSList;
pub type FridaBareboneConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_config_new() -> *mut FridaBareboneConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_config_construct(object_type: GType) -> *mut FridaBareboneConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_get_type() -> GType;
}
pub type FridaBareboneConnectionConfig_autoptr = *mut FridaBareboneConnectionConfig;
pub type FridaBareboneConnectionConfig_listautoptr = *mut GList;
pub type FridaBareboneConnectionConfig_slistautoptr = *mut GSList;
pub type FridaBareboneConnectionConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_config_get_connection(
        self_: *mut FridaBareboneConfig,
    ) -> *mut FridaBareboneConnectionConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_config_set_connection(
        self_: *mut FridaBareboneConfig,
        value: *mut FridaBareboneConnectionConfig,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_config_get_type() -> GType;
}
pub type FridaBareboneAllocatorConfig_autoptr = *mut FridaBareboneAllocatorConfig;
pub type FridaBareboneAllocatorConfig_listautoptr = *mut GList;
pub type FridaBareboneAllocatorConfig_slistautoptr = *mut GSList;
pub type FridaBareboneAllocatorConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_config_get_allocator(
        self_: *mut FridaBareboneConfig,
    ) -> *mut FridaBareboneAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_config_set_allocator(
        self_: *mut FridaBareboneConfig,
        value: *mut FridaBareboneAllocatorConfig,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_new() -> *mut FridaBareboneConnectionConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_construct(
        object_type: GType,
    ) -> *mut FridaBareboneConnectionConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_get_host(
        self_: *mut FridaBareboneConnectionConfig,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_set_host(
        self_: *mut FridaBareboneConnectionConfig,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_get_port(
        self_: *mut FridaBareboneConnectionConfig,
    ) -> guint16;
}
unsafe extern "C" {
    pub fn frida_barebone_connection_config_set_port(
        self_: *mut FridaBareboneConnectionConfig,
        value: guint16,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_config_construct(
        object_type: GType,
    ) -> *mut FridaBareboneAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_config_get_is_valid(
        self_: *mut FridaBareboneAllocatorConfig,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_barebone_no_allocator_config_get_type() -> GType;
}
pub type FridaBareboneNoAllocatorConfig_autoptr = *mut FridaBareboneNoAllocatorConfig;
pub type FridaBareboneNoAllocatorConfig_listautoptr = *mut GList;
pub type FridaBareboneNoAllocatorConfig_slistautoptr = *mut GSList;
pub type FridaBareboneNoAllocatorConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_no_allocator_config_new() -> *mut FridaBareboneNoAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_no_allocator_config_construct(
        object_type: GType,
    ) -> *mut FridaBareboneNoAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_config_get_type() -> GType;
}
pub type FridaBarebonePhysicalAllocatorConfig_autoptr = *mut FridaBarebonePhysicalAllocatorConfig;
pub type FridaBarebonePhysicalAllocatorConfig_listautoptr = *mut GList;
pub type FridaBarebonePhysicalAllocatorConfig_slistautoptr = *mut GSList;
pub type FridaBarebonePhysicalAllocatorConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_config_new()
    -> *mut FridaBarebonePhysicalAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_config_construct(
        object_type: GType,
    ) -> *mut FridaBarebonePhysicalAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_config_get_physical_base(
        self_: *mut FridaBarebonePhysicalAllocatorConfig,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_config_set_physical_base(
        self_: *mut FridaBarebonePhysicalAllocatorConfig,
        value: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_get_type() -> GType;
}
pub type FridaBareboneTargetFunctionsAllocatorConfig_autoptr =
    *mut FridaBareboneTargetFunctionsAllocatorConfig;
pub type FridaBareboneTargetFunctionsAllocatorConfig_listautoptr = *mut GList;
pub type FridaBareboneTargetFunctionsAllocatorConfig_slistautoptr = *mut GSList;
pub type FridaBareboneTargetFunctionsAllocatorConfig_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_new()
    -> *mut FridaBareboneTargetFunctionsAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_construct(
        object_type: GType,
    ) -> *mut FridaBareboneTargetFunctionsAllocatorConfig;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_get_alloc_function(
        self_: *mut FridaBareboneTargetFunctionsAllocatorConfig,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_set_alloc_function(
        self_: *mut FridaBareboneTargetFunctionsAllocatorConfig,
        value: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_get_free_function(
        self_: *mut FridaBareboneTargetFunctionsAllocatorConfig,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_config_set_free_function(
        self_: *mut FridaBareboneTargetFunctionsAllocatorConfig,
        value: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_script_get_type() -> GType;
}
pub type FridaBareboneScript_autoptr = *mut FridaBareboneScript;
pub type FridaBareboneScript_listautoptr = *mut GList;
pub type FridaBareboneScript_slistautoptr = *mut GSList;
pub type FridaBareboneScript_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_machine_query_page_size(
        self_: *mut FridaBareboneMachine,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_query_page_size_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gsize;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_enumerate_ranges(
        self_: *mut FridaBareboneMachine,
        prot: GumPageProtection,
        func: FridaBareboneFoundRangeFunc,
        func_target: gpointer,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_enumerate_ranges_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_allocate_pages(
        self_: *mut FridaBareboneMachine,
        physical_address: guint64,
        num_pages: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_allocate_pages_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneAllocation;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_protect_pages(
        self_: *mut FridaBareboneMachine,
        virtual_address: guint64,
        size: gsize,
        prot: GumPageProtection,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_protect_pages_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_scan_ranges(
        self_: *mut FridaBareboneMachine,
        ranges: *mut GeeList,
        pattern: *mut FridaBareboneMatchPattern,
        max_matches: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_scan_ranges_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GeeList;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_relocate(
        self_: *mut FridaBareboneMachine,
        module: *mut GumElfModule,
        base_va: guint64,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_apply_relocation(
        self_: *mut FridaBareboneMachine,
        r: *mut GumElfRelocationDetails,
        base_va: guint64,
        relocated: *mut FridaBuffer,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_invoke(
        self_: *mut FridaBareboneMachine,
        impl_: guint64,
        args: *mut guint64,
        args_length1: gint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_invoke_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_load_call_frame(
        self_: *mut FridaBareboneMachine,
        thread: *mut FridaGDBThread,
        arity: guint,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_load_call_frame_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneCallFrame;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_address_from_funcptr(
        self_: *mut FridaBareboneMachine,
        ptr: guint64,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_breakpoint_size_from_funcptr(
        self_: *mut FridaBareboneMachine,
        ptr: guint64,
    ) -> gsize;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_create_inline_hook(
        self_: *mut FridaBareboneMachine,
        target: guint64,
        handler: guint64,
        allocator: *mut FridaBareboneAllocator,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_create_inline_hook_finish(
        self_: *mut FridaBareboneMachine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneInlineHook;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_get_gdb(self_: *mut FridaBareboneMachine) -> *mut FridaGDBClient;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_set_gdb(
        self_: *mut FridaBareboneMachine,
        value: *mut FridaGDBClient,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_machine_get_llvm_target(self_: *mut FridaBareboneMachine)
    -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_barebone_machine_get_llvm_code_model(
        self_: *mut FridaBareboneMachine,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_barebone_mapping_type_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_new(
        base_va: guint64,
        base_pa: guint64,
        size: guint64,
        protection: GumPageProtection,
        type_: FridaBareboneMappingType,
    ) -> *mut FridaBareboneRangeDetails;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_construct(
        object_type: GType,
        base_va: guint64,
        base_pa: guint64,
        size: guint64,
        protection: GumPageProtection,
        type_: FridaBareboneMappingType,
    ) -> *mut FridaBareboneRangeDetails;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_clone(
        self_: *mut FridaBareboneRangeDetails,
    ) -> *mut FridaBareboneRangeDetails;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_contains_virtual_address(
        self_: *mut FridaBareboneRangeDetails,
        va: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_contains_physical_address(
        self_: *mut FridaBareboneRangeDetails,
        pa: guint64,
    ) -> gboolean;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_virtual_to_physical(
        self_: *mut FridaBareboneRangeDetails,
        va: guint64,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_physical_to_virtual(
        self_: *mut FridaBareboneRangeDetails,
        pa: guint64,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_range_details_get_end(self_: *mut FridaBareboneRangeDetails) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_mapping_type_to_nick(self_: FridaBareboneMappingType) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_get_nth_argument(
        self_: *mut FridaBareboneCallFrame,
        n: guint,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_replace_nth_argument(
        self_: *mut FridaBareboneCallFrame,
        n: guint,
        val: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_get_return_value(
        self_: *mut FridaBareboneCallFrame,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_replace_return_value(
        self_: *mut FridaBareboneCallFrame,
        retval: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_force_return(self_: *mut FridaBareboneCallFrame);
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_commit(
        self_: *mut FridaBareboneCallFrame,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_commit_finish(
        self_: *mut FridaBareboneCallFrame,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_get_return_address(
        self_: *mut FridaBareboneCallFrame,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_call_frame_get_registers(
        self_: *mut FridaBareboneCallFrame,
    ) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_destroy(
        self_: *mut FridaBareboneInlineHook,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_destroy_finish(
        self_: *mut FridaBareboneInlineHook,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_enable(
        self_: *mut FridaBareboneInlineHook,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_enable_finish(
        self_: *mut FridaBareboneInlineHook,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_disable(
        self_: *mut FridaBareboneInlineHook,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_hook_disable_finish(
        self_: *mut FridaBareboneInlineHook,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_allocate(
        self_: *mut FridaBareboneAllocator,
        size: gsize,
        alignment: gsize,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_allocate_finish(
        self_: *mut FridaBareboneAllocator,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneAllocation;
}
unsafe extern "C" {
    pub fn frida_barebone_allocator_get_page_size(self_: *mut FridaBareboneAllocator) -> gsize;
}
unsafe extern "C" {
    pub fn frida_barebone_allocation_deallocate(
        self_: *mut FridaBareboneAllocation,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocation_deallocate_finish(
        self_: *mut FridaBareboneAllocation,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_allocation_get_virtual_address(
        self_: *mut FridaBareboneAllocation,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_allocation_get_size(self_: *mut FridaBareboneAllocation) -> gsize;
}
unsafe extern "C" {
    pub fn frida_barebone_null_allocator_get_type() -> GType;
}
pub type FridaBareboneNullAllocator_autoptr = *mut FridaBareboneNullAllocator;
pub type FridaBareboneNullAllocator_listautoptr = *mut GList;
pub type FridaBareboneNullAllocator_slistautoptr = *mut GSList;
pub type FridaBareboneNullAllocator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_null_allocator_new(page_size: gsize) -> *mut FridaBareboneNullAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_null_allocator_construct(
        object_type: GType,
        page_size: gsize,
    ) -> *mut FridaBareboneNullAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_get_type() -> GType;
}
pub type FridaBarebonePhysicalAllocator_autoptr = *mut FridaBarebonePhysicalAllocator;
pub type FridaBarebonePhysicalAllocator_listautoptr = *mut GList;
pub type FridaBarebonePhysicalAllocator_slistautoptr = *mut GSList;
pub type FridaBarebonePhysicalAllocator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_new(
        machine: *mut FridaBareboneMachine,
        page_size: gsize,
        config: *mut FridaBarebonePhysicalAllocatorConfig,
    ) -> *mut FridaBarebonePhysicalAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_physical_allocator_construct(
        object_type: GType,
        machine: *mut FridaBareboneMachine,
        page_size: gsize,
        config: *mut FridaBarebonePhysicalAllocatorConfig,
    ) -> *mut FridaBarebonePhysicalAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_get_type() -> GType;
}
pub type FridaBareboneTargetFunctionsAllocator_autoptr = *mut FridaBareboneTargetFunctionsAllocator;
pub type FridaBareboneTargetFunctionsAllocator_listautoptr = *mut GList;
pub type FridaBareboneTargetFunctionsAllocator_slistautoptr = *mut GSList;
pub type FridaBareboneTargetFunctionsAllocator_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_new(
        machine: *mut FridaBareboneMachine,
        page_size: gsize,
        config: *mut FridaBareboneTargetFunctionsAllocatorConfig,
    ) -> *mut FridaBareboneTargetFunctionsAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_target_functions_allocator_construct(
        object_type: GType,
        machine: *mut FridaBareboneMachine,
        page_size: gsize,
        config: *mut FridaBareboneTargetFunctionsAllocatorConfig,
    ) -> *mut FridaBareboneTargetFunctionsAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_callback_get_type() -> GType;
}
pub type FridaBareboneCallback_autoptr = *mut FridaBareboneCallback;
pub type FridaBareboneCallback_listautoptr = *mut GList;
pub type FridaBareboneCallback_slistautoptr = *mut GSList;
pub type FridaBareboneCallback_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_callback_handler_get_type() -> GType;
}
pub type FridaBareboneCallbackHandler_autoptr = *mut FridaBareboneCallbackHandler;
pub type FridaBareboneCallbackHandler_listautoptr = *mut GList;
pub type FridaBareboneCallbackHandler_slistautoptr = *mut GSList;
pub type FridaBareboneCallbackHandler_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_callback_new(
        code: guint64,
        handler: *mut FridaBareboneCallbackHandler,
        machine: *mut FridaBareboneMachine,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_callback_new_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneCallback;
}
unsafe extern "C" {
    pub fn frida_barebone_callback_construct(
        object_type: GType,
        code: guint64,
        handler: *mut FridaBareboneCallbackHandler,
        machine: *mut FridaBareboneMachine,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_callback_construct_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneCallback;
}
unsafe extern "C" {
    pub fn frida_barebone_callback_destroy(
        self_: *mut FridaBareboneCallback,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_callback_destroy_finish(
        self_: *mut FridaBareboneCallback,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_callback_handler_handle_invocation(
        self_: *mut FridaBareboneCallbackHandler,
        args: *mut guint64,
        args_length1: gint,
        frame: *mut FridaBareboneCallFrame,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_callback_handler_handle_invocation_finish(
        self_: *mut FridaBareboneCallbackHandler,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_callback_handler_get_arity(
        self_: *mut FridaBareboneCallbackHandler,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_ref(instance: gpointer) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_unref(instance: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_param_spec_match_token(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
unsafe extern "C" {
    pub fn frida_barebone_value_set_match_token(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_take_match_token(value: *mut GValue, v_object: gpointer);
}
unsafe extern "C" {
    pub fn frida_barebone_value_get_match_token(value: *const GValue) -> gpointer;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_get_type() -> GType;
}
pub type FridaBareboneMatchToken_autoptr = *mut FridaBareboneMatchToken;
pub type FridaBareboneMatchToken_listautoptr = *mut GList;
pub type FridaBareboneMatchToken_slistautoptr = *mut GSList;
pub type FridaBareboneMatchToken_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_new_from_string(
        pattern: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneMatchPattern;
}
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_construct_from_string(
        object_type: GType,
        pattern: *const gchar,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneMatchPattern;
}
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_new() -> *mut FridaBareboneMatchPattern;
}
unsafe extern "C" {
    pub fn frida_barebone_match_pattern_construct(
        object_type: GType,
    ) -> *mut FridaBareboneMatchPattern;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_new(
        kind: FridaBareboneMatchTokenKind,
    ) -> *mut FridaBareboneMatchToken;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_construct(
        object_type: GType,
        kind: FridaBareboneMatchTokenKind,
    ) -> *mut FridaBareboneMatchToken;
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_append(self_: *mut FridaBareboneMatchToken, val: guint8);
}
unsafe extern "C" {
    pub fn frida_barebone_match_token_append_with_mask(
        self_: *mut FridaBareboneMatchToken,
        val: guint8,
        mask: guint8,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_append_memory_scanner_data(
        builder: *mut FridaBufferBuilder,
        ranges: *mut GeeList,
        pattern: *mut FridaBareboneMatchPattern,
        max_matches: guint,
        data_size: *mut gsize,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_new(
        machine: *mut FridaBareboneMachine,
        allocator: *mut FridaBareboneAllocator,
    ) -> *mut FridaBareboneInterceptor;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_construct(
        object_type: GType,
        machine: *mut FridaBareboneMachine,
        allocator: *mut FridaBareboneAllocator,
    ) -> *mut FridaBareboneInterceptor;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_listener_kind_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_listener_get_type() -> GType;
}
pub type FridaBareboneInvocationListener_autoptr = *mut FridaBareboneInvocationListener;
pub type FridaBareboneInvocationListener_listautoptr = *mut GList;
pub type FridaBareboneInvocationListener_slistautoptr = *mut GSList;
pub type FridaBareboneInvocationListener_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_type() -> GType;
}
pub type FridaBareboneInvocationContext_autoptr = *mut FridaBareboneInvocationContext;
pub type FridaBareboneInvocationContext_listautoptr = *mut GList;
pub type FridaBareboneInvocationContext_slistautoptr = *mut GSList;
pub type FridaBareboneInvocationContext_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_breakpoint_invocation_listener_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_attach(
        self_: *mut FridaBareboneInterceptor,
        target: guint64,
        listener: *mut FridaBareboneBreakpointInvocationListener,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_attach_finish(
        self_: *mut FridaBareboneInterceptor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_invocation_listener_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_attach_inline(
        self_: *mut FridaBareboneInterceptor,
        target: guint64,
        listener: *mut FridaBareboneInlineInvocationListener,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_attach_inline_finish(
        self_: *mut FridaBareboneInterceptor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_detach(
        self_: *mut FridaBareboneInterceptor,
        listener: *mut FridaBareboneInvocationListener,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_detach_finish(
        self_: *mut FridaBareboneInterceptor,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_get_machine(
        self_: *mut FridaBareboneInterceptor,
    ) -> *mut FridaBareboneMachine;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_get_allocator(
        self_: *mut FridaBareboneInterceptor,
    ) -> *mut FridaBareboneAllocator;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_get_breakpoint_kind(
        self_: *mut FridaBareboneInterceptor,
    ) -> FridaGDBBreakpointKind;
}
unsafe extern "C" {
    pub fn frida_barebone_interceptor_set_breakpoint_kind(
        self_: *mut FridaBareboneInterceptor,
        value: FridaGDBBreakpointKind,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_listener_get_kind(
        self_: *mut FridaBareboneInvocationListener,
    ) -> FridaBareboneInvocationListenerKind;
}
unsafe extern "C" {
    pub fn frida_barebone_breakpoint_invocation_listener_on_enter(
        self_: *mut FridaBareboneBreakpointInvocationListener,
        context: *mut FridaBareboneInvocationContext,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_breakpoint_invocation_listener_on_leave(
        self_: *mut FridaBareboneBreakpointInvocationListener,
        context: *mut FridaBareboneInvocationContext,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inline_invocation_listener_get_on_enter(
        self_: *mut FridaBareboneInlineInvocationListener,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_inline_invocation_listener_get_on_leave(
        self_: *mut FridaBareboneInlineInvocationListener,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_nth_argument(
        self_: *mut FridaBareboneInvocationContext,
        n: guint,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_replace_nth_argument(
        self_: *mut FridaBareboneInvocationContext,
        n: guint,
        val: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_return_value(
        self_: *mut FridaBareboneInvocationContext,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_replace_return_value(
        self_: *mut FridaBareboneInvocationContext,
        retval: guint64,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_return_address(
        self_: *mut FridaBareboneInvocationContext,
    ) -> guint64;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_thread_id(
        self_: *mut FridaBareboneInvocationContext,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_depth(
        self_: *mut FridaBareboneInvocationContext,
    ) -> guint;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_registers(
        self_: *mut FridaBareboneInvocationContext,
    ) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_barebone_invocation_context_get_user_data(
        self_: *mut FridaBareboneInvocationContext,
    ) -> *mut GeeMap;
}
unsafe extern "C" {
    pub fn frida_barebone_cmodule_get_type() -> GType;
}
pub type FridaBareboneCModule_autoptr = *mut FridaBareboneCModule;
pub type FridaBareboneCModule_listautoptr = *mut GList;
pub type FridaBareboneCModule_slistautoptr = *mut GSList;
pub type FridaBareboneCModule_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_rust_module_get_type() -> GType;
}
pub type FridaBareboneRustModule_autoptr = *mut FridaBareboneRustModule;
pub type FridaBareboneRustModule_listautoptr = *mut GList;
pub type FridaBareboneRustModule_slistautoptr = *mut GSList;
pub type FridaBareboneRustModule_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_inject_elf(
        elf: *mut GumElfModule,
        machine: *mut FridaBareboneMachine,
        allocator: *mut FridaBareboneAllocator,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_inject_elf_finish(
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut FridaBareboneAllocation;
}
unsafe extern "C" {
    pub fn frida_barebone_ia32_machine_get_type() -> GType;
}
pub type FridaBareboneIA32Machine_autoptr = *mut FridaBareboneIA32Machine;
pub type FridaBareboneIA32Machine_listautoptr = *mut GList;
pub type FridaBareboneIA32Machine_slistautoptr = *mut GSList;
pub type FridaBareboneIA32Machine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_ia32_machine_new(
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneIA32Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_ia32_machine_construct(
        object_type: GType,
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneIA32Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_x64_machine_get_type() -> GType;
}
pub type FridaBareboneX64Machine_autoptr = *mut FridaBareboneX64Machine;
pub type FridaBareboneX64Machine_listautoptr = *mut GList;
pub type FridaBareboneX64Machine_slistautoptr = *mut GSList;
pub type FridaBareboneX64Machine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_x64_machine_new(gdb: *mut FridaGDBClient)
    -> *mut FridaBareboneX64Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_x64_machine_construct(
        object_type: GType,
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneX64Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_arm_machine_get_type() -> GType;
}
pub type FridaBareboneArmMachine_autoptr = *mut FridaBareboneArmMachine;
pub type FridaBareboneArmMachine_listautoptr = *mut GList;
pub type FridaBareboneArmMachine_slistautoptr = *mut GSList;
pub type FridaBareboneArmMachine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_arm_machine_new(gdb: *mut FridaGDBClient)
    -> *mut FridaBareboneArmMachine;
}
unsafe extern "C" {
    pub fn frida_barebone_arm_machine_construct(
        object_type: GType,
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneArmMachine;
}
unsafe extern "C" {
    pub fn frida_barebone_arm64_machine_get_type() -> GType;
}
pub type FridaBareboneArm64Machine_autoptr = *mut FridaBareboneArm64Machine;
pub type FridaBareboneArm64Machine_listautoptr = *mut GList;
pub type FridaBareboneArm64Machine_slistautoptr = *mut GSList;
pub type FridaBareboneArm64Machine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_arm64_machine_new(
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneArm64Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_arm64_machine_construct(
        object_type: GType,
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneArm64Machine;
}
unsafe extern "C" {
    pub fn frida_barebone_arm64_machine_execute(
        self_: *mut FridaBareboneArm64Machine,
        start: guint64,
        end: guint64,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_arm64_machine_execute_finish(
        self_: *mut FridaBareboneArm64Machine,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_barebone_unknown_machine_get_type() -> GType;
}
pub type FridaBareboneUnknownMachine_autoptr = *mut FridaBareboneUnknownMachine;
pub type FridaBareboneUnknownMachine_listautoptr = *mut GList;
pub type FridaBareboneUnknownMachine_slistautoptr = *mut GSList;
pub type FridaBareboneUnknownMachine_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_barebone_unknown_machine_new(
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneUnknownMachine;
}
unsafe extern "C" {
    pub fn frida_barebone_unknown_machine_construct(
        object_type: GType,
        gdb: *mut FridaGDBClient,
    ) -> *mut FridaBareboneUnknownMachine;
}
unsafe extern "C" {
    pub fn frida_compiler_get_type() -> GType;
}
pub type FridaCompiler_autoptr = *mut FridaCompiler;
pub type FridaCompiler_listautoptr = *mut GList;
pub type FridaCompiler_slistautoptr = *mut GSList;
pub type FridaCompiler_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_compiler_new(manager: *mut FridaDeviceManager) -> *mut FridaCompiler;
}
unsafe extern "C" {
    pub fn frida_compiler_construct(
        object_type: GType,
        manager: *mut FridaDeviceManager,
    ) -> *mut FridaCompiler;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_type() -> GType;
}
pub type FridaCompilerOptions_autoptr = *mut FridaCompilerOptions;
pub type FridaCompilerOptions_listautoptr = *mut GList;
pub type FridaCompilerOptions_slistautoptr = *mut GSList;
pub type FridaCompilerOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_build_options_get_type() -> GType;
}
pub type FridaBuildOptions_autoptr = *mut FridaBuildOptions;
pub type FridaBuildOptions_listautoptr = *mut GList;
pub type FridaBuildOptions_slistautoptr = *mut GSList;
pub type FridaBuildOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_compiler_build(
        self_: *mut FridaCompiler,
        entrypoint: *const gchar,
        options: *mut FridaBuildOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_compiler_build_finish(
        self_: *mut FridaCompiler,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_compiler_build_sync(
        self_: *mut FridaCompiler,
        entrypoint: *const gchar,
        options: *mut FridaBuildOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_watch_options_get_type() -> GType;
}
pub type FridaWatchOptions_autoptr = *mut FridaWatchOptions;
pub type FridaWatchOptions_listautoptr = *mut GList;
pub type FridaWatchOptions_slistautoptr = *mut GSList;
pub type FridaWatchOptions_queueautoptr = *mut GQueue;
unsafe extern "C" {
    pub fn frida_compiler_watch(
        self_: *mut FridaCompiler,
        entrypoint: *const gchar,
        options: *mut FridaWatchOptions,
        cancellable: *mut GCancellable,
        _callback_: GAsyncReadyCallback,
        _user_data_: gpointer,
    );
}
unsafe extern "C" {
    pub fn frida_compiler_watch_finish(
        self_: *mut FridaCompiler,
        _res_: *mut GAsyncResult,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_compiler_watch_sync(
        self_: *mut FridaCompiler,
        entrypoint: *const gchar,
        options: *mut FridaWatchOptions,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    );
}
unsafe extern "C" {
    pub fn frida_compiler_schedule_on_frida_thread(
        self_: *mut FridaCompiler,
        function: GSourceFunc,
        function_target: gpointer,
        function_target_destroy_notify: GDestroyNotify,
    );
}
unsafe extern "C" {
    pub fn frida_compiler_options_new() -> *mut FridaCompilerOptions;
}
unsafe extern "C" {
    pub fn frida_compiler_options_construct(object_type: GType) -> *mut FridaCompilerOptions;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_project_root(
        self_: *mut FridaCompilerOptions,
    ) -> *const gchar;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_project_root(
        self_: *mut FridaCompilerOptions,
        value: *const gchar,
    );
}
unsafe extern "C" {
    pub fn frida_output_format_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_output_format(
        self_: *mut FridaCompilerOptions,
    ) -> FridaOutputFormat;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_output_format(
        self_: *mut FridaCompilerOptions,
        value: FridaOutputFormat,
    );
}
unsafe extern "C" {
    pub fn frida_bundle_format_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_bundle_format(
        self_: *mut FridaCompilerOptions,
    ) -> FridaBundleFormat;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_bundle_format(
        self_: *mut FridaCompilerOptions,
        value: FridaBundleFormat,
    );
}
unsafe extern "C" {
    pub fn frida_type_check_mode_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_type_check(
        self_: *mut FridaCompilerOptions,
    ) -> FridaTypeCheckMode;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_type_check(
        self_: *mut FridaCompilerOptions,
        value: FridaTypeCheckMode,
    );
}
unsafe extern "C" {
    pub fn frida_source_maps_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_source_maps(
        self_: *mut FridaCompilerOptions,
    ) -> FridaSourceMaps;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_source_maps(
        self_: *mut FridaCompilerOptions,
        value: FridaSourceMaps,
    );
}
unsafe extern "C" {
    pub fn frida_js_compression_get_type() -> GType;
}
unsafe extern "C" {
    pub fn frida_compiler_options_get_compression(
        self_: *mut FridaCompilerOptions,
    ) -> FridaJsCompression;
}
unsafe extern "C" {
    pub fn frida_compiler_options_set_compression(
        self_: *mut FridaCompilerOptions,
        value: FridaJsCompression,
    );
}
unsafe extern "C" {
    pub fn frida_build_options_new() -> *mut FridaBuildOptions;
}
unsafe extern "C" {
    pub fn frida_build_options_construct(object_type: GType) -> *mut FridaBuildOptions;
}
unsafe extern "C" {
    pub fn frida_watch_options_new() -> *mut FridaWatchOptions;
}
unsafe extern "C" {
    pub fn frida_watch_options_construct(object_type: GType) -> *mut FridaWatchOptions;
}
unsafe extern "C" {
    pub fn frida_output_format_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaOutputFormat;
}
unsafe extern "C" {
    pub fn frida_output_format_to_nick(self_: FridaOutputFormat) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_bundle_format_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaBundleFormat;
}
unsafe extern "C" {
    pub fn frida_bundle_format_to_nick(self_: FridaBundleFormat) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_type_check_mode_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaTypeCheckMode;
}
unsafe extern "C" {
    pub fn frida_type_check_mode_to_nick(self_: FridaTypeCheckMode) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_source_maps_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaSourceMaps;
}
unsafe extern "C" {
    pub fn frida_source_maps_to_nick(self_: FridaSourceMaps) -> *mut gchar;
}
unsafe extern "C" {
    pub fn frida_js_compression_from_nick(
        nick: *const gchar,
        error: *mut *mut GError,
    ) -> FridaJsCompression;
}
unsafe extern "C" {
    pub fn frida_js_compression_to_nick(self_: FridaJsCompression) -> *mut gchar;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
